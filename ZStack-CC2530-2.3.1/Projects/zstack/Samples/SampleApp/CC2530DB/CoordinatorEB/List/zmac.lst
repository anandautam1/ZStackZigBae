###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               12/Sep/2018  03:56:56
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.20
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\zmac\f8w\zmac.c
#    Command line       =  
#        -f C:\Users\ANANDA~1\AppData\Local\Temp\EW6107.tmp ("C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\zmac\f8w\zmac.c"
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\zmac.lst
#    Object file        =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\zmac.r51
#
###############################################################################

C:\Users\Ananda Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\zmac\f8w\zmac.c
      1          /**************************************************************************************************
      2            Filename:       zmac.c
      3            Revised:        $Date: 2010-03-29 17:10:51 -0700 (Mon, 29 Mar 2010) $
      4            Revision:       $Revision: 22039 $
      5          
      6          
      7            Description:    This file contains the ZStack MAC Porting Layer
      8          
      9          
     10            Copyright 2005-2010 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /********************************************************************************************************
     42           *                                               INCLUDES
     43           ********************************************************************************************************/
     44          
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "ZMAC.h"
     48          #include "mac_main.h"
     49          #include "ssp.h"
     50          
     51          #if !defined NONWK
     52            #include "ZGlobals.h"
     53          #endif
     54          
     55          /********************************************************************************************************
     56           *                                                 MACROS
     57           ********************************************************************************************************/
     58          
     59          /********************************************************************************************************
     60           *                                               CONSTANTS
     61           ********************************************************************************************************/
     62          
     63          /********************************************************************************************************
     64           *                                               GLOBALS
     65           ********************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     66          uint32 _ScanChannels;
   \                     _ScanChannels:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     67          
     68          extern uint8 aExtendedAddress[];
     69          
     70          /**************************************************************************************************
     71           * @fn          MAC_SetRandomSeedCB
     72           *
     73           * @brief       MAC function: Set the function pointer for the random seed callback.
     74           *
     75           * input parameters
     76           *
     77           * @param       pCBFcn - function pointer of the random seed callback
     78           *
     79           * output parameters
     80           *
     81           * None.
     82           *
     83           * @return      none
     84           **************************************************************************************************
     85           */
     86          extern void MAC_SetRandomSeedCB(macRNGFcn_t pCBFcn);
     87          /********************************************************************************************************
     88           *                                               LOCALS
     89           ********************************************************************************************************/
     90          
     91          /* Pointer to scan result buffer */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92          void *ZMac_ScanBuf = NULL;
   \                     ZMac_ScanBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     93          
     94          /********************************************************************************************************
     95           * LOCAL FUNCTION PROTOTYPES
     96           ********************************************************************************************************/
     97          
     98          /********************************************************************************************************
     99           *                                                TYPEDEFS
    100           ********************************************************************************************************/
    101          
    102          
    103          /********************************************************************************************************
    104           *                                                FUNCTIONS
    105           ********************************************************************************************************/
    106          
    107          /********************************************************************************************************
    108           * @fn      ZMacInit
    109           *
    110           * @brief   Initialize MAC.
    111           *
    112           * @param   none.
    113           *
    114           * @return  status.
    115           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    116          uint8 ZMacInit( void )
   \                     ZMacInit:
    117          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    118            uint8 stat;
    119          
    120          #if defined( ZCL_KEY_ESTABLISH )
    121            /* Set the callback function for 16 byte random seed */
    122            MAC_SetRandomSeedCB( SSP_StoreRandomSeedNV);
    123          #endif
    124          
    125            MAC_Init();
   \   000005                ; Setup parameters for call to function MAC_Init
   \   000005   12....       LCALL     `??MAC_Init::?relay`; Banked call to: MAC_Init
    126            MAC_InitDevice();
   \   000008                ; Setup parameters for call to function MAC_InitDevice
   \   000008   12....       LCALL     `??MAC_InitDevice::?relay`; Banked call to: MAC_InitDevice
    127          
    128          #if !defined NONWK
    129            if ( ZG_BUILD_RTR_TYPE )
    130            {
    131              MAC_InitCoord();
   \   00000B                ; Setup parameters for call to function MAC_InitCoord
   \   00000B   12....       LCALL     `??MAC_InitCoord::?relay`; Banked call to: MAC_InitCoord
    132            }
    133          #endif
    134          
    135            // If OK, initialize the MAC
    136            stat = ZMacReset( TRUE );
   \   00000E                ; Setup parameters for call to function ZMacReset
   \   00000E   7901         MOV       R1,#0x1
   \   000010   12....       LCALL     `??ZMacReset::?relay`; Banked call to: ZMacReset
   \   000013   E9           MOV       A,R1
   \   000014   FE           MOV       R6,A
    137          
    138            // Turn off interrupts
    139            osal_int_disable( INTS_ALL );
   \   000015                ; Setup parameters for call to function osal_int_disable
   \   000015   79FF         MOV       R1,#-0x1
   \   000017   12....       LCALL     `??osal_int_disable::?relay`; Banked call to: osal_int_disable
    140          
    141            return ( stat );
   \   00001A   EE           MOV       A,R6
   \   00001B   F9           MOV       R1,A
   \   00001C   02....       LJMP      ??Subroutine7_0 & 0xFFFF
    142          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    143          
    144          /********************************************************************************************************
    145           * @fn      ZMacReset
    146           *
    147           * @brief   Reset the MAC.
    148           *
    149           * @param   Default to PIB defaults.
    150           *
    151           * @return  status.
    152           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    153          uint8 ZMacReset( bool SetDefaultPIB )
   \                     ZMacReset:
    154          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    155            byte stat;
    156            byte value;
    157          
    158            stat = MAC_MlmeResetReq( SetDefaultPIB );
   \   00000A                ; Setup parameters for call to function MAC_MlmeResetReq
   \   00000A   12....       LCALL     `??MAC_MlmeResetReq::?relay`; Banked call to: MAC_MlmeResetReq
   \   00000D   E9           MOV       A,R1
   \   00000E   FE           MOV       R6,A
    159          
    160            // Don't send PAN ID conflict
    161            value = FALSE;
   \   00000F   85..82       MOV       DPL,?XSP + 0
   \   000012   85..83       MOV       DPH,?XSP + 1
   \   000015   E4           CLR       A
   \   000016   F0           MOVX      @DPTR,A
    162            MAC_MlmeSetReq( MAC_ASSOCIATED_PAN_COORD, &value );
   \   000017                ; Setup parameters for call to function MAC_MlmeSetReq
   \   000017   AA..         MOV       R2,?XSP + 0
   \   000019   AB..         MOV       R3,?XSP + 1
   \   00001B   7956         MOV       R1,#0x56
   \   00001D   12....       LCALL     `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
    163            MAC_MlmeSetReq( MAC_EXTENDED_ADDRESS, &aExtendedAddress );
   \   000020                ; Setup parameters for call to function MAC_MlmeSetReq
   \   000020   7A..         MOV       R2,#aExtendedAddress & 0xff
   \   000022   7B..         MOV       R3,#(aExtendedAddress >> 8) & 0xff
   \   000024   79E2         MOV       R1,#-0x1e
   \   000026   12....       LCALL     `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
    164          
    165            if (ZMac_ScanBuf)
   \   000029   90....       MOV       DPTR,#ZMac_ScanBuf
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F8           MOV       R0,A
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F9           MOV       R1,A
   \   000031   E8           MOV       A,R0
   \   000032   49           ORL       A,R1
   \   000033   6012         JZ        ??ZMacReset_0
    166            {
    167              osal_mem_free(ZMac_ScanBuf);
   \   000035                ; Setup parameters for call to function osal_mem_free
   \   000035   90....       MOV       DPTR,#ZMac_ScanBuf
   \   000038   E0           MOVX      A,@DPTR
   \   000039   FA           MOV       R2,A
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   FB           MOV       R3,A
   \   00003D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    168              ZMac_ScanBuf = NULL;
   \   000040   90....       MOV       DPTR,#ZMac_ScanBuf
   \   000043   E4           CLR       A
   \   000044   F0           MOVX      @DPTR,A
   \   000045   A3           INC       DPTR
   \   000046   F0           MOVX      @DPTR,A
    169            }
    170          
    171            return ( stat );
   \                     ??ZMacReset_0:
   \   000047   EE           MOV       A,R6
   \   000048   F9           MOV       R1,A
   \   000049   80..         SJMP      ?Subroutine0
    172          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7401         MOV       A,#0x1
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine7_0
   \   000005                ; // Fall through to label ??Subroutine7_0
    173          
    174          
    175          /********************************************************************************************************
    176           * @fn      ZMacGetReq
    177           *
    178           * @brief   Read a MAC PIB attribute.
    179           *
    180           * @param   attr - PIB attribute to get
    181           * @param   value - pointer to the buffer to store the attribute
    182           *
    183           * @return  status
    184           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    185          uint8 ZMacGetReq( uint8 attr, uint8 *value )
   \                     ZMacGetReq:
    186          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    187            if ( attr == ZMacExtAddr )
   \   000007   74E2         MOV       A,#-0x1e
   \   000009   6E           XRL       A,R6
   \   00000A   700B         JNZ       ??ZMacGetReq_0
    188            {
    189              osal_cpyExtAddr( value, &aExtendedAddress );
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C   7C..         MOV       R4,#aExtendedAddress & 0xff
   \   00000E   7D..         MOV       R5,#(aExtendedAddress >> 8) & 0xff
   \   000010   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    190              return ZMacSuccess;
   \   000013   7900         MOV       R1,#0x0
   \   000015   8003         SJMP      ??ZMacGetReq_1
    191            }
    192          
    193            return (ZMacStatus_t) MAC_MlmeGetReq( attr, value );
   \                     ??ZMacGetReq_0:
   \   000017                ; Setup parameters for call to function MAC_MlmeGetReq
   \   000017   12....       LCALL     `??MAC_MlmeGetReq::?relay`; Banked call to: MAC_MlmeGetReq
   \                     ??ZMacGetReq_1:
   \   00001A   80..         SJMP      ??Subroutine7_0
    194          }
    195          
    196          
    197          /********************************************************************************************************
    198           * @fn      ZMacSetReq
    199           *
    200           * @brief   Write a MAC PIB attribute.
    201           *
    202           * @param   attr - PIB attribute to Set
    203           * @param   value - pointer to the data
    204           *
    205           * @return  status
    206           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    207          uint8 ZMacSetReq( uint8 attr, byte *value )
   \                     ZMacSetReq:
    208          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    209            if ( attr == ZMacExtAddr )
   \   00000B   74E2         MOV       A,#-0x1e
   \   00000D   69           XRL       A,R1
   \   00000E   700B         JNZ       ??ZMacSetReq_0
    210            {
    211              osal_cpyExtAddr( aExtendedAddress, value );
   \   000010                ; Setup parameters for call to function sAddrExtCpy
   \   000010   EA           MOV       A,R2
   \   000011   FC           MOV       R4,A
   \   000012   EB           MOV       A,R3
   \   000013   FD           MOV       R5,A
   \   000014   7A..         MOV       R2,#aExtendedAddress & 0xff
   \   000016   7B..         MOV       R3,#(aExtendedAddress >> 8) & 0xff
   \   000018   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    212            }
    213          
    214            return (ZMacStatus_t) MAC_MlmeSetReq( attr, value );
   \                     ??ZMacSetReq_0:
   \   00001B                ; Setup parameters for call to function MAC_MlmeSetReq
   \   00001B   EE           MOV       A,R6
   \   00001C   FA           MOV       R2,A
   \   00001D   EF           MOV       A,R7
   \   00001E   FB           MOV       R3,A
   \   00001F   A9..         MOV       R1,?V0
   \   000021   12....       LCALL     `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
   \   000024   80..         SJMP      ??Subroutine7_0
    215          }
    216          
    217          /********************************************************************************************************
    218           * @fn      ZMacAssociateReq
    219           *
    220           * @brief   Request an association with a coordinator.
    221           *
    222           * @param   structure with info need to associate.
    223           *
    224           * @return  status
    225           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    226          uint8 ZMacAssociateReq( ZMacAssociateReq_t *pData )
   \                     ZMacAssociateReq:
    227          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    228            /* Right now, set security to zero */
    229            pData->Sec.SecurityLevel = false;
   \   000004   EA           MOV       A,R2
   \   000005   2416         ADD       A,#0x16
   \   000007   12....       LCALL     ?Subroutine5 & 0xFFFF
    230          
    231            MAC_MlmeAssociateReq ( (macMlmeAssociateReq_t *)pData);
   \                     ??CrossCallReturnLabel_3:
   \   00000A                ; Setup parameters for call to function MAC_MlmeAssociateReq
   \   00000A   12....       LCALL     `??MAC_MlmeAssociateReq::?relay`; Banked call to: MAC_MlmeAssociateReq
    232            return ( ZMacSuccess );
   \   00000D   02....       LJMP      ?Subroutine1 & 0xFFFF
    233          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3B           ADDC      A,R3
   \   000004   F583         MOV       DPH,A
   \   000006   E4           CLR       A
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7900         MOV       R1,#0x0
   \   000002                REQUIRE ??Subroutine8_0
   \   000002                ; // Fall through to label ??Subroutine8_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine8_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    234          
    235          /********************************************************************************************************
    236           * @fn      ZMacAssociateRsp
    237           *
    238           * @brief   Request to send an association response message.
    239           *
    240           * @param   structure with associate response and info needed to send it.
    241           *
    242           * @return  MAC_SUCCESS or MAC error code
    243           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    244          uint8 ZMacAssociateRsp( ZMacAssociateRsp_t *pData )
   \                     ZMacAssociateRsp:
    245          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    246            /* Right now, set security to zero */
    247            pData->Sec.SecurityLevel = false;
   \   000004   12....       LCALL     ?Subroutine4 & 0xFFFF
    248          
    249            return ( MAC_MlmeAssociateRsp( (macMlmeAssociateRsp_t *) pData ) );
   \                     ??CrossCallReturnLabel_0:
   \   000007                ; Setup parameters for call to function MAC_MlmeAssociateRsp
   \   000007   12....       LCALL     `??MAC_MlmeAssociateRsp::?relay`; Banked call to: MAC_MlmeAssociateRsp
   \   00000A   02....       LJMP      ??Subroutine8_0 & 0xFFFF
    250          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   EA           MOV       A,R2
   \   000001   2413         ADD       A,#0x13
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3B           ADDC      A,R3
   \   000007   F583         MOV       DPH,A
   \   000009   E4           CLR       A
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   22           RET
    251          
    252          /********************************************************************************************************
    253           * @fn      ZMacDisassociateReq
    254           *
    255           * @brief   Request to send a disassociate request message.
    256           *
    257           * @param   structure with info need send it.
    258           *
    259           * @return  status
    260           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    261          uint8 ZMacDisassociateReq( ZMacDisassociateReq_t *pData )
   \                     ZMacDisassociateReq:
    262          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    263            /* Right now, set security to zero */
    264            pData->Sec.SecurityLevel = false;
   \   000004   EA           MOV       A,R2
   \   000005   2415         ADD       A,#0x15
   \   000007   12....       LCALL     ?Subroutine5 & 0xFFFF
    265          
    266            MAC_MlmeDisassociateReq( (macMlmeDisassociateReq_t *)pData);
   \                     ??CrossCallReturnLabel_4:
   \   00000A                ; Setup parameters for call to function MAC_MlmeDisassociateReq
   \   00000A   12....       LCALL     `??MAC_MlmeDisassociateReq::?relay`; Banked call to: MAC_MlmeDisassociateReq
    267            return ( ZMacSuccess );
   \   00000D   02....       LJMP      ?Subroutine1 & 0xFFFF
    268          }
    269          
    270          /********************************************************************************************************
    271           * @fn      ZMacOrphanRsp
    272           *
    273           * @brief   Allows next higher layer to respond to an orphan indication message.
    274           *
    275           * @param   structure with info need send it.
    276           *
    277           * @return  status
    278           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    279          uint8 ZMacOrphanRsp( ZMacOrphanRsp_t *pData )
   \                     ZMacOrphanRsp:
    280          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    281            /* Right now, set security to zero */
    282            pData->Sec.SecurityLevel = false;
   \   000004   12....       LCALL     ?Subroutine4 & 0xFFFF
    283          
    284            MAC_MlmeOrphanRsp( (macMlmeOrphanRsp_t *)pData);
   \                     ??CrossCallReturnLabel_1:
   \   000007                ; Setup parameters for call to function MAC_MlmeOrphanRsp
   \   000007   12....       LCALL     `??MAC_MlmeOrphanRsp::?relay`; Banked call to: MAC_MlmeOrphanRsp
    285            return ( ZMacSuccess );
   \   00000A   02....       LJMP      ?Subroutine1 & 0xFFFF
    286          }
    287          
    288          /********************************************************************************************************
    289           * @fn      ZMacScanReq
    290           *
    291           * @brief   This function is called to perform a network scan.
    292           *
    293           * @param   param - structure with info need send it.
    294           *
    295           * @return  status
    296           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    297          uint8 ZMacScanReq( ZMacScanReq_t *pData )
   \                     ZMacScanReq:
    298          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    299            _ScanChannels = pData->ScanChannels;
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ?XLOAD_R0123
   \   000010   90....       MOV       DPTR,#_ScanChannels
   \   000013   12....       LCALL     ?XSTORE_R0123
    300          
    301            /* scan in progress */
    302            if (ZMac_ScanBuf != NULL)
   \   000016   90....       MOV       DPTR,#ZMac_ScanBuf
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F8           MOV       R0,A
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F9           MOV       R1,A
   \   00001E   E8           MOV       A,R0
   \   00001F   49           ORL       A,R1
   \   000020   6004         JZ        ??ZMacScanReq_0
    303            {
    304              return MAC_SCAN_IN_PROGRESS;
   \   000022   79FC         MOV       R1,#-0x4
   \   000024   8071         SJMP      ??ZMacScanReq_1
    305            }
    306          
    307            if (pData->ScanType != ZMAC_ORPHAN_SCAN)
   \                     ??ZMacScanReq_0:
   \   000026   8E82         MOV       DPL,R6
   \   000028   8F83         MOV       DPH,R7
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F8           MOV       R0,A
   \   000030   7403         MOV       A,#0x3
   \   000032   68           XRL       A,R0
   \   000033   6043         JZ        ??ZMacScanReq_2
    308            {
    309              /* Allocate memory depends on the scan type */
    310              if (pData->ScanType == ZMAC_ED_SCAN)
   \   000035   EE           MOV       A,R6
   \   000036   2413         ADD       A,#0x13
   \   000038   F5..         MOV       ?V0,A
   \   00003A   E4           CLR       A
   \   00003B   3F           ADDC      A,R7
   \   00003C   F5..         MOV       ?V1,A
   \   00003E   E8           MOV       A,R0
   \   00003F   7059         JNZ       ??ZMacScanReq_3
    311              {
    312                if ((ZMac_ScanBuf = osal_mem_alloc(ZMAC_ED_SCAN_MAXCHANNELS)) == NULL)
   \   000041                ; Setup parameters for call to function osal_mem_alloc
   \   000041   7A1B         MOV       R2,#0x1b
   \   000043   7B00         MOV       R3,#0x0
   \   000045   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000048   8B..         MOV       ?V3,R3
   \   00004A   A9..         MOV       R1,?V3
   \   00004C   90....       MOV       DPTR,#ZMac_ScanBuf
   \   00004F   EA           MOV       A,R2
   \   000050   F0           MOVX      @DPTR,A
   \   000051   A3           INC       DPTR
   \   000052   EB           MOV       A,R3
   \   000053   F0           MOVX      @DPTR,A
   \   000054   EA           MOV       A,R2
   \   000055   49           ORL       A,R1
   \   000056   6075         JZ        ??ZMacScanReq_4
    313                {
    314                  return MAC_NO_RESOURCES;
    315                }
    316                osal_memset(ZMac_ScanBuf, 0, ZMAC_ED_SCAN_MAXCHANNELS);
   \   000058                ; Setup parameters for call to function osal_memset
   \   000058   7C1B         MOV       R4,#0x1b
   \   00005A   7D00         MOV       R5,#0x0
   \   00005C   7900         MOV       R1,#0x0
   \   00005E   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    317                pData->Result.pEnergyDetect = ((uint8*)ZMac_ScanBuf) + MAC_CHAN_11;
   \   000061   90....       MOV       DPTR,#ZMac_ScanBuf
   \   000064   E0           MOVX      A,@DPTR
   \   000065   240B         ADD       A,#0xb
   \   000067   F8           MOV       R0,A
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   3400         ADDC      A,#0x0
   \   00006C   F9           MOV       R1,A
   \   00006D   85..82       MOV       DPL,?V0
   \   000070   85..83       MOV       DPH,?V1
   \   000073   E8           MOV       A,R0
   \   000074   F0           MOVX      @DPTR,A
   \   000075   A3           INC       DPTR
   \   000076   E9           MOV       A,R1
   \   000077   F0           MOVX      @DPTR,A
    318              }
    319              else if (pData->MaxResults > 0)
    320              {
    321                if ((ZMac_ScanBuf = pData->Result.pPanDescriptor =
    322                     osal_mem_alloc( sizeof( ZMacPanDesc_t ) * pData->MaxResults )) == NULL)
    323                {
    324                  return MAC_NO_RESOURCES;
    325                }
    326              }
    327            }
    328          
    329            /* Right now, set security to zero */
    330            pData->Sec.SecurityLevel = false;
   \                     ??ZMacScanReq_2:
   \   000078   EE           MOV       A,R6
   \   000079   2410         ADD       A,#0x10
   \   00007B   F582         MOV       DPL,A
   \   00007D   E4           CLR       A
   \   00007E   3F           ADDC      A,R7
   \   00007F   F583         MOV       DPH,A
   \   000081   E4           CLR       A
   \   000082   F0           MOVX      @DPTR,A
    331          
    332            /* Channel Page */
    333            pData->ChannelPage = 0x00;
   \   000083   8E82         MOV       DPL,R6
   \   000085   8F83         MOV       DPH,R7
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   F0           MOVX      @DPTR,A
    334          
    335            MAC_MlmeScanReq ((macMlmeScanReq_t *)pData);
   \   00008E                ; Setup parameters for call to function MAC_MlmeScanReq
   \   00008E   EE           MOV       A,R6
   \   00008F   FA           MOV       R2,A
   \   000090   EF           MOV       A,R7
   \   000091   FB           MOV       R3,A
   \   000092   12....       LCALL     `??MAC_MlmeScanReq::?relay`; Banked call to: MAC_MlmeScanReq
    336          
    337            return ZMacSuccess;
   \   000095   7900         MOV       R1,#0x0
   \                     ??ZMacScanReq_1:
   \   000097   02....       LJMP      ?Subroutine2 & 0xFFFF
   \                     ??ZMacScanReq_3:
   \   00009A   8E82         MOV       DPL,R6
   \   00009C   8F83         MOV       DPH,R7
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   60D0         JZ        ??ZMacScanReq_2
   \   0000A8                ; Setup parameters for call to function osal_mem_alloc
   \   0000A8   75F021       MOV       B,#0x21
   \   0000AB   A4           MUL       AB
   \   0000AC   FA           MOV       R2,A
   \   0000AD   ABF0         MOV       R3,B
   \   0000AF   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B2   8B..         MOV       ?V3,R3
   \   0000B4   A9..         MOV       R1,?V3
   \   0000B6   85..82       MOV       DPL,?V0
   \   0000B9   85..83       MOV       DPH,?V1
   \   0000BC   EA           MOV       A,R2
   \   0000BD   F0           MOVX      @DPTR,A
   \   0000BE   A3           INC       DPTR
   \   0000BF   EB           MOV       A,R3
   \   0000C0   F0           MOVX      @DPTR,A
   \   0000C1   90....       MOV       DPTR,#ZMac_ScanBuf
   \   0000C4   EA           MOV       A,R2
   \   0000C5   F0           MOVX      @DPTR,A
   \   0000C6   A3           INC       DPTR
   \   0000C7   EB           MOV       A,R3
   \   0000C8   F0           MOVX      @DPTR,A
   \   0000C9   EA           MOV       A,R2
   \   0000CA   49           ORL       A,R1
   \   0000CB   70AB         JNZ       ??ZMacScanReq_2
   \                     ??ZMacScanReq_4:
   \   0000CD   791A         MOV       R1,#0x1a
   \   0000CF   80C6         SJMP      ??ZMacScanReq_1
    338          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    339          
    340          
    341          /********************************************************************************************************
    342           * @fn      ZMacStartReq
    343           *
    344           * @brief   This function is called to tell the MAC to transmit beacons
    345           *          and become a coordinator.
    346           *
    347           * @param   structure with info need send it.
    348           *
    349           * @return  status
    350           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    351          uint8 ZMacStartReq( ZMacStartReq_t *pData )
   \                     ZMacStartReq:
    352          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    353            uint8 stat;
    354          
    355            // Probably want to keep the receiver on
    356            stat = true;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7401         MOV       A,#0x1
   \   000016   F0           MOVX      @DPTR,A
    357            MAC_MlmeSetReq( MAC_RX_ON_WHEN_IDLE, &stat );
   \   000017                ; Setup parameters for call to function MAC_MlmeSetReq
   \   000017   AA..         MOV       R2,?XSP + 0
   \   000019   AB..         MOV       R3,?XSP + 1
   \   00001B   7952         MOV       R1,#0x52
   \   00001D   12....       LCALL     `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
    358          
    359            /* Right now, set security to zero */
    360            pData->RealignSec.SecurityLevel = false;
   \   000020   EE           MOV       A,R6
   \   000021   2415         ADD       A,#0x15
   \   000023   F582         MOV       DPL,A
   \   000025   E4           CLR       A
   \   000026   3F           ADDC      A,R7
   \   000027   F583         MOV       DPH,A
   \   000029   E4           CLR       A
   \   00002A   F0           MOVX      @DPTR,A
    361            pData->BeaconSec.SecurityLevel = false;
   \   00002B   EE           MOV       A,R6
   \   00002C   2420         ADD       A,#0x20
   \   00002E   12....       LCALL     ?Subroutine6 & 0xFFFF
    362          
    363          
    364            MAC_MlmeStartReq((macMlmeStartReq_t *) pData);
   \                     ??CrossCallReturnLabel_7:
   \   000031   12....       LCALL     `??MAC_MlmeStartReq::?relay`; Banked call to: MAC_MlmeStartReq
    365          
    366            // MAC does not issue mlmeStartConfirm(), so we have to
    367            // mlmeStartConfirm( stat );  This needs to be addressed some how
    368          
    369            return ZMacSuccess;
   \   000034   7900         MOV       R1,#0x0
   \   000036   02....       LJMP      ?Subroutine0 & 0xFFFF
    370          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   E4           CLR       A
   \   000007   F0           MOVX      @DPTR,A
   \   000008                ; Setup parameters for call to function MAC_MlmeStartReq
   \   000008                ; Setup parameters for call to function MAC_McpsDataReq
   \   000008   EE           MOV       A,R6
   \   000009   FA           MOV       R2,A
   \   00000A   EF           MOV       A,R7
   \   00000B   FB           MOV       R3,A
   \   00000C   22           RET
    371          
    372          /********************************************************************************************************
    373           * @fn      ZMacSyncReq
    374           *
    375           * @brief   This function is called to request a sync to the current
    376           *          networks beacons.
    377           *
    378           * @param   LogicalChannel -
    379           * @param   TrackBeacon - true/false
    380           *
    381           * @return  status
    382           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    383          uint8 ZMacSyncReq( ZMacSyncReq_t *pData )
   \                     ZMacSyncReq:
    384          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    385            MAC_MlmeSyncReq( (macMlmeSyncReq_t *)pData);
   \   000004                ; Setup parameters for call to function MAC_MlmeSyncReq
   \   000004   12....       LCALL     `??MAC_MlmeSyncReq::?relay`; Banked call to: MAC_MlmeSyncReq
    386            return ZMacSuccess;
   \   000007   02....       LJMP      ?Subroutine1 & 0xFFFF
    387          }
    388          
    389          /********************************************************************************************************
    390           * @fn      ZMacPollReq
    391           *
    392           * @brief   This function is called to request MAC data request poll.
    393           *
    394           * @param   coordAddr -
    395           * @param   coordPanId -
    396           * @param   SecurityEnable - true or false.
    397           *
    398           * @return  status
    399           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    400          uint8 ZMacPollReq( ZMacPollReq_t *pData )
   \                     ZMacPollReq:
    401          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    402            /* Right now, set security to zero */
    403            pData->Sec.SecurityLevel = false;
   \   000004   12....       LCALL     ?Subroutine4 & 0xFFFF
    404          
    405            MAC_MlmePollReq ((macMlmePollReq_t *)pData);
   \                     ??CrossCallReturnLabel_2:
   \   000007                ; Setup parameters for call to function MAC_MlmePollReq
   \   000007   12....       LCALL     `??MAC_MlmePollReq::?relay`; Banked call to: MAC_MlmePollReq
    406            return ( ZMacSuccess );
   \   00000A   02....       LJMP      ?Subroutine1 & 0xFFFF
    407          }
    408          
    409          /********************************************************************************************************
    410           * @fn      ZMacDataReqSec
    411           *
    412           * @brief   Send a MAC Data Frame packet, calls the passed in function to apply non-MAC security
    413           *          on the MAC data field after the MAC buffer allocation.
    414           *
    415           * @param   pData - structure containing data and where to send it.
    416           * @param   secCB - callback function to apply security, NULL indicates no security
    417           *
    418           * @return  status
    419           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    420          uint8 ZMacDataReqSec( ZMacDataReq_t *pData, applySecCB_t secCB )
   \                     ZMacDataReqSec:
    421          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V12,R4
   \   00000B   8D..         MOV       ?V13,R5
    422            macMcpsDataReq_t *pBuf;
    423          
    424            /* Allocate memory */
    425            pBuf = MAC_McpsDataAlloc( pData->msduLength, MAC_SEC_LEVEL_NONE, MAC_KEY_ID_MODE_NONE );
   \   00000D   EA           MOV       A,R2
   \   00000E   241B         ADD       A,#0x1b
   \   000010   F5..         MOV       ?V2,A
   \   000012   E4           CLR       A
   \   000013   35..         ADDC      A,?V1
   \   000015   F5..         MOV       ?V3,A
   \   000017                ; Setup parameters for call to function MAC_McpsDataAlloc
   \   000017   7B00         MOV       R3,#0x0
   \   000019   7A00         MOV       R2,#0x0
   \   00001B   85..82       MOV       DPL,?V2
   \   00001E   F583         MOV       DPH,A
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F9           MOV       R1,A
   \   000022   12....       LCALL     `??MAC_McpsDataAlloc::?relay`; Banked call to: MAC_McpsDataAlloc
   \   000025   8A..         MOV       ?V4,R2
   \   000027   8B..         MOV       ?V5,R3
   \   000029   AE..         MOV       R6,?V4
   \   00002B   AF..         MOV       R7,?V5
    426          
    427            if ( pBuf )
   \   00002D   EA           MOV       A,R2
   \   00002E   4F           ORL       A,R7
   \   00002F   7003         JNZ       $+5
   \   000031   02....       LJMP      ??ZMacDataReqSec_0 & 0xFFFF
    428            {
    429              /* Copy the addresses */
    430              osal_memcpy( &pBuf->mac, pData, sizeof (macDataReq_t) );
   \   000034                ; Setup parameters for call to function osal_memcpy
   \   000034   85....       MOV       ?V4,?V0
   \   000037   85....       MOV       ?V5,?V1
   \   00003A   75..00       MOV       ?V6,#0x0
   \   00003D   78..         MOV       R0,#?V4
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000042   7C10         MOV       R4,#0x10
   \   000044   7D00         MOV       R5,#0x0
   \   000046   EA           MOV       A,R2
   \   000047   2422         ADD       A,#0x22
   \   000049   FA           MOV       R2,A
   \   00004A   E4           CLR       A
   \   00004B   3F           ADDC      A,R7
   \   00004C   FB           MOV       R3,A
   \   00004D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000050   7403         MOV       A,#0x3
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
    431          
    432              /* Copy data */
    433              pBuf->msdu.len = pData->msduLength;
   \   000055   EE           MOV       A,R6
   \   000056   2404         ADD       A,#0x4
   \   000058   F5..         MOV       ?V6,A
   \   00005A   E4           CLR       A
   \   00005B   3F           ADDC      A,R7
   \   00005C   F5..         MOV       ?V7,A
   \   00005E   85..82       MOV       DPL,?V2
   \   000061   85..83       MOV       DPH,?V3
   \   000064   E0           MOVX      A,@DPTR
   \   000065   85..82       MOV       DPL,?V6
   \   000068   85..83       MOV       DPH,?V7
   \   00006B   F0           MOVX      @DPTR,A
    434              osal_memcpy( pBuf->msdu.p, pData->msdu, pData->msduLength );
   \   00006C   EE           MOV       A,R6
   \   00006D   2402         ADD       A,#0x2
   \   00006F   F5..         MOV       ?V4,A
   \   000071   E4           CLR       A
   \   000072   3F           ADDC      A,R7
   \   000073   F5..         MOV       ?V5,A
   \   000075                ; Setup parameters for call to function osal_memcpy
   \   000075   E5..         MOV       A,?V0
   \   000077   241C         ADD       A,#0x1c
   \   000079   F582         MOV       DPL,A
   \   00007B   E4           CLR       A
   \   00007C   35..         ADDC      A,?V1
   \   00007E   F583         MOV       DPH,A
   \   000080   E0           MOVX      A,@DPTR
   \   000081   F5..         MOV       ?V8,A
   \   000083   A3           INC       DPTR
   \   000084   E0           MOVX      A,@DPTR
   \   000085   F5..         MOV       ?V9,A
   \   000087   75..00       MOV       ?V10,#0x0
   \   00008A   78..         MOV       R0,#?V8
   \   00008C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00008F   85..82       MOV       DPL,?V2
   \   000092   85..83       MOV       DPH,?V3
   \   000095   E0           MOVX      A,@DPTR
   \   000096   FC           MOV       R4,A
   \   000097   7D00         MOV       R5,#0x0
   \   000099   85..82       MOV       DPL,?V4
   \   00009C   85..83       MOV       DPH,?V5
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   FA           MOV       R2,A
   \   0000A1   A3           INC       DPTR
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   FB           MOV       R3,A
   \   0000A4   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000A7   7403         MOV       A,#0x3
   \   0000A9   12....       LCALL     ?DEALLOC_XSTACK8
    435          
    436              /* Encrypt in place */
    437              if ( secCB && pBuf->msdu.len && pBuf->msdu.p )
   \   0000AC   E5..         MOV       A,?V12
   \   0000AE   45..         ORL       A,?V13
   \   0000B0   602E         JZ        ??ZMacDataReqSec_1
   \   0000B2   85..82       MOV       DPL,?V6
   \   0000B5   85..83       MOV       DPH,?V7
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   F9           MOV       R1,A
   \   0000BA   6024         JZ        ??ZMacDataReqSec_1
   \   0000BC   85..82       MOV       DPL,?V4
   \   0000BF   85..83       MOV       DPH,?V5
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   FA           MOV       R2,A
   \   0000C4   A3           INC       DPTR
   \   0000C5   E0           MOVX      A,@DPTR
   \   0000C6   FB           MOV       R3,A
   \   0000C7   EA           MOV       A,R2
   \   0000C8   4B           ORL       A,R3
   \   0000C9   6015         JZ        ??ZMacDataReqSec_1
    438              {
    439                if ( secCB( pBuf->msdu.len, pBuf->msdu.p ) != ZSuccess )
   \   0000CB                ; Setup parameters for indirect call
   \   0000CB   85..82       MOV       DPL,?V12
   \   0000CE   85..83       MOV       DPH,?V13
   \   0000D1   12....       LCALL     ?CALL_IND
   \   0000D4   E9           MOV       A,R1
   \   0000D5   6009         JZ        ??ZMacDataReqSec_1
    440                {
    441                  // Deallocate the buffer.  MAC_McpsDataAlloc() calls osal_msg_allocate() and
    442                  // returns the same pointer.
    443                  osal_msg_deallocate( (uint8 *)pBuf );
   \   0000D7                ; Setup parameters for call to function osal_msg_deallocate
   \   0000D7   EE           MOV       A,R6
   \   0000D8   FA           MOV       R2,A
   \   0000D9   EF           MOV       A,R7
   \   0000DA   FB           MOV       R3,A
   \   0000DB   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    444          
    445                  return ( MAC_NO_RESOURCES );
   \   0000DE   800D         SJMP      ??ZMacDataReqSec_0
    446                }
    447              }
    448          
    449              /* Right now, set MAC security to off */
    450              pBuf->sec.securityLevel = false;
   \                     ??ZMacDataReqSec_1:
   \   0000E0   EE           MOV       A,R6
   \   0000E1   241F         ADD       A,#0x1f
   \   0000E3   12....       LCALL     ?Subroutine6 & 0xFFFF
    451          
    452              /* Call Mac Data Request */
    453              MAC_McpsDataReq( pBuf );
   \                     ??CrossCallReturnLabel_8:
   \   0000E6   12....       LCALL     `??MAC_McpsDataReq::?relay`; Banked call to: MAC_McpsDataReq
    454          
    455              return ( ZMacSuccess );
   \   0000E9   7900         MOV       R1,#0x0
   \   0000EB   8002         SJMP      ??ZMacDataReqSec_2
    456            }
    457          
    458            return ( MAC_NO_RESOURCES );
   \                     ??ZMacDataReqSec_0:
   \   0000ED   791A         MOV       R1,#0x1a
   \                     ??ZMacDataReqSec_2:
   \   0000EF   7F0E         MOV       R7,#0xe
   \   0000F1   02....       LJMP      ?BANKED_LEAVE_XDATA
    459          }
    460          
    461          /********************************************************************************************************
    462           * @fn      ZMacDataReq
    463           *
    464           * @brief   Send a MAC Data Frame packet.
    465           *
    466           * @param   structure containing data and where to send it.
    467           *
    468           * @return  status
    469           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    470          uint8 ZMacDataReq( ZMacDataReq_t *pData )
   \                     ZMacDataReq:
    471          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    472            return ZMacDataReqSec( pData, NULL );
   \   000004                ; Setup parameters for call to function ZMacDataReqSec
   \   000004   7C00         MOV       R4,#0x0
   \   000006   7D00         MOV       R5,#0x0
   \   000008   12....       LCALL     `??ZMacDataReqSec::?relay`; Banked call to: ZMacDataReqSec
   \   00000B   80..         SJMP      ??Subroutine8_0
    473          }
    474          
    475          /********************************************************************************************************
    476           * @fn      ZMacPurgeReq
    477           *
    478           * @brief   Purge a MAC Data Frame packet.
    479           *
    480           * @param   MSDU data handle.
    481           *
    482           * @return  status
    483           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    484          uint8 ZMacPurgeReq( byte Handle )
   \                     ZMacPurgeReq:
    485          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    486            MAC_McpsPurgeReq( Handle );
   \   000005                ; Setup parameters for call to function MAC_McpsPurgeReq
   \   000005   12....       LCALL     `??MAC_McpsPurgeReq::?relay`; Banked call to: MAC_McpsPurgeReq
    487            return ZMacSuccess;
   \   000008                REQUIRE ?Subroutine3
   \   000008                ; // Fall through to label ?Subroutine3
    488          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ??Subroutine7_0 & 0xFFFF
    489          
    490          /********************************************************************************************************
    491           * @fn      ZMacSrcMatchEnable
    492           *
    493           * @brief   This function is call to enable AUTOPEND and source address matching.
    494           *
    495           * @param   addressType - address type that the application uses
    496           *                        SADDR_MODE_SHORT or SADDR_MODE_EXT.
    497           *          numEntries  - number of source address table entries to be used
    498           *
    499           * @return  status
    500           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    501          ZMacStatus_t ZMacSrcMatchEnable (uint8 addrType, uint8 numEntries)
   \                     ZMacSrcMatchEnable:
    502          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    503            return (MAC_SrcMatchEnable(addrType, numEntries));
   \   000005                ; Setup parameters for call to function MAC_SrcMatchEnable
   \   000005   12....       LCALL     `??MAC_SrcMatchEnable::?relay`; Banked call to: MAC_SrcMatchEnable
   \   000008   02....       LJMP      ??Subroutine7_0 & 0xFFFF
    504          }
    505          
    506          /********************************************************************************************************
    507           * @fn      ZMacSrcMatchAddEntry
    508           *
    509           * @brief   This function is called to add a short or extended address to source address table.
    510           *
    511           * @param   addr - a pointer to sAddr_t which contains addrMode
    512           *                     and a union of a short 16-bit MAC address or an extended
    513           *                     64-bit MAC address to be added to the source address table.
    514           *          panID - the device PAN ID. It is only used when the addr is
    515           *                      using short address
    516           *
    517           * @return  status
    518           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    519          ZMacStatus_t ZMacSrcMatchAddEntry (zAddrType_t *addr, uint16 panID)
   \                     ZMacSrcMatchAddEntry:
    520          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    521            return (MAC_SrcMatchAddEntry ((sAddr_t*)addr, panID));
   \   000004                ; Setup parameters for call to function MAC_SrcMatchAddEntry
   \   000004   12....       LCALL     `??MAC_SrcMatchAddEntry::?relay`; Banked call to: MAC_SrcMatchAddEntry
   \   000007   80..         SJMP      ??Subroutine8_0
    522          }
    523          
    524          /********************************************************************************************************
    525           * @fn      ZMacSrcMatchDeleteEntry
    526           *
    527           * @brief   This function is called to delete a short or extended address from source address table.
    528           *
    529           * @param   addr - a pointer to sAddr_t which contains addrMode
    530           *                     and a union of a short 16-bit MAC address or an extended
    531           *                     64-bit MAC address to be added to the source address table.
    532           *          panID - the device PAN ID. It is only used when the addr is
    533           *                      using short address
    534           *
    535           * @return  status
    536           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    537          ZMacStatus_t ZMacSrcMatchDeleteEntry (zAddrType_t *addr, uint16 panID)
   \                     ZMacSrcMatchDeleteEntry:
    538          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    539            return (MAC_SrcMatchDeleteEntry ((sAddr_t*)addr, panID));
   \   000004                ; Setup parameters for call to function MAC_SrcMatchDeleteEntry
   \   000004   12....       LCALL     `??MAC_SrcMatchDeleteEntry::?relay`; Banked call to: MAC_SrcMatchDeleteEntry
   \   000007   80..         SJMP      ??Subroutine8_0
    540          }
    541          
    542          /********************************************************************************************************
    543           * @fn       ZMacSrcMatchAckAllPending
    544           *
    545           * @brief    Enabled/disable acknowledging all packets with pending bit set
    546           *           It is normally enabled when adding new entries to
    547           *           the source address table fails due to the table is full, or
    548           *           disabled when more entries are deleted and the table has
    549           *           empty slots.
    550           *
    551           * @param    option - true (acknowledging all packets with pending field set)
    552           *                    false (acknowledging all packets with pending field cleared)
    553           *
    554           * @return   status
    555           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    556          ZMacStatus_t ZMacSrcMatchAckAllPending (uint8 option)
   \                     ZMacSrcMatchAckAllPending:
    557          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    558            MAC_SrcMatchAckAllPending (option);
   \   000005                ; Setup parameters for call to function MAC_SrcMatchAckAllPending
   \   000005   12....       LCALL     `??MAC_SrcMatchAckAllPending::?relay`; Banked call to: MAC_SrcMatchAckAllPending
    559          
    560            return ZMacSuccess;
   \   000008   80..         SJMP      ?Subroutine3
    561          }
    562          
    563          /********************************************************************************************************
    564           * @fn       ZMacSrcMatchCheckAllPending
    565           *
    566           * @brief    This function is called to check if acknowledging all packets with pending bit set is enabled.
    567           *
    568           * @param    none
    569           *
    570           * @return   status
    571           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    572          ZMacStatus_t ZMacSrcMatchCheckAllPending (void)
   \                     ZMacSrcMatchCheckAllPending:
    573          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    574            return (MAC_SrcMatchCheckAllPending ());
   \   000004                ; Setup parameters for call to function MAC_SrcMatchCheckAllPending
   \   000004   12....       LCALL     `??MAC_SrcMatchCheckAllPending::?relay`; Banked call to: MAC_SrcMatchCheckAllPending
   \   000007   80..         SJMP      ??Subroutine8_0
    575          }
    576          
    577          /********************************************************************************************************
    578           * @fn      - ZMACPwrOnReq
    579           *
    580           * @brief   - This function requests the MAC to power on the radio hardware
    581           *            and wake up.  When the power on procedure is complete the MAC
    582           *            will send a MAC_PWR_ON_CNF to the application.
    583           *
    584           * @input   - None.
    585           *
    586           * @output  - None.
    587           *
    588           * @return  - None.
    589           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    590          void ZMacPwrOnReq ( void )
   \                     ZMacPwrOnReq:
    591          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    592            MAC_PwrOnReq();
   \   000004                ; Setup parameters for call to function MAC_PwrOnReq
   \   000004   12....       LCALL     `??MAC_PwrOnReq::?relay`; Banked call to: MAC_PwrOnReq
    593          }
   \   000007   80..         SJMP      ??Subroutine8_0
    594          
    595          /********************************************************************************************************
    596           * @fn          MAC_PwrMode
    597           *
    598           * @brief       This function returns the current power mode of the MAC.
    599           *
    600           * input parameters
    601           *
    602           * None.
    603           *
    604           * output parameters
    605           *
    606           * None.
    607           *
    608           * @return      The current power mode of the MAC.
    609           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    610          uint8 ZMac_PwrMode(void)
   \                     ZMac_PwrMode:
    611          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    612            return (MAC_PwrMode());
   \   000004                ; Setup parameters for call to function MAC_PwrMode
   \   000004   12....       LCALL     `??MAC_PwrMode::?relay`; Banked call to: MAC_PwrMode
   \   000007   80..         SJMP      ??Subroutine8_0
    613          }
    614          
    615          /********************************************************************************************************
    616           * @fn      ZMacSetTransmitPower
    617           *
    618           * @brief   Set the transmitter power according to the level setting param.
    619           *
    620           * @param   Valid power level setting as defined in ZMAC.h.
    621           *
    622           * @return  ZMacSuccess if PHY_TRANSMIT_POWER found or ZMacUnsupportedAttribute.
    623           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    624          uint8 ZMacSetTransmitPower( ZMacTransmitPower_t level )
   \                     ZMacSetTransmitPower:
    625          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV       A,#-0x1
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   E9           MOV       A,R1
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   F0           MOVX      @DPTR,A
    626            return MAC_MlmeSetReq( ZMacPhyTransmitPowerSigned, &level );
   \   000011                ; Setup parameters for call to function MAC_MlmeSetReq
   \   000011   AA..         MOV       R2,?XSP + 0
   \   000013   AB..         MOV       R3,?XSP + 1
   \   000015   79E5         MOV       R1,#-0x1b
   \   000017   12....       LCALL     `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
   \   00001A   7401         MOV       A,#0x1
   \   00001C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00001F   80..         SJMP      ??Subroutine8_0
    627          }
    628          
    629          /********************************************************************************************************
    630           * @fn      ZMacSendNoData
    631           *
    632           * @brief   This function sends an empty msg
    633           *
    634           * @param   DstAddr   - destination short address
    635           *          DstPANId  - destination pan id
    636           *
    637           * @return  None
    638           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    639          void ZMacSendNoData ( uint16 DstAddr, uint16 DstPANId )
   \                     ZMacSendNoData:
    640          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    641            macMcpsDataReq_t *pBuf;
    642          
    643            /* Allocate memory */
    644            pBuf = MAC_McpsDataAlloc(0, MAC_SEC_LEVEL_NONE, MAC_KEY_ID_MODE_NONE);
   \   00000D                ; Setup parameters for call to function MAC_McpsDataAlloc
   \   00000D   7B00         MOV       R3,#0x0
   \   00000F   7A00         MOV       R2,#0x0
   \   000011   7900         MOV       R1,#0x0
   \   000013   12....       LCALL     `??MAC_McpsDataAlloc::?relay`; Banked call to: MAC_McpsDataAlloc
    645          
    646            if (pBuf)
   \   000016   EA           MOV       A,R2
   \   000017   4B           ORL       A,R3
   \   000018   6051         JZ        ??ZMacSendNoData_0
    647            {
    648              /* Fill in src information */
    649              pBuf->mac.srcAddrMode              = SADDR_MODE_SHORT;
   \   00001A   EA           MOV       A,R2
   \   00001B   242D         ADD       A,#0x2d
   \   00001D   F582         MOV       DPL,A
   \   00001F   E4           CLR       A
   \   000020   3B           ADDC      A,R3
   \   000021   F583         MOV       DPH,A
   \   000023   7402         MOV       A,#0x2
   \   000025   F0           MOVX      @DPTR,A
    650          
    651              /* Fill in dst information */
    652              pBuf->mac.dstAddr.addr.shortAddr   = DstAddr;
   \   000026   EA           MOV       A,R2
   \   000027   2422         ADD       A,#0x22
   \   000029   F582         MOV       DPL,A
   \   00002B   E4           CLR       A
   \   00002C   3B           ADDC      A,R3
   \   00002D   F583         MOV       DPH,A
   \   00002F   E5..         MOV       A,?V0
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   E5..         MOV       A,?V1
   \   000035   F0           MOVX      @DPTR,A
    653              pBuf->mac.dstAddr.addrMode         = SADDR_MODE_SHORT;
   \   000036   EA           MOV       A,R2
   \   000037   242A         ADD       A,#0x2a
   \   000039   F582         MOV       DPL,A
   \   00003B   E4           CLR       A
   \   00003C   3B           ADDC      A,R3
   \   00003D   F583         MOV       DPH,A
   \   00003F   7402         MOV       A,#0x2
   \   000041   F0           MOVX      @DPTR,A
    654              pBuf->mac.dstPanId                 = DstPANId;
   \   000042   EA           MOV       A,R2
   \   000043   242B         ADD       A,#0x2b
   \   000045   F582         MOV       DPL,A
   \   000047   E4           CLR       A
   \   000048   3B           ADDC      A,R3
   \   000049   F583         MOV       DPH,A
   \   00004B   EE           MOV       A,R6
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A3           INC       DPTR
   \   00004E   EF           MOV       A,R7
   \   00004F   F0           MOVX      @DPTR,A
    655          
    656              /* Misc information */
    657              pBuf->mac.msduHandle               = 0;
   \   000050   EA           MOV       A,R2
   \   000051   242E         ADD       A,#0x2e
   \   000053   12....       LCALL     ?Subroutine5 & 0xFFFF
    658              pBuf->mac.txOptions                = ZMAC_TXOPTION_ACK | ZMAC_TXOPTION_NO_RETRANS | ZMAC_TXOPTION_NO_CNF;
   \                     ??CrossCallReturnLabel_5:
   \   000056   EA           MOV       A,R2
   \   000057   242F         ADD       A,#0x2f
   \   000059   F582         MOV       DPL,A
   \   00005B   E4           CLR       A
   \   00005C   3B           ADDC      A,R3
   \   00005D   F583         MOV       DPH,A
   \   00005F   7431         MOV       A,#0x31
   \   000061   F0           MOVX      @DPTR,A
    659          
    660              /* Right now, set security to zero */
    661              pBuf->sec.securityLevel = false;
   \   000062   EA           MOV       A,R2
   \   000063   241F         ADD       A,#0x1f
   \   000065   12....       LCALL     ?Subroutine5 & 0xFFFF
    662          
    663              /* Call Mac Data Request */
    664              MAC_McpsDataReq(pBuf);
   \                     ??CrossCallReturnLabel_6:
   \   000068                ; Setup parameters for call to function MAC_McpsDataReq
   \   000068   12....       LCALL     `??MAC_McpsDataReq::?relay`; Banked call to: MAC_McpsDataReq
    665            }
    666          
    667          }
   \                     ??ZMacSendNoData_0:
   \   00006B                REQUIRE ?Subroutine2
   \   00006B                ; // Fall through to label ?Subroutine2
    668          
    669          /********************************************************************************************************
    670           * @fn      ZMacStateIdle
    671           *
    672           * @brief   This function returns true if the MAC state is idle.
    673           *
    674           * @param   none
    675           *
    676           * @return  TRUE if the MAC state is idle, FALSE otherwise.
    677           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    678          uint8 ZMacStateIdle( void )
   \                     ZMacStateIdle:
    679          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    680            return macStateIdle();
   \   000004                ; Setup parameters for call to function macStateIdle
   \   000004   12....       LCALL     `??macStateIdle::?relay`; Banked call to: macStateIdle
   \   000007   02....       LJMP      ??Subroutine8_0 & 0xFFFF
    681          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacGetReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacGetReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSetReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSetReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacAssociateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacAssociateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacAssociateRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacAssociateRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacDisassociateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacDisassociateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacOrphanRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacOrphanRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacScanReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacScanReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacStartReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacStartReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSyncReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSyncReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacPollReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacPollReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacDataReqSec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacDataReqSec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacDataReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacDataReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacPurgeReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacPurgeReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSrcMatchEnable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSrcMatchEnable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSrcMatchAddEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSrcMatchAddEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSrcMatchDeleteEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSrcMatchDeleteEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSrcMatchAckAllPending::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSrcMatchAckAllPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSrcMatchCheckAllPending::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSrcMatchCheckAllPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacPwrOnReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacPwrOnReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMac_PwrMode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMac_PwrMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSetTransmitPower::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSetTransmitPower

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSendNoData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSendNoData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacStateIdle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacStateIdle

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   ZMacAssociateReq
        2      0   -> MAC_MlmeAssociateReq
      2      0   ZMacAssociateRsp
        2      0   -> MAC_MlmeAssociateRsp
      2      0   ZMacDataReq
        2      0   -> ZMacDataReqSec
      1     25   ZMacDataReqSec
        0     22   -> MAC_McpsDataAlloc
        0     22   -> MAC_McpsDataReq
        0     25   -> osal_memcpy
        0     22   -> osal_msg_deallocate
      2      0   ZMacDisassociateReq
        2      0   -> MAC_MlmeDisassociateReq
      0      9   ZMacGetReq
        0      9   -> MAC_MlmeGetReq
        0      9   -> sAddrExtCpy
      0      9   ZMacInit
        0      9   -> MAC_Init
        0      9   -> MAC_InitCoord
        0      9   -> MAC_InitDevice
        0      9   -> ZMacReset
        0      9   -> osal_int_disable
      2      0   ZMacOrphanRsp
        2      0   -> MAC_MlmeOrphanRsp
      2      0   ZMacPollReq
        2      0   -> MAC_MlmePollReq
      0      9   ZMacPurgeReq
        0      9   -> MAC_McpsPurgeReq
      2      0   ZMacPwrOnReq
        2      0   -> MAC_PwrOnReq
      0     19   ZMacReset
        0     10   -> MAC_MlmeResetReq
        0     10   -> MAC_MlmeSetReq
        0     10   -> osal_mem_free
      0     12   ZMacScanReq
        0     12   -> MAC_MlmeScanReq
        0     12   -> osal_mem_alloc
        0     12   -> osal_memset
      0     12   ZMacSendNoData
        0     12   -> MAC_McpsDataAlloc
        0     12   -> MAC_McpsDataReq
      0      9   ZMacSetReq
        0      9   -> MAC_MlmeSetReq
        0      9   -> sAddrExtCpy
      3      1   ZMacSetTransmitPower
        2      1   -> MAC_MlmeSetReq
      0      9   ZMacSrcMatchAckAllPending
        0      9   -> MAC_SrcMatchAckAllPending
      2      0   ZMacSrcMatchAddEntry
        2      0   -> MAC_SrcMatchAddEntry
      2      0   ZMacSrcMatchCheckAllPending
        2      0   -> MAC_SrcMatchCheckAllPending
      2      0   ZMacSrcMatchDeleteEntry
        2      0   -> MAC_SrcMatchDeleteEntry
      0      9   ZMacSrcMatchEnable
        0      9   -> MAC_SrcMatchEnable
      0     10   ZMacStartReq
        0     10   -> MAC_MlmeSetReq
        0     10   -> MAC_MlmeStartReq
      2      0   ZMacStateIdle
        2      0   -> macStateIdle
      2      0   ZMacSyncReq
        2      0   -> MAC_MlmeSyncReq
      2      0   ZMac_PwrMode
        2      0   -> MAC_PwrMode


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ??Subroutine7_0
       7  ??Subroutine8_0
       5  ?Subroutine0
       2  ?Subroutine1
       5  ?Subroutine2
       5  ?Subroutine3
      12  ?Subroutine4
       9  ?Subroutine5
      13  ?Subroutine6
      16  ZMacAssociateReq
       6  ZMacAssociateReq::?relay
      13  ZMacAssociateRsp
       6  ZMacAssociateRsp::?relay
      13  ZMacDataReq
       6  ZMacDataReq::?relay
     244  ZMacDataReqSec
       6  ZMacDataReqSec::?relay
      16  ZMacDisassociateReq
       6  ZMacDisassociateReq::?relay
      28  ZMacGetReq
       6  ZMacGetReq::?relay
      31  ZMacInit
       6  ZMacInit::?relay
      13  ZMacOrphanRsp
       6  ZMacOrphanRsp::?relay
      13  ZMacPollReq
       6  ZMacPollReq::?relay
       8  ZMacPurgeReq
       6  ZMacPurgeReq::?relay
       9  ZMacPwrOnReq
       6  ZMacPwrOnReq::?relay
      75  ZMacReset
       6  ZMacReset::?relay
     209  ZMacScanReq
       6  ZMacScanReq::?relay
     107  ZMacSendNoData
       6  ZMacSendNoData::?relay
      38  ZMacSetReq
       6  ZMacSetReq::?relay
      33  ZMacSetTransmitPower
       6  ZMacSetTransmitPower::?relay
      10  ZMacSrcMatchAckAllPending
       6  ZMacSrcMatchAckAllPending::?relay
       9  ZMacSrcMatchAddEntry
       6  ZMacSrcMatchAddEntry::?relay
       9  ZMacSrcMatchCheckAllPending
       6  ZMacSrcMatchCheckAllPending::?relay
       9  ZMacSrcMatchDeleteEntry
       6  ZMacSrcMatchDeleteEntry::?relay
      11  ZMacSrcMatchEnable
       6  ZMacSrcMatchEnable::?relay
      57  ZMacStartReq
       6  ZMacStartReq::?relay
      10  ZMacStateIdle
       6  ZMacStateIdle::?relay
      10  ZMacSyncReq
       6  ZMacSyncReq::?relay
       9  ZMac_PwrMode
       6  ZMac_PwrMode::?relay
       2  ZMac_ScanBuf
       4  _ScanChannels

 
 1 063 bytes in segment BANKED_CODE
   150 bytes in segment BANK_RELAYS
     6 bytes in segment XDATA_Z
 
   150 bytes of CODE     memory
 1 063 bytes of HUGECODE memory
     6 bytes of XDATA    memory

Errors: none
Warnings: none
