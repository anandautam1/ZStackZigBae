###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               12/Sep/2018  03:56:52
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.20
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\stack\af\AF.c
#    Command line       =  
#        -f C:\Users\ANANDA~1\AppData\Local\Temp\EW4E8B.tmp ("C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\stack\af\AF.c"
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\AF.lst
#    Object file        =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\AF.r51
#
###############################################################################

C:\Users\Ananda Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2010-08-09 12:12:10 -0700 (Mon, 09 Aug 2010) $
      4            Revision:       $Revision: 23350 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          #include "rtg.h"
     52          
     53          #if defined ( MT_AF_CB_FUNC )
     54            #include "MT_AF.h"
     55          #endif
     56          
     57          #if defined ( INTER_PAN )
     58            #include "stub_aps.h"
     59          #endif
     60          
     61          /*********************************************************************
     62           * MACROS
     63           */
     64          
     65          /*********************************************************************
     66           * @fn      afSend
     67           *
     68           * @brief   Helper macro for V1 API to invoke V2 API.
     69           *
     70           * input parameters
     71           *
     72           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     73           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     74           * @param   cID - A valid cluster ID as specified by the Profile.
     75           * @param   len - Number of bytes of data pointed to by next param.
     76           * @param  *buf - A pointer to the data bytes to send.
     77           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     78           * @param  *transID - A pointer to a byte which can be modified and which will
     79           *                    be used as the transaction sequence number of the msg.
     80           *
     81           * output parameters
     82           *
     83           * @param  *transID - Incremented by one if the return value is success.
     84           *
     85           * @return  afStatus_t - See previous definition of afStatus_... types.
     86           */
     87          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     88                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     89                                    (cID), (len), (buf), (transID), (options), (radius) )
     90          
     91          /*********************************************************************
     92           * CONSTANTS
     93           */
     94          
     95          /*********************************************************************
     96           * TYPEDEFS
     97           */
     98          
     99          /*********************************************************************
    100           * GLOBAL VARIABLES
    101           */
    102          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    104          
    105          /*********************************************************************
    106           * EXTERNAL VARIABLES
    107           */
    108          
    109          /*********************************************************************
    110           * EXTERNAL FUNCTIONS
    111           */
    112          
    113          /*********************************************************************
    114           * LOCAL VARIABLES
    115           */
    116          
    117          /*********************************************************************
    118           * LOCAL FUNCTIONS
    119           */
    120          
    121          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    122                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    123                          byte SecurityUse, uint32 timestamp );
    124          
    125          static epList_t *afFindEndPointDescList( byte EndPoint );
    126          
    127          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    128          
    129          /*********************************************************************
    130           * NETWORK LAYER CALLBACKS
    131           */
    132          
    133          /*********************************************************************
    134           * PUBLIC FUNCTIONS
    135           */
    136          
    137          /*********************************************************************
    138           * @fn      afInit
    139           *
    140           * @brief   Initialization function for the AF.
    141           *
    142           * @param   none
    143           *
    144           * @return  none
    145           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    146          void afInit( void )
   \                     afInit:
    147          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    148            // Start with no endpoint defined
    149            epList = NULL;
   \   000004   90....       MOV       DPTR,#epList
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   F0           MOVX      @DPTR,A
    150          }
   \   00000B   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    151          
    152          /*********************************************************************
    153           * @fn      afRegisterExtended
    154           *
    155           * @brief   Register an Application's EndPoint description.
    156           *
    157           * @param   epDesc - pointer to the Application's endpoint descriptor.
    158           * @param   descFn - pointer to descriptor callback function
    159           *
    160           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    161           *
    162           * @return  Pointer to epList_t on success, NULL otherwise.
    163           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    164          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn )
   \                     afRegisterExtended:
    165          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
    166            epList_t *ep;
    167            epList_t *epSearch;
    168          
    169            ep = osal_mem_alloc( sizeof ( epList_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A07         MOV       R2,#0x7
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    170            if ( ep )
   \   000014   EA           MOV       A,R2
   \   000015   4B           ORL       A,R3
   \   000016   6049         JZ        ??afRegisterExtended_0
    171            {
    172              // Fill in the new list entry
    173              ep->epDesc = epDesc;
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   EE           MOV       A,R6
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   A3           INC       DPTR
   \   00001F   EF           MOV       A,R7
   \   000020   12....       LCALL     ?Subroutine21 & 0xFFFF
    174          
    175              // Default to allow Match Descriptor.
    176              ep->flags = eEP_AllowMatch;
   \                     ??CrossCallReturnLabel_30:
   \   000023   7401         MOV       A,#0x1
   \   000025   12....       LCALL     ?Subroutine4 & 0xFFFF
    177              ep->pfnDescCB = descFn;
   \                     ??CrossCallReturnLabel_0:
   \   000028   E5..         MOV       A,?V0
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   E5..         MOV       A,?V1
   \   00002E   12....       LCALL     ?Subroutine4 & 0xFFFF
    178              ep->nextDesc = NULL;
   \                     ??CrossCallReturnLabel_1:
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E4           CLR       A
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   F0           MOVX      @DPTR,A
    179          
    180              // Does a list exist?
    181              if ( epList == NULL )
   \   000037   90....       MOV       DPTR,#epList
   \   00003A   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00003D   7005         JNZ       ??afRegisterExtended_1
    182                epList = ep;  // Make this the first entry
   \   00003F   90....       MOV       DPTR,#epList
   \   000042   8018         SJMP      ??afRegisterExtended_2
    183              else
    184              {
    185                // Look for the end of the list
    186                epSearch = epList;
   \                     ??afRegisterExtended_1:
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F9           MOV       R1,A
    187                while( epSearch->nextDesc != NULL )
    188                  epSearch = epSearch->nextDesc;
   \                     ??afRegisterExtended_3:
   \   000046   E8           MOV       A,R0
   \   000047   2405         ADD       A,#0x5
   \   000049   5001         JNC       ??afRegisterExtended_4
   \   00004B   09           INC       R1
   \                     ??afRegisterExtended_4:
   \   00004C   FC           MOV       R4,A
   \   00004D   E9           MOV       A,R1
   \   00004E   FD           MOV       R5,A
   \   00004F   8C82         MOV       DPL,R4
   \   000051   F583         MOV       DPH,A
   \   000053   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000056   70EE         JNZ       ??afRegisterExtended_3
    189          
    190                // Add new entry to end of list
    191                epSearch->nextDesc = ep;
   \   000058   8C82         MOV       DPL,R4
   \   00005A   8D83         MOV       DPH,R5
   \                     ??afRegisterExtended_2:
   \   00005C   EA           MOV       A,R2
   \   00005D   F0           MOVX      @DPTR,A
   \   00005E   A3           INC       DPTR
   \   00005F   EB           MOV       A,R3
   \   000060   F0           MOVX      @DPTR,A
    192              }
    193            }
    194          
    195            return ep;
   \                     ??afRegisterExtended_0:
   \   000061                REQUIRE ?Subroutine1
   \   000061                ; // Fall through to label ?Subroutine1
    196          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   49           ORL       A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    197          
    198          /*********************************************************************
    199           * @fn      afRegister
    200           *
    201           * @brief   Register an Application's EndPoint description.
    202           *
    203           * @param   epDesc - pointer to the Application's endpoint descriptor.
    204           *
    205           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    206           *
    207           * @return  afStatus_SUCCESS - Registered
    208           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    209           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    210           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    211          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    212          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    213            epList_t *ep;
    214            
    215            // Look for duplicate endpoint
    216            if ( afFindEndPointDescList( epDesc->endPoint ) )
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   \   00000F   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000012   EA           MOV       A,R2
   \   000013   4B           ORL       A,R3
   \   000014   6004         JZ        ??afRegister_0
    217              return ( afStatus_INVALID_PARAMETER );
   \   000016   7902         MOV       R1,#0x2
   \   000018   8015         SJMP      ??afRegister_1
    218            
    219            ep = afRegisterExtended( epDesc, NULL );
    220          
    221            return ((ep == NULL) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_0:
   \   00001A                ; Setup parameters for call to function afRegisterExtended
   \   00001A   7C00         MOV       R4,#0x0
   \   00001C   7D00         MOV       R5,#0x0
   \   00001E   EE           MOV       A,R6
   \   00001F   FA           MOV       R2,A
   \   000020   EF           MOV       A,R7
   \   000021   FB           MOV       R3,A
   \   000022   12....       LCALL     `??afRegisterExtended::?relay`; Banked call to: afRegisterExtended
   \   000025   EA           MOV       A,R2
   \   000026   4B           ORL       A,R3
   \   000027   7004         JNZ       ??afRegister_2
   \   000029   7910         MOV       R1,#0x10
   \   00002B   8002         SJMP      ??afRegister_1
   \                     ??afRegister_2:
   \   00002D   7900         MOV       R1,#0x0
   \                     ??afRegister_1:
   \   00002F   02....       LJMP      ?Subroutine2 & 0xFFFF
    222          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    223          
    224          
    225          /*********************************************************************
    226           * @fn          afDataConfirm
    227           *
    228           * @brief       This function will generate the Data Confirm back to
    229           *              the application.
    230           *
    231           * @param       endPoint - confirm end point
    232           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    233           * @param       status - status of APSDE_DATA_REQUEST
    234           *
    235           * @return      none
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    238          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   8B..         MOV       ?V2,R3
    239            endPointDesc_t *epDesc;
    240            afDataConfirm_t *msgPtr;
    241          
    242            // Find the endpoint description
    243            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00000E   8A..         MOV       ?V4,R2
   \   000010   8B..         MOV       ?V5,R3
   \   000012   AE..         MOV       R6,?V4
   \   000014   AF..         MOV       R7,?V5
    244            if ( epDesc == NULL )
   \   000016   EA           MOV       A,R2
   \   000017   4F           ORL       A,R7
   \   000018   6027         JZ        ??CrossCallReturnLabel_7
    245              return;
    246          
    247            // Determine the incoming command type
    248            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   00001A                ; Setup parameters for call to function osal_msg_allocate
   \   00001A   7A04         MOV       R2,#0x4
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    249            if ( msgPtr )
   \   000021   EA           MOV       A,R2
   \   000022   4B           ORL       A,R3
   \   000023   601C         JZ        ??CrossCallReturnLabel_7
    250            {
    251              // Build the Data Confirm message
    252              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   000025   8A82         MOV       DPL,R2
   \   000027   8B83         MOV       DPH,R3
   \   000029   74FD         MOV       A,#-0x3
   \   00002B   F0           MOVX      @DPTR,A
    253              msgPtr->hdr.status = status;
   \   00002C   A3           INC       DPTR
   \   00002D   E5..         MOV       A,?V2
   \   00002F   12....       LCALL     ?Subroutine21 & 0xFFFF
    254              msgPtr->endpoint = endPoint;
   \                     ??CrossCallReturnLabel_31:
   \   000032   E5..         MOV       A,?V0
   \   000034   12....       LCALL     ?Subroutine4 & 0xFFFF
    255              msgPtr->transID = transID;
   \                     ??CrossCallReturnLabel_2:
   \   000037   E5..         MOV       A,?V1
   \   000039   F0           MOVX      @DPTR,A
    256          
    257          #if defined ( MT_AF_CB_FUNC )
    258              /* If MT has subscribed for this callback, don't send as a message. */
    259              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    260              {
    261                /* Send callback if it's subscribed */
    262                MT_AfDataConfirm ((void *)msgPtr);
    263                /* Release the memory. */
    264                osal_msg_deallocate( (void *)msgPtr );
    265              }
    266              else
    267          #endif
    268              {
    269                /* send message through task message */
    270                osal_msg_send( *(epDesc->task_id), (byte *)msgPtr );
   \   00003A                ; Setup parameters for call to function osal_msg_send
   \   00003A   8E82         MOV       DPL,R6
   \   00003C   8F83         MOV       DPH,R7
   \   00003E   12....       LCALL     ?Subroutine7 & 0xFFFF
    271              }
    272            }
    273          }
   \                     ??CrossCallReturnLabel_7:
   \   000041   7F06         MOV       R7,#0x6
   \   000043   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET
    274          
    275          /*********************************************************************
    276           * @fn          afIncomingData
    277           *
    278           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    279           *
    280           * @param       aff  - pointer to APS frame format
    281           * @param       SrcAddress  - Source address
    282           * @param       sig - incoming message's link quality
    283           * @param       SecurityUse - Security enable/disable
    284           *
    285           * @return      none
    286           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    288                               NLDE_Signal_t *sig, byte SecurityUse, uint32 timestamp )
    289          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EC           MOV       A,R4
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   ED           MOV       A,R5
   \   000013   F0           MOVX      @DPTR,A
   \   000014   E9           MOV       A,R1
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   8A..         MOV       ?V8,R2
   \   00001E   8B..         MOV       ?V9,R3
    290            endPointDesc_t *epDesc = NULL;
    291            epList_t *pList = epList;
   \   000020   90....       MOV       DPTR,#epList
   \   000023   12....       LCALL     ?Subroutine11 & 0xFFFF
    292          #if !defined ( APS_NO_GROUPS )    
    293            uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
   \                     ??CrossCallReturnLabel_13:
   \   000026   7EFE         MOV       R6,#-0x2
   \   000028   8A82         MOV       DPL,R2
   \   00002A   8B83         MOV       DPH,R3
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   540C         ANL       A,#0xc
   \   00002F   640C         XRL       A,#0xc
   \   000031   7012         JNZ       ??afIncomingData_0
    294          #endif  
    295          
    296            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    297            {
    298          #if !defined ( APS_NO_GROUPS )    
    299              // Find the first endpoint for this group
    300              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   000033                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   000033   79FE         MOV       R1,#-0x2
   \   000035   12....       LCALL     ?Subroutine8 & 0xFFFF
    301              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \                     ??CrossCallReturnLabel_9:
   \   000038   7003         JNZ       $+5
   \   00003A   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    302                return;   // No endpoint found
    303          
    304              epDesc = afFindEndPointDesc( grpEp );
   \   00003D                ; Setup parameters for call to function afFindEndPointDesc
   \   00003D   12....       LCALL     ?Subroutine20 & 0xFFFF
    305              if ( epDesc == NULL )
   \                     ??CrossCallReturnLabel_28:
   \   000040   703D         JNZ       ??afIncomingData_2
    306                return;   // Endpoint descriptor not found
   \   000042   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    307          
    308              pList = afFindEndPointDescList( epDesc->endPoint );
    309          #else
    310              return; // Not supported
    311          #endif    
    312            }
    313            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F9           MOV       R1,A
   \   000049   74FF         MOV       A,#-0x1
   \   00004B   69           XRL       A,R1
   \   00004C   7024         JNZ       ??afIncomingData_3
    314            {
    315              // Set the list
    316              if ( pList != NULL )
   \   00004E   E5..         MOV       A,?V2
   \   000050   45..         ORL       A,?V3
   \   000052   7003         JNZ       $+5
   \   000054   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    317              {
    318                epDesc = pList->epDesc;
   \   000057   12....       LCALL     ?Subroutine12 & 0xFFFF
    319              }
    320            }
   \                     ??CrossCallReturnLabel_38:
   \   00005A   741B         MOV       A,#0x1b
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F5..         MOV       ?V14,A
   \   000062   A3           INC       DPTR
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F5..         MOV       ?V15,A
   \   000066   741F         MOV       A,#0x1f
   \   000068   12....       LCALL     ?XSTACK_DISP0_8
   \   00006B   78..         MOV       R0,#?V4
   \   00006D   12....       LCALL     ?L_MOV_X
   \   000070   801B         SJMP      ??CrossCallReturnLabel_39
    321            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_3:
   \   000072                ; Setup parameters for call to function afFindEndPointDesc
   \   000072   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000075   8A..         MOV       ?V0,R2
   \   000077   8B..         MOV       ?V1,R3
   \   000079   A9..         MOV       R1,?V1
   \   00007B   EA           MOV       A,R2
   \   00007C   49           ORL       A,R1
   \   00007D   60DB         JZ        ??CrossCallReturnLabel_38
    322            {
    323              pList = afFindEndPointDescList( epDesc->endPoint );
   \                     ??afIncomingData_2:
   \   00007F                ; Setup parameters for call to function afFindEndPointDescList
   \   00007F   85..82       MOV       DPL,?V0
   \   000082   85..83       MOV       DPH,?V1
   \   000085   12....       LCALL     ?Subroutine15 & 0xFFFF
    324            }
   \                     ??CrossCallReturnLabel_18:
   \   000088   80D0         SJMP      ??CrossCallReturnLabel_38
    325          
    326            while ( epDesc )
    327            {
    328              uint16 epProfileID = 0xFFFF;  // Invalid Profile ID
    329              
    330              if ( pList->pfnDescCB )
    331              {
    332                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    333                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
    334                if ( pID )
    335                {
    336                  epProfileID = *pID;
    337                  osal_mem_free( pID );
    338                }
    339              }
    340              else if ( epDesc->simpleDesc )
    341              {
    342                epProfileID = epDesc->simpleDesc->AppProfId;
    343              }
    344          
    345              if ( (aff->ProfileID == epProfileID) ||
    346                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) )
    347              {
    348                {
    349                  // Save original endpoint
    350                  uint8 endpoint = aff->DstEndPoint;
    351                  
    352                  // overwrite with descriptor's endpoint
    353                  aff->DstEndPoint = epDesc->endPoint;   
    354                  
    355                  afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig, SecurityUse, timestamp );
    356                  
    357                  // Restore with original endpoint
    358                  aff->DstEndPoint = endpoint;
    359                }
    360              }
    361          
    362              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    363              {
    364          #if !defined ( APS_NO_GROUPS )      
    365                // Find the next endpoint for this group
    366                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
    367                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
    368                  return;   // No endpoint found
    369          
    370                epDesc = afFindEndPointDesc( grpEp );
    371                if ( epDesc == NULL )
    372                  return;   // Endpoint descriptor not found
    373          
    374                pList = afFindEndPointDescList( epDesc->endPoint );
    375          #else
    376                return;
    377          #endif      
    378              }
    379              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
    380              {
    381                pList = pList->nextDesc;
    382                if ( pList )
    383                  epDesc = pList->epDesc;
   \                     ??afIncomingData_4:
   \   00008A   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00008D   E5..         MOV       A,?V0
   \   00008F   45..         ORL       A,?V1
   \   000091   7003         JNZ       $+5
   \   000093   02....       LJMP      ??afIncomingData_1 & 0xFFFF
   \   000096   8007         SJMP      ??CrossCallReturnLabel_19
   \                     ??afIncomingData_5:
   \   000098                ; Setup parameters for call to function afFindEndPointDescList
   \   000098   8A82         MOV       DPL,R2
   \   00009A   8B83         MOV       DPH,R3
   \   00009C   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00009F   75..FF       MOV       ?V10,#-0x1
   \   0000A2   75..FF       MOV       ?V11,#-0x1
   \   0000A5   85..82       MOV       DPL,?V2
   \   0000A8   85..83       MOV       DPH,?V3
   \   0000AB   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0000AE   FD           MOV       R5,A
   \   0000AF   E8           MOV       A,R0
   \   0000B0   4D           ORL       A,R5
   \   0000B1   85..82       MOV       DPL,?V0
   \   0000B4   85..83       MOV       DPH,?V1
   \   0000B7   601A         JZ        ??afIncomingData_6
   \   0000B9                ; Setup parameters for indirect call
   \   0000B9   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000BC   12....       LCALL     ?CALL_IND
   \   0000BF   EA           MOV       A,R2
   \   0000C0   4B           ORL       A,R3
   \   0000C1   601D         JZ        ??afIncomingData_7
   \   0000C3   8A82         MOV       DPL,R2
   \   0000C5   8B83         MOV       DPH,R3
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   F5..         MOV       ?V10,A
   \   0000CA   A3           INC       DPTR
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   F5..         MOV       ?V11,A
   \   0000CE                ; Setup parameters for call to function osal_mem_free
   \   0000CE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000D1   800D         SJMP      ??afIncomingData_7
   \                     ??afIncomingData_6:
   \   0000D3   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000D6   6008         JZ        ??afIncomingData_7
   \   0000D8   A3           INC       DPTR
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   F5..         MOV       ?V10,A
   \   0000DC   A3           INC       DPTR
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   F5..         MOV       ?V11,A
   \                     ??afIncomingData_7:
   \   0000E0   85..82       MOV       DPL,?V8
   \   0000E3   85..83       MOV       DPH,?V9
   \   0000E6   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0000E9   85..82       MOV       DPL,?V0
   \   0000EC   85..83       MOV       DPH,?V1
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   FA           MOV       R2,A
   \   0000F1   E5..         MOV       A,?V10
   \   0000F3   68           XRL       A,R0
   \   0000F4   7003         JNZ       ??afIncomingData_8
   \   0000F6   E5..         MOV       A,?V11
   \   0000F8   69           XRL       A,R1
   \                     ??afIncomingData_8:
   \   0000F9   6007         JZ        ??afIncomingData_9
   \   0000FB   EA           MOV       A,R2
   \   0000FC   7053         JNZ       ??afIncomingData_10
   \   0000FE   E8           MOV       A,R0
   \   0000FF   49           ORL       A,R1
   \   000100   704F         JNZ       ??afIncomingData_10
   \                     ??afIncomingData_9:
   \   000102   85..82       MOV       DPL,?V8
   \   000105   85..83       MOV       DPH,?V9
   \   000108   A3           INC       DPTR
   \   000109   A3           INC       DPTR
   \   00010A   E0           MOVX      A,@DPTR
   \   00010B   FF           MOV       R7,A
   \   00010C   EA           MOV       A,R2
   \   00010D   85..82       MOV       DPL,?V8
   \   000110   85..83       MOV       DPH,?V9
   \   000113   A3           INC       DPTR
   \   000114   A3           INC       DPTR
   \   000115   F0           MOVX      @DPTR,A
   \   000116                ; Setup parameters for call to function afBuildMSGIncoming
   \   000116   78..         MOV       R0,#?V4
   \   000118   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00011B   7421         MOV       A,#0x21
   \   00011D   12....       LCALL     ?XSTACK_DISP0_8
   \   000120   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000123   78..         MOV       R0,#?V14
   \   000125   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000128   7409         MOV       A,#0x9
   \   00012A   12....       LCALL     ?XSTACK_DISP0_8
   \   00012D   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000130   740A         MOV       A,#0xa
   \   000132   12....       LCALL     ?XSTACK_DISP0_8
   \   000135   E0           MOVX      A,@DPTR
   \   000136   F9           MOV       R1,A
   \   000137   AC..         MOV       R4,?V0
   \   000139   AD..         MOV       R5,?V1
   \   00013B   AA..         MOV       R2,?V8
   \   00013D   AB..         MOV       R3,?V9
   \   00013F   12....       LCALL     `??afBuildMSGIncoming::?relay`; Banked call to: afBuildMSGIncoming
   \   000142   740A         MOV       A,#0xa
   \   000144   12....       LCALL     ?DEALLOC_XSTACK8
   \   000147   EF           MOV       A,R7
   \   000148   85..82       MOV       DPL,?V8
   \   00014B   85..83       MOV       DPH,?V9
   \   00014E   A3           INC       DPTR
   \   00014F   A3           INC       DPTR
   \   000150   F0           MOVX      @DPTR,A
   \                     ??afIncomingData_10:
   \   000151   85..82       MOV       DPL,?V8
   \   000154   85..83       MOV       DPH,?V9
   \   000157   E0           MOVX      A,@DPTR
   \   000158   540C         ANL       A,#0xc
   \   00015A   640C         XRL       A,#0xc
   \   00015C   7011         JNZ       ??afIncomingData_11
   \   00015E                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   00015E   EE           MOV       A,R6
   \   00015F   F9           MOV       R1,A
   \   000160   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000163   6027         JZ        ??afIncomingData_1
   \   000165                ; Setup parameters for call to function afFindEndPointDesc
   \   000165   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000168   6003         JZ        $+5
   \   00016A   02....       LJMP      ??afIncomingData_5 & 0xFFFF
   \   00016D   801D         SJMP      ??afIncomingData_1
   \                     ??afIncomingData_11:
   \   00016F   A3           INC       DPTR
   \   000170   A3           INC       DPTR
   \   000171   E0           MOVX      A,@DPTR
   \   000172   F4           CPL       A
   \   000173   7017         JNZ       ??afIncomingData_1
   \   000175   85..82       MOV       DPL,?V2
   \   000178   85..83       MOV       DPH,?V3
   \   00017B   A3           INC       DPTR
   \   00017C   A3           INC       DPTR
   \   00017D   A3           INC       DPTR
   \   00017E   A3           INC       DPTR
   \   00017F   A3           INC       DPTR
   \   000180   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000183   E5..         MOV       A,?V2
   \   000185   45..         ORL       A,?V3
   \   000187   6003         JZ        $+5
   \   000189   02....       LJMP      ??afIncomingData_4 & 0xFFFF
    384                else
    385                  epDesc = NULL;
    386              }
    387              else
    388                epDesc = NULL;
    389            }
    390          }
   \                     ??afIncomingData_1:
   \   00018C   7403         MOV       A,#0x3
   \   00018E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000191   7F10         MOV       R7,#0x10
   \   000193   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006                REQUIRE ??Subroutine25_0
   \   000006                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   FA           MOV       R2,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FB           MOV       R3,A
   \   000009   12....       LCALL     `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   00000C   E9           MOV       A,R1
   \   00000D   FE           MOV       R6,A
   \   00000E   74FE         MOV       A,#-0x2
   \   000010   6E           XRL       A,R6
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   7902         MOV       R1,#0x2
   \   000004   8882         MOV       DPL,R0
   \   000006   8D83         MOV       DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000006   E582         MOV       A,DPL
   \   000008   4583         ORL       A,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007                REQUIRE ??Subroutine28_0
   \   000007                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine29_0
   \   000001                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine30_0
   \   000003                ; // Fall through to label ??Subroutine30_0
    391          
    392          /*********************************************************************
    393           * @fn          afBuildMSGIncoming
    394           *
    395           * @brief       Build the message for the app
    396           *
    397           * @param
    398           *
    399           * @return      pointer to next in data buffer
    400           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    401          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    402                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig, 
    403                           byte SecurityUse, uint32 timestamp )
    404          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   \   00000D   89..         MOV       ?V6,R1
    405            afIncomingMSGPacket_t *MSGpkt;
    406            const byte len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
    407            byte *asdu = aff->asdu;
   \   00000F   EA           MOV       A,R2
   \   000010   240E         ADD       A,#0xe
   \   000012   F582         MOV       DPL,A
   \   000014   E4           CLR       A
   \   000015   35..         ADDC      A,?V1
   \   000017   F583         MOV       DPH,A
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V8,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V9,A
    408            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \   000020   EA           MOV       A,R2
   \   000021   2410         ADD       A,#0x10
   \   000023   F5..         MOV       ?V2,A
   \   000025   E4           CLR       A
   \   000026   35..         ADDC      A,?V1
   \   000028   F5..         MOV       ?V3,A
   \   00002A                ; Setup parameters for call to function osal_msg_allocate
   \   00002A   85..82       MOV       DPL,?V2
   \   00002D   F583         MOV       DPH,A
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   2423         ADD       A,#0x23
   \   000032   FA           MOV       R2,A
   \   000033   7B00         MOV       R3,#0x0
   \   000035   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000038   8A..         MOV       ?V10,R2
   \   00003A   8B..         MOV       ?V11,R3
   \   00003C   AE..         MOV       R6,?V10
   \   00003E   AF..         MOV       R7,?V11
    409          
    410            if ( MSGpkt == NULL )
   \   000040   EA           MOV       A,R2
   \   000041   4F           ORL       A,R7
   \   000042   7003         JNZ       $+5
   \   000044   02....       LJMP      ??CrossCallReturnLabel_8 & 0xFFFF
    411            {
    412              return;
    413            }
    414          
    415            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   000047   8A82         MOV       DPL,R2
   \   000049   8B83         MOV       DPH,R3
   \   00004B   741A         MOV       A,#0x1a
   \   00004D   F0           MOVX      @DPTR,A
    416            MSGpkt->groupId = aff->GroupID;
   \   00004E   85..82       MOV       DPL,?V0
   \   000051   85..83       MOV       DPH,?V1
   \   000054   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000057   12....       LCALL     ??Subroutine26_0 & 0xFFFF
    417            MSGpkt->clusterId = aff->ClusterID;
   \                     ??CrossCallReturnLabel_40:
   \   00005A   85..82       MOV       DPL,?V0
   \   00005D   85..83       MOV       DPH,?V1
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   12....       LCALL     ??Subroutine26_0 & 0xFFFF
    418            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \                     ??CrossCallReturnLabel_41:
   \   00006A                ; Setup parameters for call to function afCopyAddress
   \   00006A   7414         MOV       A,#0x14
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   FC           MOV       R4,A
   \   000071   A3           INC       DPTR
   \   000072   E0           MOVX      A,@DPTR
   \   000073   FD           MOV       R5,A
   \   000074   EA           MOV       A,R2
   \   000075   2406         ADD       A,#0x6
   \   000077   FA           MOV       R2,A
   \   000078   E4           CLR       A
   \   000079   3F           ADDC      A,R7
   \   00007A   FB           MOV       R3,A
   \   00007B   12....       LCALL     `??afCopyAddress::?relay`; Banked call to: afCopyAddress
    419            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   00007E   85..82       MOV       DPL,?V0
   \   000081   85..83       MOV       DPH,?V1
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   C0E0         PUSH      A
   \   00008A   EE           MOV       A,R6
   \   00008B   240F         ADD       A,#0xf
   \   00008D   F582         MOV       DPL,A
   \   00008F   E4           CLR       A
   \   000090   3F           ADDC      A,R7
   \   000091   F583         MOV       DPH,A
   \   000093   D0E0         POP       A
   \   000095   F0           MOVX      @DPTR,A
    420            MSGpkt->endPoint = epDesc->endPoint;
   \   000096   85..82       MOV       DPL,?V4
   \   000099   85..83       MOV       DPH,?V5
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   C0E0         PUSH      A
   \   00009F   EE           MOV       A,R6
   \   0000A0   2414         ADD       A,#0x14
   \   0000A2   F582         MOV       DPL,A
   \   0000A4   E4           CLR       A
   \   0000A5   3F           ADDC      A,R7
   \   0000A6   F583         MOV       DPH,A
   \   0000A8   D0E0         POP       A
   \   0000AA   F0           MOVX      @DPTR,A
    421            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   0000AB   E5..         MOV       A,?V0
   \   0000AD   240C         ADD       A,#0xc
   \   0000AF   F582         MOV       DPL,A
   \   0000B1   E4           CLR       A
   \   0000B2   35..         ADDC      A,?V1
   \   0000B4   F583         MOV       DPH,A
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   C0E0         PUSH      A
   \   0000B9   EE           MOV       A,R6
   \   0000BA   2415         ADD       A,#0x15
   \   0000BC   F582         MOV       DPL,A
   \   0000BE   E4           CLR       A
   \   0000BF   3F           ADDC      A,R7
   \   0000C0   F583         MOV       DPH,A
   \   0000C2   D0E0         POP       A
   \   0000C4   F0           MOVX      @DPTR,A
   \   0000C5   7418         MOV       A,#0x18
   \   0000C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CA   12....       LCALL     ??Subroutine29_0 & 0xFFFF
    422            MSGpkt->LinkQuality = sig->LinkQuality;
   \                     ??CrossCallReturnLabel_56:
   \   0000CD   8882         MOV       DPL,R0
   \   0000CF   F583         MOV       DPH,A
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   C0E0         PUSH      A
   \   0000D4   EE           MOV       A,R6
   \   0000D5   2416         ADD       A,#0x16
   \   0000D7   F582         MOV       DPL,A
   \   0000D9   E4           CLR       A
   \   0000DA   3F           ADDC      A,R7
   \   0000DB   F583         MOV       DPH,A
   \   0000DD   D0E0         POP       A
   \   0000DF   F0           MOVX      @DPTR,A
    423            MSGpkt->correlation = sig->correlation;
   \   0000E0   8882         MOV       DPL,R0
   \   0000E2   8983         MOV       DPH,R1
   \   0000E4   A3           INC       DPTR
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   C0E0         PUSH      A
   \   0000E8   EE           MOV       A,R6
   \   0000E9   2417         ADD       A,#0x17
   \   0000EB   F582         MOV       DPL,A
   \   0000ED   E4           CLR       A
   \   0000EE   3F           ADDC      A,R7
   \   0000EF   F583         MOV       DPH,A
   \   0000F1   D0E0         POP       A
   \   0000F3   F0           MOVX      @DPTR,A
    424            MSGpkt->rssi = sig->rssi;
   \   0000F4   8882         MOV       DPL,R0
   \   0000F6   8983         MOV       DPH,R1
   \   0000F8   A3           INC       DPTR
   \   0000F9   A3           INC       DPTR
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   C0E0         PUSH      A
   \   0000FD   EE           MOV       A,R6
   \   0000FE   2418         ADD       A,#0x18
   \   000100   F582         MOV       DPL,A
   \   000102   E4           CLR       A
   \   000103   3F           ADDC      A,R7
   \   000104   F583         MOV       DPH,A
   \   000106   D0E0         POP       A
   \   000108   F0           MOVX      @DPTR,A
    425            MSGpkt->SecurityUse = SecurityUse;
   \   000109   EE           MOV       A,R6
   \   00010A   2419         ADD       A,#0x19
   \   00010C   F582         MOV       DPL,A
   \   00010E   E4           CLR       A
   \   00010F   3F           ADDC      A,R7
   \   000110   F583         MOV       DPH,A
   \   000112   E5..         MOV       A,?V6
   \   000114   F0           MOVX      @DPTR,A
    426            MSGpkt->timestamp = timestamp;
   \   000115   741A         MOV       A,#0x1a
   \   000117   12....       LCALL     ?XSTACK_DISP0_8
   \   00011A   12....       LCALL     ?XLOAD_R0123
   \   00011D   EE           MOV       A,R6
   \   00011E   241A         ADD       A,#0x1a
   \   000120   F582         MOV       DPL,A
   \   000122   E4           CLR       A
   \   000123   3F           ADDC      A,R7
   \   000124   F583         MOV       DPH,A
   \   000126   12....       LCALL     ?XSTORE_R0123
    427            MSGpkt->macDestAddr = aff->macDestAddr;
   \   000129   85..82       MOV       DPL,?V0
   \   00012C   85..83       MOV       DPH,?V1
   \   00012F   A3           INC       DPTR
   \   000130   A3           INC       DPTR
   \   000131   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000134   EE           MOV       A,R6
   \   000135   2412         ADD       A,#0x12
   \   000137   12....       LCALL     ?Subroutine5 & 0xFFFF
    428            MSGpkt->srcAddr.panId = SrcPanId;
   \                     ??CrossCallReturnLabel_48:
   \   00013A   7416         MOV       A,#0x16
   \   00013C   12....       LCALL     ?XSTACK_DISP0_8
   \   00013F   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000142   EE           MOV       A,R6
   \   000143   2410         ADD       A,#0x10
   \   000145   12....       LCALL     ?Subroutine5 & 0xFFFF
    429            MSGpkt->cmd.TransSeqNumber = 0;
   \                     ??CrossCallReturnLabel_49:
   \   000148   EE           MOV       A,R6
   \   000149   241E         ADD       A,#0x1e
   \   00014B   F582         MOV       DPL,A
   \   00014D   E4           CLR       A
   \   00014E   3F           ADDC      A,R7
   \   00014F   F583         MOV       DPH,A
   \   000151   E4           CLR       A
   \   000152   F0           MOVX      @DPTR,A
    430            MSGpkt->cmd.DataLength = aff->asduLength;
   \   000153   85..82       MOV       DPL,?V2
   \   000156   85..83       MOV       DPH,?V3
   \   000159   E0           MOVX      A,@DPTR
   \   00015A   FA           MOV       R2,A
   \   00015B   EE           MOV       A,R6
   \   00015C   241F         ADD       A,#0x1f
   \   00015E   F8           MOV       R0,A
   \   00015F   E4           CLR       A
   \   000160   3F           ADDC      A,R7
   \   000161   F9           MOV       R1,A
   \   000162   E8           MOV       A,R0
   \   000163   FC           MOV       R4,A
   \   000164   E9           MOV       A,R1
   \   000165   8882         MOV       DPL,R0
   \   000167   F583         MOV       DPH,A
   \   000169   EA           MOV       A,R2
   \   00016A   F0           MOVX      @DPTR,A
   \   00016B   A3           INC       DPTR
   \   00016C   E4           CLR       A
   \   00016D   F0           MOVX      @DPTR,A
    431          
    432            if ( MSGpkt->cmd.DataLength )
   \   00016E   EE           MOV       A,R6
   \   00016F   2421         ADD       A,#0x21
   \   000171   F582         MOV       DPL,A
   \   000173   E4           CLR       A
   \   000174   3F           ADDC      A,R7
   \   000175   F583         MOV       DPH,A
   \   000177   EA           MOV       A,R2
   \   000178   6027         JZ        ??afBuildMSGIncoming_0
    433            {
    434              MSGpkt->cmd.Data = (byte *)(MSGpkt + 1);
   \   00017A   EE           MOV       A,R6
   \   00017B   2423         ADD       A,#0x23
   \   00017D   FA           MOV       R2,A
   \   00017E   E4           CLR       A
   \   00017F   3F           ADDC      A,R7
   \   000180   FB           MOV       R3,A
   \   000181   EA           MOV       A,R2
   \   000182   F0           MOVX      @DPTR,A
   \   000183   A3           INC       DPTR
   \   000184   EB           MOV       A,R3
   \   000185   F0           MOVX      @DPTR,A
    435              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \   000186                ; Setup parameters for call to function osal_memcpy
   \   000186   75..00       MOV       ?V10,#0x0
   \   000189   78..         MOV       R0,#?V8
   \   00018B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00018E   8C82         MOV       DPL,R4
   \   000190   8983         MOV       DPH,R1
   \   000192   E0           MOVX      A,@DPTR
   \   000193   FC           MOV       R4,A
   \   000194   A3           INC       DPTR
   \   000195   E0           MOVX      A,@DPTR
   \   000196   FD           MOV       R5,A
   \   000197   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00019A   7403         MOV       A,#0x3
   \   00019C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00019F   8004         SJMP      ??afBuildMSGIncoming_1
    436            }
    437            else
    438            {
    439              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_0:
   \   0001A1   E4           CLR       A
   \   0001A2   F0           MOVX      @DPTR,A
   \   0001A3   A3           INC       DPTR
   \   0001A4   F0           MOVX      @DPTR,A
    440            }
    441          
    442          #if defined ( MT_AF_CB_FUNC )
    443            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    444            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    445            {
    446              MT_AfIncomingMsg( (void *)MSGpkt );
    447              // Release the memory.
    448              osal_msg_deallocate( (void *)MSGpkt );
    449            }
    450            else
    451          #endif
    452            {
    453              // Send message through task message.
    454              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_1:
   \   0001A5                ; Setup parameters for call to function osal_msg_send
   \   0001A5   EE           MOV       A,R6
   \   0001A6   FA           MOV       R2,A
   \   0001A7   EF           MOV       A,R7
   \   0001A8   FB           MOV       R3,A
   \   0001A9   85..82       MOV       DPL,?V4
   \   0001AC   85..83       MOV       DPH,?V5
   \   0001AF   12....       LCALL     ?Subroutine7 & 0xFFFF
    455            }
    456          }
   \                     ??CrossCallReturnLabel_8:
   \   0001B2   7F0C         MOV       R7,#0xc
   \   0001B4   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000004   F9           MOV       R1,A
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine26_0
   \   000006                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
    457          
    458          /*********************************************************************
    459           * @fn      AF_DataRequest
    460           *
    461           * @brief   Common functionality for invoking APSDE_DataReq() for both
    462           *          SendMulti and MSG-Send.
    463           *
    464           * input parameters
    465           *
    466           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    467           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    468           * @param   cID - A valid cluster ID as specified by the Profile.
    469           * @param   len - Number of bytes of data pointed to by next param.
    470           * @param  *buf - A pointer to the data bytes to send.
    471           * @param  *transID - A pointer to a byte which can be modified and which will
    472           *                    be used as the transaction sequence number of the msg.
    473           * @param   options - Valid bit mask of Tx options.
    474           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    475           *
    476           * output parameters
    477           *
    478           * @param  *transID - Incremented by one if the return value is success.
    479           *
    480           * @return  afStatus_t - See previous definition of afStatus_... types.
    481           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    482          uint8 AF_DataRequestDiscoverRoute = TRUE;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    483          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    484                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    485                                     uint8 options, uint8 radius )
    486          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV       A,#-0x1e
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   89..         MOV       ?V4,R1
    487            pDescCB pfnDescCB;
    488            ZStatus_t stat;
    489            APSDE_DataReq_t req;
    490            afDataReqMTU_t mtu;
    491          
    492            // Verify source end point
    493            if ( srcEP == NULL )
   \   000014   EC           MOV       A,R4
   \   000015   4F           ORL       A,R7
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??AF_DataRequest_0 & 0xFFFF
    494            {
    495              return afStatus_INVALID_PARAMETER;
    496            }
    497          
    498          #if !defined( REFLECTOR )
    499            if ( dstAddr->addrMode == afAddrNotPresent )
    500            {
    501              return afStatus_INVALID_PARAMETER;
    502            }
    503          #endif
    504            
    505            // Check if route is available before sending data 
    506            if ( options & AF_LIMIT_CONCENTRATOR  )
   \   00001B   EA           MOV       A,R2
   \   00001C   2408         ADD       A,#0x8
   \   00001E   F5..         MOV       ?V0,A
   \   000020   E4           CLR       A
   \   000021   35..         ADDC      A,?V3
   \   000023   F5..         MOV       ?V1,A
   \   000025   E9           MOV       A,R1
   \   000026   A2E3         MOV       C,0xE0 /* A   */.3
   \   000028   502E         JNC       ??AF_DataRequest_1
    507            {
    508              if ( dstAddr->addrMode != afAddr16Bit )
   \   00002A   85..82       MOV       DPL,?V0
   \   00002D   85..83       MOV       DPH,?V1
   \   000030   E0           MOVX      A,@DPTR
   \   000031   6402         XRL       A,#0x2
   \   000033   707F         JNZ       ??AF_DataRequest_0
    509              {
    510                return ( afStatus_INVALID_PARAMETER );
    511              }
    512               
    513              // First, make sure the destination is not its self, then check for an existing route.
    514              if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
    515                  && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
   \   000035                ; Setup parameters for call to function NLME_GetShortAddr
   \   000035   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000038   8A..         MOV       ?V6,R2
   \   00003A   8B..         MOV       ?V7,R3
   \   00003C   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00003F   E5..         MOV       A,?V6
   \   000041   6A           XRL       A,R2
   \   000042   7003         JNZ       ??AF_DataRequest_2
   \   000044   E5..         MOV       A,?V7
   \   000046   6B           XRL       A,R3
   \                     ??AF_DataRequest_2:
   \   000047   600F         JZ        ??AF_DataRequest_1
   \   000049                ; Setup parameters for call to function RTG_CheckRtStatus
   \   000049   7C03         MOV       R4,#0x3
   \   00004B   7901         MOV       R1,#0x1
   \   00004D   12....       LCALL     `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
   \   000050   E9           MOV       A,R1
   \   000051   6005         JZ        ??AF_DataRequest_1
    516              {
    517                // A valid route to a concentrator wasn't found
    518                return ( afStatus_NO_ROUTE );
   \   000053   79CD         MOV       R1,#-0x33
   \   000055   02....       LJMP      ??AF_DataRequest_3 & 0xFFFF
    519              }
    520            } 
    521            
    522            // Validate broadcasting
    523            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    524                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_1:
   \   000058   85..82       MOV       DPL,?V0
   \   00005B   85..83       MOV       DPH,?V1
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F8           MOV       R0,A
   \   000060   7402         MOV       A,#0x2
   \   000062   68           XRL       A,R0
   \   000063   6005         JZ        ??AF_DataRequest_4
   \   000065   740F         MOV       A,#0xf
   \   000067   68           XRL       A,R0
   \   000068   703D         JNZ       ??AF_DataRequest_5
    525            {
    526              // Check for valid broadcast values
    527              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_4:
   \   00006A                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00006A   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00006D   12....       LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000070   E9           MOV       A,R1
   \   000071   85..82       MOV       DPL,?V0
   \   000074   85..83       MOV       DPH,?V1
   \   000077   6027         JZ        ??AF_DataRequest_6
    528              {
    529                // Force mode to broadcast
    530                dstAddr->addrMode = afAddrBroadcast;
   \   000079   740F         MOV       A,#0xf
   \   00007B   F0           MOVX      @DPTR,A
    531              }
    532              else
    533              {
    534                // Address is not a valid broadcast type
    535                if ( dstAddr->addrMode == afAddrBroadcast )
    536                {
    537                  return afStatus_INVALID_PARAMETER;
    538                }
    539              }
    540            }
    541            else if ( dstAddr->addrMode != afAddr64Bit &&
    542                      dstAddr->addrMode != afAddrGroup &&
    543                      dstAddr->addrMode != afAddrNotPresent )
    544            {
    545              return afStatus_INVALID_PARAMETER;
    546            }
    547            
    548            // Set destination address
    549            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_7:
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   C0E0         PUSH      A
   \   00007F   740A         MOV       A,#0xa
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   D0E0         POP       A
   \   000086   F0           MOVX      @DPTR,A
    550            if ( dstAddr->addrMode == afAddr64Bit )
   \   000087   85..82       MOV       DPL,?V0
   \   00008A   85..83       MOV       DPH,?V1
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   6403         XRL       A,#0x3
   \   000090   7027         JNZ       ??AF_DataRequest_8
    551              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   000092                ; Setup parameters for call to function sAddrExtCpy
   \   000092   AC..         MOV       R4,?V2
   \   000094   AD..         MOV       R5,?V3
   \   000096   7402         MOV       A,#0x2
   \   000098   12....       LCALL     ?XSTACK_DISP101_8
   \   00009B   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00009E   802A         SJMP      ??CrossCallReturnLabel_42
   \                     ??AF_DataRequest_6:
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   640F         XRL       A,#0xf
   \   0000A3   70D7         JNZ       ??AF_DataRequest_7
   \   0000A5   800D         SJMP      ??AF_DataRequest_0
   \                     ??AF_DataRequest_5:
   \   0000A7   7403         MOV       A,#0x3
   \   0000A9   68           XRL       A,R0
   \   0000AA   60D0         JZ        ??AF_DataRequest_7
   \   0000AC   7401         MOV       A,#0x1
   \   0000AE   68           XRL       A,R0
   \   0000AF   60CB         JZ        ??AF_DataRequest_7
   \   0000B1   E8           MOV       A,R0
   \   0000B2   60C8         JZ        ??AF_DataRequest_7
   \                     ??AF_DataRequest_0:
   \   0000B4   7902         MOV       R1,#0x2
   \   0000B6   02....       LJMP      ??AF_DataRequest_3 & 0xFFFF
    552            else
    553              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_8:
   \   0000B9   85..82       MOV       DPL,?V2
   \   0000BC   85..83       MOV       DPH,?V3
   \   0000BF   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000C2   7402         MOV       A,#0x2
   \   0000C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C7   12....       LCALL     ??Subroutine26_0 & 0xFFFF
    554            
    555            req.profileID = ZDO_PROFILE_ID;
   \                     ??CrossCallReturnLabel_42:
   \   0000CA   7411         MOV       A,#0x11
   \   0000CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CF   E4           CLR       A
   \   0000D0   F0           MOVX      @DPTR,A
   \   0000D1   A3           INC       DPTR
   \   0000D2   F0           MOVX      @DPTR,A
    556          
    557            if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   0000D3   90....       MOV       DPTR,#epList
   \   0000D6   8002         SJMP      ??AF_DataRequest_9
   \                     ??AF_DataRequest_10:
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \                     ??AF_DataRequest_9:
   \   0000DA   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000DD   6040         JZ        ??AF_DataRequest_11
   \   0000DF   8882         MOV       DPL,R0
   \   0000E1   8983         MOV       DPH,R1
   \   0000E3   12....       LCALL     ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0000E6   EE           MOV       A,R6
   \   0000E7   6A           XRL       A,R2
   \   0000E8   7002         JNZ       ??AF_DataRequest_12
   \   0000EA   EF           MOV       A,R7
   \   0000EB   6B           XRL       A,R3
   \                     ??AF_DataRequest_12:
   \   0000EC   8882         MOV       DPL,R0
   \   0000EE   8983         MOV       DPH,R1
   \   0000F0   A3           INC       DPTR
   \   0000F1   A3           INC       DPTR
   \   0000F2   A3           INC       DPTR
   \   0000F3   70E3         JNZ       ??AF_DataRequest_10
   \   0000F5   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000F8   FD           MOV       R5,A
   \   0000F9   E8           MOV       A,R0
   \   0000FA   4D           ORL       A,R5
   \   0000FB   6022         JZ        ??AF_DataRequest_11
    558            {
    559              uint16 *pID = (uint16 *)(pfnDescCB(
    560                                           AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   0000FD                ; Setup parameters for indirect call
   \   0000FD   8E82         MOV       DPL,R6
   \   0000FF   8F83         MOV       DPH,R7
   \   000101   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000104   12....       LCALL     ?CALL_IND
    561              if ( pID )
   \   000107   EA           MOV       A,R2
   \   000108   4B           ORL       A,R3
   \   000109   6028         JZ        ??CrossCallReturnLabel_44
    562              {
    563                req.profileID = *pID;
   \   00010B   8A82         MOV       DPL,R2
   \   00010D   8B83         MOV       DPH,R3
   \   00010F   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000112   7411         MOV       A,#0x11
   \   000114   12....       LCALL     ?XSTACK_DISP0_8
   \   000117   12....       LCALL     ??Subroutine26_0 & 0xFFFF
    564                osal_mem_free( pID );
   \                     ??CrossCallReturnLabel_43:
   \   00011A                ; Setup parameters for call to function osal_mem_free
   \   00011A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00011D   8014         SJMP      ??CrossCallReturnLabel_44
    565              }
    566            }
    567            else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_11:
   \   00011F   8E82         MOV       DPL,R6
   \   000121   8F83         MOV       DPH,R7
   \   000123   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000126   600B         JZ        ??CrossCallReturnLabel_44
    568            {
    569              req.profileID = srcEP->simpleDesc->AppProfId;
   \   000128   12....       LCALL     ??Subroutine28_0 & 0xFFFF
    570            }
   \                     ??CrossCallReturnLabel_63:
   \   00012B   7411         MOV       A,#0x11
   \   00012D   12....       LCALL     ?XSTACK_DISP0_8
   \   000130   12....       LCALL     ??Subroutine26_0 & 0xFFFF
    571          
    572            req.txOptions = 0;
   \                     ??CrossCallReturnLabel_44:
   \   000133   7417         MOV       A,#0x17
   \   000135   12....       LCALL     ?XSTACK_DISP0_8
   \   000138   E4           CLR       A
   \   000139   F0           MOVX      @DPTR,A
   \   00013A   A3           INC       DPTR
   \   00013B   F0           MOVX      @DPTR,A
    573          
    574            if ( ( options & AF_ACK_REQUEST              ) &&
    575                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    576                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   00013C   E5..         MOV       A,?V4
   \   00013E   A2E4         MOV       C,0xE0 /* A   */.4
   \   000140   501C         JNC       ??AF_DataRequest_13
   \   000142   740A         MOV       A,#0xa
   \   000144   12....       LCALL     ?XSTACK_DISP0_8
   \   000147   E0           MOVX      A,@DPTR
   \   000148   F8           MOV       R0,A
   \   000149   740F         MOV       A,#0xf
   \   00014B   68           XRL       A,R0
   \   00014C   6010         JZ        ??AF_DataRequest_13
   \   00014E   7401         MOV       A,#0x1
   \   000150   68           XRL       A,R0
   \   000151   600B         JZ        ??AF_DataRequest_13
    577            {
    578              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   000153   7417         MOV       A,#0x17
   \   000155   12....       LCALL     ?XSTACK_DISP0_8
   \   000158   7404         MOV       A,#0x4
   \   00015A   F0           MOVX      @DPTR,A
   \   00015B   A3           INC       DPTR
   \   00015C   E4           CLR       A
   \   00015D   F0           MOVX      @DPTR,A
    579            }
    580          
    581            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_13:
   \   00015E   E5..         MOV       A,?V4
   \   000160   A2E7         MOV       C,0xE0 /* A   */.7
   \   000162   5009         JNC       ??AF_DataRequest_14
    582            {
    583              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   000164   7417         MOV       A,#0x17
   \   000166   12....       LCALL     ?XSTACK_DISP0_8
   \   000169   E0           MOVX      A,@DPTR
   \   00016A   4410         ORL       A,#0x10
   \   00016C   F0           MOVX      @DPTR,A
    584            }
    585          
    586            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_14:
   \   00016D   E5..         MOV       A,?V4
   \   00016F   A2E6         MOV       C,0xE0 /* A   */.6
   \   000171   5012         JNC       ??AF_DataRequest_15
    587            {
    588              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   000173   7417         MOV       A,#0x17
   \   000175   12....       LCALL     ?XSTACK_DISP0_8
   \   000178   E0           MOVX      A,@DPTR
   \   000179   4401         ORL       A,#0x1
   \   00017B   F0           MOVX      @DPTR,A
    589              mtu.aps.secure = TRUE;
   \   00017C   7401         MOV       A,#0x1
   \   00017E   12....       LCALL     ?XSTACK_DISP0_8
   \   000181   7401         MOV       A,#0x1
   \   000183   8006         SJMP      ??AF_DataRequest_16
    590            }
    591            else
    592            {
    593              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_15:
   \   000185   7401         MOV       A,#0x1
   \   000187   12....       LCALL     ?XSTACK_DISP0_8
   \   00018A   E4           CLR       A
   \                     ??AF_DataRequest_16:
   \   00018B   F0           MOVX      @DPTR,A
    594            }
    595          
    596            mtu.kvp = FALSE;
   \   00018C   85..82       MOV       DPL,?XSP + 0
   \   00018F   85..83       MOV       DPH,?XSP + 1
   \   000192   E4           CLR       A
   \   000193   F0           MOVX      @DPTR,A
   \   000194   7434         MOV       A,#0x34
   \   000196   12....       LCALL     ?XSTACK_DISP0_8
   \   000199   12....       LCALL     ??Subroutine25_0 & 0xFFFF
    597          
    598            req.transID       = *transID;
   \                     ??CrossCallReturnLabel_37:
   \   00019C   85..82       MOV       DPL,?V0
   \   00019F   F583         MOV       DPH,A
   \   0001A1   E0           MOVX      A,@DPTR
   \   0001A2   C0E0         PUSH      A
   \   0001A4   7419         MOV       A,#0x19
   \   0001A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A9   D0E0         POP       A
   \   0001AB   F0           MOVX      @DPTR,A
    599            req.srcEP         = srcEP->endPoint;
   \   0001AC   8E82         MOV       DPL,R6
   \   0001AE   8F83         MOV       DPH,R7
   \   0001B0   E0           MOVX      A,@DPTR
   \   0001B1   C0E0         PUSH      A
   \   0001B3   740B         MOV       A,#0xb
   \   0001B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B8   D0E0         POP       A
   \   0001BA   F0           MOVX      @DPTR,A
    600            req.dstEP         = dstAddr->endPoint;
   \   0001BB   85..82       MOV       DPL,?V2
   \   0001BE   85..83       MOV       DPH,?V3
   \   0001C1   A3           INC       DPTR
   \   0001C2   A3           INC       DPTR
   \   0001C3   A3           INC       DPTR
   \   0001C4   A3           INC       DPTR
   \   0001C5   A3           INC       DPTR
   \   0001C6   A3           INC       DPTR
   \   0001C7   A3           INC       DPTR
   \   0001C8   A3           INC       DPTR
   \   0001C9   A3           INC       DPTR
   \   0001CA   E0           MOVX      A,@DPTR
   \   0001CB   C0E0         PUSH      A
   \   0001CD   740C         MOV       A,#0xc
   \   0001CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D2   D0E0         POP       A
   \   0001D4   F0           MOVX      @DPTR,A
    601            req.clusterID     = cID;
   \   0001D5   742E         MOV       A,#0x2e
   \   0001D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DA   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0001DD   740F         MOV       A,#0xf
   \   0001DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E2   12....       LCALL     ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0001E5   7430         MOV       A,#0x30
   \   0001E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EA   12....       LCALL     ?Subroutine11 & 0xFFFF
    602            req.asduLen       = len;
   \                     ??CrossCallReturnLabel_15:
   \   0001ED   7413         MOV       A,#0x13
   \   0001EF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F2   E5..         MOV       A,?V2
   \   0001F4   F0           MOVX      @DPTR,A
   \   0001F5   A3           INC       DPTR
   \   0001F6   E5..         MOV       A,?V3
   \   0001F8   F0           MOVX      @DPTR,A
    603            req.asdu          = buf;
   \   0001F9   7432         MOV       A,#0x32
   \   0001FB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FE   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000201   7415         MOV       A,#0x15
   \   000203   12....       LCALL     ?XSTACK_DISP0_8
   \   000206   12....       LCALL     ??Subroutine26_0 & 0xFFFF
    604            req.discoverRoute = AF_DataRequestDiscoverRoute;//(uint8)((options & AF_DISCV_ROUTE) ? 1 : 0);
   \                     ??CrossCallReturnLabel_46:
   \   000209   90....       MOV       DPTR,#AF_DataRequestDiscoverRoute
   \   00020C   E0           MOVX      A,@DPTR
   \   00020D   C0E0         PUSH      A
   \   00020F   741A         MOV       A,#0x1a
   \   000211   12....       LCALL     ?XSTACK_DISP0_8
   \   000214   D0E0         POP       A
   \   000216   F0           MOVX      @DPTR,A
    605            req.radiusCounter = radius;
   \   000217   7436         MOV       A,#0x36
   \   000219   12....       LCALL     ?XSTACK_DISP0_8
   \   00021C   E0           MOVX      A,@DPTR
   \   00021D   C0E0         PUSH      A
   \   00021F   741B         MOV       A,#0x1b
   \   000221   12....       LCALL     ?XSTACK_DISP0_8
   \   000224   D0E0         POP       A
   \   000226   F0           MOVX      @DPTR,A
    606          #if defined ( INTER_PAN )
    607            req.dstPanId      = dstAddr->panId;
    608          
    609            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    610            {
    611              if ( len > INTERP_DataReqMTU() )
    612              {
    613                stat = afStatus_INVALID_PARAMETER;
    614              }
    615              else
    616              {
    617                stat = INTERP_DataReq( &req );
    618              }
    619            }
    620            else
    621          #endif // INTER_PAN
    622            {
    623              if (len > afDataReqMTU( &mtu ) )
   \   000227                ; Setup parameters for call to function afDataReqMTU
   \   000227   AA..         MOV       R2,?XSP + 0
   \   000229   AB..         MOV       R3,?XSP + 1
   \   00022B   12....       LCALL     `??afDataReqMTU::?relay`; Banked call to: afDataReqMTU
   \   00022E   E9           MOV       A,R1
   \   00022F   C3           CLR       C
   \   000230   95..         SUBB      A,?V2
   \   000232   E4           CLR       A
   \   000233   95..         SUBB      A,?V3
   \   000235   501C         JNC       ??AF_DataRequest_17
    624              {
    625                if (apsfSendFragmented)
   \   000237   90....       MOV       DPTR,#apsfSendFragmented
   \   00023A   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00023D   600F         JZ        ??AF_DataRequest_18
    626                {
    627                  stat = (*apsfSendFragmented)( &req );
   \   00023F                ; Setup parameters for indirect call
   \   00023F   7402         MOV       A,#0x2
   \   000241   12....       LCALL     ?XSTACK_DISP101_8
   \   000244   E0           MOVX      A,@DPTR
   \   000245   F583         MOV       DPH,A
   \   000247   8882         MOV       DPL,R0
   \   000249   12....       LCALL     ?CALL_IND
   \   00024C   800D         SJMP      ??AF_DataRequest_19
    628                }
    629                else
    630                {
    631                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_18:
   \   00024E   75..02       MOV       ?V2,#0x2
   \   000251   800B         SJMP      ??AF_DataRequest_20
    632                }
    633              }
    634              else
    635              {
    636                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_17:
   \   000253                ; Setup parameters for call to function APSDE_DataReq
   \   000253   7402         MOV       A,#0x2
   \   000255   12....       LCALL     ?XSTACK_DISP101_8
   \   000258   12....       LCALL     `??APSDE_DataReq::?relay`; Banked call to: APSDE_DataReq
   \                     ??AF_DataRequest_19:
   \   00025B   E9           MOV       A,R1
   \   00025C   F5..         MOV       ?V2,A
    637              }
    638            }
    639          
    640            /*
    641             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    642             * get added to the NWK databufs. So it will not go OTA and it will not get
    643             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    644             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    645             * message with the first in line TransSeqNumber, even on a multi message.
    646             * Also note that a reflected msg will not have its confirmation generated
    647             * here.
    648             */
    649            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    650                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_20:
   \   00025E   740A         MOV       A,#0xa
   \   000260   12....       LCALL     ?XSTACK_DISP0_8
   \   000263   E0           MOVX      A,@DPTR
   \   000264   6402         XRL       A,#0x2
   \   000266   702C         JNZ       ??AF_DataRequest_21
   \   000268                ; Setup parameters for call to function NLME_GetShortAddr
   \   000268   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00026B   8A..         MOV       ?V6,R2
   \   00026D   8B..         MOV       ?V7,R3
   \   00026F   A8..         MOV       R0,?V6
   \   000271   A9..         MOV       R1,?V7
   \   000273   7402         MOV       A,#0x2
   \   000275   12....       LCALL     ?XSTACK_DISP0_8
   \   000278   E0           MOVX      A,@DPTR
   \   000279   68           XRL       A,R0
   \   00027A   7003         JNZ       ??AF_DataRequest_22
   \   00027C   A3           INC       DPTR
   \   00027D   E0           MOVX      A,@DPTR
   \   00027E   69           XRL       A,R1
   \                     ??AF_DataRequest_22:
   \   00027F   7013         JNZ       ??AF_DataRequest_21
    651            {
    652              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   000281                ; Setup parameters for call to function afDataConfirm
   \   000281   AB..         MOV       R3,?V2
   \   000283   85..82       MOV       DPL,?V0
   \   000286   85..83       MOV       DPH,?V1
   \   000289   E0           MOVX      A,@DPTR
   \   00028A   FA           MOV       R2,A
   \   00028B   8E82         MOV       DPL,R6
   \   00028D   8F83         MOV       DPH,R7
   \   00028F   E0           MOVX      A,@DPTR
   \   000290   F9           MOV       R1,A
   \   000291   12....       LCALL     `??afDataConfirm::?relay`; Banked call to: afDataConfirm
    653            }
    654          
    655            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_21:
   \   000294   E5..         MOV       A,?V2
   \   000296   7009         JNZ       ??AF_DataRequest_23
    656            {
    657              (*transID)++;
   \   000298   85..82       MOV       DPL,?V0
   \   00029B   85..83       MOV       DPH,?V1
   \   00029E   E0           MOVX      A,@DPTR
   \   00029F   04           INC       A
   \   0002A0   F0           MOVX      @DPTR,A
    658            }
    659          
    660            return (afStatus_t)stat;
   \                     ??AF_DataRequest_23:
   \   0002A1   A9..         MOV       R1,?V2
   \                     ??AF_DataRequest_3:
   \   0002A3   741E         MOV       A,#0x1e
   \   0002A5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002A8   7F08         MOV       R7,#0x8
   \   0002AA   02....       LJMP      ?BANKED_LEAVE_XDATA
    661          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006                REQUIRE ??Subroutine27_0
   \   000006                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    662          
    663          #if defined ( ZIGBEE_SOURCE_ROUTING )
    664          /*********************************************************************
    665           * @fn      AF_DataRequestSrcRtg
    666           *
    667           * @brief   Common functionality for invoking APSDE_DataReq() for both
    668           *          SendMulti and MSG-Send.
    669           *
    670           * input parameters
    671           *
    672           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    673           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    674           * @param   cID - A valid cluster ID as specified by the Profile.
    675           * @param   len - Number of bytes of data pointed to by next param.
    676           * @param  *buf - A pointer to the data bytes to send.
    677           * @param  *transID - A pointer to a byte which can be modified and which will
    678           *                    be used as the transaction sequence number of the msg.
    679           * @param   options - Valid bit mask of Tx options.
    680           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    681           * @param   relayCnt - Number of devices in the relay list
    682           * @param   pRelayList - Pointer to the relay list
    683           *
    684           * output parameters
    685           *
    686           * @param  *transID - Incremented by one if the return value is success.
    687           *
    688           * @return  afStatus_t - See previous definition of afStatus_... types.
    689           */
    690          
    691          afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
    692                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    693                                     uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
    694          {
    695            uint8 status;
    696            
    697            /* Add the source route to the source routing table */
    698            status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt, 
    699                                                   pRelayList );
    700          
    701            if( status == RTG_SUCCESS)
    702            {
    703              /* Call AF_DataRequest to send the data */
    704              status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
    705            }
    706            else if( status == RTG_INVALID_PATH )
    707            {
    708              /* The source route relay count is exceeding the network limit */
    709              status = afStatus_INVALID_PARAMETER;
    710            }
    711            else
    712            {
    713              /* The guaranteed adding entry fails due to memory failure */
    714              status = afStatus_MEM_FAIL;
    715            }
    716            return status;
    717          }
    718          
    719          #endif
    720          
    721          /*********************************************************************
    722           * @fn      afFindEndPointDescList
    723           *
    724           * @brief   Find the endpoint description entry from the endpoint
    725           *          number.
    726           *
    727           * @param   EndPoint - Application Endpoint to look for
    728           *
    729           * @return  the address to the endpoint/interface description entry
    730           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    731          static epList_t *afFindEndPointDescList( byte EndPoint )
   \                     afFindEndPointDescList:
    732          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    733            epList_t *epSearch;
    734          
    735            // Start at the beginning
    736            epSearch = epList;
   \   000004   90....       MOV       DPTR,#epList
   \   000007   8009         SJMP      ??afFindEndPointDescList_0
    737          
    738            // Look through the list until the end
    739            while ( epSearch )
    740            {
    741              // Is there a match?
    742              if ( epSearch->epDesc->endPoint == EndPoint )
    743              {
    744                return ( epSearch );
    745              }
    746              else
    747                epSearch = epSearch->nextDesc;  // Next entry
   \                     ??afFindEndPointDescList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \                     ??afFindEndPointDescList_0:
   \   000012   12....       LCALL     ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000015   EA           MOV       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   600C         JZ        ??afFindEndPointDescList_2
   \   000019   8A82         MOV       DPL,R2
   \   00001B   8B83         MOV       DPH,R3
   \   00001D   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000020   69           XRL       A,R1
   \   000021   70E6         JNZ       ??afFindEndPointDescList_1
   \   000023   8004         SJMP      ??afFindEndPointDescList_3
    748            }
    749          
    750            return ( (epList_t *)NULL );
   \                     ??afFindEndPointDescList_2:
   \   000025   7A00         MOV       R2,#0x0
   \   000027   7B00         MOV       R3,#0x0
   \                     ??afFindEndPointDescList_3:
   \   000029   02....       LJMP      ?Subroutine0 & 0xFFFF
    751          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000003   22           RET
    752          
    753          /*********************************************************************
    754           * @fn      afFindEndPointDesc
    755           *
    756           * @brief   Find the endpoint description entry from the endpoint
    757           *          number.
    758           *
    759           * @param   EndPoint - Application Endpoint to look for
    760           *
    761           * @return  the address to the endpoint/interface description entry
    762           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    763          endPointDesc_t *afFindEndPointDesc( byte EndPoint )
   \                     afFindEndPointDesc:
    764          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    765            epList_t *epSearch;
    766          
    767            // Look for the endpoint
    768            epSearch = afFindEndPointDescList( EndPoint );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL     ?Subroutine19 & 0xFFFF
    769          
    770            if ( epSearch )
   \                     ??CrossCallReturnLabel_26:
   \   000008   6005         JZ        ??afFindEndPointDesc_0
    771              return ( epSearch->epDesc );
   \   00000A   12....       LCALL     ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00000D   8004         SJMP      ??afFindEndPointDesc_1
    772            else
    773              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_0:
   \   00000F   7A00         MOV       R2,#0x0
   \   000011   7B00         MOV       R3,#0x0
   \                     ??afFindEndPointDesc_1:
   \   000013   02....       LJMP      ?Subroutine2 & 0xFFFF
    774          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   E582         MOV       A,DPL
   \   000009   4583         ORL       A,DPH
   \   00000B   22           RET
    775          
    776          /*********************************************************************
    777           * @fn      afFindSimpleDesc
    778           *
    779           * @brief   Find the Simple Descriptor from the endpoint number.
    780           *
    781           * @param   EP - Application Endpoint to look for.
    782           *
    783           * @return  Non-zero to indicate that the descriptor memory must be freed.
    784           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    785          byte afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, byte EP )
   \                     afFindSimpleDesc:
    786          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V0,R1
    787            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000E   8A..         MOV       ?V2,R2
   \   000010   8B..         MOV       ?V3,R3
   \   000012   AC..         MOV       R4,?V2
   \   000014   AD..         MOV       R5,?V3
    788            byte rtrn = FALSE;
   \   000016   7900         MOV       R1,#0x0
    789          
    790            if ( epItem )
   \   000018   EA           MOV       A,R2
   \   000019   4D           ORL       A,R5
   \   00001A   603B         JZ        ??afFindSimpleDesc_0
    791            {
    792              if ( epItem->pfnDescCB )
   \   00001C   8A82         MOV       DPL,R2
   \   00001E   8B83         MOV       DPH,R3
   \   000020   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000023   E582         MOV       A,DPL
   \   000025   4583         ORL       A,DPH
   \   000027   6013         JZ        ??afFindSimpleDesc_1
    793              {
    794                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   000029                ; Setup parameters for indirect call
   \   000029   AA..         MOV       R2,?V0
   \   00002B   09           INC       R1
   \   00002C   12....       LCALL     ?CALL_IND
   \   00002F   8E82         MOV       DPL,R6
   \   000031   8F83         MOV       DPH,R7
   \   000033   EA           MOV       A,R2
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   EB           MOV       A,R3
   \   000037   F0           MOVX      @DPTR,A
    795                rtrn = TRUE;
   \   000038   7901         MOV       R1,#0x1
   \   00003A   8023         SJMP      ??afFindSimpleDesc_2
    796              }
    797              else
    798              {
    799                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_1:
   \   00003C   8C82         MOV       DPL,R4
   \   00003E   8B83         MOV       DPH,R3
   \   000040   12....       LCALL     ??Subroutine30_0 & 0xFFFF
    800              }
    801            }
   \                     ??CrossCallReturnLabel_67:
   \   000043   F583         MOV       DPH,A
   \   000045   8882         MOV       DPL,R0
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   12....       LCALL     ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00004D   8E82         MOV       DPL,R6
   \   00004F   8F83         MOV       DPH,R7
   \   000051   EA           MOV       A,R2
   \   000052   F0           MOVX      @DPTR,A
   \   000053   A3           INC       DPTR
   \   000054   EB           MOV       A,R3
   \   000055   8007         SJMP      ??afFindSimpleDesc_3
    802            else
    803            {
    804              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_0:
   \   000057   8E82         MOV       DPL,R6
   \   000059   8F83         MOV       DPH,R7
   \   00005B   E4           CLR       A
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   A3           INC       DPTR
   \                     ??afFindSimpleDesc_3:
   \   00005E   F0           MOVX      @DPTR,A
    805            }
    806          
    807            return rtrn;
   \                     ??afFindSimpleDesc_2:
   \   00005F   02....       LJMP      ?Subroutine1 & 0xFFFF
    808          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FA           MOV       R2,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   8A82         MOV       DPL,R2
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET
    809          
    810          /*********************************************************************
    811           * @fn      afGetDescCB
    812           *
    813           * @brief   Get the Descriptor callback function.
    814           *
    815           * @param   epDesc - pointer to the endpoint descriptor
    816           *
    817           * @return  function pointer or NULL
    818           */
    819          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
    820          {
    821            epList_t *epSearch;
    822          
    823            // Start at the beginning
    824            epSearch = epList;
    825          
    826            // Look through the list until the end
    827            while ( epSearch )
    828            {
    829              // Is there a match?
    830              if ( epSearch->epDesc == epDesc )
    831              {
    832                return ( epSearch->pfnDescCB );
    833              }
    834              else
    835                epSearch = epSearch->nextDesc;  // Next entry
    836            }
    837          
    838            return ( (pDescCB)NULL );
    839          }
    840          
    841          /*********************************************************************
    842           * @fn      afDataReqMTU
    843           *
    844           * @brief   Get the Data Request MTU(Max Transport Unit).
    845           *
    846           * @param   fields - afDataReqMTU_t
    847           *
    848           * @return  uint8(MTU)
    849           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    850          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    851          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    852            uint8 len;
    853            uint8 hdr;
    854          
    855            if ( fields->kvp == TRUE )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6401         XRL       A,#0x1
   \   00000C   7004         JNZ       ??afDataReqMTU_0
    856            {
    857              hdr = AF_HDR_KVP_MAX_LEN;
   \   00000E   7E08         MOV       R6,#0x8
   \   000010   8002         SJMP      ??afDataReqMTU_1
    858            }
    859            else
    860            {
    861              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000012   7E00         MOV       R6,#0x0
    862            }
    863          
    864            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
    865          
    866            return len;
   \                     ??afDataReqMTU_1:
   \   000014                ; Setup parameters for call to function APSDE_DataReqMTU
   \   000014   A3           INC       DPTR
   \   000015   AA82         MOV       R2,DPL
   \   000017   AB83         MOV       R3,DPH
   \   000019   12....       LCALL     `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
   \   00001C   E9           MOV       A,R1
   \   00001D   C3           CLR       C
   \   00001E   9E           SUBB      A,R6
   \   00001F   F9           MOV       R1,A
   \   000020                REQUIRE ?Subroutine3
   \   000020                ; // Fall through to label ?Subroutine3
    867          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    868          
    869          /*********************************************************************
    870           * @fn      afGetMatch
    871           *
    872           * @brief   Set the allow response flag.
    873           *
    874           * @param   ep - Application Endpoint to look for
    875           * @param   action - true - allow response, false - no response
    876           *
    877           * @return  TRUE allow responses, FALSE no response
    878           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    879          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
    880          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    881            epList_t *epSearch;
    882          
    883            // Look for the endpoint
    884            epSearch = afFindEndPointDescList( ep );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL     ?Subroutine19 & 0xFFFF
    885          
    886            if ( epSearch )
   \                     ??CrossCallReturnLabel_27:
   \   000008   600B         JZ        ??afGetMatch_0
    887            {
    888              if ( epSearch->flags & eEP_AllowMatch )
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00000F   5004         JNC       ??afGetMatch_0
    889                return ( TRUE );
   \   000011   7901         MOV       R1,#0x1
   \   000013   8002         SJMP      ??afGetMatch_1
    890              else
    891                return ( FALSE );
    892            }
    893            else
    894              return ( FALSE );
   \                     ??afGetMatch_0:
   \   000015   7900         MOV       R1,#0x0
   \                     ??afGetMatch_1:
   \   000017                REQUIRE ?Subroutine2
   \   000017                ; // Fall through to label ?Subroutine2
    895          }
    896          
    897          /*********************************************************************
    898           * @fn      afSetMatch
    899           *
    900           * @brief   Set the allow response flag.
    901           *
    902           * @param   ep - Application Endpoint to look for
    903           * @param   action - true - allow response, false - no response
    904           *
    905           * @return  TRUE if success, FALSE if endpoint not found
    906           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    907          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
    908          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FF           MOV       R7,A
    909            epList_t *epSearch;
    910          
    911            // Look for the endpoint
    912            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000A   8B..         MOV       ?V1,R3
   \   00000C   A9..         MOV       R1,?V1
    913          
    914            if ( epSearch )
   \   00000E   EA           MOV       A,R2
   \   00000F   49           ORL       A,R1
   \   000010   6019         JZ        ??afSetMatch_0
    915            {
    916              if ( action )
   \   000012   EA           MOV       A,R2
   \   000013   2402         ADD       A,#0x2
   \   000015   F582         MOV       DPL,A
   \   000017   E4           CLR       A
   \   000018   39           ADDC      A,R1
   \   000019   F583         MOV       DPH,A
   \   00001B   EF           MOV       A,R7
   \   00001C   6005         JZ        ??afSetMatch_1
    917              {
    918                epSearch->flags |= eEP_AllowMatch;
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   D2E0         SETB      0xE0 /* A   */.0
   \   000021   8003         SJMP      ??afSetMatch_2
    919              }
    920              else
    921              {
    922                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_1:
   \   000023   E0           MOVX      A,@DPTR
   \   000024   C2E0         CLR       0xE0 /* A   */.0
   \                     ??afSetMatch_2:
   \   000026   F0           MOVX      @DPTR,A
    923              }
    924              return ( TRUE );
   \   000027   7901         MOV       R1,#0x1
   \   000029   8002         SJMP      ??afSetMatch_3
    925            }
    926            else
    927              return ( FALSE );
   \                     ??afSetMatch_0:
   \   00002B   7900         MOV       R1,#0x0
   \                     ??afSetMatch_3:
   \   00002D   80..         SJMP      ?Subroutine2
    928          }
    929          
    930          /*********************************************************************
    931           * @fn      afNumEndPoints
    932           *
    933           * @brief   Returns the number of endpoints defined (including 0)
    934           *
    935           * @param   none
    936           *
    937           * @return  number of endpoints
    938           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    939          byte afNumEndPoints( void )
   \                     afNumEndPoints:
    940          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    941            epList_t *epSearch;
    942            byte endpoints;
    943          
    944            // Start at the beginning
    945            epSearch = epList;
   \   000004   90....       MOV       DPTR,#epList
   \   000007   12....       LCALL     ?Subroutine23 & 0xFFFF
    946            endpoints = 0;
   \                     ??CrossCallReturnLabel_35:
   \   00000A   7900         MOV       R1,#0x0
   \   00000C   8006         SJMP      ??CrossCallReturnLabel_25
    947          
    948            while ( epSearch )
    949            {
    950              endpoints++;
   \                     ??afNumEndPoints_0:
   \   00000E   09           INC       R1
    951              epSearch = epSearch->nextDesc;
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   12....       LCALL     ?Subroutine18 & 0xFFFF
    952            }
   \                     ??CrossCallReturnLabel_25:
   \   000014   E582         MOV       A,DPL
   \   000016   4583         ORL       A,DPH
   \   000018   70F4         JNZ       ??afNumEndPoints_0
    953          
    954            return ( endpoints );
   \   00001A                REQUIRE ?Subroutine0
   \   00001A                ; // Fall through to label ?Subroutine0
    955          }
    956          
    957          /*********************************************************************
    958           * @fn      afEndPoints
    959           *
    960           * @brief   Fills in the passed in buffer with the endpoint (numbers).
    961           *          Use afNumEndPoints to find out how big a buffer to supply.
    962           *
    963           * @param   epBuf - pointer to mem used
    964           *
    965           * @return  void
    966           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    967          void afEndPoints( byte *epBuf, byte skipZDO )
   \                     afEndPoints:
    968          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    969            epList_t *epSearch;
    970            byte endPoint;
    971          
    972            // Start at the beginning
    973            epSearch = epList;
   \   000004   90....       MOV       DPTR,#epList
   \   000007   8022         SJMP      ??afEndPoints_0
    974          
    975            while ( epSearch )
    976            {
    977              endPoint = epSearch->epDesc->endPoint;
   \                     ??afEndPoints_1:
   \   000009   8C82         MOV       DPL,R4
   \   00000B   8D83         MOV       DPH,R5
   \   00000D   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000010   F8           MOV       R0,A
    978          
    979              if ( !skipZDO || endPoint != 0 )
   \   000011   E9           MOV       A,R1
   \   000012   6003         JZ        ??afEndPoints_2
   \   000014   E8           MOV       A,R0
   \   000015   600B         JZ        ??afEndPoints_3
    980                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   000017   E8           MOV       A,R0
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   AA82         MOV       R2,DPL
   \   000020   AB83         MOV       R3,DPH
    981          
    982              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   000022   8C82         MOV       DPL,R4
   \   000024   8D83         MOV       DPH,R5
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \                     ??afEndPoints_0:
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   FC           MOV       R4,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   FD           MOV       R5,A
    983            }
   \   000030   EC           MOV       A,R4
   \   000031   4D           ORL       A,R5
   \   000032   70D5         JNZ       ??afEndPoints_1
    984          }
   \   000034   80..         SJMP      ?Subroutine0
    985          
    986          /*********************************************************************
    987           * @fn      afCopyAddress
    988           *
    989           * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
    990           *          from the zAddrType_t parameter. 
    991           *
    992           * @param   epBuf - pointer to mem used
    993           *
    994           * @return  void
    995           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    996          void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
    997          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    998            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   000009   EC           MOV       A,R4
   \   00000A   2408         ADD       A,#0x8
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   3D           ADDC      A,R5
   \   00000F   F9           MOV       R1,A
   \   000010   8882         MOV       DPL,R0
   \   000012   F583         MOV       DPH,A
   \   000014   E0           MOVX      A,@DPTR
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   F0           MOVX      @DPTR,A
    999            if ( zAddr->addrMode == Addr64Bit )
   \   000022   8882         MOV       DPL,R0
   \   000024   8983         MOV       DPH,R1
   \   000026   E0           MOVX      A,@DPTR
   \   000027   6403         XRL       A,#0x3
   \   000029   7005         JNZ       ??afCopyAddress_0
   1000            {
   1001              (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   00002B                ; Setup parameters for call to function sAddrExtCpy
   \   00002B   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00002E   800E         SJMP      ??CrossCallReturnLabel_47
   1002            }
   1003            else
   1004            {
   1005              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   000030   8C82         MOV       DPL,R4
   \   000032   8D83         MOV       DPH,R5
   \   000034   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   1006            }
   \                     ??CrossCallReturnLabel_62:
   \   000037   8A82         MOV       DPL,R2
   \   000039   8B83         MOV       DPH,R3
   \   00003B   12....       LCALL     ??Subroutine26_0 & 0xFFFF
   1007          
   1008            // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
   1009            afAddr->panId = 0;
   \                     ??CrossCallReturnLabel_47:
   \   00003E   8E82         MOV       DPL,R6
   \   000040   8F83         MOV       DPH,R7
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   E4           CLR       A
   \   00004D   F0           MOVX      @DPTR,A
   \   00004E   A3           INC       DPTR
   \   00004F   F0           MOVX      @DPTR,A
   1010          }
   \   000050   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegisterExtended::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegisterExtended

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afIncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afBuildMSGIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afBuildMSGIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDescList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDescList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindSimpleDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataReqMTU::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afGetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afSetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afNumEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afNumEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afCopyAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afCopyAddress
   1011          
   1012          /*********************************************************************
   1013          *********************************************************************/
   1014          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     55   AF_DataRequest
        0     46   -> APSDE_DataReq
        0     46   -> NLME_GetShortAddr
        0     46   -> NLME_IsAddressBroadcast
        0     46   -> RTG_CheckRtStatus
        0     46   -> afDataConfirm
        0     46   -> afDataReqMTU
        0     46   -> osal_mem_free
        0     46   -> sAddrExtCpy
      1     60   afBuildMSGIncoming
        0     20   -> afCopyAddress
        0     23   -> osal_memcpy
        0     20   -> osal_msg_allocate
        0     20   -> osal_msg_send
      1     29   afCopyAddress
        0      9   -> sAddrExtCpy
      1     60   afDataConfirm
        0     14   -> afFindEndPointDesc
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
      0     55   afDataReqMTU
        0      9   -> APSDE_DataReqMTU
      3      0   afEndPoints
      0     37   afFindEndPointDesc
        0     10   -> afFindEndPointDescList
      2     27   afFindEndPointDescList
      0     12   afFindSimpleDesc
        0     12   -> afFindEndPointDescList
      0     10   afGetMatch
        0     10   -> afFindEndPointDescList
      1     45   afIncomingData
        0     37   -> afBuildMSGIncoming
        0     27   -> afFindEndPointDesc
        0     27   -> afFindEndPointDescList
        0     27   -> aps_FindGroupForEndpoint
        0     27   -> osal_mem_free
      2      0   afInit
      2      0   afNumEndPoints
      0     10   afRegister
        0     10   -> afFindEndPointDescList
        0     10   -> afRegisterExtended
      0     22   afRegisterExtended
        0     12   -> osal_mem_alloc
      0     10   afSetMatch
        0     10   -> afFindEndPointDescList


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for AF_DataRequestDiscoverRoute>
       8  ??Subroutine25_0
       6  ??Subroutine26_0
       6  ??Subroutine27_0
       1  ??Subroutine28_0
       5  ??Subroutine29_0
       5  ??Subroutine30_0
       7  ?Subroutine0
       5  ?Subroutine1
      11  ?Subroutine10
       8  ?Subroutine11
       6  ?Subroutine12
      12  ?Subroutine13
       7  ?Subroutine14
      10  ?Subroutine15
       4  ?Subroutine16
       9  ?Subroutine17
      12  ?Subroutine18
      12  ?Subroutine19
       5  ?Subroutine2
      10  ?Subroutine20
       8  ?Subroutine21
      10  ?Subroutine22
       9  ?Subroutine23
       3  ?Subroutine24
       5  ?Subroutine3
       5  ?Subroutine4
       6  ?Subroutine5
       7  ?Subroutine6
       9  ?Subroutine7
      18  ?Subroutine8
       6  ?Subroutine9
     685  AF_DataRequest
       6  AF_DataRequest::?relay
       1  AF_DataRequestDiscoverRoute
     439  afBuildMSGIncoming
       6  afBuildMSGIncoming::?relay
      83  afCopyAddress
       6  afCopyAddress::?relay
      70  afDataConfirm
       6  afDataConfirm::?relay
      32  afDataReqMTU
       6  afDataReqMTU::?relay
      54  afEndPoints
       6  afEndPoints::?relay
      22  afFindEndPointDesc
       6  afFindEndPointDesc::?relay
      44  afFindEndPointDescList
       6  afFindEndPointDescList::?relay
      98  afFindSimpleDesc
       6  afFindSimpleDesc::?relay
      23  afGetMatch
       6  afGetMatch::?relay
     406  afIncomingData
       6  afIncomingData::?relay
      14  afInit
       6  afInit::?relay
      26  afNumEndPoints
       6  afNumEndPoints::?relay
      50  afRegister
       6  afRegister::?relay
      97  afRegisterExtended
       6  afRegisterExtended::?relay
      47  afSetMatch
       6  afSetMatch::?relay
       2  epList

 
 2 425 bytes in segment BANKED_CODE
    96 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
    97 bytes of CODE     memory
 2 425 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: none
