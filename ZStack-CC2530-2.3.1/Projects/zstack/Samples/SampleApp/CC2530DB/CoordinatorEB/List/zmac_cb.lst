###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               12/Sep/2018  03:56:57
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.20
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\zmac\f8w\zmac_cb.c
#    Command line       =  
#        -f C:\Users\ANANDA~1\AppData\Local\Temp\EW6202.tmp ("C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\zmac\f8w\zmac_cb.c"
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\zmac_cb.lst
#    Object file        =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\zmac_cb.r51
#
###############################################################################

C:\Users\Ananda Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\zmac\f8w\zmac_cb.c
      1          /**************************************************************************************************
      2            Filename:       zmac_cb.c
      3            Revised:        $Date: 2010-05-18 18:52:47 -0700 (Tue, 18 May 2010) $
      4            Revision:       $Revision: 22541 $
      5          
      6            Description:    This file contains the NWK functions that the ZMAC calls
      7          
      8          
      9            Copyright 2005-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /********************************************************************************************************
     41           *                                               INCLUDES
     42           ********************************************************************************************************/
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "ZMAC.h"
     47          #include "MT_MAC.h"
     48          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     49          
     50          #if !defined NONWK
     51          #include "nwk.h"
     52          #include "nwk_bufs.h"
     53          #include "ZGlobals.h"
     54          #endif
     55          
     56          #if defined( MACSIM )
     57            #include "mac_sim.h"
     58          #endif
     59          
     60          #include "mac_main.h"
     61          extern void *ZMac_ScanBuf;
     62          
     63          /********************************************************************************************************
     64           *                                               CONSTANTS
     65           ********************************************************************************************************/
     66          
     67          #if !defined NONWK
     68          /* Lookup table for size of structures. Must match with the order of MAC callback events */

   \                                 In  segment CODE_C, align 1
     69          const uint8 CODE zmacCBSizeTable [] = {
   \                     zmacCBSizeTable:
   \   000000   00           DB 0
   \   000001   16           DB 22
   \   000002   0F           DB 15
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   0B           DB 11
   \   000006   15           DB 21
   \   000007   0B           DB 11
   \   000008   02           DB 2
   \   000009   00           DB 0
   \   00000A   02           DB 2
   \   00000B   22           DB 34
   \   00000C   0F           DB 15
   \   00000D   32           DB 50
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   06           DB 6
     70            0,
     71            sizeof(ZMacAssociateInd_t),       // MAC_MLME_ASSOCIATE_IND      1   Associate indication
     72            sizeof(ZMacAssociateCnf_t),       // MAC_MLME_ASSOCIATE_CNF      2   Associate confirm
     73            0,                                // MAC_MLME_DISASSOCIATE_IND   3   Disassociate indication
     74            0,                                // MAC_MLME_DISASSOCIATE_CNF   4   Disassociate confirm
     75            sizeof(macMlmeBeaconNotifyInd_t), // MAC_MLME_BEACON_NOTIFY_IND  5   con notify indication
     76            sizeof(ZMacOrphanInd_t),          // MAC_MLME_ORPHAN_IND         6   Orphan indication
     77            sizeof(ZMacScanCnf_t),            // MAC_MLME_SCAN_CNF           7   Scan confirm
     78            sizeof(ZMacStartCnf_t),           // MAC_MLME_START_CNF          8   Start confirm
     79            0,                                // MAC_MLME_SYNC_LOSS_IND      9   Sync loss indication
     80            sizeof(ZMacPollCnf_t),            // MAC_MLME_POLL_CNF           10  Poll confirm
     81            sizeof(ZMacCommStatusInd_t),      // MAC_MLME_COMM_STATUS_IND    11  Comm status indication
     82            sizeof(ZMacDataCnf_t),            // MAC_MCPS_DATA_CNF           12  Data confirm
     83            sizeof(macMcpsDataInd_t),         // MAC_MCPS_DATA_IND           13  Data indication
     84            0,                                // MAC_MCPS_PURGE_CNF          14  Purge confirm
     85            0,                                // MAC_PWR_ON_CNF              15  Power on confirm
     86            sizeof(ZMacPollInd_t)             // MAC_MLME_POLL_IND           16  Poll indication
     87          };
     88          #endif /* !defined NONWK */
     89          
     90          /********************************************************************************************************
     91           *                                               LOCALS
     92           ********************************************************************************************************/
     93          
     94          /* LQI Adjustment Mode */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          static ZMacLqiAdjust_t lqiAdjMode = LQI_ADJ_OFF;
   \                     lqiAdjMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     96          
     97          /* LQI Adjustment Function */
     98          static void ZMacLqiAdjust( uint8 corr, uint8* lqi );
     99          
    100          /*********************************************************************
    101           * ZMAC Function Pointers
    102           */
    103          
    104          /*
    105           * ZMac Application callback function. This function will be called
    106           * for every MAC message that is received over-the-air or generated
    107           * locally by MAC for the application.
    108           *
    109           * The callback function should return TRUE if it has handled the
    110           * MAC message and no further action should be taken with it. It
    111           * should return FALSE if it has not handled the MAC message and
    112           * normal processing should take place.
    113           *
    114           * NOTE: The processing in this function should be kept to the
    115           *       minimum.
    116           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          uint8 (*pZMac_AppCallback)( uint8 *msgPtr ) = (void*)NULL;
   \                     pZMac_AppCallback:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    118          
    119          
    120          /*********************************************************************
    121           * ZMAC Functions
    122           */
    123          
    124          /**************************************************************************************************
    125           * @fn       MAC_CbackEvent()
    126           *
    127           * @brief    convert MAC data confirm and indication to ZMac and send to NWK
    128           *
    129           * @param    pData - pointer to macCbackEvent_t
    130           *
    131           * @return   none
    132           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    133          void MAC_CbackEvent(macCbackEvent_t *pData)
   \                     MAC_CbackEvent:
    134          #ifndef MT_MAC_CB_FUNC
    135          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EA           MOV       A,R2
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EB           MOV       A,R3
   \   000014   F0           MOVX      @DPTR,A
    136          #if !defined NONWK
    137            uint8 event = pData->hdr.event;
   \   000015   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V2,A
    138            uint16 tmp = zmacCBSizeTable[event];
   \   00001B   F8           MOV       R0,A
   \   00001C   74..         MOV       A,#zmacCBSizeTable & 0xff
   \   00001E   28           ADD       A,R0
   \   00001F   F582         MOV       DPL,A
   \   000021   E4           CLR       A
   \   000022   34..         ADDC      A,#(zmacCBSizeTable >> 8) & 0xff
   \   000024   F583         MOV       DPH,A
   \   000026   E4           CLR       A
   \   000027   93           MOVC      A,@A+DPTR
   \   000028   F5..         MOV       ?V0,A
   \   00002A   7402         MOV       A,#0x2
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   E5..         MOV       A,?V0
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   E4           CLR       A
   \   000034   F0           MOVX      @DPTR,A
    139            macCbackEvent_t *msgPtr;
    140          
    141            /* If the Network layer will handle a new MAC callback, a non-zero value must be entered in the
    142             * corresponding location in the zmacCBSizeTable[] - thus the table acts as "should handle"?
    143             */
    144            if (tmp == 0)
   \   000035   7402         MOV       A,#0x2
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   7003         JNZ       $+5
   \   00003D   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    145            {
    146              return;
    147            }
    148          
    149            // MAC_MCPS_DATA_IND is very special - it is the only event where the MAC does not free *pData.
    150            if ( event == MAC_MCPS_DATA_IND )
   \   000040   740D         MOV       A,#0xd
   \   000042   68           XRL       A,R0
   \   000043   7045         JNZ       ??MAC_CbackEvent_1
    151            {
    152              MAC_MlmeGetReq( MAC_SHORT_ADDRESS, &tmp );
   \   000045                ; Setup parameters for call to function MAC_MlmeGetReq
   \   000045   7402         MOV       A,#0x2
   \   000047   12....       LCALL     ?XSTACK_DISP101_8
   \   00004A   7953         MOV       R1,#0x53
   \   00004C   12....       LCALL     `??MAC_MlmeGetReq::?relay`; Banked call to: MAC_MlmeGetReq
    153              if ((tmp == INVALID_NODE_ADDR) || (tmp == NWK_BROADCAST_SHORTADDR_DEVALL) ||
    154                  (pData->dataInd.msdu.len == 0))
   \   00004F   7402         MOV       A,#0x2
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   E0           MOVX      A,@DPTR
   \   000055   64FE         XRL       A,#0xfe
   \   000057   7003         JNZ       ??MAC_CbackEvent_2
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   F4           CPL       A
   \                     ??MAC_CbackEvent_2:
   \   00005C   7003         JNZ       $+5
   \   00005E   02....       LJMP      ??MAC_CbackEvent_3 & 0xFFFF
   \   000061   7402         MOV       A,#0x2
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   E0           MOVX      A,@DPTR
   \   000067   F4           CPL       A
   \   000068   7003         JNZ       ??MAC_CbackEvent_4
   \   00006A   A3           INC       DPTR
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   F4           CPL       A
   \                     ??MAC_CbackEvent_4:
   \   00006D   7003         JNZ       $+5
   \   00006F   02....       LJMP      ??MAC_CbackEvent_3 & 0xFFFF
   \   000072   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000075   A3           INC       DPTR
   \   000076   E0           MOVX      A,@DPTR
   \   000077   7003         JNZ       $+5
   \   000079   02....       LJMP      ??MAC_CbackEvent_3 & 0xFFFF
    155              {
    156                mac_msg_deallocate( (uint8 **)&pData );
    157                return;
    158              }
    159              msgPtr = pData;
   \   00007C   85..82       MOV       DPL,?XSP + 0
   \   00007F   85..83       MOV       DPH,?XSP + 1
   \   000082   E0           MOVX      A,@DPTR
   \   000083   FE           MOV       R6,A
   \   000084   A3           INC       DPTR
   \   000085   E0           MOVX      A,@DPTR
   \   000086   FF           MOV       R7,A
   \   000087   02....       LJMP      ??MAC_CbackEvent_5 & 0xFFFF
    160            }
    161            else
    162            {
    163              if (event == MAC_MLME_BEACON_NOTIFY_IND )
   \                     ??MAC_CbackEvent_1:
   \   00008A   7405         MOV       A,#0x5
   \   00008C   68           XRL       A,R0
   \   00008D   7015         JNZ       ??MAC_CbackEvent_6
    164              {
    165                tmp += sizeof(macPanDesc_t) + pData->beaconNotifyInd.sduLength;
   \   00008F   85..82       MOV       DPL,?XSP + 0
   \   000092   85..83       MOV       DPH,?XSP + 1
   \   000095   E0           MOVX      A,@DPTR
   \   000096   F8           MOV       R0,A
   \   000097   12....       LCALL     ?Subroutine4 & 0xFFFF
    166              }
   \                     ??CrossCallReturnLabel_6:
   \   00009A   7900         MOV       R1,#0x0
   \   00009C   2421         ADD       A,#0x21
   \   00009E   F8           MOV       R0,A
   \   00009F   502F         JNC       ??MAC_CbackEvent_7
   \   0000A1   09           INC       R1
   \   0000A2   802C         SJMP      ??MAC_CbackEvent_7
    167              else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_6:
   \   0000A4   7407         MOV       A,#0x7
   \   0000A6   68           XRL       A,R0
   \   0000A7   7033         JNZ       ??MAC_CbackEvent_8
    168              {
    169                if (pData->scanCnf.scanType == ZMAC_ED_SCAN)
   \   0000A9   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   700F         JNZ       ??MAC_CbackEvent_9
    170                {
    171                  tmp += ZMAC_ED_SCAN_MAXCHANNELS;
   \   0000B1   7402         MOV       A,#0x2
   \   0000B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   241B         ADD       A,#0x1b
   \   0000B9   F0           MOVX      @DPTR,A
   \   0000BA   A3           INC       DPTR
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   3400         ADDC      A,#0x0
   \   0000BE   801B         SJMP      ??MAC_CbackEvent_10
    172                }
    173                else
    174                {
    175                  tmp += sizeof( ZMacPanDesc_t ) * pData->scanCnf.resultListSize;
   \                     ??MAC_CbackEvent_9:
   \   0000C0   85..82       MOV       DPL,?XSP + 0
   \   0000C3   85..83       MOV       DPH,?XSP + 1
   \   0000C6   12....       LCALL     ?Subroutine4 & 0xFFFF
    176                }
    177              }
   \                     ??CrossCallReturnLabel_7:
   \   0000C9   75F021       MOV       B,#0x21
   \   0000CC   A4           MUL       AB
   \   0000CD   F8           MOV       R0,A
   \   0000CE   A9F0         MOV       R1,B
   \                     ??MAC_CbackEvent_7:
   \   0000D0   7402         MOV       A,#0x2
   \   0000D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   28           ADD       A,R0
   \   0000D7   F0           MOVX      @DPTR,A
   \   0000D8   A3           INC       DPTR
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   39           ADDC      A,R1
   \                     ??MAC_CbackEvent_10:
   \   0000DB   F0           MOVX      @DPTR,A
    178          
    179              if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \                     ??MAC_CbackEvent_8:
   \   0000DC                ; Setup parameters for call to function osal_msg_allocate
   \   0000DC   7402         MOV       A,#0x2
   \   0000DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E1   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000E4   7037         JNZ       ??MAC_CbackEvent_11
    180              {
    181                // Not enough memory. If data confirm - try again
    182                if ( event == MAC_MCPS_DATA_CNF )
   \   0000E6   740C         MOV       A,#0xc
   \   0000E8   65..         XRL       A,?V2
   \   0000EA   6003         JZ        $+5
   \   0000EC   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    183                {
    184                  halIntState_t intState;
    185          
    186                  // This is not normally deallocated here because the pZMac_AppCallback()
    187                  // application may need it.
    188                  HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   0000EF   A2AF         MOV       C,0xa8.7
   \   0000F1   E4           CLR       A
   \   0000F2   33           RLC       A
   \   0000F3   F5..         MOV       ?V3,A
   \   0000F5   C2AF         CLR       0xa8.7
    189          
    190                  mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   0000F7                ; Setup parameters for call to function mac_msg_deallocate
   \   0000F7   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000FA   12....       LCALL     `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    191                  if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \   0000FD                ; Setup parameters for call to function osal_msg_allocate
   \   0000FD   7402         MOV       A,#0x2
   \   0000FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000102   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000105   7009         JNZ       ??MAC_CbackEvent_12
    192                  {
    193                    // Still no allocation, something is wrong
    194                    HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   000107   E5..         MOV       A,?V3
   \   000109   A2E0         MOV       C,0xE0 /* A   */.0
   \   00010B   92AF         MOV       0xa8.7,C
    195                    return;
   \   00010D   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    196                  }
    197                  HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??MAC_CbackEvent_12:
   \   000110   E5..         MOV       A,?V3
   \   000112   A2E0         MOV       C,0xE0 /* A   */.0
   \   000114   92AF         MOV       0xa8.7,C
    198                  pData->dataCnf.pDataReq = NULL;
   \   000116   12....       LCALL     ?Subroutine3 & 0xFFFF
    199                }
    200                else
    201                {
    202                  // This message is dropped
    203                  return;
    204                }
    205              }
   \                     ??CrossCallReturnLabel_5:
   \   000119   E4           CLR       A
   \   00011A   F0           MOVX      @DPTR,A
   \   00011B   A3           INC       DPTR
   \   00011C   F0           MOVX      @DPTR,A
    206              osal_memcpy(msgPtr, pData, zmacCBSizeTable[event]);
   \                     ??MAC_CbackEvent_11:
   \   00011D                ; Setup parameters for call to function osal_memcpy
   \   00011D   85..82       MOV       DPL,?XSP + 0
   \   000120   85..83       MOV       DPH,?XSP + 1
   \   000123   E0           MOVX      A,@DPTR
   \   000124   F5..         MOV       ?V4,A
   \   000126   A3           INC       DPTR
   \   000127   E0           MOVX      A,@DPTR
   \   000128   F5..         MOV       ?V5,A
   \   00012A   75..00       MOV       ?V6,#0x0
   \   00012D   78..         MOV       R0,#?V4
   \   00012F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000132   AC..         MOV       R4,?V0
   \   000134   7D00         MOV       R5,#0x0
   \   000136   EE           MOV       A,R6
   \   000137   FA           MOV       R2,A
   \   000138   EF           MOV       A,R7
   \   000139   FB           MOV       R3,A
   \   00013A   12....       LCALL     ??Subroutine12_0 & 0xFFFF
    207            }
   \                     ??CrossCallReturnLabel_20:
   \   00013D   12....       LCALL     ?DEALLOC_XSTACK8
    208          
    209            if ( event == MAC_MLME_BEACON_NOTIFY_IND )
   \   000140   EE           MOV       A,R6
   \   000141   2409         ADD       A,#0x9
   \   000143   F5..         MOV       ?V8,A
   \   000145   E4           CLR       A
   \   000146   3F           ADDC      A,R7
   \   000147   F5..         MOV       ?V9,A
   \   000149   EE           MOV       A,R6
   \   00014A   2408         ADD       A,#0x8
   \   00014C   F5..         MOV       ?V12,A
   \   00014E   E4           CLR       A
   \   00014F   3F           ADDC      A,R7
   \   000150   F5..         MOV       ?V13,A
   \   000152   7405         MOV       A,#0x5
   \   000154   65..         XRL       A,?V2
   \   000156   706F         JNZ       ??MAC_CbackEvent_13
    210            {
    211              macMlmeBeaconNotifyInd_t *pBeacon = (macMlmeBeaconNotifyInd_t*)msgPtr;
    212          
    213              osal_memcpy(pBeacon+1, pBeacon->pPanDesc, sizeof(macPanDesc_t));
   \   000158   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00015B   EE           MOV       A,R6
   \   00015C   2403         ADD       A,#0x3
   \   00015E   F5..         MOV       ?V10,A
   \   000160   E4           CLR       A
   \   000161   3F           ADDC      A,R7
   \   000162   F5..         MOV       ?V11,A
   \   000164                ; Setup parameters for call to function osal_memcpy
   \   000164   85..82       MOV       DPL,?V10
   \   000167   F583         MOV       DPH,A
   \   000169   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00016C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00016F   7C21         MOV       R4,#0x21
   \   000171   7D00         MOV       R5,#0x0
   \   000173   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000176   12....       LCALL     ?DEALLOC_XSTACK8
    214              pBeacon->pPanDesc = (macPanDesc_t *)(pBeacon+1);
   \   000179   85..82       MOV       DPL,?V10
   \   00017C   85..83       MOV       DPH,?V11
   \   00017F   E5..         MOV       A,?V0
   \   000181   F0           MOVX      @DPTR,A
   \   000182   A3           INC       DPTR
   \   000183   E5..         MOV       A,?V1
   \   000185   F0           MOVX      @DPTR,A
    215              osal_memcpy(pBeacon->pPanDesc+1, pBeacon->pSdu, pBeacon->sduLength);
   \   000186                ; Setup parameters for call to function osal_memcpy
   \   000186   85..82       MOV       DPL,?V8
   \   000189   85..83       MOV       DPH,?V9
   \   00018C   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00018F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000192   85..82       MOV       DPL,?V12
   \   000195   85..83       MOV       DPH,?V13
   \   000198   E0           MOVX      A,@DPTR
   \   000199   FC           MOV       R4,A
   \   00019A   7D00         MOV       R5,#0x0
   \   00019C   E5..         MOV       A,?V0
   \   00019E   2421         ADD       A,#0x21
   \   0001A0   FA           MOV       R2,A
   \   0001A1   E4           CLR       A
   \   0001A2   35..         ADDC      A,?V1
   \   0001A4   FB           MOV       R3,A
   \   0001A5   12....       LCALL     ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0001A8   12....       LCALL     ?DEALLOC_XSTACK8
    216              pBeacon->pSdu = (uint8 *)(pBeacon->pPanDesc+1);
   \   0001AB   85..82       MOV       DPL,?V10
   \   0001AE   85..83       MOV       DPH,?V11
   \   0001B1   E0           MOVX      A,@DPTR
   \   0001B2   2421         ADD       A,#0x21
   \   0001B4   F8           MOV       R0,A
   \   0001B5   A3           INC       DPTR
   \   0001B6   E0           MOVX      A,@DPTR
   \   0001B7   3400         ADDC      A,#0x0
   \   0001B9   F9           MOV       R1,A
   \   0001BA   85..82       MOV       DPL,?V8
   \   0001BD   85..83       MOV       DPH,?V9
   \   0001C0   E8           MOV       A,R0
   \   0001C1   F0           MOVX      @DPTR,A
   \   0001C2   A3           INC       DPTR
   \   0001C3   E9           MOV       A,R1
   \   0001C4   F0           MOVX      @DPTR,A
   \   0001C5   8071         SJMP      ??MAC_CbackEvent_5
    217            }
    218            else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_13:
   \   0001C7   7407         MOV       A,#0x7
   \   0001C9   65..         XRL       A,?V2
   \   0001CB   706B         JNZ       ??MAC_CbackEvent_5
    219            {
    220              macMlmeScanCnf_t *pScan = (macMlmeScanCnf_t*)msgPtr;
    221          
    222              if (ZMac_ScanBuf != NULL)
   \   0001CD   90....       MOV       DPTR,#ZMac_ScanBuf
   \   0001D0   12....       LCALL     ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0001D3   F9           MOV       R1,A
   \   0001D4   E8           MOV       A,R0
   \   0001D5   49           ORL       A,R1
   \   0001D6   6060         JZ        ??MAC_CbackEvent_5
    223              {
    224                void *pTmp = ZMac_ScanBuf;
   \   0001D8   90....       MOV       DPTR,#ZMac_ScanBuf
   \   0001DB   E0           MOVX      A,@DPTR
   \   0001DC   F5..         MOV       ?V10,A
   \   0001DE   A3           INC       DPTR
   \   0001DF   E0           MOVX      A,@DPTR
   \   0001E0   F5..         MOV       ?V11,A
    225                ZMac_ScanBuf = NULL;
   \   0001E2   90....       MOV       DPTR,#ZMac_ScanBuf
   \   0001E5   E4           CLR       A
   \   0001E6   F0           MOVX      @DPTR,A
   \   0001E7   A3           INC       DPTR
   \   0001E8   F0           MOVX      @DPTR,A
    226          
    227                if (pScan->scanType == ZMAC_ED_SCAN)
   \   0001E9   88..         MOV       ?V4,R0
   \   0001EB   89..         MOV       ?V5,R1
   \   0001ED   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0001F0   8E82         MOV       DPL,R6
   \   0001F2   8F83         MOV       DPH,R7
   \   0001F4   A3           INC       DPTR
   \   0001F5   A3           INC       DPTR
   \   0001F6   E0           MOVX      A,@DPTR
   \   0001F7   85..82       MOV       DPL,?V8
   \   0001FA   85..83       MOV       DPH,?V9
   \   0001FD   7012         JNZ       ??MAC_CbackEvent_14
    228                {
    229                  pScan->result.pEnergyDetect = (uint8*) (pScan + 1);
   \   0001FF   E5..         MOV       A,?V0
   \   000201   F0           MOVX      @DPTR,A
   \   000202   A3           INC       DPTR
   \   000203   E5..         MOV       A,?V1
   \   000205   F0           MOVX      @DPTR,A
    230                  osal_memcpy(pScan->result.pEnergyDetect, pTmp, ZMAC_ED_SCAN_MAXCHANNELS);
   \   000206                ; Setup parameters for call to function osal_memcpy
   \   000206   78..         MOV       R0,#?V4
   \   000208   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00020B   7C1B         MOV       R4,#0x1b
   \   00020D   7D00         MOV       R5,#0x0
   \   00020F   801A         SJMP      ??MAC_CbackEvent_15
    231                }
    232                else
    233                {
    234                  pScan->result.pPanDescriptor = (macPanDesc_t*) (pScan + 1);
   \                     ??MAC_CbackEvent_14:
   \   000211   E5..         MOV       A,?V0
   \   000213   F0           MOVX      @DPTR,A
   \   000214   A3           INC       DPTR
   \   000215   E5..         MOV       A,?V1
   \   000217   F0           MOVX      @DPTR,A
    235                  osal_memcpy(pScan + 1, pTmp, sizeof( ZMacPanDesc_t ) * pScan->resultListSize);
   \   000218                ; Setup parameters for call to function osal_memcpy
   \   000218   78..         MOV       R0,#?V4
   \   00021A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00021D   85..82       MOV       DPL,?V12
   \   000220   85..83       MOV       DPH,?V13
   \   000223   E0           MOVX      A,@DPTR
   \   000224   75F021       MOV       B,#0x21
   \   000227   A4           MUL       AB
   \   000228   FC           MOV       R4,A
   \   000229   ADF0         MOV       R5,B
    236                }
   \                     ??MAC_CbackEvent_15:
   \   00022B   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00022E   12....       LCALL     ?DEALLOC_XSTACK8
    237          
    238                osal_mem_free(pTmp);
   \   000231                ; Setup parameters for call to function osal_mem_free
   \   000231   AA..         MOV       R2,?V10
   \   000233   AB..         MOV       R3,?V11
   \   000235   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    239              }
    240            }
    241          
    242            if ( ( pZMac_AppCallback == NULL ) || ( pZMac_AppCallback( (uint8 *)msgPtr ) == FALSE ) )
   \                     ??MAC_CbackEvent_5:
   \   000238   90....       MOV       DPTR,#pZMac_AppCallback
   \   00023B   12....       LCALL     ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00023E   F9           MOV       R1,A
   \   00023F   E8           MOV       A,R0
   \   000240   49           ORL       A,R1
   \   000241   6012         JZ        ??MAC_CbackEvent_16
   \   000243                ; Setup parameters for indirect call
   \   000243   EE           MOV       A,R6
   \   000244   FA           MOV       R2,A
   \   000245   EF           MOV       A,R7
   \   000246   FB           MOV       R3,A
   \   000247   E0           MOVX      A,@DPTR
   \   000248   F583         MOV       DPH,A
   \   00024A   8882         MOV       DPL,R0
   \   00024C   12....       LCALL     ?CALL_IND
   \   00024F   E9           MOV       A,R1
   \   000250   6003         JZ        $+5
   \   000252   02....       LJMP      ??MAC_CbackEvent_17 & 0xFFFF
    243            {
    244              // Filter out non-zigbee packets
    245              if ( event == MAC_MCPS_DATA_IND )
   \                     ??MAC_CbackEvent_16:
   \   000255   740D         MOV       A,#0xd
   \   000257   65..         XRL       A,?V2
   \   000259   6003         JZ        $+5
   \   00025B   02....       LJMP      ??MAC_CbackEvent_18 & 0xFFFF
    246              {
    247                uint8 fcFrameType = (pData->dataInd.msdu.p[0] & 0x03);
    248                uint8 fcProtoVer = ((pData->dataInd.msdu.p[0] >> 2) & 0x0F);
    249                uint8 fcReserve = (pData->dataInd.msdu.p[1] & 0xE0);
   \   00025E   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000261   F9           MOV       R1,A
   \   000262   8882         MOV       DPL,R0
   \   000264   F583         MOV       DPH,A
   \   000266   A3           INC       DPTR
   \   000267   E0           MOVX      A,@DPTR
   \   000268   FA           MOV       R2,A
    250                if ( (fcFrameType > 0x01) || (fcProtoVer != _NIB.nwkProtocolVersion) || (fcReserve != 0)
    251                    || (pData->dataInd.mac.srcAddr.addrMode != SADDR_MODE_SHORT) )
   \   000269   8882         MOV       DPL,R0
   \   00026B   8983         MOV       DPH,R1
   \   00026D   E0           MOVX      A,@DPTR
   \   00026E   F8           MOV       R0,A
   \   00026F   7403         MOV       A,#0x3
   \   000271   58           ANL       A,R0
   \   000272   C3           CLR       C
   \   000273   9402         SUBB      A,#0x2
   \   000275   5074         JNC       ??MAC_CbackEvent_3
   \   000277   E8           MOV       A,R0
   \   000278   13           RRC       A
   \   000279   13           RRC       A
   \   00027A   543F         ANL       A,#0x3f
   \   00027C   540F         ANL       A,#0xf
   \   00027E   F8           MOV       R0,A
   \   00027F   90....       MOV       DPTR,#_NIB + 17
   \   000282   E0           MOVX      A,@DPTR
   \   000283   68           XRL       A,R0
   \   000284   7065         JNZ       ??MAC_CbackEvent_3
   \   000286   74E0         MOV       A,#-0x20
   \   000288   5A           ANL       A,R2
   \   000289   7060         JNZ       ??MAC_CbackEvent_3
   \   00028B   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00028E   C8           XCH       A,R0
   \   00028F   241A         ADD       A,#0x1a
   \   000291   F582         MOV       DPL,A
   \   000293   E4           CLR       A
   \   000294   38           ADDC      A,R0
   \   000295   F583         MOV       DPH,A
   \   000297   E0           MOVX      A,@DPTR
   \   000298   6402         XRL       A,#0x2
   \   00029A   6002         JZ        ??MAC_CbackEvent_19
    252                {
    253                  // Drop the message
    254                  mac_msg_deallocate( (uint8 **)&pData );
   \                     ??MAC_CbackEvent_20:
   \   00029C                ; Setup parameters for call to function mac_msg_deallocate
   \   00029C   804D         SJMP      ??MAC_CbackEvent_3
    255                  return;
    256                }
    257                else
    258                {
    259                  macDataInd_t *pInd = &msgPtr->dataInd.mac;
   \                     ??MAC_CbackEvent_19:
   \   00029E   EE           MOV       A,R6
   \   00029F   2412         ADD       A,#0x12
   \   0002A1   F8           MOV       R0,A
   \   0002A2   E4           CLR       A
   \   0002A3   3F           ADDC      A,R7
   \   0002A4   F9           MOV       R1,A
    260                  // See if LQI needs adjustment due to frame correlation
    261                  ZMacLqiAdjust( pInd->correlation, &pInd->mpduLinkQuality );
   \   0002A5                ; Setup parameters for call to function ZMacLqiAdjust
   \   0002A5   E8           MOV       A,R0
   \   0002A6   241C         ADD       A,#0x1c
   \   0002A8   FA           MOV       R2,A
   \   0002A9   E4           CLR       A
   \   0002AA   39           ADDC      A,R1
   \   0002AB   FB           MOV       R3,A
   \   0002AC   E8           MOV       A,R0
   \   0002AD   241D         ADD       A,#0x1d
   \   0002AF   F582         MOV       DPL,A
   \   0002B1   E4           CLR       A
   \   0002B2   39           ADDC      A,R1
   \   0002B3   F583         MOV       DPH,A
   \   0002B5   E0           MOVX      A,@DPTR
   \   0002B6   F9           MOV       R1,A
   \   0002B7   12....       LCALL     `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
    262          
    263                  // Look for broadcast message that has a radius of greater 1
    264                  if ( (pData->dataInd.mac.dstAddr.addr.shortAddr == 0xFFFF)
    265                         && (pData->dataInd.msdu.p[6] > 1) )
   \   0002BA   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0002BD   C8           XCH       A,R0
   \   0002BE   241B         ADD       A,#0x1b
   \   0002C0   F582         MOV       DPL,A
   \   0002C2   E4           CLR       A
   \   0002C3   38           ADDC      A,R0
   \   0002C4   F583         MOV       DPH,A
   \   0002C6   E0           MOVX      A,@DPTR
   \   0002C7   F4           CPL       A
   \   0002C8   7003         JNZ       ??MAC_CbackEvent_21
   \   0002CA   A3           INC       DPTR
   \   0002CB   E0           MOVX      A,@DPTR
   \   0002CC   F4           CPL       A
   \                     ??MAC_CbackEvent_21:
   \   0002CD   703D         JNZ       ??MAC_CbackEvent_22
   \   0002CF   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0002D2   C8           XCH       A,R0
   \   0002D3   2406         ADD       A,#0x6
   \   0002D5   F582         MOV       DPL,A
   \   0002D7   E4           CLR       A
   \   0002D8   38           ADDC      A,R0
   \   0002D9   F583         MOV       DPH,A
   \   0002DB   E0           MOVX      A,@DPTR
   \   0002DC   C3           CLR       C
   \   0002DD   9402         SUBB      A,#0x2
   \   0002DF   402B         JC        ??MAC_CbackEvent_22
    266                  {
    267                    // Send the messsage to a special broadcast queue
    268                    if ( nwk_broadcastSend( (uint8 *)msgPtr ) != SUCCESS )
   \   0002E1                ; Setup parameters for call to function nwk_broadcastSend
   \   0002E1   EE           MOV       A,R6
   \   0002E2   FA           MOV       R2,A
   \   0002E3   EF           MOV       A,R7
   \   0002E4   FB           MOV       R3,A
   \   0002E5   12....       LCALL     `??nwk_broadcastSend::?relay`; Banked call to: nwk_broadcastSend
   \   0002E8   E9           MOV       A,R1
   \   0002E9   6039         JZ        ??MAC_CbackEvent_0
    269                    {
    270                      // Drop the message, too many broadcast messages to process
    271                      mac_msg_deallocate( (uint8 **)&pData );
   \   0002EB                ; Setup parameters for call to function mac_msg_deallocate
   \                     ??MAC_CbackEvent_3:
   \   0002EB   AA..         MOV       R2,?XSP + 0
   \   0002ED   AB..         MOV       R3,?XSP + 1
   \   0002EF   8030         SJMP      ??CrossCallReturnLabel_9
    272                    }
    273                    return;
    274                  }
    275                }
    276              }
    277              else if ( event == MAC_MCPS_DATA_CNF )
   \                     ??MAC_CbackEvent_18:
   \   0002F1   740C         MOV       A,#0xc
   \   0002F3   65..         XRL       A,?V2
   \   0002F5   7015         JNZ       ??MAC_CbackEvent_22
    278              {
    279                macMcpsDataCnf_t *pCnf = &msgPtr->dataCnf;
    280                // See if LQI needs adjustment due to frame correlation
    281                ZMacLqiAdjust( pCnf->correlation, &pCnf->mpduLinkQuality );
   \   0002F7                ; Setup parameters for call to function ZMacLqiAdjust
   \   0002F7   EE           MOV       A,R6
   \   0002F8   240C         ADD       A,#0xc
   \   0002FA   FA           MOV       R2,A
   \   0002FB   E4           CLR       A
   \   0002FC   3F           ADDC      A,R7
   \   0002FD   FB           MOV       R3,A
   \   0002FE   EE           MOV       A,R6
   \   0002FF   240D         ADD       A,#0xd
   \   000301   F582         MOV       DPL,A
   \   000303   E4           CLR       A
   \   000304   3F           ADDC      A,R7
   \   000305   F583         MOV       DPH,A
   \   000307   E0           MOVX      A,@DPTR
   \   000308   F9           MOV       R1,A
   \   000309   12....       LCALL     `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
    282              }
    283          
    284              // Application hasn't already processed this message. Send it to NWK task.
    285              osal_msg_send( NWK_TaskID, (uint8 *)msgPtr );
   \                     ??MAC_CbackEvent_22:
   \   00030C                ; Setup parameters for call to function osal_msg_send
   \   00030C   EE           MOV       A,R6
   \   00030D   FA           MOV       R2,A
   \   00030E   EF           MOV       A,R7
   \   00030F   FB           MOV       R3,A
   \   000310   90....       MOV       DPTR,#NWK_TaskID
   \   000313   E0           MOVX      A,@DPTR
   \   000314   F9           MOV       R1,A
   \   000315   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    286            }
    287          
    288            if ( event == MAC_MCPS_DATA_CNF )
   \                     ??MAC_CbackEvent_17:
   \   000318   740C         MOV       A,#0xc
   \   00031A   65..         XRL       A,?V2
   \   00031C   7006         JNZ       ??MAC_CbackEvent_0
    289            {
    290              // If the application needs 'pDataReq' then we cannot free it here.
    291              // The application must free it after using it. Note that 'pDataReq'
    292              // is of macMcpsDataReq_t (and not ZMacDataReq_t) type.
    293          
    294              mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   00031E                ; Setup parameters for call to function mac_msg_deallocate
   \   00031E   12....       LCALL     ?Subroutine5 & 0xFFFF
    295            }
   \                     ??CrossCallReturnLabel_9:
   \   000321   12....       LCALL     `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    296          #endif
    297          }
   \                     ??MAC_CbackEvent_0:
   \   000324   7404         MOV       A,#0x4
   \   000326   12....       LCALL     ?DEALLOC_XSTACK8
   \   000329   7F0E         MOV       R7,#0xe
   \   00032B   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   00032E                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   EE           MOV       A,R6
   \   000001   240B         ADD       A,#0xb
   \   000003   F5..         MOV       ?V0,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F5..         MOV       ?V1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   AA..         MOV       R2,?V0
   \   000002   AB..         MOV       R3,?V1
   \   000004                REQUIRE ??Subroutine12_0
   \   000004                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   78..         MOV       R0,#?V4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   2403         ADD       A,#0x3
   \   000009   FA           MOV       R2,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   3400         ADDC      A,#0x0
   \   00000E   FB           MOV       R3,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   C8           XCH       A,R0
   \   000003   2408         ADD       A,#0x8
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000003   12....       LCALL     ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine13_0
   \   000006                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F8           MOV       R0,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F583         MOV       DPH,A
   \   00000C   8882         MOV       DPL,R0
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000008   8A..         MOV       ?V4,R2
   \   00000A   8B..         MOV       ?V5,R3
   \   00000C   AE..         MOV       R6,?V4
   \   00000E   AF..         MOV       R7,?V5
   \   000010   EA           MOV       A,R2
   \   000011   4F           ORL       A,R7
   \   000012   22           RET
    298          #else  // ifdef MT_MAC_CB_FUNC
    299          {
    300            /* Check if MT has subscribed for this callback If so, pass it as an event to MonitorTest */
    301            switch (pData->hdr.event)
    302            {
    303              case MAC_MLME_ASSOCIATE_IND:
    304                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
    305                  nwk_MTCallbackSubNwkAssociateInd ( (ZMacAssociateInd_t *)pData );
    306                break;
    307          
    308              case MAC_MLME_ASSOCIATE_CNF:
    309                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_CNF )
    310                  nwk_MTCallbackSubNwkAssociateCnf ( (ZMacAssociateCnf_t *)pData );
    311                break;
    312          
    313              case MAC_MLME_DISASSOCIATE_IND:
    314                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_IND )
    315                  nwk_MTCallbackSubNwkDisassociateInd ( (ZMacDisassociateInd_t *)pData );
    316                break;
    317          
    318              case MAC_MLME_DISASSOCIATE_CNF:
    319                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_CNF )
    320                  nwk_MTCallbackSubNwkDisassociateCnf ( (ZMacDisassociateCnf_t *)pData );
    321                break;
    322          
    323              case MAC_MLME_BEACON_NOTIFY_IND:
    324                if ( _macCallbackSub & CB_ID_NWK_BEACON_NOTIFY_IND )
    325                  nwk_MTCallbackSubNwkBeaconNotifyInd( (ZMacBeaconNotifyInd_t *)pData );
    326                break;
    327          
    328              case MAC_MLME_ORPHAN_IND:
    329                if ( _macCallbackSub & CB_ID_NWK_ORPHAN_IND )
    330                  nwk_MTCallbackSubNwkOrphanInd( (ZMacOrphanInd_t *) pData );
    331                break;
    332          
    333              case MAC_MLME_SCAN_CNF:
    334                if ( _macCallbackSub & CB_ID_NWK_SCAN_CNF )
    335                {
    336                  pData->scanCnf.result.pEnergyDetect = ZMac_ScanBuf;
    337                  nwk_MTCallbackSubNwkScanCnf ( (ZMacScanCnf_t *) pData );
    338                }
    339          
    340                if (ZMac_ScanBuf != NULL)
    341                {
    342                  void *pTmp = ZMac_ScanBuf;
    343                  ZMac_ScanBuf = NULL;
    344                  osal_mem_free(pTmp);
    345                }
    346                break;
    347          
    348              case MAC_MLME_START_CNF:
    349                if ( _macCallbackSub & CB_ID_NWK_START_CNF )
    350                  nwk_MTCallbackSubNwkStartCnf ( pData->hdr.status );
    351                break;
    352          
    353              case MAC_MLME_SYNC_LOSS_IND:
    354                if ( _macCallbackSub & CB_ID_NWK_SYNC_LOSS_IND )
    355                 nwk_MTCallbackSubNwkSyncLossInd( (ZMacSyncLossInd_t *) pData );
    356                break;
    357          
    358              case MAC_MLME_POLL_CNF:
    359                if ( _macCallbackSub & CB_ID_NWK_POLL_CNF )
    360                   nwk_MTCallbackSubNwkPollCnf( pData->hdr.status );
    361                break;
    362          
    363              case MAC_MLME_COMM_STATUS_IND:
    364                if ( _macCallbackSub & CB_ID_NWK_COMM_STATUS_IND )
    365                  nwk_MTCallbackSubCommStatusInd ( (ZMacCommStatusInd_t *) pData );
    366                break;
    367          
    368              case MAC_MCPS_DATA_CNF:
    369                mac_msg_deallocate((uint8**)&pData->dataCnf.pDataReq);
    370          
    371                if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
    372                  nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
    373                break;
    374          
    375              case MAC_MCPS_DATA_IND:
    376                  {
    377                    /*
    378                       Data Ind is unconventional: to save an alloc/copy, reuse the MAC
    379                       buffer and re-organize the contents into ZMAC format.
    380                    */
    381                    ZMacDataInd_t *pDataInd = (ZMacDataInd_t *) pData;
    382                    uint8 event, status, len, *msdu;
    383          
    384                    /* Store parameters */
    385                    event = pData->hdr.event;
    386                    status = pData->hdr.status;
    387                    len = pData->dataInd.msdu.len;
    388                    msdu = pData->dataInd.msdu.p;
    389          
    390                    /* Copy header */
    391                    osal_memcpy(&pDataInd->SrcAddr, &pData->dataInd.mac, sizeof(ZMacDataInd_t) - sizeof(ZMacEventHdr_t));
    392          
    393                    /* Security - set to zero for now*/
    394                    pDataInd->Sec.SecurityLevel = false;
    395          
    396                    /* Restore parameters */
    397                    pDataInd->hdr.Status = status;
    398                    pDataInd->hdr.Event = event;
    399                    pDataInd->msduLength = len;
    400          
    401                    if (len)
    402                      pDataInd->msdu = msdu;
    403                    else
    404                      pDataInd->msdu = NULL;
    405          
    406                    if ( _macCallbackSub & CB_ID_NWK_DATA_IND )
    407                      nwk_MTCallbackSubNwkDataInd ( pDataInd );
    408          
    409                    /* free buffer */
    410                    mac_msg_deallocate( (uint8 **)&pData );
    411                  }
    412                  break;
    413          
    414              case MAC_MCPS_PURGE_CNF:
    415                if ( _macCallbackSub & CB_ID_NWK_PURGE_CNF )
    416                  nwk_MTCallbackSubNwkPurgeCnf( (ZMacPurgeCnf_t *) pData);
    417                break;
    418          
    419              default:
    420                break;
    421            }
    422          }
    423          #endif
    424          
    425          /********************************************************************************************************
    426           * @fn      MAC_CbackCheckPending
    427           *
    428           * @brief   Return number of pending indirect msg
    429           *
    430           * @param   None
    431           *
    432           * @return  Number of indirect msg holding
    433           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    434          uint8 MAC_CbackCheckPending(void)
   \                     MAC_CbackCheckPending:
    435          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    436          #if !defined (NONWK)
    437            if ( ZSTACK_ROUTER_BUILD )
    438            {
    439              return (nwkDB_ReturnIndirectHoldingCnt());
   \   000004                ; Setup parameters for call to function nwkDB_ReturnIndirectHoldingCnt
   \   000004   12....       LCALL     `??nwkDB_ReturnIndirectHoldingCnt::?relay`; Banked call to: nwkDB_ReturnIndirectHoldingCnt
   \   000007                REQUIRE ?Subroutine0
   \   000007                ; // Fall through to label ?Subroutine0
    440            }
    441            else
    442            {
    443              return (0);
    444            }
    445          #else
    446            return (0);
    447          #endif
    448          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    449          
    450          /********************************************************************************************************
    451           * @fn      ZMacLqiAdjustMode
    452           *
    453           * @brief   Sets/return LQI adjust mode
    454           *
    455           * @param   mode - LQI_ADJ_GET = return current mode only
    456           *                 LQI_ADJ_OFF = disable LQI adjusts
    457           *                 LQI_ADJ_MODEx = set to LQI adjust MODEx
    458           *
    459           * @return  current LQI adjust mode
    460           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    461          ZMacLqiAdjust_t ZMacLqiAdjustMode( ZMacLqiAdjust_t mode )
   \                     ZMacLqiAdjustMode:
    462          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   F8           MOV       R0,A
    463            if ( mode != LQI_ADJ_GET )
   \   000006   74FF         MOV       A,#-0x1
   \   000008   68           XRL       A,R0
   \   000009   6005         JZ        ??ZMacLqiAdjustMode_0
    464            {
    465              lqiAdjMode = mode;
   \   00000B   E9           MOV       A,R1
   \   00000C   90....       MOV       DPTR,#lqiAdjMode
   \   00000F   F0           MOVX      @DPTR,A
    466            }
    467            return ( lqiAdjMode );
   \                     ??ZMacLqiAdjustMode_0:
   \   000010   90....       MOV       DPTR,#lqiAdjMode
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F9           MOV       R1,A
   \   000015   80..         SJMP      ?Subroutine0
    468          }
    469          
    470          /********************************************************************************************************
    471           * @fn      ZMacLqiAdjust
    472           *
    473           * @brief   Adjust LQI according to correlation value
    474           *
    475           * @notes - the IEEE 802.15.4 specification provides some general statements on
    476           *          the subject of LQI. Section 6.7.8: "The minimum and maximum LQI values
    477           *          (0x00 and 0xFF) should be associated with the lowest and highest IEEE
    478           *          802.15.4 signals detectable by the receiver, and LQ values should be
    479           *          uniformly distributed between these two limits." Section E.2.3: "The
    480           *          LQI (see 6.7.8) measures the received energy and/or SNR for each
    481           *          received packet. When energy level and SNR information are combined,
    482           *          they can indicate whether a corrupt packet resulted from low signal
    483           *          strength or from high signal strength plus interference."
    484           *        - LQI Adjustment Mode1 provided below is a simple algorithm to use the
    485           *          packet correlation value (related to SNR) to scale incoming LQI value
    486           *          (related to signal strength) to 'derate' noisy packets.
    487           *        - LQI Adjustment Mode2 provided below is a location for a developer to
    488           *          implement their own proprietary LQI adjustment algorithm.
    489           *
    490           * @param   corr - packet correlation value
    491           * @param   lqi  - ptr to link quality (scaled rssi)
    492           *
    493           * @return  *lqi - adjusted link quality
    494           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          static void ZMacLqiAdjust( uint8 corr, uint8 *lqi )
   \                     ZMacLqiAdjust:
    496          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FC           MOV       R4,A
   \   000009   EB           MOV       A,R3
   \   00000A   FD           MOV       R5,A
    497            if ( lqiAdjMode != LQI_ADJ_OFF )
   \   00000B   90....       MOV       DPTR,#lqiAdjMode
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   6051         JZ        ??ZMacLqiAdjust_0
    498            {
    499              uint16 adjLqi = *lqi;
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F8           MOV       R0,A
   \   000017   7900         MOV       R1,#0x0
    500          
    501              // Keep correlation within theoretical limits
    502              if ( corr < LQI_CORR_MIN )
   \   000019   EE           MOV       A,R6
   \   00001A   C3           CLR       C
   \   00001B   9432         SUBB      A,#0x32
   \   00001D   5004         JNC       ??ZMacLqiAdjust_1
    503              {
    504                 corr = LQI_CORR_MIN;
   \   00001F   7E32         MOV       R6,#0x32
   \   000021   8008         SJMP      ??ZMacLqiAdjust_2
    505              }
    506              else if ( corr > LQI_CORR_MAX )
   \                     ??ZMacLqiAdjust_1:
   \   000023   EE           MOV       A,R6
   \   000024   C3           CLR       C
   \   000025   946F         SUBB      A,#0x6f
   \   000027   4002         JC        ??ZMacLqiAdjust_2
    507              {
    508                 corr = LQI_CORR_MAX;
   \   000029   7E6E         MOV       R6,#0x6e
    509              }
    510          
    511              if ( lqiAdjMode == LQI_ADJ_MODE1 )
   \                     ??ZMacLqiAdjust_2:
   \   00002B   90....       MOV       DPTR,#lqiAdjMode
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   6401         XRL       A,#0x1
   \   000031   701F         JNZ       ??ZMacLqiAdjust_3
    512              {
    513                /* MODE1 - linear scaling of incoming LQI with a "correlation percentage"
    514                           which is computed from the incoming correlation value between
    515                           theorectical minimum/maximum values. This is a very simple way
    516                           of 'derating' the incoming LQI as correlation value drops. */
    517                adjLqi = (adjLqi * (corr - LQI_CORR_MIN)) / (LQI_CORR_MAX - LQI_CORR_MIN);
   \   000033   EE           MOV       A,R6
   \   000034   24CE         ADD       A,#-0x32
   \   000036   F5..         MOV       ?V0,A
   \   000038   E4           CLR       A
   \   000039   34FF         ADDC      A,#-0x1
   \   00003B   F5..         MOV       ?V1,A
   \   00003D   E8           MOV       A,R0
   \   00003E   85..F0       MOV       B,?V0
   \   000041   A4           MUL       AB
   \   000042   C8           XCH       A,R0
   \   000043   AAF0         MOV       R2,B
   \   000045   85..F0       MOV       B,?V1
   \   000048   A4           MUL       AB
   \   000049   2A           ADD       A,R2
   \   00004A   F9           MOV       R1,A
   \   00004B   7A3C         MOV       R2,#0x3c
   \   00004D   7B00         MOV       R3,#0x0
   \   00004F   12....       LCALL     ?US_DIV_MOD
    518              }
    519              else if ( lqiAdjMode == LQI_ADJ_MODE2 )
    520              {
    521                /* MODE2 - location for developer to implement a proprietary algorithm */
    522              }
    523          
    524              // Replace incoming LQI with scaled value
    525              *lqi = (adjLqi > 255) ? 255 : (uint8)adjLqi;
   \                     ??ZMacLqiAdjust_3:
   \   000052   C3           CLR       C
   \   000053   E9           MOV       A,R1
   \   000054   9401         SUBB      A,#0x1
   \   000056   4004         JC        ??ZMacLqiAdjust_4
   \   000058   74FF         MOV       A,#-0x1
   \   00005A   8001         SJMP      ??ZMacLqiAdjust_5
   \                     ??ZMacLqiAdjust_4:
   \   00005C   E8           MOV       A,R0
   \                     ??ZMacLqiAdjust_5:
   \   00005D   8C82         MOV       DPL,R4
   \   00005F   8D83         MOV       DPH,R5
   \   000061   F0           MOVX      @DPTR,A
    526            }
    527          }
   \                     ??ZMacLqiAdjust_0:
   \   000062   7F02         MOV       R7,#0x2
   \   000064   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_CbackEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_CbackEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_CbackCheckPending::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_CbackCheckPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacLqiAdjustMode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacLqiAdjustMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacLqiAdjust::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacLqiAdjust

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   MAC_CbackCheckPending
        2      0   -> nwkDB_ReturnIndirectHoldingCnt
      0     29   MAC_CbackEvent
        0     26   -> MAC_MlmeGetReq
        0     26   -> ZMacLqiAdjust
        0     26   -> mac_msg_deallocate
        0     26   -> nwk_broadcastSend
        0     26   -> osal_mem_free
        0     29   -> osal_memcpy
        0     26   -> osal_msg_allocate
        0     26   -> osal_msg_send
      1     36   ZMacLqiAdjust
      2      0   ZMacLqiAdjustMode


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??Subroutine12_0
       5  ??Subroutine13_0
       7  ?Subroutine0
      19  ?Subroutine1
      17  ?Subroutine10
       6  ?Subroutine11
       7  ?Subroutine2
       5  ?Subroutine3
      13  ?Subroutine4
      16  ?Subroutine5
      10  ?Subroutine6
       8  ?Subroutine7
       4  ?Subroutine8
      10  ?Subroutine9
       7  MAC_CbackCheckPending
       6  MAC_CbackCheckPending::?relay
     814  MAC_CbackEvent
       6  MAC_CbackEvent::?relay
     103  ZMacLqiAdjust
       6  ZMacLqiAdjust::?relay
      23  ZMacLqiAdjustMode
       6  ZMacLqiAdjustMode::?relay
       1  _A_IEN0
       1  lqiAdjMode
       2  pZMac_AppCallback
      17  zmacCBSizeTable

 
 1 080 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
    17 bytes in segment CODE_C
     1 byte  in segment SFR_AN
     3 bytes in segment XDATA_Z
 
    41 bytes of CODE     memory
     0 bytes of DATA     memory (+ 1 byte shared)
 1 080 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: none
