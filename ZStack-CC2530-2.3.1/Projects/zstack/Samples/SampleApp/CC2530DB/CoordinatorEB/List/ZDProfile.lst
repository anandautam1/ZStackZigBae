###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               12/Sep/2018  03:56:57
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.20
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\stack\zdo\ZDProfile.c
#    Command line       =  
#        -f C:\Users\ANANDA~1\AppData\Local\Temp\EW5E35.tmp ("C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\stack\zdo\ZDProfile.c"
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\ZDProfile.lst
#    Object file        =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\ZDProfile.r51
#
###############################################################################

C:\Users\Ananda Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2010-05-28 08:13:38 -0700 (Fri, 28 May 2010) $
      4            Revision:       $Revision: 22667 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     71            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     72            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     73            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     74          }
     75          
     76          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     77            afStatus_t stat;                                    \
     78            ZDP_TmpBuf = (BUF)+1;                               \
     79            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     80            osal_mem_free( (BUF) );                             \
     81            ZDP_TmpBuf = ZDP_Buf+1;                             \
     82            return stat;                                        \
     83          }
     84          
     85          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     86            afStatus_t stat;                                    \
     87            ZDP_TxOptions = (TxO);                              \
     88            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     89            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     90            return stat;                                        \
     91          }
     92          
     93          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     94            afStatus_t stat;                                    \
     95            ZDP_TmpBuf = (BUF)+1;                               \
     96            ZDP_TxOptions = (TxO);                              \
     97            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     98            osal_mem_free( (BUF) );                             \
     99            ZDP_TmpBuf = ZDP_Buf+1;                             \
    100            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    101            return stat;                                        \
    102          }
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          #define ZDP_BUF_SZ          80
    109          

   \                                 In  segment CODE_C, align 1
    110          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    111          
    112          /*********************************************************************
    113           * TYPEDEFS
    114           */
    115          typedef struct
    116          {
    117            void *next;
    118            uint8 taskID;
    119            uint16 clusterID;
    120          } ZDO_MsgCB_t;
    121          
    122          
    123          /*********************************************************************
    124           * GLOBAL VARIABLES
    125           */
    126          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    128          
    129          /*********************************************************************
    130           * EXTERNAL VARIABLES
    131           */
    132          
    133          extern endPointDesc_t ZDApp_epDesc;
    134          
    135          /*********************************************************************
    136           * EXTERNAL FUNCTIONS
    137           */
    138          
    139          /*********************************************************************
    140           * LOCAL FUNCTIONS
    141           */
    142          
    143          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    144          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    145          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    146          
    147          /*********************************************************************
    148           * LOCAL VARIABLES
    149           */
    150          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    152          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          static byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    154          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    156          
    157          /*********************************************************************
    158           * ZDO Message Processing table
    159           */
    160          
    161          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    162          
    163          typedef struct
    164          {
    165            uint16                clusterID;
    166            pfnZDPMsgProcessor    pFn;
    167          } zdpMsgProcItem_t;
    168          

   \                                 In  segment CODE_C, align 1
    169          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   0000         DW 0
   \   000002   ....         DW `??zdpProcessAddrReq::?relay`
   \   000004   1300         DW 19
   \   000006   ....         DW `??ZDO_ProcessDeviceAnnce::?relay`
   \   000008   0100         DW 1
   \   00000A   ....         DW `??zdpProcessAddrReq::?relay`
   \   00000C   0200         DW 2
   \   00000E   ....         DW `??ZDO_ProcessNodeDescReq::?relay`
   \   000010   0300         DW 3
   \   000012   ....         DW `??ZDO_ProcessPowerDescReq::?relay`
   \   000014   0400         DW 4
   \   000016   ....         DW `??ZDO_ProcessSimpleDescReq::?relay`
   \   000018   0500         DW 5
   \   00001A   ....         DW `??ZDO_ProcessActiveEPReq::?relay`
   \   00001C   0600         DW 6
   \   00001E   ....         DW `??ZDO_ProcessMatchDescReq::?relay`
   \   000020   1100         DW 17
   \   000022   ....         DW `??ZDO_ProcessUserDescReq::?relay`
   \   000024   1400         DW 20
   \   000026   ....         DW `??ZDO_ProcessUserDescSet::?relay`
   \   000028   1500         DW 21
   \   00002A   ....         DW `??ZDO_ProcessServerDiscReq::?relay`
   \   00002C   FFFF         DW 65535
   \   00002E   0000         DW 0H
    170          {
    171          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    172            // These aren't processed by sleeping end devices.
    173            { NWK_addr_req,           zdpProcessAddrReq },
    174            { Device_annce,           ZDO_ProcessDeviceAnnce },
    175          #endif
    176            { IEEE_addr_req,          zdpProcessAddrReq },
    177            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    178            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    179            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    180            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    181            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    182          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    183            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    184          #endif
    185          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    186            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    187          #endif
    188          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    189            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    190          #endif
    191          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    192            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    193          #endif
    194          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    195            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    196          #endif
    197          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    198            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    199          #endif
    200          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    201            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    202          #endif
    203          #if defined ( ZDO_USERDESC_RESPONSE )
    204            { User_Desc_req,          ZDO_ProcessUserDescReq },
    205          #endif
    206          #if defined ( ZDO_USERDESCSET_RESPONSE )
    207            { User_Desc_set,          ZDO_ProcessUserDescSet },
    208          #endif
    209          #if defined ( ZDO_SERVERDISC_RESPONSE )
    210            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    211          #endif
    212            {0xFFFF, NULL} // Last
    213          };
    214          
    215          /*********************************************************************
    216           * @fn          fillAndSend
    217           *
    218           * @brief       Combined to reduce space
    219           *
    220           * @param
    221           * @param
    222           *
    223           * @return      afStatus_t
    224           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    225          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    226          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   89..         MOV       ?V4,R1
    227            afAddrType_t afAddr;
    228          
    229            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \   000014                ; Setup parameters for call to function osal_memset
   \   000014   7C0C         MOV       R4,#0xc
   \   000016   7D00         MOV       R5,#0x0
   \   000018   7900         MOV       R1,#0x0
   \   00001A   AA..         MOV       R2,?XSP + 0
   \   00001C   AB..         MOV       R3,?XSP + 1
   \   00001E   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    230            ZADDR_TO_AFADDR( addr, afAddr );
   \   000021   7409         MOV       A,#0x9
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E4           CLR       A
   \   000027   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   C0E0         PUSH      A
   \   000032   7408         MOV       A,#0x8
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   D0E0         POP       A
   \   000039   F0           MOVX      @DPTR,A
   \   00003A   8E82         MOV       DPL,R6
   \   00003C   8F83         MOV       DPH,R7
   \   00003E   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000041   12....       LCALL     ?Subroutine26 & 0xFFFF
    231          
    232            *(ZDP_TmpBuf-1) = *transSeq;
   \                     ??CrossCallReturnLabel_31:
   \   000044   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000047   E0           MOVX      A,@DPTR
   \   000048   24FF         ADD       A,#-0x1
   \   00004A   F5..         MOV       ?V2,A
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   34FF         ADDC      A,#-0x1
   \   000050   F5..         MOV       ?V3,A
   \   000052   85..82       MOV       DPL,?V0
   \   000055   85..83       MOV       DPH,?V1
   \   000058   E0           MOVX      A,@DPTR
   \   000059   85..82       MOV       DPL,?V2
   \   00005C   85..83       MOV       DPH,?V3
   \   00005F   F0           MOVX      @DPTR,A
    233          
    234            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    235                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    236                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \   000060                ; Setup parameters for call to function AF_DataRequest
   \   000060   75..1E       MOV       ?V5,#0x1e
   \   000063   78..         MOV       R0,#?V5
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   78..         MOV       R0,#?V2
   \   00006F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000072   E5..         MOV       A,?V4
   \   000074   2401         ADD       A,#0x1
   \   000076   F5..         MOV       ?V0,A
   \   000078   E4           CLR       A
   \   000079   3400         ADDC      A,#0x0
   \   00007B   F5..         MOV       ?V1,A
   \   00007D   78..         MOV       R0,#?V0
   \   00007F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000082   7421         MOV       A,#0x21
   \   000084   12....       LCALL     ?XSTACK_DISP0_8
   \   000087   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00008A   90....       MOV       DPTR,#ZDP_TxOptions
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   F9           MOV       R1,A
   \   00008F   7C..         MOV       R4,#ZDApp_epDesc & 0xff
   \   000091   7D..         MOV       R5,#(ZDApp_epDesc >> 8) & 0xff
   \   000093   7409         MOV       A,#0x9
   \   000095   12....       LCALL     ?XSTACK_DISP101_8
   \   000098   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00009B   7409         MOV       A,#0x9
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A0   740C         MOV       A,#0xc
   \   0000A2   02....       LJMP      ?Subroutine0 & 0xFFFF
    237          
    238          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL     ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000003   F9           MOV       R1,A
   \   000004   85..82       MOV       DPL,?XSP + 0
   \   000007   85..83       MOV       DPH,?XSP + 1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine106_0
   \   000003                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine131_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    239          
    240          /*********************************************************************
    241           * @fn          ZDP_SendData
    242           *
    243           * @brief       This builds and send a request message that has
    244           *              NWKAddrOfInterest as its only parameter.
    245           *
    246           * @param       dstAddr - destination address
    247           * @param       cmd - clusterID
    248           * @param       dataLen - number of bytes of data
    249           * @param       data - pointer to the data
    250           * @param       SecurityEnable - Security Options
    251           *
    252           * @return      afStatus_t
    253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    254          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    255                                  byte len, uint8 *buf, byte SecurityEnable )
    256          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
    257            uint8 *pBuf = ZDP_TmpBuf;
   \   000007   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00000A   12....       LCALL     ?Subroutine48 & 0xFFFF
    258            byte cnt = len;
   \                     ??CrossCallReturnLabel_91:
   \   00000D   E9           MOV       A,R1
   \   00000E   FE           MOV       R6,A
   \   00000F   740E         MOV       A,#0xe
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000017   801F         SJMP      ??ZDP_SendData_0
    259          
    260            while ( cnt-- )
    261            {
    262              *pBuf++ = *buf++;
   \                     ??ZDP_SendData_1:
   \   000019   8882         MOV       DPL,R0
   \   00001B   8983         MOV       DPH,R1
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   85..82       MOV       DPL,?V2
   \   000021   85..83       MOV       DPH,?V3
   \   000024   12....       LCALL     ??Subroutine129_0 & 0xFFFF
    263            }
   \                     ??CrossCallReturnLabel_269:
   \   000027   A882         MOV       R0,DPL
   \   000029   A983         MOV       R1,DPH
   \   00002B   85..82       MOV       DPL,?V2
   \   00002E   85..83       MOV       DPH,?V3
   \   000031   A3           INC       DPTR
   \   000032   8582..       MOV       ?V2,DPL
   \   000035   8583..       MOV       ?V3,DPH
   \                     ??ZDP_SendData_0:
   \   000038   74FF         MOV       A,#-0x1
   \   00003A   2E           ADD       A,R6
   \   00003B   FE           MOV       R6,A
   \   00003C   04           INC       A
   \   00003D   70DA         JNZ       ??ZDP_SendData_1
    264          
    265            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len, ((SecurityEnable) ? AF_EN_SECURITY : 0) );
   \   00003F   7410         MOV       A,#0x10
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   E0           MOVX      A,@DPTR
   \   000045   90....       MOV       DPTR,#ZDP_TxOptions
   \   000048   6004         JZ        ??ZDP_SendData_2
   \   00004A   7440         MOV       A,#0x40
   \   00004C   8001         SJMP      ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   00004E   E4           CLR       A
   \                     ??ZDP_SendData_3:
   \   00004F   F0           MOVX      @DPTR,A
   \   000050                ; Setup parameters for call to function fillAndSend
   \   000050   740C         MOV       A,#0xc
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000058   EF           MOV       A,R7
   \   000059   F9           MOV       R1,A
   \   00005A   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   00005D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000060   E9           MOV       A,R1
   \   000061   F9           MOV       R1,A
   \   000062   90....       MOV       DPTR,#ZDP_TxOptions
   \   000065   E4           CLR       A
   \   000066   F0           MOVX      @DPTR,A
   \   000067   02....       LJMP      ??Subroutine117_0 & 0xFFFF
    266          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine127_0:
   \   000000   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine129_0:
   \   000000   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine133_0:
   \   000000   12....       LCALL     ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET
    267          
    268          /*********************************************************************
    269           * @fn          ZDP_NWKAddrOfInterestReq
    270           *
    271           * @brief       This builds and send a request message that has
    272           *              NWKAddrOfInterest as its only parameter.
    273           *
    274           * @param       dstAddr - destination address
    275           * @param       nwkAddr - 16 bit address
    276           * @param       SecurityEnable - Security Options
    277           *
    278           * @return      afStatus_t
    279           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    280          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    281                                               byte cmd, byte SecurityEnable )
    282          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    283            (void)SecurityEnable;  // Intentionally unreferenced parameter
    284          
    285            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   12....       LCALL     ?Subroutine15 & 0xFFFF
    286            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_14:
   \   000008   F0           MOVX      @DPTR,A
    287          
    288            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \   000009                ; Setup parameters for call to function fillAndSend
   \   000009   E9           MOV       A,R1
   \   00000A   F5..         MOV       ?V0,A
   \   00000C   02....       LJMP      ?Subroutine2 & 0xFFFF
    289          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   75..00       MOV       ?V1,#0x0
   \   000003   78..         MOV       R0,#?V0
   \   000005   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000008   7902         MOV       R1,#0x2
   \   00000A                REQUIRE ??Subroutine103_0
   \   00000A                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   EA           MOV       A,R2
   \   000001   FC           MOV       R4,A
   \   000002   EB           MOV       A,R3
   \   000003   FD           MOV       R5,A
   \   000004   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine104_0
   \   000008                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000003                REQUIRE ??Subroutine105_0
   \   000003                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F02         MOV       R7,#0x2
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000006   EC           MOV       A,R4
   \   000007   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00000A   ED           MOV       A,R5
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000004   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000007   A3           INC       DPTR
   \   000008   22           RET
    290          
    291          /*********************************************************************
    292           * Address Requests
    293           */
    294          
    295          /*********************************************************************
    296           * @fn          ZDP_NwkAddrReq
    297           *
    298           * @brief       This builds and send a NWK_addr_req message.  This
    299           *              function sends a broadcast message looking for a 16
    300           *              bit address with a 64 bit address as bait.
    301           *
    302           * @param       IEEEAddress - looking for this device
    303           * @param       SecurityEnable - Security Options
    304           *
    305           * @return      afStatus_t
    306           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    307          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    308                                     byte StartIndex, byte SecurityEnable )
    309          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   89..         MOV       ?V2,R1
   \   000010   8C..         MOV       ?V3,R4
    310            uint8 *pBuf = ZDP_TmpBuf;
   \   000012   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000015   12....       LCALL     ?Subroutine64 & 0xFFFF
    311            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
    312            zAddrType_t dstAddr;
    313          
    314            (void)SecurityEnable;  // Intentionally unreferenced parameter
    315          
    316            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \                     ??CrossCallReturnLabel_115:
   \   000018   FC           MOV       R4,A
   \   000019   EB           MOV       A,R3
   \   00001A   FD           MOV       R5,A
   \   00001B   7A..         MOV       R2,#saveExtAddr & 0xff
   \   00001D   7B..         MOV       R3,#(saveExtAddr >> 8) & 0xff
   \   00001F   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000022   E9           MOV       A,R1
   \   000023   700A         JNZ       ??ZDP_NwkAddrReq_0
    317            {
    318              dstAddr.addrMode = AddrBroadcast;
   \   000025   7408         MOV       A,#0x8
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   12....       LCALL     ?Subroutine88 & 0xFFFF
    319              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    320            }
   \                     ??CrossCallReturnLabel_146:
   \   00002D   8012         SJMP      ??ZDP_NwkAddrReq_1
    321            else
    322            {
    323              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   00002F   7408         MOV       A,#0x8
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   7402         MOV       A,#0x2
   \   000036   F0           MOVX      @DPTR,A
    324              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   000037   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00003A   12....       LCALL     ?Subroutine47 & 0xFFFF
    325            }
   \                     ??CrossCallReturnLabel_90:
   \   00003D   E8           MOV       A,R0
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   A3           INC       DPTR
   \   000040   E9           MOV       A,R1
   \                     ??ZDP_NwkAddrReq_1:
   \   000041   F0           MOVX      @DPTR,A
    326          
    327            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \   000042                ; Setup parameters for call to function sAddrExtCpy
   \   000042   EE           MOV       A,R6
   \   000043   FC           MOV       R4,A
   \   000044   EF           MOV       A,R7
   \   000045   FD           MOV       R5,A
   \   000046   AA..         MOV       R2,?V0
   \   000048   AB..         MOV       R3,?V1
   \   00004A   12....       LCALL     ?Subroutine96 & 0xFFFF
    328          
    329            *pBuf++ = ReqType;
   \                     ??CrossCallReturnLabel_161:
   \   00004D   E5..         MOV       A,?V2
   \   00004F   F0           MOVX      @DPTR,A
    330            *pBuf++ = StartIndex;
   \   000050   A3           INC       DPTR
   \   000051   E5..         MOV       A,?V3
   \   000053   F0           MOVX      @DPTR,A
    331          
    332            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   000054                ; Setup parameters for call to function fillAndSend
   \   000054   E4           CLR       A
   \   000055   F5..         MOV       ?V0,A
   \   000057   F5..         MOV       ?V1,A
   \   000059   78..         MOV       R0,#?V0
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005E   790A         MOV       R1,#0xa
   \   000060   7402         MOV       A,#0x2
   \   000062   12....       LCALL     ?XSTACK_DISP102_8
   \   000065   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000068   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006B   7409         MOV       A,#0x9
   \   00006D   02....       LJMP      ??Subroutine116_0 & 0xFFFF
    333          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   740F         MOV       A,#0xf
   \   000002   F0           MOVX      @DPTR,A
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   74FD         MOV       A,#-0x3
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   A3           INC       DPTR
   \   00000D   74FF         MOV       A,#-0x1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine117_0
   \   000003                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine126_0:
   \   000000   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000002   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine127_0
   \   000004                ; // Fall through to label ??Subroutine127_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007                ; Setup parameters for call to function sAddrExtCmp
   \   000007   EA           MOV       A,R2
   \   000008   22           RET
    334          
    335          /*********************************************************************
    336           * @fn          ZDP_IEEEAddrReq
    337           *
    338           * @brief       This builds and send a IEEE_addr_req message.  This
    339           *              function sends a unicast message looking for a 64
    340           *              bit IEEE address with a 16 bit address as bait.
    341           *
    342           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    343           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    344           * @param       SecurityEnable - Security Options
    345           *
    346           * @return      afStatus_t
    347           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    348          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    349                                      byte StartIndex, byte SecurityEnable )
    350          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine58 & 0xFFFF
    351            uint8 *pBuf = ZDP_TmpBuf;
    352            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
    353            zAddrType_t dstAddr;
    354          
    355            (void)SecurityEnable;  // Intentionally unreferenced parameter
    356          
    357            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??CrossCallReturnLabel_279:
   \   00000D   7408         MOV       A,#0x8
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   7402         MOV       A,#0x2
   \   000014   F0           MOVX      @DPTR,A
    358            dstAddr.addr.shortAddr = shortAddr;
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   EA           MOV       A,R2
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   EB           MOV       A,R3
   \   00001F   F0           MOVX      @DPTR,A
    359          
    360            *pBuf++ = LO_UINT16( shortAddr );
   \   000020   EA           MOV       A,R2
   \   000021   8882         MOV       DPL,R0
   \   000023   8983         MOV       DPH,R1
   \   000025   F0           MOVX      @DPTR,A
    361            *pBuf++ = HI_UINT16( shortAddr );
   \   000026   EB           MOV       A,R3
   \   000027   12....       LCALL     ?Subroutine31 & 0xFFFF
    362          
    363            *pBuf++ = ReqType;
   \                     ??CrossCallReturnLabel_48:
   \   00002A   F0           MOVX      @DPTR,A
    364            *pBuf++ = StartIndex;
   \   00002B   EC           MOV       A,R4
   \   00002C   8882         MOV       DPL,R0
   \   00002E   8983         MOV       DPH,R1
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   F0           MOVX      @DPTR,A
    365          
    366            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \   000034                ; Setup parameters for call to function fillAndSend
   \   000034   75..01       MOV       ?V0,#0x1
   \   000037   75..00       MOV       ?V1,#0x0
   \   00003A   78..         MOV       R0,#?V0
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003F   7904         MOV       R1,#0x4
   \   000041                REQUIRE ?Subroutine8
   \   000041                ; // Fall through to label ?Subroutine8
    367          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7402         MOV       A,#0x2
   \   000002   12....       LCALL     ?XSTACK_DISP102_8
   \   000005   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000008   12....       LCALL     ?DEALLOC_XSTACK8
   \   00000B                REQUIRE ??Subroutine102_0
   \   00000B                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   7409         MOV       A,#0x9
   \   000002   80..         SJMP      ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   A3           INC       DPTR
   \   000001   F0           MOVX      @DPTR,A
   \   000002   EE           MOV       A,R6
   \   000003   8882         MOV       DPL,R0
   \   000005   8983         MOV       DPH,R1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   E9           MOV       A,R1
   \   000001   FE           MOV       R6,A
   \   000002   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000005                REQUIRE ??Subroutine133_0
   \   000005                ; // Fall through to label ??Subroutine133_0
    368          
    369          /*********************************************************************
    370           * @fn          ZDP_MatchDescReq
    371           *
    372           * @brief       This builds and send a Match_Desc_req message.  This
    373           *              function sends a broadcast or unicast message
    374           *              requesting the list of endpoint/interfaces that
    375           *              match profile ID and cluster IDs.
    376           *
    377           * @param       dstAddr - destination address
    378           * @param       nwkAddr - network address of interest
    379           * @param       ProfileID - Profile ID
    380           * @param       NumInClusters - number of input clusters
    381           * @param       InClusterList - input cluster ID list
    382           * @param       NumOutClusters - number of output clusters
    383           * @param       OutClusterList - output cluster ID list
    384           * @param       SecurityEnable - Security Options
    385           *
    386           * @return      afStatus_t
    387           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    388          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    389                                          uint16 ProfileID,
    390                                          byte NumInClusters, cId_t *InClusterList,
    391                                          byte NumOutClusters, cId_t *OutClusterList,
    392                                          byte SecurityEnable )
    393          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine58 & 0xFFFF
    394            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_280:
   \   000008   7412         MOV       A,#0x12
   \   00000A   12....       LCALL     ?XSTACK_DISP0_8
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F5..         MOV       ?V0,A
    395            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    396            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    397          
    398            (void)SecurityEnable;  // Intentionally unreferenced parameter
    399          
    400            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \   000010   EE           MOV       A,R6
   \   000011   25..         ADD       A,?V0
   \   000013   C3           CLR       C
   \   000014   33           RLC       A
   \   000015   2406         ADD       A,#0x6
   \   000017   FF           MOV       R7,A
    401          
    402            if ( len >= ZDP_BUF_SZ-1 )
   \   000018   C3           CLR       C
   \   000019   944F         SUBB      A,#0x4f
   \   00001B   4005         JC        ??ZDP_MatchDescReq_0
    403            {
    404              return afStatus_MEM_FAIL;
   \   00001D   7910         MOV       R1,#0x10
   \   00001F   02....       LJMP      ??ZDP_MatchDescReq_1 & 0xFFFF
    405            }
    406          
    407            // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
    408            // this command to 0xFFFF.  So, here we will filter this and replace 
    409            // with 0xFFFD to only send to devices with RX ON.  This includes the 
    410            // network address of interest.
    411            if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
    412                && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
   \                     ??ZDP_MatchDescReq_0:
   \   000022   8A82         MOV       DPL,R2
   \   000024   8B83         MOV       DPH,R3
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F5..         MOV       ?V1,A
   \   000031   740F         MOV       A,#0xf
   \   000033   65..         XRL       A,?V1
   \   000035   6006         JZ        ??ZDP_MatchDescReq_2
   \   000037   7402         MOV       A,#0x2
   \   000039   65..         XRL       A,?V1
   \   00003B   7018         JNZ       ??ZDP_MatchDescReq_3
   \                     ??ZDP_MatchDescReq_2:
   \   00003D   8A82         MOV       DPL,R2
   \   00003F   8B83         MOV       DPH,R3
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F4           CPL       A
   \   000043   7003         JNZ       ??ZDP_MatchDescReq_4
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F4           CPL       A
   \                     ??ZDP_MatchDescReq_4:
   \   000048   700B         JNZ       ??ZDP_MatchDescReq_3
    413            {
    414              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00004A   8A82         MOV       DPL,R2
   \   00004C   8B83         MOV       DPH,R3
   \   00004E   74FD         MOV       A,#-0x3
   \   000050   F0           MOVX      @DPTR,A
   \   000051   A3           INC       DPTR
   \   000052   74FF         MOV       A,#-0x1
   \   000054   F0           MOVX      @DPTR,A
    415            }
    416            if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
   \                     ??ZDP_MatchDescReq_3:
   \   000055   74FF         MOV       A,#-0x1
   \   000057   6C           XRL       A,R4
   \   000058   7003         JNZ       ??ZDP_MatchDescReq_5
   \   00005A   74FF         MOV       A,#-0x1
   \   00005C   6D           XRL       A,R5
   \                     ??ZDP_MatchDescReq_5:
   \   00005D   7004         JNZ       ??ZDP_MatchDescReq_6
    417            {
    418              nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00005F   7CFD         MOV       R4,#-0x3
   \   000061   7DFF         MOV       R5,#-0x1
    419            }
    420            
    421            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_6:
   \   000063   EC           MOV       A,R4
   \   000064   8882         MOV       DPL,R0
   \   000066   8983         MOV       DPH,R1
   \   000068   F0           MOVX      @DPTR,A
    422            *pBuf++ = HI_UINT16( nwkAddr );
   \   000069   ED           MOV       A,R5
   \   00006A   A3           INC       DPTR
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   740E         MOV       A,#0xe
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   12....       LCALL     ?Subroutine40 & 0xFFFF
    423          
    424            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \                     ??CrossCallReturnLabel_71:
   \   000074   EC           MOV       A,R4
   \   000075   8882         MOV       DPL,R0
   \   000077   8983         MOV       DPH,R1
   \   000079   A3           INC       DPTR
   \   00007A   12....       LCALL     ?Subroutine33 & 0xFFFF
    425            *pBuf++ = HI_UINT16( ProfileID );
   \                     ??CrossCallReturnLabel_52:
   \   00007D   12....       LCALL     ?Subroutine31 & 0xFFFF
    426          
    427            *pBuf++ = NumInClusters; // Input cluster list
   \                     ??CrossCallReturnLabel_49:
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   F0           MOVX      @DPTR,A
   \   000083   E8           MOV       A,R0
   \   000084   2405         ADD       A,#0x5
   \   000086   F8           MOV       R0,A
   \   000087   5001         JNC       ??ZDP_MatchDescReq_7
   \   000089   09           INC       R1
    428            if ( NumInClusters )
   \                     ??ZDP_MatchDescReq_7:
   \   00008A   EE           MOV       A,R6
   \   00008B   6019         JZ        ??ZDP_MatchDescReq_8
    429            {
    430              for (i=0; i<NumInClusters; ++i)  {
   \   00008D   75..00       MOV       ?V1,#0x0
   \   000090   7410         MOV       A,#0x10
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   12....       LCALL     ?Subroutine40 & 0xFFFF
    431                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??CrossCallReturnLabel_72:
   \   000098   12....       LCALL     ?Subroutine9 & 0xFFFF
    432                *pBuf++ = HI_UINT16( InClusterList[i] );
    433              }
   \                     ??CrossCallReturnLabel_0:
   \   00009B   5001         JNC       ??ZDP_MatchDescReq_9
   \   00009D   09           INC       R1
   \                     ??ZDP_MatchDescReq_9:
   \   00009E   05..         INC       ?V1
   \   0000A0   E5..         MOV       A,?V1
   \   0000A2   C3           CLR       C
   \   0000A3   9E           SUBB      A,R6
   \   0000A4   40F2         JC        ??CrossCallReturnLabel_72
    434            }
    435          
    436            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_8:
   \   0000A6   8882         MOV       DPL,R0
   \   0000A8   8983         MOV       DPH,R1
   \   0000AA   E5..         MOV       A,?V0
   \   0000AC   F0           MOVX      @DPTR,A
   \   0000AD   A3           INC       DPTR
   \   0000AE   A882         MOV       R0,DPL
   \   0000B0   A983         MOV       R1,DPH
    437            if ( NumOutClusters )
   \   0000B2   601A         JZ        ??ZDP_MatchDescReq_10
    438            {
    439              for (i=0; i<NumOutClusters; ++i)  {
   \   0000B4   75..00       MOV       ?V1,#0x0
   \   0000B7   7413         MOV       A,#0x13
   \   0000B9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BC   12....       LCALL     ?Subroutine40 & 0xFFFF
    440                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??CrossCallReturnLabel_73:
   \   0000BF   12....       LCALL     ?Subroutine9 & 0xFFFF
    441                *pBuf++ = HI_UINT16( OutClusterList[i] );
    442              }
   \                     ??CrossCallReturnLabel_1:
   \   0000C2   5001         JNC       ??ZDP_MatchDescReq_11
   \   0000C4   09           INC       R1
   \                     ??ZDP_MatchDescReq_11:
   \   0000C5   05..         INC       ?V1
   \   0000C7   E5..         MOV       A,?V1
   \   0000C9   C3           CLR       C
   \   0000CA   95..         SUBB      A,?V0
   \   0000CC   40F1         JC        ??CrossCallReturnLabel_73
    443            }
    444          
    445            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_10:
   \   0000CE                ; Setup parameters for call to function fillAndSend
   \   0000CE   75..06       MOV       ?V0,#0x6
   \   0000D1   75..00       MOV       ?V1,#0x0
   \   0000D4   78..         MOV       R0,#?V0
   \   0000D6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D9   EF           MOV       A,R7
   \   0000DA   F9           MOV       R1,A
   \   0000DB   EA           MOV       A,R2
   \   0000DC   FC           MOV       R4,A
   \   0000DD   EB           MOV       A,R3
   \   0000DE   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   0000E1   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   0000E4   80..         SJMP      ??Subroutine106_0
    446          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E5..         MOV       A,?V1
   \   000002   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000005   EC           MOV       A,R4
   \   000006   25..         ADD       A,?V2
   \   000008   F5..         MOV       ?V2,A
   \   00000A   ED           MOV       A,R5
   \   00000B   35..         ADDC      A,?V3
   \   00000D   F5..         MOV       ?V3,A
   \   00000F   85..82       MOV       DPL,?V2
   \   000012   F583         MOV       DPH,A
   \   000014   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000017   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   A3           INC       DPTR
   \   000001   F0           MOVX      @DPTR,A
   \   000002   ED           MOV       A,R5
   \   000003   8882         MOV       DPL,R0
   \   000005   8983         MOV       DPH,R1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   F5..         MOV       ?V2,A
   \   000004   E4           CLR       A
   \   000005   33           RLC       A
   \   000006   F5..         MOV       ?V3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   E8           MOV       A,R0
   \   000006   2402         ADD       A,#0x2
   \   000008   F8           MOV       R0,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000003   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine125_0:
   \   000000   FD           MOV       R5,A
   \   000001                REQUIRE ??Subroutine126_0
   \   000001                ; // Fall through to label ??Subroutine126_0
    447          
    448          /*********************************************************************
    449           * @fn          ZDP_SimpleDescReq
    450           *
    451           * @brief       This builds and send a NWK_Simple_Desc_req
    452           *              message.  This function sends unicast message to the
    453           *              destination device.
    454           *
    455           * @param       dstAddr - destination address
    456           * @param       nwkAddr - 16 bit address
    457           * @param       epIntf - endpoint/interface
    458           * @param       SecurityEnable - Security Options
    459           *
    460           * @return      afStatus_t
    461           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    462          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    463                                              byte endPoint, byte SecurityEnable )
    464          
    465          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    466            (void)SecurityEnable;  // Intentionally unreferenced parameter
    467          
    468            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   12....       LCALL     ?Subroutine15 & 0xFFFF
    469            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_15:
   \   000008   12....       LCALL     ?Subroutine12 & 0xFFFF
    470            ZDP_TmpBuf[2] = endPoint;
    471          
    472            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \                     ??CrossCallReturnLabel_6:
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   75..04       MOV       ?V0,#0x4
   \   00000E   75..00       MOV       ?V1,#0x0
   \   000011   78..         MOV       R0,#?V0
   \   000013   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000016   7903         MOV       R1,#0x3
   \   000018   02....       LJMP      ??Subroutine103_0 & 0xFFFF
    473          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000003   A3           INC       DPTR
   \   000004   E9           MOV       A,R1
   \   000005   F0           MOVX      @DPTR,A
   \   000006   22           RET
    474          
    475          /*********************************************************************
    476           * @fn          ZDP_UserDescSet
    477           *
    478           * @brief       This builds and send a User_Desc_set message to set
    479           *              the user descriptor.  This function sends unicast
    480           *              message to the destination device.
    481           *
    482           * @param       dstAddr - destination address
    483           * @param       nwkAddr - 16 bit address
    484           * @param       UserDescriptor - user descriptor
    485           * @param       SecurityEnable - Security Options
    486           *
    487           * @return      afStatus_t
    488           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    489          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    490                                    UserDescriptorFormat_t *UserDescriptor,
    491                                    byte SecurityEnable )
    492          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine85 & 0xFFFF
    493            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_291:
   \   000008   88..         MOV       ?V2,R0
   \   00000A   F5..         MOV       ?V3,A
   \   00000C   740F         MOV       A,#0xf
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine37 & 0xFFFF
    494            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    495                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \                     ??CrossCallReturnLabel_61:
   \   000014   FA           MOV       R2,A
   \   000015   C3           CLR       C
   \   000016   9410         SUBB      A,#0x10
   \   000018   5004         JNC       ??ZDP_UserDescSet_0
   \   00001A   8A..         MOV       ?V0,R2
   \   00001C   8003         SJMP      ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   00001E   75..10       MOV       ?V0,#0x10
    496            byte addrLen = 2;
    497          
    498            (void)SecurityEnable;  // Intentionally unreferenced parameter
    499          
    500            *pBuf++ = LO_UINT16( nwkAddr );
   \                     ??ZDP_UserDescSet_1:
   \   000021   EC           MOV       A,R4
   \   000022   85..82       MOV       DPL,?V2
   \   000025   85..83       MOV       DPH,?V3
   \   000028   F0           MOVX      @DPTR,A
    501            *pBuf++ = HI_UINT16( nwkAddr );
   \   000029   ED           MOV       A,R5
   \   00002A   12....       LCALL     ?Subroutine93 & 0xFFFF
    502          
    503            *pBuf++ = len;
   \                     ??CrossCallReturnLabel_155:
   \   00002D   A3           INC       DPTR
   \   00002E   E5..         MOV       A,?V0
   \   000030   12....       LCALL     ??Subroutine129_0 & 0xFFFF
    504            addrLen = 3;
    505          
    506            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
   \                     ??CrossCallReturnLabel_268:
   \   000033   A982         MOV       R1,DPL
   \   000035   AA83         MOV       R2,DPH
   \   000037   89..         MOV       ?V4,R1
   \   000039   8A..         MOV       ?V5,R2
   \   00003B   75..00       MOV       ?V6,#0x0
   \   00003E   78..         MOV       R0,#?V4
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000043   AC..         MOV       R4,?V0
   \   000045   7D00         MOV       R5,#0x0
   \   000047   E5..         MOV       A,?V2
   \   000049   2403         ADD       A,#0x3
   \   00004B   FA           MOV       R2,A
   \   00004C   E4           CLR       A
   \   00004D   35..         ADDC      A,?V3
   \   00004F   FB           MOV       R3,A
   \   000050   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
    507            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   000056                ; Setup parameters for call to function osal_memset
   \   000056   A8..         MOV       R0,?V0
   \   000058   7410         MOV       A,#0x10
   \   00005A   C3           CLR       C
   \   00005B   98           SUBB      A,R0
   \   00005C   FC           MOV       R4,A
   \   00005D   95E0         SUBB      A,0xE0 /* A   */
   \   00005F   FD           MOV       R5,A
   \   000060   7920         MOV       R1,#0x20
   \   000062   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    508          
    509            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   000065                ; Setup parameters for call to function fillAndSend
   \   000065   75..14       MOV       ?V2,#0x14
   \   000068   75..00       MOV       ?V3,#0x0
   \   00006B   78..         MOV       R0,#?V2
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000070   7913         MOV       R1,#0x13
   \   000072   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000075                REQUIRE ?Subroutine3
   \   000075                ; // Fall through to label ?Subroutine3
    510          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F07         MOV       R7,#0x7
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000003   F9           MOV       R1,A
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   EE           MOV       A,R6
   \   000001   FC           MOV       R4,A
   \   000002   EF           MOV       A,R7
   \   000003                REQUIRE ??Subroutine125_0
   \   000003                ; // Fall through to label ??Subroutine125_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004                REQUIRE ??Subroutine130_0
   \   000004                ; // Fall through to label ??Subroutine130_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine130_0:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine131_0
   \   000003                ; // Fall through to label ??Subroutine131_0
    511          
    512          /*********************************************************************
    513           * @fn          ZDP_ServerDiscReq
    514           *
    515           * @brief       Build and send a Server_Discovery_req request message.
    516           *
    517           * @param       serverMask - 16-bit bit-mask of server services being sought.
    518           * @param       SecurityEnable - Security Options
    519           *
    520           * @return      afStatus_t
    521           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    522          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    523          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine58 & 0xFFFF
    524            uint8 *pBuf = ZDP_TmpBuf;
    525            zAddrType_t dstAddr;
    526          
    527            dstAddr.addrMode = AddrBroadcast;
   \                     ??CrossCallReturnLabel_281:
   \   00000D   7408         MOV       A,#0x8
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ?Subroutine16 & 0xFFFF
    528            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    529          
    530            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_16:
   \   000015   EA           MOV       A,R2
   \   000016   8882         MOV       DPL,R0
   \   000018   8983         MOV       DPH,R1
   \   00001A   F0           MOVX      @DPTR,A
    531            *pBuf = HI_UINT16( serverMask );
   \   00001B   EB           MOV       A,R3
   \   00001C   A3           INC       DPTR
   \   00001D   F0           MOVX      @DPTR,A
    532          
    533            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    534                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \   00001E   EE           MOV       A,R6
   \   00001F   90....       MOV       DPTR,#ZDP_TxOptions
   \   000022   6004         JZ        ??ZDP_ServerDiscReq_0
   \   000024   7440         MOV       A,#0x40
   \   000026   8001         SJMP      ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   000028   E4           CLR       A
   \                     ??ZDP_ServerDiscReq_1:
   \   000029   F0           MOVX      @DPTR,A
   \   00002A                ; Setup parameters for call to function fillAndSend
   \   00002A   75..15       MOV       ?V0,#0x15
   \   00002D   75..00       MOV       ?V1,#0x0
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7902         MOV       R1,#0x2
   \   000037   E9           MOV       A,R1
   \   000038   12....       LCALL     ?XSTACK_DISP102_8
   \   00003B   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   E9           MOV       A,R1
   \   000042   F9           MOV       R1,A
   \   000043   90....       MOV       DPTR,#ZDP_TxOptions
   \   000046   E4           CLR       A
   \   000047   F0           MOVX      @DPTR,A
   \   000048   02....       LJMP      ??Subroutine102_0 & 0xFFFF
    535          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET
    536          
    537          /*********************************************************************
    538           * @fn          ZDP_DeviceAnnce
    539           *
    540           * @brief       This builds and send a Device_Annce message.  This
    541           *              function sends a broadcast message.
    542           *
    543           * @param       nwkAddr - 16 bit address of the device
    544           * @param       IEEEAddr - 64 bit address of the device
    545           * @param       capabilities - device capabilities.  This field is only
    546           *                 sent for v1.1 networks.
    547           * @param       SecurityEnable - Security Options
    548           *
    549           * @return      afStatus_t
    550           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    551          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    552                                        byte capabilities, byte SecurityEnable )
    553          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    554            zAddrType_t dstAddr;
    555            uint8 len;
    556          
    557            (void)SecurityEnable;  // Intentionally unreferenced parameter
    558          
    559            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000C   7408         MOV       A,#0x8
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine16 & 0xFFFF
    560            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    561          
    562            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_17:
   \   000014   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000017   EA           MOV       A,R2
   \   000018   12....       LCALL     ?Subroutine18 & 0xFFFF
    563            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_21:
   \   00001B   EB           MOV       A,R3
   \   00001C   F0           MOVX      @DPTR,A
    564            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   00001D                ; Setup parameters for call to function sAddrExtCpy
   \   00001D   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000020   E0           MOVX      A,@DPTR
   \   000021   2402         ADD       A,#0x2
   \   000023   FA           MOV       R2,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   3400         ADDC      A,#0x0
   \   000028   FB           MOV       R3,A
   \   000029   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    565            len = 2 + Z_EXTADDR_LEN;
    566          
    567            ZDP_TmpBuf[10] = capabilities;
   \   00002C   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   00002F   C8           XCH       A,R0
   \   000030   240A         ADD       A,#0xa
   \   000032   F582         MOV       DPL,A
   \   000034   E4           CLR       A
   \   000035   38           ADDC      A,R0
   \   000036   F583         MOV       DPH,A
   \   000038   EE           MOV       A,R6
   \   000039   F0           MOVX      @DPTR,A
    568            len++;
    569          
    570            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   00003A                ; Setup parameters for call to function fillAndSend
   \   00003A   75..13       MOV       ?V0,#0x13
   \   00003D   75..00       MOV       ?V1,#0x0
   \   000040   78..         MOV       R0,#?V0
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000045   790B         MOV       R1,#0xb
   \   000047   02....       LJMP      ?Subroutine8 & 0xFFFF
    571          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine111_0
   \   000003                ; // Fall through to label ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000003   22           RET
    572          
    573          /*********************************************************************
    574           * Address Responses
    575           */
    576          
    577          /*********************************************************************
    578           * @fn      zdpProcessAddrReq
    579           *
    580           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    581           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    582           *
    583           * @param   inMsg - incoming message
    584           *
    585           * @return  none
    586           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    587          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    588          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
    589            associated_devices_t *pAssoc;
    590            uint8 reqType;
    591            uint16 aoi = INVALID_NODE_ADDR;
   \   00000E   75..FE       MOV       ?V0,#-0x2
   \   000011   75..FF       MOV       ?V1,#-0x1
    592            uint8 *ieee = NULL;
   \   000014   7E00         MOV       R6,#0x0
   \   000016   7F00         MOV       R7,#0x0
    593          
    594            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   000018   EA           MOV       A,R2
   \   000019   240C         ADD       A,#0xc
   \   00001B   F5..         MOV       ?V8,A
   \   00001D   E4           CLR       A
   \   00001E   35..         ADDC      A,?V7
   \   000020   F5..         MOV       ?V9,A
   \   000022   85..82       MOV       DPL,?V8
   \   000025   F583         MOV       DPH,A
   \   000027   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   00002A   EA           MOV       A,R2
   \   00002B   4B           ORL       A,R3
   \   00002C   7004         JNZ       ??zdpProcessAddrReq_0
   \   00002E   7C08         MOV       R4,#0x8
   \   000030   8002         SJMP      ??zdpProcessAddrReq_1
   \                     ??zdpProcessAddrReq_0:
   \   000032   7C02         MOV       R4,#0x2
   \                     ??zdpProcessAddrReq_1:
   \   000034   E5..         MOV       A,?V6
   \   000036   2413         ADD       A,#0x13
   \   000038   F5..         MOV       ?V12,A
   \   00003A   E4           CLR       A
   \   00003B   35..         ADDC      A,?V7
   \   00003D   F5..         MOV       ?V13,A
   \   00003F   85..82       MOV       DPL,?V12
   \   000042   F583         MOV       DPH,A
   \   000044   12....       LCALL     ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000047   2C           ADD       A,R4
   \   000048   F582         MOV       DPL,A
   \   00004A   E4           CLR       A
   \   00004B   39           ADDC      A,R1
   \   00004C   F583         MOV       DPH,A
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   F5..         MOV       ?V3,A
    595          
    596            if ( inMsg->clusterID == NWK_addr_req )
   \   000051   EA           MOV       A,R2
   \   000052   4B           ORL       A,R3
   \   000053   7047         JNZ       ??zdpProcessAddrReq_2
    597          
    598            {
    599              ieee = inMsg->asdu;
   \   000055   E8           MOV       A,R0
   \   000056   FE           MOV       R6,A
   \   000057   E9           MOV       A,R1
   \   000058   FF           MOV       R7,A
    600          
    601              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \   000059                ; Setup parameters for call to function sAddrExtCmp
   \   000059   E8           MOV       A,R0
   \   00005A   FC           MOV       R4,A
   \   00005B   E9           MOV       A,R1
   \   00005C   FD           MOV       R5,A
   \   00005D   7A..         MOV       R2,#saveExtAddr & 0xff
   \   00005F   7B..         MOV       R3,#(saveExtAddr >> 8) & 0xff
   \   000061   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000064   E9           MOV       A,R1
   \   000065   6006         JZ        ??zdpProcessAddrReq_3
    602              {
    603                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   000067   12....       LCALL     ?Subroutine65 & 0xFFFF
    604              }
   \                     ??CrossCallReturnLabel_199:
   \   00006A   02....       LJMP      ??zdpProcessAddrReq_4 & 0xFFFF
    605              // Handle response for sleeping end devices
    606              else if ( (ZSTACK_ROUTER_BUILD)
    607                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    608                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_3:
   \   00006D                ; Setup parameters for call to function AssocGetWithExt
   \   00006D   EE           MOV       A,R6
   \   00006E   FA           MOV       R2,A
   \   00006F   EF           MOV       A,R7
   \   000070   FB           MOV       R3,A
   \   000071   12....       LCALL     `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   000074   8B..         MOV       ?V5,R3
   \   000076   A9..         MOV       R1,?V5
   \   000078   EA           MOV       A,R2
   \   000079   49           ORL       A,R1
   \   00007A   7003         JNZ       $+5
   \   00007C   02....       LJMP      ??zdpProcessAddrReq_5 & 0xFFFF
   \   00007F   8A82         MOV       DPL,R2
   \   000081   8B83         MOV       DPH,R3
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   6401         XRL       A,#0x1
   \   00008A   6003         JZ        $+5
   \   00008C   02....       LJMP      ??zdpProcessAddrReq_5 & 0xFFFF
    609              {
    610                aoi = pAssoc->shortAddr;
   \   00008F   8A82         MOV       DPL,R2
   \   000091   8B83         MOV       DPH,R3
   \   000093   12....       LCALL     ??Subroutine112_0 & 0xFFFF
    611                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??CrossCallReturnLabel_195:
   \   000096   E5..         MOV       A,?V3
   \   000098   706C         JNZ       ??zdpProcessAddrReq_6
   \   00009A   806D         SJMP      ??zdpProcessAddrReq_4
    612                  reqType = 0xFF; // Force Invalid
    613              }
    614            }
    615            else  // if ( inMsg->clusterID == IEEE_addr_req )
    616            {
    617              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??zdpProcessAddrReq_2:
   \   00009C   8882         MOV       DPL,R0
   \   00009E   8983         MOV       DPH,R1
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   FA           MOV       R2,A
   \   0000A2   A3           INC       DPTR
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   F9           MOV       R1,A
   \   0000A5   EA           MOV       A,R2
   \   0000A6   2E           ADD       A,R6
   \   0000A7   F5..         MOV       ?V0,A
   \   0000A9   E4           CLR       A
   \   0000AA   39           ADDC      A,R1
   \   0000AB   F5..         MOV       ?V1,A
    618          
    619              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   0000AD   90....       MOV       DPTR,#ZDAppNwkAddr
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   6A           XRL       A,R2
   \   0000B2   7003         JNZ       ??zdpProcessAddrReq_7
   \   0000B4   A3           INC       DPTR
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   69           XRL       A,R1
   \                     ??zdpProcessAddrReq_7:
   \   0000B7   7006         JNZ       ??zdpProcessAddrReq_8
    620              {
    621                ieee = saveExtAddr;
   \   0000B9   7E..         MOV       R6,#saveExtAddr & 0xff
   \   0000BB   7F..         MOV       R7,#(saveExtAddr >> 8) & 0xff
   \   0000BD   804A         SJMP      ??zdpProcessAddrReq_4
    622              }
    623              else if ( (ZSTACK_ROUTER_BUILD)
    624                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    625                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_8:
   \   0000BF                ; Setup parameters for call to function AssocGetWithShort
   \   0000BF   AB..         MOV       R3,?V1
   \   0000C1   12....       LCALL     `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   0000C4   8B..         MOV       ?V5,R3
   \   0000C6   A9..         MOV       R1,?V5
   \   0000C8   EA           MOV       A,R2
   \   0000C9   49           ORL       A,R1
   \   0000CA   604D         JZ        ??zdpProcessAddrReq_5
   \   0000CC   8A82         MOV       DPL,R2
   \   0000CE   8B83         MOV       DPH,R3
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   A3           INC       DPTR
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   6401         XRL       A,#0x1
   \   0000D7   7040         JNZ       ??zdpProcessAddrReq_5
    626              {
    627                AddrMgrEntry_t addrEntry;
    628                addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   0000D9   7401         MOV       A,#0x1
   \   0000DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DE   E4           CLR       A
   \   0000DF   12....       LCALL     ?Subroutine35 & 0xFFFF
    629                addrEntry.index = pAssoc->addrIdx;
   \                     ??CrossCallReturnLabel_56:
   \   0000E2   A3           INC       DPTR
   \   0000E3   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   0000E6   740C         MOV       A,#0xc
   \   0000E8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EB   12....       LCALL     ?Subroutine26 & 0xFFFF
    630                if ( AddrMgrEntryGet( &addrEntry ) )
   \                     ??CrossCallReturnLabel_32:
   \   0000EE                ; Setup parameters for call to function AddrMgrEntryGet
   \   0000EE   7401         MOV       A,#0x1
   \   0000F0   12....       LCALL     ?XSTACK_DISP101_8
   \   0000F3   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   0000F6   E9           MOV       A,R1
   \   0000F7   6009         JZ        ??zdpProcessAddrReq_9
    631                {
    632                  ieee = addrEntry.extAddr;
   \   0000F9   7404         MOV       A,#0x4
   \   0000FB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FE   AE82         MOV       R6,DPL
   \   000100   AF83         MOV       R7,DPH
    633                }
    634          
    635                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??zdpProcessAddrReq_9:
   \   000102   E5..         MOV       A,?V3
   \   000104   6003         JZ        ??zdpProcessAddrReq_4
    636                  reqType = 0xFF; // Force Invalid
   \                     ??zdpProcessAddrReq_6:
   \   000106   75..FF       MOV       ?V3,#-0x1
    637              }
    638            }
    639          
    640            if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
   \                     ??zdpProcessAddrReq_4:
   \   000109   74FE         MOV       A,#-0x2
   \   00010B   65..         XRL       A,?V0
   \   00010D   7004         JNZ       ??zdpProcessAddrReq_10
   \   00010F   74FF         MOV       A,#-0x1
   \   000111   65..         XRL       A,?V1
   \                     ??zdpProcessAddrReq_10:
   \   000113   6004         JZ        ??zdpProcessAddrReq_5
   \   000115   EE           MOV       A,R6
   \   000116   4F           ORL       A,R7
   \   000117   7011         JNZ       ??zdpProcessAddrReq_11
   \                     ??zdpProcessAddrReq_5:
   \   000119   E5..         MOV       A,?V6
   \   00011B   240B         ADD       A,#0xb
   \   00011D   F582         MOV       DPL,A
   \   00011F   E4           CLR       A
   \   000120   35..         ADDC      A,?V7
   \   000122   F583         MOV       DPH,A
   \   000124   E0           MOVX      A,@DPTR
   \   000125   6003         JZ        $+5
   \   000127   02....       LJMP      ??zdpProcessAddrReq_12 & 0xFFFF
    641            {
    642              uint8 stat;
    643              uint8 *pBuf = ZDP_TmpBuf;
   \                     ??zdpProcessAddrReq_11:
   \   00012A   12....       LCALL     ?Subroutine54 & 0xFFFF
    644              // Status + IEEE-Addr + Nwk-Addr.
    645              uint8 len = 1 + Z_EXTADDR_LEN + 2;
   \                     ??CrossCallReturnLabel_277:
   \   00012D   75..0B       MOV       ?V2,#0xb
    646              
    647              // If aoi and iee are both setup, we found results
    648              if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \   000130   74FE         MOV       A,#-0x2
   \   000132   65..         XRL       A,?V0
   \   000134   7004         JNZ       ??zdpProcessAddrReq_13
   \   000136   74FF         MOV       A,#-0x1
   \   000138   65..         XRL       A,?V1
   \                     ??zdpProcessAddrReq_13:
   \   00013A   6018         JZ        ??zdpProcessAddrReq_14
   \   00013C   EE           MOV       A,R6
   \   00013D   4F           ORL       A,R7
   \   00013E   6014         JZ        ??zdpProcessAddrReq_14
    649              {
    650                stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED)) 
    651                              ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   000140   E5..         MOV       A,?V3
   \   000142   6006         JZ        ??zdpProcessAddrReq_15
   \   000144   7401         MOV       A,#0x1
   \   000146   65..         XRL       A,?V3
   \   000148   7005         JNZ       ??zdpProcessAddrReq_16
   \                     ??zdpProcessAddrReq_15:
   \   00014A   75..00       MOV       ?V4,#0x0
   \   00014D   801D         SJMP      ??zdpProcessAddrReq_17
   \                     ??zdpProcessAddrReq_16:
   \   00014F   75..80       MOV       ?V4,#-0x80
   \   000152   8018         SJMP      ??zdpProcessAddrReq_17
    652              }
    653              else 
    654              {
    655                // not found and the req was unicast to this device
    656                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??zdpProcessAddrReq_14:
   \   000154   75..81       MOV       ?V4,#-0x7f
    657                
    658                // Fill in the missing field with this device's address
    659                if ( inMsg->clusterID == NWK_addr_req )
   \   000157   85..82       MOV       DPL,?V8
   \   00015A   85..83       MOV       DPH,?V9
   \   00015D   12....       LCALL     ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000160   49           ORL       A,R1
   \   000161   7005         JNZ       ??zdpProcessAddrReq_18
    660                {
    661                  aoi = ZDAppNwkAddr.addr.shortAddr;
   \   000163   12....       LCALL     ?Subroutine65 & 0xFFFF
    662                }
   \                     ??CrossCallReturnLabel_200:
   \   000166   8004         SJMP      ??zdpProcessAddrReq_17
    663                else
    664                {
    665                  ieee = saveExtAddr;
   \                     ??zdpProcessAddrReq_18:
   \   000168   7E..         MOV       R6,#saveExtAddr & 0xff
   \   00016A   7F..         MOV       R7,#(saveExtAddr >> 8) & 0xff
    666                }
    667              }
    668          
    669              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_17:
   \   00016C   8A82         MOV       DPL,R2
   \   00016E   8B83         MOV       DPH,R3
   \   000170   E5..         MOV       A,?V4
   \   000172   12....       LCALL     ?Subroutine28 & 0xFFFF
    670          
    671              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \                     ??CrossCallReturnLabel_40:
   \   000175                ; Setup parameters for call to function sAddrExtCpy
   \   000175   EE           MOV       A,R6
   \   000176   FC           MOV       R4,A
   \   000177   EF           MOV       A,R7
   \   000178   FD           MOV       R5,A
   \   000179   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00017C   8A..         MOV       ?V10,R2
   \   00017E   8B..         MOV       ?V11,R3
   \   000180   AE..         MOV       R6,?V10
   \   000182   AF..         MOV       R7,?V11
    672          
    673              *pBuf++ = LO_UINT16( aoi );
   \   000184   8A82         MOV       DPL,R2
   \   000186   8B83         MOV       DPH,R3
   \   000188   E5..         MOV       A,?V0
   \   00018A   F0           MOVX      @DPTR,A
    674              *pBuf++ = HI_UINT16( aoi );
   \   00018B   A3           INC       DPTR
   \   00018C   E5..         MOV       A,?V1
   \   00018E   F0           MOVX      @DPTR,A
    675          
    676              if ( ZSTACK_ROUTER_BUILD )
    677              {
    678                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
    679                     && (stat == ZDP_SUCCESS) )
   \   00018F   7401         MOV       A,#0x1
   \   000191   65..         XRL       A,?V3
   \   000193   6003         JZ        $+5
   \   000195   02....       LJMP      ??zdpProcessAddrReq_19 & 0xFFFF
   \   000198   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00019B   E0           MOVX      A,@DPTR
   \   00019C   65..         XRL       A,?V0
   \   00019E   7004         JNZ       ??zdpProcessAddrReq_20
   \   0001A0   A3           INC       DPTR
   \   0001A1   E0           MOVX      A,@DPTR
   \   0001A2   65..         XRL       A,?V1
   \                     ??zdpProcessAddrReq_20:
   \   0001A4   6003         JZ        $+5
   \   0001A6   02....       LJMP      ??zdpProcessAddrReq_19 & 0xFFFF
   \   0001A9   E5..         MOV       A,?V4
   \   0001AB   6003         JZ        $+5
   \   0001AD   02....       LJMP      ??zdpProcessAddrReq_19 & 0xFFFF
    680                {
    681                  uint8  cnt = 0;
   \   0001B0   85..82       MOV       DPL,?XSP + 0
   \   0001B3   85..83       MOV       DPH,?XSP + 1
   \   0001B6   E4           CLR       A
   \   0001B7   F0           MOVX      @DPTR,A
    682                  uint16 *list = AssocMakeList( &cnt );
   \   0001B8                ; Setup parameters for call to function AssocMakeList
   \   0001B8   AA..         MOV       R2,?XSP + 0
   \   0001BA   AB..         MOV       R3,?XSP + 1
   \   0001BC   12....       LCALL     `??AssocMakeList::?relay`; Banked call to: AssocMakeList
   \   0001BF   8A..         MOV       ?V0,R2
   \   0001C1   8B..         MOV       ?V1,R3
   \   0001C3   A8..         MOV       R0,?V0
   \   0001C5   A9..         MOV       R1,?V1
    683          
    684                  if ( list != NULL )
   \   0001C7   EE           MOV       A,R6
   \   0001C8   2402         ADD       A,#0x2
   \   0001CA   FA           MOV       R2,A
   \   0001CB   E4           CLR       A
   \   0001CC   3F           ADDC      A,R7
   \   0001CD   FB           MOV       R3,A
   \   0001CE   E8           MOV       A,R0
   \   0001CF   49           ORL       A,R1
   \   0001D0   7003         JNZ       $+5
   \   0001D2   02....       LJMP      ??zdpProcessAddrReq_21 & 0xFFFF
    685                  {
    686                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
   \   0001D5   85..82       MOV       DPL,?V8
   \   0001D8   85..83       MOV       DPH,?V9
   \   0001DB   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0001DE   EC           MOV       A,R4
   \   0001DF   4D           ORL       A,R5
   \   0001E0   7004         JNZ       ??zdpProcessAddrReq_22
   \   0001E2   7C09         MOV       R4,#0x9
   \   0001E4   8002         SJMP      ??zdpProcessAddrReq_23
   \                     ??zdpProcessAddrReq_22:
   \   0001E6   7C03         MOV       R4,#0x3
   \                     ??zdpProcessAddrReq_23:
   \   0001E8   85..82       MOV       DPL,?V12
   \   0001EB   85..83       MOV       DPH,?V13
   \   0001EE   E0           MOVX      A,@DPTR
   \   0001EF   2C           ADD       A,R4
   \   0001F0   F5..         MOV       ?V0,A
   \   0001F2   A3           INC       DPTR
   \   0001F3   E0           MOVX      A,@DPTR
   \   0001F4   3400         ADDC      A,#0x0
   \   0001F6   85..82       MOV       DPL,?V0
   \   0001F9   F583         MOV       DPH,A
   \   0001FB   E0           MOVX      A,@DPTR
   \   0001FC   F5..         MOV       ?V0,A
    687                    uint16 *pList = list + idx;
   \   0001FE   25E0         ADD       A,0xE0 /* A   */
   \   000200   FC           MOV       R4,A
   \   000201   E4           CLR       A
   \   000202   33           RLC       A
   \   000203   FD           MOV       R5,A
   \   000204   E8           MOV       A,R0
   \   000205   2C           ADD       A,R4
   \   000206   FC           MOV       R4,A
   \   000207   E9           MOV       A,R1
   \   000208   3D           ADDC      A,R5
   \   000209   FD           MOV       R5,A
    688          
    689                    // NumAssocDev field is only present on success.
    690                    if ( cnt > idx )
   \   00020A   85..82       MOV       DPL,?XSP + 0
   \   00020D   85..83       MOV       DPH,?XSP + 1
   \   000210   E0           MOVX      A,@DPTR
   \   000211   F5..         MOV       ?V1,A
   \   000213   E5..         MOV       A,?V0
   \   000215   C3           CLR       C
   \   000216   95..         SUBB      A,?V1
   \   000218   500D         JNC       ??zdpProcessAddrReq_24
    691                    {
    692                      cnt -= idx;
   \   00021A   E0           MOVX      A,@DPTR
   \   00021B   C3           CLR       C
   \   00021C   95..         SUBB      A,?V0
   \   00021E   F0           MOVX      @DPTR,A
    693                      len += (cnt * sizeof( uint16 ));
   \   00021F   C3           CLR       C
   \   000220   33           RLC       A
   \   000221   240B         ADD       A,#0xb
   \   000223   F5..         MOV       ?V2,A
   \   000225   8002         SJMP      ??zdpProcessAddrReq_25
    694                    }
    695                    else
    696                    {
    697                      cnt = 0;
   \                     ??zdpProcessAddrReq_24:
   \   000227   E4           CLR       A
   \   000228   F0           MOVX      @DPTR,A
    698                    }
    699                    *pBuf++ = cnt;
   \                     ??zdpProcessAddrReq_25:
   \   000229   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   00022C   12....       LCALL     ?Subroutine17 & 0xFFFF
    700                    len++;
    701          
    702                    // StartIndex field is only present if NumAssocDev field is non-zero.
    703                    *pBuf++ = idx;
   \                     ??CrossCallReturnLabel_19:
   \   00022F   E5..         MOV       A,?V0
   \   000231   F0           MOVX      @DPTR,A
   \   000232   EE           MOV       A,R6
   \   000233   2404         ADD       A,#0x4
   \   000235   FA           MOV       R2,A
   \   000236   E4           CLR       A
   \   000237   3F           ADDC      A,R7
   \   000238   FB           MOV       R3,A
    704                    len++;
   \   000239   05..         INC       ?V2
   \   00023B   05..         INC       ?V2
   \   00023D   8016         SJMP      ??zdpProcessAddrReq_26
    705          
    706                    while ( cnt != 0 )
    707                    {
    708                      *pBuf++ = LO_UINT16( *pList );
   \                     ??zdpProcessAddrReq_27:
   \   00023F   12....       LCALL     ?Subroutine11 & 0xFFFF
    709                      *pBuf++ = HI_UINT16( *pList );
   \                     ??CrossCallReturnLabel_4:
   \   000242   5001         JNC       ??zdpProcessAddrReq_28
   \   000244   0B           INC       R3
    710                      pList++;
   \                     ??zdpProcessAddrReq_28:
   \   000245   EC           MOV       A,R4
   \   000246   2402         ADD       A,#0x2
   \   000248   FC           MOV       R4,A
   \   000249   5001         JNC       ??zdpProcessAddrReq_29
   \   00024B   0D           INC       R5
    711                      cnt--;
   \                     ??zdpProcessAddrReq_29:
   \   00024C   85..82       MOV       DPL,?XSP + 0
   \   00024F   85..83       MOV       DPH,?XSP + 1
   \   000252   E0           MOVX      A,@DPTR
   \   000253   14           DEC       A
   \   000254   F0           MOVX      @DPTR,A
    712                    }
   \                     ??zdpProcessAddrReq_26:
   \   000255   85..82       MOV       DPL,?XSP + 0
   \   000258   85..83       MOV       DPH,?XSP + 1
   \   00025B   E0           MOVX      A,@DPTR
   \   00025C   70E1         JNZ       ??zdpProcessAddrReq_27
    713          
    714                    osal_mem_free( (uint8 *)list );
   \   00025E                ; Setup parameters for call to function osal_mem_free
   \   00025E   E8           MOV       A,R0
   \   00025F   FA           MOV       R2,A
   \   000260   E9           MOV       A,R1
   \   000261   FB           MOV       R3,A
   \   000262   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000265   8009         SJMP      ??zdpProcessAddrReq_19
    715                  }
    716                  else
    717                  {
    718                    // NumAssocDev field is only present on success.
    719                    *pBuf++ = 0;
   \                     ??zdpProcessAddrReq_21:
   \   000267   8A82         MOV       DPL,R2
   \   000269   8B83         MOV       DPH,R3
   \   00026B   E4           CLR       A
   \   00026C   F0           MOVX      @DPTR,A
    720                    len++;
   \   00026D   75..0C       MOV       ?V2,#0xc
    721                  }
    722                }
    723              }
    724          
    725              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??zdpProcessAddrReq_19:
   \   000270   90....       MOV       DPTR,#ZDP_TxOptions
   \   000273   7410         MOV       A,#0x10
   \   000275   12....       LCALL     ?Subroutine36 & 0xFFFF
    726              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \                     ??CrossCallReturnLabel_59:
   \   000278   F5..         MOV       ?V0,A
   \   00027A   A3           INC       DPTR
   \   00027B   E0           MOVX      A,@DPTR
   \   00027C   4480         ORL       A,#0x80
   \   00027E   F5..         MOV       ?V1,A
   \   000280   78..         MOV       R0,#?V0
   \   000282   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000285   A9..         MOV       R1,?V2
   \   000287   E5..         MOV       A,?V6
   \   000289   2402         ADD       A,#0x2
   \   00028B   FC           MOV       R4,A
   \   00028C   E4           CLR       A
   \   00028D   35..         ADDC      A,?V7
   \   00028F   FD           MOV       R5,A
   \   000290   E5..         MOV       A,?V6
   \   000292   240F         ADD       A,#0xf
   \   000294   FA           MOV       R2,A
   \   000295   E4           CLR       A
   \   000296   35..         ADDC      A,?V7
   \   000298   FB           MOV       R3,A
   \   000299   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   00029C   12....       LCALL     ?DEALLOC_XSTACK8
    727              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   00029F   90....       MOV       DPTR,#ZDP_TxOptions
   \   0002A2   E4           CLR       A
   \   0002A3   F0           MOVX      @DPTR,A
    728            }
    729          }
   \                     ??zdpProcessAddrReq_12:
   \   0002A4   740E         MOV       A,#0xe
   \   0002A6   02....       LJMP      ??Subroutine118_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function fillAndSend
   \   000001   85..82       MOV       DPL,?V8
   \   000004   85..83       MOV       DPH,?V9
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000003                REQUIRE ??Subroutine112_0
   \   000003                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F0E         MOV       R7,#0xe
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine124_0:
   \   000000   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   AA82         MOV       R2,DPL
   \   000004   AB83         MOV       R3,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   8C82         MOV       DPL,R4
   \   000002   8D83         MOV       DPH,R5
   \   000004   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000007   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   00000A   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   00000D   A3           INC       DPTR
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   EA           MOV       A,R2
   \   000010   2402         ADD       A,#0x2
   \   000012   FA           MOV       R2,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine132_0
   \   000003                ; // Fall through to label ??Subroutine132_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine132_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    730          
    731          /*********************************************************************
    732           * @fn          ZDP_NodeDescMsg
    733           *
    734           * @brief       Builds and sends a Node Descriptor message, unicast to the
    735           *              specified device.
    736           *
    737           * @param       inMsg - incoming message
    738           * @param       nwkAddr - 16 bit network address for device
    739           * @param       pNodeDesc - pointer to the node descriptor
    740           *
    741           * @return      afStatus_t
    742           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    743          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    744                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    745          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    746            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000008   12....       LCALL     ?Subroutine49 & 0xFFFF
    747            byte len;
    748          
    749            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
    750          
    751            *pBuf++ = ZDP_SUCCESS;
   \                     ??CrossCallReturnLabel_94:
   \   00000B   8E82         MOV       DPL,R6
   \   00000D   F583         MOV       DPH,A
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
    752          
    753            *pBuf++ = LO_UINT16( nwkAddr );
   \   000011   EC           MOV       A,R4
   \   000012   A3           INC       DPTR
   \   000013   F0           MOVX      @DPTR,A
    754            *pBuf++ = HI_UINT16( nwkAddr );
   \   000014   ED           MOV       A,R5
   \   000015   8E82         MOV       DPL,R6
   \   000017   8F83         MOV       DPH,R7
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   740A         MOV       A,#0xa
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   12....       LCALL     ?Subroutine37 & 0xFFFF
    755          
    756            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    757                               (pNodeDesc->UserDescAvail << 4) |
    758                               (pNodeDesc->LogicalType & 0x07));
   \                     ??CrossCallReturnLabel_62:
   \   000024   541F         ANL       A,#0x1f
   \   000026   8E82         MOV       DPL,R6
   \   000028   8F83         MOV       DPH,R7
   \   00002A   12....       LCALL     ?Subroutine25 & 0xFFFF
    759          
    760            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \                     ??CrossCallReturnLabel_265:
   \   00002D   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000030   12....       LCALL     ?Subroutine25 & 0xFFFF
    761            *pBuf++ = pNodeDesc->CapabilityFlags;
   \                     ??CrossCallReturnLabel_266:
   \   000033   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000036   12....       LCALL     ?Subroutine24 & 0xFFFF
    762            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \                     ??CrossCallReturnLabel_168:
   \   000039   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00003C   12....       LCALL     ?Subroutine24 & 0xFFFF
    763            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \                     ??CrossCallReturnLabel_169:
   \   00003F   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000042   12....       LCALL     ?Subroutine23 & 0xFFFF
    764            *pBuf++ = pNodeDesc->MaxBufferSize;
   \                     ??CrossCallReturnLabel_29:
   \   000045   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000048   12....       LCALL     ?Subroutine23 & 0xFFFF
    765            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \                     ??CrossCallReturnLabel_30:
   \   00004B   A3           INC       DPTR
   \   00004C   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00004F   12....       LCALL     ?Subroutine19 & 0xFFFF
    766            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \                     ??CrossCallReturnLabel_23:
   \   000052   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000055   A3           INC       DPTR
   \   000056   F0           MOVX      @DPTR,A
    767          
    768            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \   000057   E8           MOV       A,R0
   \   000058   2408         ADD       A,#0x8
   \   00005A   FC           MOV       R4,A
   \   00005B   E4           CLR       A
   \   00005C   39           ADDC      A,R1
   \   00005D   FD           MOV       R5,A
   \   00005E   8C82         MOV       DPL,R4
   \   000060   F583         MOV       DPH,A
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F5..         MOV       ?V0,A
   \   000065   EE           MOV       A,R6
   \   000066   240B         ADD       A,#0xb
   \   000068   F582         MOV       DPL,A
   \   00006A   E4           CLR       A
   \   00006B   3F           ADDC      A,R7
   \   00006C   F583         MOV       DPH,A
   \   00006E   E5..         MOV       A,?V0
   \   000070   12....       LCALL     ?Subroutine29 & 0xFFFF
    769            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_43:
   \   000073   E0           MOVX      A,@DPTR
   \   000074   C0E0         PUSH      A
   \   000076   EE           MOV       A,R6
   \   000077   240C         ADD       A,#0xc
   \   000079   F582         MOV       DPL,A
   \   00007B   E4           CLR       A
   \   00007C   3F           ADDC      A,R7
   \   00007D   F583         MOV       DPH,A
   \   00007F   D0E0         POP       A
   \   000081   12....       LCALL     ?Subroutine19 & 0xFFFF
    770            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \                     ??CrossCallReturnLabel_24:
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   C0E0         PUSH      A
   \   00008A   EE           MOV       A,R6
   \   00008B   240D         ADD       A,#0xd
   \   00008D   F582         MOV       DPL,A
   \   00008F   E4           CLR       A
   \   000090   3F           ADDC      A,R7
   \   000091   F583         MOV       DPH,A
   \   000093   D0E0         POP       A
   \   000095   F0           MOVX      @DPTR,A
    771            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \   000096   E8           MOV       A,R0
   \   000097   240B         ADD       A,#0xb
   \   000099   F582         MOV       DPL,A
   \   00009B   E4           CLR       A
   \   00009C   39           ADDC      A,R1
   \   00009D   F583         MOV       DPH,A
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   C0E0         PUSH      A
   \   0000A2   EE           MOV       A,R6
   \   0000A3   240E         ADD       A,#0xe
   \   0000A5   F582         MOV       DPL,A
   \   0000A7   E4           CLR       A
   \   0000A8   3F           ADDC      A,R7
   \   0000A9   F583         MOV       DPH,A
   \   0000AB   D0E0         POP       A
   \   0000AD   F0           MOVX      @DPTR,A
    772            *pBuf = pNodeDesc->DescriptorCapability;
   \   0000AE   E8           MOV       A,R0
   \   0000AF   240C         ADD       A,#0xc
   \   0000B1   F582         MOV       DPL,A
   \   0000B3   E4           CLR       A
   \   0000B4   39           ADDC      A,R1
   \   0000B5   F583         MOV       DPH,A
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   C0E0         PUSH      A
   \   0000BA   EE           MOV       A,R6
   \   0000BB   240F         ADD       A,#0xf
   \   0000BD   F582         MOV       DPL,A
   \   0000BF   E4           CLR       A
   \   0000C0   3F           ADDC      A,R7
   \   0000C1   F583         MOV       DPH,A
   \   0000C3   D0E0         POP       A
   \   0000C5   F0           MOVX      @DPTR,A
    773          
    774            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \   0000C6                ; Setup parameters for call to function fillAndSend
   \   0000C6   75..02       MOV       ?V0,#0x2
   \   0000C9   75..80       MOV       ?V1,#-0x80
   \   0000CC   78..         MOV       R0,#?V0
   \   0000CE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D1   7910         MOV       R1,#0x10
   \   0000D3   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   0000D6   5001         JNC       ??ZDP_NodeDescMsg_0
   \   0000D8   0B           INC       R3
   \                     ??ZDP_NodeDescMsg_0:
   \   0000D9   02....       LJMP      ??Subroutine104_0 & 0xFFFF
    775          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine107_0
   \   000003                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine108_0
   \   000002                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   EA           MOV       A,R2
   \   000001   2402         ADD       A,#0x2
   \   000003   FC           MOV       R4,A
   \   000004   E4           CLR       A
   \   000005   3B           ADDC      A,R3
   \   000006   FD           MOV       R5,A
   \   000007   EA           MOV       A,R2
   \   000008   240F         ADD       A,#0xf
   \   00000A   FA           MOV       R2,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine119_0
   \   000001                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine128_0
   \   000002                ; // Fall through to label ??Subroutine128_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine128_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine129_0
   \   000001                ; // Fall through to label ??Subroutine129_0
    776          
    777          /*********************************************************************
    778           * @fn          ZDP_PowerDescMsg
    779           *
    780           * @brief       Builds and sends a Power Descriptor message, unicast to the
    781           *              specified device.
    782           *
    783           * @param       inMsg - incoming message (request)
    784           * @param       nwkAddr - 16 bit network address for device
    785           * @param       pPowerDesc - pointer to the node descriptor
    786           *
    787           * @return      afStatus_t
    788           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    789          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    790                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    791          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    792            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000008   FE           MOV       R6,A
   \   000009   E9           MOV       A,R1
   \   00000A   FF           MOV       R7,A
    793            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
    794          
    795            *pBuf++ = ZDP_SUCCESS;
   \   00000B   8882         MOV       DPL,R0
   \   00000D   F583         MOV       DPH,A
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
    796          
    797            *pBuf++ = LO_UINT16( nwkAddr );
   \   000011   EC           MOV       A,R4
   \   000012   12....       LCALL     ?Subroutine33 & 0xFFFF
    798            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_53:
   \   000015   F0           MOVX      @DPTR,A
   \   000016   740A         MOV       A,#0xa
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine37 & 0xFFFF
    799          
    800            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    801                              | (pPowerDesc->PowerMode & 0x0F));
   \                     ??CrossCallReturnLabel_63:
   \   00001E   8E82         MOV       DPL,R6
   \   000020   8F83         MOV       DPH,R7
   \   000022   A3           INC       DPTR
   \   000023   12....       LCALL     ?Subroutine90 & 0xFFFF
    802            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    803                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \                     ??CrossCallReturnLabel_271:
   \   000026   12....       LCALL     ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000029   540F         ANL       A,#0xf
   \   00002B   F9           MOV       R1,A
   \   00002C   740C         MOV       A,#0xc
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?US_SHR
   \   000033   E5..         MOV       A,?V0
   \   000035   C4           SWAP      A
   \   000036   49           ORL       A,R1
   \   000037   8E82         MOV       DPL,R6
   \   000039   8F83         MOV       DPH,R7
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   F0           MOVX      @DPTR,A
    804          
    805            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \   000040                ; Setup parameters for call to function fillAndSend
   \   000040   75..03       MOV       ?V0,#0x3
   \   000043   75..80       MOV       ?V1,#-0x80
   \   000046   78..         MOV       R0,#?V0
   \   000048   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004B   7905         MOV       R1,#0x5
   \   00004D   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000050   5001         JNC       ??ZDP_PowerDescMsg_0
   \   000052   0B           INC       R3
   \                     ??ZDP_PowerDescMsg_0:
   \   000053   02....       LJMP      ??Subroutine104_0 & 0xFFFF
    806          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine109_0
   \   000003                ; // Fall through to label ??Subroutine109_0
    807          
    808          /*********************************************************************
    809           * @fn          ZDP_SimpleDescMsg
    810           *
    811           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    812           *              specified device.
    813           *
    814           * @param       inMsg - incoming message (request)
    815           * @param       Status - message status (ZDP_SUCCESS or other)
    816           * @param       pSimpleDesc - pointer to the node descriptor
    817           *
    818           * @return      afStatus_t
    819           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    820          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    821                                        SimpleDescriptionFormat_t *pSimpleDesc )
    822          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   12....       LCALL     ?Subroutine58 & 0xFFFF
    823            uint8 *pBuf = ZDP_TmpBuf;
    824            uint8 i, len;
    825          
    826            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \                     ??CrossCallReturnLabel_282:
   \   00000C   EC           MOV       A,R4
   \   00000D   2409         ADD       A,#0x9
   \   00000F   FA           MOV       R2,A
   \   000010   E4           CLR       A
   \   000011   3D           ADDC      A,R5
   \   000012   8A..         MOV       ?V4,R2
   \   000014   F5..         MOV       ?V5,A
   \   000016   EC           MOV       A,R4
   \   000017   2406         ADD       A,#0x6
   \   000019   FA           MOV       R2,A
   \   00001A   E4           CLR       A
   \   00001B   3D           ADDC      A,R5
   \   00001C   8A..         MOV       ?V6,R2
   \   00001E   F5..         MOV       ?V7,A
   \   000020   EE           MOV       A,R6
   \   000021   7023         JNZ       ??ZDP_SimpleDescMsg_0
   \   000023   EC           MOV       A,R4
   \   000024   4D           ORL       A,R5
   \   000025   601F         JZ        ??ZDP_SimpleDescMsg_0
    827            {
    828              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    829              len = 1 + 2 + 1 + 8;
    830              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   000027   85..82       MOV       DPL,?V4
   \   00002A   85..83       MOV       DPH,?V5
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   FA           MOV       R2,A
   \   00002F   85..82       MOV       DPL,?V6
   \   000032   85..83       MOV       DPH,?V7
   \   000035   E0           MOVX      A,@DPTR
   \   000036   2A           ADD       A,R2
   \   000037   C3           CLR       C
   \   000038   33           RLC       A
   \   000039   240C         ADD       A,#0xc
   \   00003B   FA           MOV       R2,A
    831            }
    832            else
    833            {
    834              len = 1 + 2 + 1; // Status + desc length
    835            }
    836            if ( len >= ZDP_BUF_SZ-1 )
   \   00003C   C3           CLR       C
   \   00003D   944F         SUBB      A,#0x4f
   \   00003F   4007         JC        ??ZDP_SimpleDescMsg_1
    837            {
    838              return afStatus_MEM_FAIL;
   \   000041   7910         MOV       R1,#0x10
   \   000043   02....       LJMP      ??ZDP_SimpleDescMsg_2 & 0xFFFF
    839            }
   \                     ??ZDP_SimpleDescMsg_0:
   \   000046   7A04         MOV       R2,#0x4
    840          
    841            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_1:
   \   000048   EE           MOV       A,R6
   \   000049   8882         MOV       DPL,R0
   \   00004B   8983         MOV       DPH,R1
   \   00004D   F0           MOVX      @DPTR,A
    842          
    843            *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \   00004E   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000051   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000054   A3           INC       DPTR
   \   000055   F0           MOVX      @DPTR,A
    844            *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \   000056   90....       MOV       DPTR,#ZDAppNwkAddr + 1
   \   000059   12....       LCALL     ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   00005C   F0           MOVX      @DPTR,A
    845          
    846            if ( len > 4 )
   \   00005D   E8           MOV       A,R0
   \   00005E   2403         ADD       A,#0x3
   \   000060   F582         MOV       DPL,A
   \   000062   E4           CLR       A
   \   000063   39           ADDC      A,R1
   \   000064   F583         MOV       DPH,A
   \   000066   EA           MOV       A,R2
   \   000067   C3           CLR       C
   \   000068   9405         SUBB      A,#0x5
   \   00006A   5003         JNC       $+5
   \   00006C   02....       LJMP      ??ZDP_SimpleDescMsg_3 & 0xFFFF
    847            {
    848              *pBuf++ = len - 4;   // Simple descriptor length
   \   00006F   74FC         MOV       A,#-0x4
   \   000071   2A           ADD       A,R2
   \   000072   F0           MOVX      @DPTR,A
    849          
    850              *pBuf++ = pSimpleDesc->EndPoint;
   \   000073   8C82         MOV       DPL,R4
   \   000075   8D83         MOV       DPH,R5
   \   000077   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   00007A   12....       LCALL     ?Subroutine29 & 0xFFFF
    851              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_44:
   \   00007D   8582..       MOV       ?V2,DPL
   \   000080   8583..       MOV       ?V3,DPH
   \   000083   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000086   12....       LCALL     ?Subroutine10 & 0xFFFF
    852              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_2:
   \   000089   F0           MOVX      @DPTR,A
    853              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \   00008A   EC           MOV       A,R4
   \   00008B   2403         ADD       A,#0x3
   \   00008D   F5..         MOV       ?V2,A
   \   00008F   E4           CLR       A
   \   000090   3D           ADDC      A,R5
   \   000091   F5..         MOV       ?V3,A
   \   000093   85..82       MOV       DPL,?V2
   \   000096   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000099   12....       LCALL     ?Subroutine10 & 0xFFFF
    854              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_3:
   \   00009C   A3           INC       DPTR
   \   00009D   12....       LCALL     ?Subroutine22 & 0xFFFF
    855          
    856              *pBuf++ = (byte)(pSimpleDesc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_27:
   \   0000A0   C4           SWAP      A
   \   0000A1   54F0         ANL       A,#0xf0
   \   0000A3   8882         MOV       DPL,R0
   \   0000A5   8983         MOV       DPH,R1
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   A3           INC       DPTR
   \   0000B0   F0           MOVX      @DPTR,A
    857          
    858              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \   0000B1   85..82       MOV       DPL,?V6
   \   0000B4   85..83       MOV       DPH,?V7
   \   0000B7   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   F0           MOVX      @DPTR,A
   \   0000C0   E8           MOV       A,R0
   \   0000C1   240B         ADD       A,#0xb
   \   0000C3   F8           MOV       R0,A
   \   0000C4   5001         JNC       ??ZDP_SimpleDescMsg_4
   \   0000C6   09           INC       R1
    859              if ( pSimpleDesc->AppNumInClusters )
   \                     ??ZDP_SimpleDescMsg_4:
   \   0000C7   85..82       MOV       DPL,?V6
   \   0000CA   85..83       MOV       DPH,?V7
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   6045         JZ        ??ZDP_SimpleDescMsg_5
    860              {
    861                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   0000D0   7B00         MOV       R3,#0x0
   \   0000D2   EC           MOV       A,R4
   \   0000D3   2407         ADD       A,#0x7
   \   0000D5   F5..         MOV       ?V2,A
   \   0000D7   E4           CLR       A
   \   0000D8   3D           ADDC      A,R5
   \   0000D9   85....       MOV       ?V8,?V2
   \   0000DC   F5..         MOV       ?V9,A
   \   0000DE   8028         SJMP      ??ZDP_SimpleDescMsg_6
    862                {
    863                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_7:
   \   0000E0   EB           MOV       A,R3
   \   0000E1   12....       LCALL     ?Subroutine97 & 0xFFFF
    864                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
    865                }
   \                     ??CrossCallReturnLabel_164:
   \   0000E4   85..82       MOV       DPL,?V8
   \   0000E7   85..83       MOV       DPH,?V9
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   25..         ADD       A,?V2
   \   0000ED   FF           MOV       R7,A
   \   0000EE   A3           INC       DPTR
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   35..         ADDC      A,?V3
   \   0000F2   8F82         MOV       DPL,R7
   \   0000F4   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   0000F7   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0000FA   25..         ADD       A,?V2
   \   0000FC   FF           MOV       R7,A
   \   0000FD   A3           INC       DPTR
   \   0000FE   E0           MOVX      A,@DPTR
   \   0000FF   35..         ADDC      A,?V3
   \   000101   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000104   5001         JNC       ??ZDP_SimpleDescMsg_8
   \   000106   09           INC       R1
   \                     ??ZDP_SimpleDescMsg_8:
   \   000107   0B           INC       R3
   \                     ??ZDP_SimpleDescMsg_6:
   \   000108   85..82       MOV       DPL,?V6
   \   00010B   85..83       MOV       DPH,?V7
   \   00010E   E0           MOVX      A,@DPTR
   \   00010F   FF           MOV       R7,A
   \   000110   EB           MOV       A,R3
   \   000111   C3           CLR       C
   \   000112   9F           SUBB      A,R7
   \   000113   40CB         JC        ??ZDP_SimpleDescMsg_7
    866              }
    867          
    868              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_5:
   \   000115   85..82       MOV       DPL,?V4
   \   000118   85..83       MOV       DPH,?V5
   \   00011B   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00011E   A3           INC       DPTR
   \   00011F   A882         MOV       R0,DPL
   \   000121   A983         MOV       R1,DPH
    869              if ( pSimpleDesc->AppNumOutClusters )
   \   000123   85..82       MOV       DPL,?V4
   \   000126   85..83       MOV       DPH,?V5
   \   000129   E0           MOVX      A,@DPTR
   \   00012A   604A         JZ        ??ZDP_SimpleDescMsg_9
    870              {
    871                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   00012C   7B00         MOV       R3,#0x0
   \   00012E   EC           MOV       A,R4
   \   00012F   240A         ADD       A,#0xa
   \   000131   5001         JNC       ??ZDP_SimpleDescMsg_10
   \   000133   0D           INC       R5
   \                     ??ZDP_SimpleDescMsg_10:
   \   000134   F5..         MOV       ?V2,A
   \   000136   8D..         MOV       ?V3,R5
   \                     ??ZDP_SimpleDescMsg_11:
   \   000138   85..82       MOV       DPL,?V4
   \   00013B   85..83       MOV       DPH,?V5
   \   00013E   E0           MOVX      A,@DPTR
   \   00013F   FC           MOV       R4,A
   \   000140   EB           MOV       A,R3
   \   000141   C3           CLR       C
   \   000142   9C           SUBB      A,R4
   \   000143   5031         JNC       ??ZDP_SimpleDescMsg_9
    872                {
    873                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   000145   EB           MOV       A,R3
   \   000146   25E0         ADD       A,0xE0 /* A   */
   \   000148   FC           MOV       R4,A
   \   000149   E4           CLR       A
   \   00014A   33           RLC       A
   \   00014B   FD           MOV       R5,A
   \   00014C   85..82       MOV       DPL,?V2
   \   00014F   85..83       MOV       DPH,?V3
   \   000152   E0           MOVX      A,@DPTR
   \   000153   2C           ADD       A,R4
   \   000154   FF           MOV       R7,A
   \   000155   A3           INC       DPTR
   \   000156   E0           MOVX      A,@DPTR
   \   000157   3D           ADDC      A,R5
   \   000158   8F82         MOV       DPL,R7
   \   00015A   F583         MOV       DPH,A
   \   00015C   12....       LCALL     ?Subroutine45 & 0xFFFF
    874                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \                     ??CrossCallReturnLabel_84:
   \   00015F   85..82       MOV       DPL,?V2
   \   000162   85..83       MOV       DPH,?V3
   \   000165   E0           MOVX      A,@DPTR
   \   000166   2C           ADD       A,R4
   \   000167   FF           MOV       R7,A
   \   000168   A3           INC       DPTR
   \   000169   E0           MOVX      A,@DPTR
   \   00016A   3D           ADDC      A,R5
   \   00016B   12....       LCALL     ?Subroutine50 & 0xFFFF
    875                }
   \                     ??CrossCallReturnLabel_100:
   \   00016E   5001         JNC       ??ZDP_SimpleDescMsg_12
   \   000170   09           INC       R1
   \                     ??ZDP_SimpleDescMsg_12:
   \   000171   0B           INC       R3
   \   000172   80C4         SJMP      ??ZDP_SimpleDescMsg_11
    876              }
    877            }
    878          
    879            else
    880            {
    881              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_3:
   \   000174   E4           CLR       A
   \   000175   F0           MOVX      @DPTR,A
    882            }
    883          
    884            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_9:
   \   000176                ; Setup parameters for call to function fillAndSend
   \   000176   75..04       MOV       ?V2,#0x4
   \   000179   75..80       MOV       ?V3,#-0x80
   \   00017C   78..         MOV       R0,#?V2
   \   00017E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000181   EA           MOV       A,R2
   \   000182   F9           MOV       R1,A
   \   000183   E5..         MOV       A,?V0
   \   000185   2402         ADD       A,#0x2
   \   000187   FC           MOV       R4,A
   \   000188   E4           CLR       A
   \   000189   35..         ADDC      A,?V1
   \   00018B   FD           MOV       R5,A
   \   00018C   E5..         MOV       A,?V0
   \   00018E   240F         ADD       A,#0xf
   \   000190   FA           MOV       R2,A
   \   000191   E4           CLR       A
   \   000192   35..         ADDC      A,?V1
   \   000194   FB           MOV       R3,A
   \   000195   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000198   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_2:
   \   00019B                REQUIRE ?Subroutine5
   \   00019B                ; // Fall through to label ?Subroutine5
    885          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F0C         MOV       R7,#0xc
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   8F82         MOV       DPL,R7
   \   000002   F583         MOV       DPH,A
   \   000004   A3           INC       DPTR
   \   000005   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000007   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine120_0
   \   000002                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine121_0
   \   000002                ; // Fall through to label ??Subroutine121_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET
    886          
    887          /*********************************************************************
    888           * @fn          ZDP_EPRsp
    889           *
    890           * @brief       This builds and send an endpoint list. Used in
    891           *              Active_EP_rsp and Match_Desc_Rsp
    892           *              message.  This function sends unicast message to the
    893           *              requesting device.
    894           *
    895           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
    896           * @param       dstAddr - destination address
    897           * @param       Status - message status (ZDP_SUCCESS or other)
    898           * @param       nwkAddr - Device's short address that this response describes
    899           * @param       Count - number of endpoint/interfaces in list
    900           * @param       pEPIntfList - Array of Endpoint/Interfaces
    901           * @param       SecurityEnable - Security Options
    902           *
    903           * @return      afStatus_t
    904           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    905          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
    906                                  byte Status, uint16 nwkAddr, byte Count,
    907                                  uint8 *pEPList,
    908                                  byte SecurityEnable )
    909          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V2,R2
   \   000014   8B..         MOV       ?V3,R3
   \   000016   EC           MOV       A,R4
   \   000017   FE           MOV       R6,A
   \   000018   ED           MOV       A,R5
   \   000019   FF           MOV       R7,A
    910            uint8 *pBuf = ZDP_TmpBuf;
   \   00001A   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00001D   12....       LCALL     ?Subroutine56 & 0xFFFF
    911            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \                     ??CrossCallReturnLabel_109:
   \   000020   75..04       MOV       ?V0,#0x4
    912            byte txOptions;
    913          
    914            (void)SecurityEnable;  // Intentionally unreferenced parameter
    915          
    916            if ( MsgType == Match_Desc_rsp )
   \   000023   7406         MOV       A,#0x6
   \   000025   65..         XRL       A,?V2
   \   000027   7004         JNZ       ??ZDP_EPRsp_0
   \   000029   7480         MOV       A,#-0x80
   \   00002B   65..         XRL       A,?V3
   \                     ??ZDP_EPRsp_0:
   \   00002D   7005         JNZ       ??ZDP_EPRsp_1
    917              txOptions = AF_MSG_ACK_REQUEST;
   \   00002F   75..10       MOV       ?V1,#0x10
   \   000032   8003         SJMP      ??ZDP_EPRsp_2
    918            else
    919              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   000034   75..00       MOV       ?V1,#0x0
    920          
    921              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   000037   7410         MOV       A,#0x10
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00003F   7411         MOV       A,#0x11
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   12....       LCALL     ?Subroutine13 & 0xFFFF
    922            *pBuf++ = LO_UINT16( nwkAddr );
    923            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_8:
   \   000047   7413         MOV       A,#0x13
   \   000049   12....       LCALL     ?XSTACK_DISP0_8
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   F9           MOV       R1,A
    924          
    925            *pBuf++ = Count;   // Endpoint/Interface count
   \   00004E   8A82         MOV       DPL,R2
   \   000050   8B83         MOV       DPH,R3
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   F0           MOVX      @DPTR,A
    926          
    927            if ( Count )
   \   000056   6021         JZ        ??ZDP_EPRsp_3
    928            {
    929              len += Count;
   \   000058   7404         MOV       A,#0x4
   \   00005A   29           ADD       A,R1
   \   00005B   F5..         MOV       ?V0,A
    930              osal_memcpy( pBuf, pEPList, Count );
   \   00005D                ; Setup parameters for call to function osal_memcpy
   \   00005D   7414         MOV       A,#0x14
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   12....       LCALL     ?Subroutine46 & 0xFFFF
    931            }
   \                     ??CrossCallReturnLabel_87:
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000068   E9           MOV       A,R1
   \   000069   FC           MOV       R4,A
   \   00006A   7D00         MOV       R5,#0x0
   \   00006C   EA           MOV       A,R2
   \   00006D   2404         ADD       A,#0x4
   \   00006F   FA           MOV       R2,A
   \   000070   5001         JNC       ??ZDP_EPRsp_4
   \   000072   0B           INC       R3
   \                     ??ZDP_EPRsp_4:
   \   000073   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000076   12....       LCALL     ?DEALLOC_XSTACK8
    932          
    933            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   000079   E5..         MOV       A,?V1
   \   00007B   90....       MOV       DPTR,#ZDP_TxOptions
   \   00007E   F0           MOVX      @DPTR,A
   \   00007F                ; Setup parameters for call to function fillAndSend
   \   00007F   78..         MOV       R0,#?V2
   \   000081   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000084   A9..         MOV       R1,?V0
   \   000086   EE           MOV       A,R6
   \   000087   FC           MOV       R4,A
   \   000088   EF           MOV       A,R7
   \   000089   FD           MOV       R5,A
   \   00008A   7402         MOV       A,#0x2
   \   00008C   12....       LCALL     ?XSTACK_DISP101_8
   \   00008F   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000092   12....       LCALL     ?DEALLOC_XSTACK8
   \   000095   E9           MOV       A,R1
   \   000096   F9           MOV       R1,A
   \   000097   90....       MOV       DPTR,#ZDP_TxOptions
   \   00009A   E4           CLR       A
   \   00009B   F0           MOVX      @DPTR,A
   \   00009C   04           INC       A
   \   00009D   02....       LJMP      ?Subroutine3 & 0xFFFF
    934          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000003   FA           MOV       R2,A
   \   000004   E9           MOV       A,R1
   \   000005   FB           MOV       R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   8A82         MOV       DPL,R2
   \   000008   8B83         MOV       DPH,R3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   75..00       MOV       ?V6,#0x0
   \   00000A   78..         MOV       R0,#?V4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   E9           MOV       A,R1
   \   000002   8A82         MOV       DPL,R2
   \   000004   8B83         MOV       DPH,R3
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET
    935          
    936          /*********************************************************************
    937           * @fn          ZDP_UserDescRsp
    938           *
    939           * @brief       Build and send the User Decriptor Response.
    940           *
    941           *
    942           * @param       dstAddr - destination address
    943           * @param       nwkAddrOfInterest -
    944           * @param       userDesc -
    945           * @param       SecurityEnable - Security Options
    946           *
    947           * @return      ZStatus_t
    948           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    949          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
    950                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
    951                          byte SecurityEnable )
    952          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   12....       LCALL     ?Subroutine85 & 0xFFFF
    953            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_292:
   \   000015   88..         MOV       ?V0,R0
   \   000017   F5..         MOV       ?V1,A
   \   000019   7413         MOV       A,#0x13
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   12....       LCALL     ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000021   88..         MOV       ?V8,R0
   \   000023   F5..         MOV       ?V9,A
    954            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
    955          
    956            (void)SecurityEnable;  // Intentionally unreferenced parameter
    957          
    958            len += userDesc->len;
   \   000025   8882         MOV       DPL,R0
   \   000027   F583         MOV       DPH,A
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   2404         ADD       A,#0x4
   \   00002C   F5..         MOV       ?V2,A
    959          
    960            *pBuf++ = ZSUCCESS;
   \   00002E   85..82       MOV       DPL,?V0
   \   000031   85..83       MOV       DPH,?V1
   \   000034   E4           CLR       A
   \   000035   F0           MOVX      @DPTR,A
    961          
    962            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
   \   000036   EC           MOV       A,R4
   \   000037   A3           INC       DPTR
   \   000038   F0           MOVX      @DPTR,A
    963            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \   000039   ED           MOV       A,R5
   \   00003A   85..82       MOV       DPL,?V0
   \   00003D   85..83       MOV       DPH,?V1
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   F0           MOVX      @DPTR,A
    964          
    965            *pBuf++ = userDesc->len;
   \   000043   8882         MOV       DPL,R0
   \   000045   85..83       MOV       DPH,?V9
   \   000048   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00004B   A3           INC       DPTR
   \   00004C   F0           MOVX      @DPTR,A
    966            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \   00004D                ; Setup parameters for call to function osal_memcpy
   \   00004D   8882         MOV       DPL,R0
   \   00004F   85..83       MOV       DPH,?V9
   \   000052   A3           INC       DPTR
   \   000053   A982         MOV       R1,DPL
   \   000055   AA83         MOV       R2,DPH
   \   000057   89..         MOV       ?V4,R1
   \   000059   8A..         MOV       ?V5,R2
   \   00005B   75..00       MOV       ?V6,#0x0
   \   00005E   78..         MOV       R0,#?V4
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000063   85..82       MOV       DPL,?V8
   \   000066   85..83       MOV       DPH,?V9
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   FC           MOV       R4,A
   \   00006B   7D00         MOV       R5,#0x0
   \   00006D   E5..         MOV       A,?V0
   \   00006F   2404         ADD       A,#0x4
   \   000071   FA           MOV       R2,A
   \   000072   E4           CLR       A
   \   000073   35..         ADDC      A,?V1
   \   000075   FB           MOV       R3,A
   \   000076   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000079   12....       LCALL     ?DEALLOC_XSTACK8
    967          
    968            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   00007C                ; Setup parameters for call to function fillAndSend
   \   00007C   75..11       MOV       ?V0,#0x11
   \   00007F   75..80       MOV       ?V1,#-0x80
   \   000082   78..         MOV       R0,#?V0
   \   000084   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000087   A9..         MOV       R1,?V2
   \   000089   EE           MOV       A,R6
   \   00008A   FC           MOV       R4,A
   \   00008B   EF           MOV       A,R7
   \   00008C   FD           MOV       R5,A
   \   00008D   7402         MOV       A,#0x2
   \   00008F   12....       LCALL     ?XSTACK_DISP101_8
   \   000092   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000095   12....       LCALL     ?DEALLOC_XSTACK8
   \   000098   02....       LJMP      ?Subroutine6 & 0xFFFF
    969          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7401         MOV       A,#0x1
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine114_0
   \   000005                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   7F0A         MOV       R7,#0xa
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET
    970          
    971          /*********************************************************************
    972           * @fn          ZDP_ServerDiscRsp
    973           *
    974           * @brief       Build and send the Server_Discovery_rsp response.
    975           *
    976           * @param       transID - Transaction sequence number of request.
    977           * @param       dstAddr - Network Destination Address.
    978           * @param       status - Status of response to request.
    979           * @param       aoi - Network Address of Interest of request.
    980           * @param       serverMask - Bit map of service(s) being sought.
    981           * @param       SecurityEnable - Security Options
    982           *
    983           * @return      ZStatus_t
    984           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    985          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
    986                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
    987          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   EC           MOV       A,R4
   \   000013   FE           MOV       R6,A
    988            const byte len = 1  + 2;  // status + aoi + mask.
    989            uint8 *pBuf = ZDP_TmpBuf;
   \   000014   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000017   FC           MOV       R4,A
   \   000018   E9           MOV       A,R1
   \   000019   FD           MOV       R5,A
    990            ZStatus_t stat;
    991          
    992            // Intentionally unreferenced parameters
    993            (void)aoi;
    994            (void)SecurityEnable;
    995          
    996            *pBuf++ = status;
   \   00001A   EE           MOV       A,R6
   \   00001B   8882         MOV       DPL,R0
   \   00001D   8983         MOV       DPH,R1
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   740D         MOV       A,#0xd
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ?Subroutine51 & 0xFFFF
    997          
    998            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_101:
   \   000028   A3           INC       DPTR
   \   000029   F0           MOVX      @DPTR,A
    999            *pBuf++ = HI_UINT16( serverMask );
   \   00002A   E9           MOV       A,R1
   \   00002B   8C82         MOV       DPL,R4
   \   00002D   8D83         MOV       DPH,R5
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   F0           MOVX      @DPTR,A
   1000          
   1001            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   000032   90....       MOV       DPTR,#ZDP_TxOptions
   \   000035   7410         MOV       A,#0x10
   \   000037   F0           MOVX      @DPTR,A
   1002            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   000038                ; Setup parameters for call to function fillAndSend
   \   000038   75..15       MOV       ?V0,#0x15
   \   00003B   75..80       MOV       ?V1,#-0x80
   \   00003E   78..         MOV       R0,#?V0
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000043   7903         MOV       R1,#0x3
   \   000045   EA           MOV       A,R2
   \   000046   FC           MOV       R4,A
   \   000047   EB           MOV       A,R3
   \   000048   FD           MOV       R5,A
   \   000049   7402         MOV       A,#0x2
   \   00004B   12....       LCALL     ?XSTACK_DISP101_8
   \   00004E   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000051   12....       LCALL     ?DEALLOC_XSTACK8
   \   000054   E9           MOV       A,R1
   \   000055   F9           MOV       R1,A
   1003            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000056   90....       MOV       DPTR,#ZDP_TxOptions
   \   000059   E4           CLR       A
   \   00005A   F0           MOVX      @DPTR,A
   1004          
   1005            return ( stat );
   \   00005B   04           INC       A
   \   00005C   02....       LJMP      ??Subroutine105_0 & 0xFFFF
   1006          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000003   8C82         MOV       DPL,R4
   \   000005   8D83         MOV       DPH,R5
   \   000007   22           RET
   1007          
   1008          /*********************************************************************
   1009           * @fn          ZDP_GenericRsp
   1010           *
   1011           * @brief       Sends a response message with only the parameter status
   1012           *              byte and the addr of interest for data.
   1013           *              This function sends unicast message to the
   1014           *              requesting device.
   1015           *
   1016           * @param       dstAddr - destination address
   1017           * @param       status  - generic status for response
   1018           * @param       aoi     - address of interest
   1019           * @param       dstAddr - destination address
   1020           * @param       rspId   - response cluster ID
   1021           * @param       SecurityEnable - Security Options
   1022           *
   1023           * @return      afStatus_t
   1024           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1025          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
   1026                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
   1027          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   1028            uint8 len;
   1029          
   1030            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1031          
   1032            ZDP_TmpBuf[0] = status;
   \   000012   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000015   EC           MOV       A,R4
   \   000016   F0           MOVX      @DPTR,A
   \   000017   740A         MOV       A,#0xa
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   1033            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \                     ??CrossCallReturnLabel_285:
   \   00001F   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FC           MOV       R4,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F583         MOV       DPH,A
   \   000028   8C82         MOV       DPL,R4
   \   00002A   A3           INC       DPTR
   \   00002B   E8           MOV       A,R0
   \   00002C   12....       LCALL     ?Subroutine12 & 0xFFFF
   1034            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   1035          
   1036            // Length byte
   1037            ZDP_TmpBuf[3] = 0;
   \                     ??CrossCallReturnLabel_7:
   \   00002F   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E4           CLR       A
   \   000036   F0           MOVX      @DPTR,A
   1038            len = 4;
   1039          
   1040            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   740C         MOV       A,#0xc
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003F   7904         MOV       R1,#0x4
   \   000041   EA           MOV       A,R2
   \   000042   FC           MOV       R4,A
   \   000043   EB           MOV       A,R3
   \   000044   FD           MOV       R5,A
   \   000045   7402         MOV       A,#0x2
   \   000047   12....       LCALL     ?XSTACK_DISP101_8
   \   00004A   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   00004D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000050   7401         MOV       A,#0x1
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
   \   000055                REQUIRE ?Subroutine7
   \   000055                ; // Fall through to label ?Subroutine7
   1041          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1042          
   1043          /*********************************************************************
   1044           * Binding
   1045           */
   1046          /*********************************************************************
   1047           * @fn          ZDP_EndDeviceBindReq
   1048           *
   1049           * @brief       This builds and sends a End_Device_Bind_req message.
   1050           *              This function sends a unicast message.
   1051           *
   1052           * @param       dstAddr - destination address
   1053           * @param       LocalCoordinator - short address of local coordinator
   1054           * @param       epIntf - Endpoint/Interface of Simple Desc
   1055           * @param       ProfileID - Profile ID
   1056           *
   1057           *   The Input cluster list is the opposite of what you would think.
   1058           *   This is the output cluster list of this device
   1059           * @param       NumInClusters - number of input clusters
   1060           * @param       InClusterList - input cluster ID list
   1061           *
   1062           *   The Output cluster list is the opposite of what you would think.
   1063           *   This is the input cluster list of this device
   1064           * @param       NumOutClusters - number of output clusters
   1065           * @param       OutClusterList - output cluster ID list
   1066           *
   1067           * @param       SecurityEnable - Security Options
   1068           *
   1069           * @return      afStatus_t
   1070           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1071          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1072                                           uint16 LocalCoordinator,
   1073                                           byte endPoint,
   1074                                           uint16 ProfileID,
   1075                                           byte NumInClusters, cId_t *InClusterList,
   1076                                           byte NumOutClusters, cId_t *OutClusterList,
   1077                                           byte SecurityEnable )
   1078          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   \   00000D   89..         MOV       ?V3,R1
   1079            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000012   12....       LCALL     ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000015   7414         MOV       A,#0x14
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V2,A
   \   00001D   7417         MOV       A,#0x17
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FF           MOV       R7,A
   1080            uint8 i, len;
   1081            uint8 *ieeeAddr;
   1082          
   1083            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1084          
   1085            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1086            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   1087            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \   000024   E5..         MOV       A,?V2
   \   000026   2F           ADD       A,R7
   \   000027   C3           CLR       C
   \   000028   33           RLC       A
   \   000029   240F         ADD       A,#0xf
   \   00002B   FE           MOV       R6,A
   1088          
   1089            if ( len >= ZDP_BUF_SZ-1 )
   \   00002C   C3           CLR       C
   \   00002D   944F         SUBB      A,#0x4f
   \   00002F   4005         JC        ??ZDP_EndDeviceBindReq_0
   1090            {
   1091              return afStatus_MEM_FAIL;
   \   000031   7910         MOV       R1,#0x10
   \   000033   02....       LJMP      ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1092            }
   1093          
   1094            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   000036                ; Setup parameters for call to function NLME_GetShortAddr
   \   000036   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000039   EA           MOV       A,R2
   \   00003A   65..         XRL       A,?V4
   \   00003C   7003         JNZ       ??ZDP_EndDeviceBindReq_2
   \   00003E   EB           MOV       A,R3
   \   00003F   65..         XRL       A,?V5
   \                     ??ZDP_EndDeviceBindReq_2:
   \   000041   6005         JZ        ??ZDP_EndDeviceBindReq_3
   1095            {
   1096              return afStatus_INVALID_PARAMETER;
   \   000043   7902         MOV       R1,#0x2
   \   000045   02....       LJMP      ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1097            }
   1098          
   1099            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   000048   85..82       MOV       DPL,?V0
   \   00004B   85..83       MOV       DPH,?V1
   \   00004E   E5..         MOV       A,?V4
   \   000050   F0           MOVX      @DPTR,A
   1100            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   000051   E5..         MOV       A,?V5
   \   000053   A3           INC       DPTR
   \   000054   F0           MOVX      @DPTR,A
   1101          
   1102            ieeeAddr = NLME_GetExtAddr();
   \   000055                ; Setup parameters for call to function NLME_GetExtAddr
   \   000055   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000058   8A..         MOV       ?V4,R2
   \   00005A   8B..         MOV       ?V5,R3
   \   00005C   AC..         MOV       R4,?V4
   \   00005E   AD..         MOV       R5,?V5
   1103            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \   000060                ; Setup parameters for call to function sAddrExtCpy
   \   000060   E5..         MOV       A,?V0
   \   000062   2402         ADD       A,#0x2
   \   000064   FA           MOV       R2,A
   \   000065   E4           CLR       A
   \   000066   35..         ADDC      A,?V1
   \   000068   FB           MOV       R3,A
   \   000069   12....       LCALL     ?Subroutine72 & 0xFFFF
   1104          
   1105            *pBuf++ = endPoint;
   \                     ??CrossCallReturnLabel_127:
   \   00006C   7412         MOV       A,#0x12
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   12....       LCALL     ?Subroutine13 & 0xFFFF
   1106          
   1107            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   1108            *pBuf++ = HI_UINT16( ProfileID );
   1109          
   1110            *pBuf++ = NumInClusters; // Input cluster list
   \                     ??CrossCallReturnLabel_9:
   \   000074   8A82         MOV       DPL,R2
   \   000076   8B83         MOV       DPH,R3
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   E5..         MOV       A,?V2
   \   00007D   F0           MOVX      @DPTR,A
   \   00007E   EA           MOV       A,R2
   \   00007F   2404         ADD       A,#0x4
   \   000081   F5..         MOV       ?V0,A
   \   000083   E4           CLR       A
   \   000084   3B           ADDC      A,R3
   \   000085   F5..         MOV       ?V1,A
   1111            for ( i = 0; i < NumInClusters; ++i )
   \   000087   7C00         MOV       R4,#0x0
   \   000089   7415         MOV       A,#0x15
   \   00008B   12....       LCALL     ?XSTACK_DISP0_8
   \   00008E   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000091   802F         SJMP      ??ZDP_EndDeviceBindReq_4
   1112            {
   1113              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_5:
   \   000093   EC           MOV       A,R4
   \   000094   25E0         ADD       A,0xE0 /* A   */
   \   000096   F5..         MOV       ?V4,A
   \   000098   E4           CLR       A
   \   000099   33           RLC       A
   \   00009A   F5..         MOV       ?V5,A
   \   00009C   EA           MOV       A,R2
   \   00009D   25..         ADD       A,?V4
   \   00009F   F5..         MOV       ?V4,A
   \   0000A1   EB           MOV       A,R3
   \   0000A2   35..         ADDC      A,?V5
   \   0000A4   F5..         MOV       ?V5,A
   \   0000A6   85..82       MOV       DPL,?V4
   \   0000A9   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   0000AC   F0           MOVX      @DPTR,A
   1114              *pBuf++ = HI_UINT16(InClusterList[i]);
   \   0000AD   85..82       MOV       DPL,?V4
   \   0000B0   85..83       MOV       DPH,?V5
   \   0000B3   A3           INC       DPTR
   \   0000B4   12....       LCALL     ?Subroutine45 & 0xFFFF
   1115            }
   \                     ??CrossCallReturnLabel_86:
   \   0000B7   E5..         MOV       A,?V0
   \   0000B9   2402         ADD       A,#0x2
   \   0000BB   F5..         MOV       ?V0,A
   \   0000BD   5002         JNC       ??ZDP_EndDeviceBindReq_6
   \   0000BF   05..         INC       ?V1
   \                     ??ZDP_EndDeviceBindReq_6:
   \   0000C1   0C           INC       R4
   \                     ??ZDP_EndDeviceBindReq_4:
   \   0000C2   85..82       MOV       DPL,?V0
   \   0000C5   85..83       MOV       DPH,?V1
   \   0000C8   A3           INC       DPTR
   \   0000C9   A882         MOV       R0,DPL
   \   0000CB   A983         MOV       R1,DPH
   \   0000CD   EC           MOV       A,R4
   \   0000CE   C3           CLR       C
   \   0000CF   95..         SUBB      A,?V2
   \   0000D1   40C0         JC        ??ZDP_EndDeviceBindReq_5
   1116          
   1117            *pBuf++ = NumOutClusters; // Output cluster list
   \   0000D3   EF           MOV       A,R7
   \   0000D4   85..82       MOV       DPL,?V0
   \   0000D7   85..83       MOV       DPH,?V1
   \   0000DA   F0           MOVX      @DPTR,A
   \   0000DB   88..         MOV       ?V0,R0
   \   0000DD   89..         MOV       ?V1,R1
   1118            for ( i = 0; i < NumOutClusters; ++i )
   \   0000DF   7C00         MOV       R4,#0x0
   \   0000E1   7418         MOV       A,#0x18
   \   0000E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E6   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   0000E9   8025         SJMP      ??ZDP_EndDeviceBindReq_7
   1119            {
   1120              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_8:
   \   0000EB   EC           MOV       A,R4
   \   0000EC   25E0         ADD       A,0xE0 /* A   */
   \   0000EE   FA           MOV       R2,A
   \   0000EF   E4           CLR       A
   \   0000F0   33           RLC       A
   \   0000F1   FB           MOV       R3,A
   \   0000F2   E8           MOV       A,R0
   \   0000F3   2A           ADD       A,R2
   \   0000F4   FA           MOV       R2,A
   \   0000F5   E9           MOV       A,R1
   \   0000F6   3B           ADDC      A,R3
   \   0000F7   FB           MOV       R3,A
   \   0000F8   8A82         MOV       DPL,R2
   \   0000FA   12....       LCALL     ?Subroutine63 & 0xFFFF
   1121              *pBuf++ = HI_UINT16(OutClusterList[i]);
   1122            }
   \                     ??CrossCallReturnLabel_203:
   \   0000FD   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000100   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000103   A3           INC       DPTR
   \   000104   F0           MOVX      @DPTR,A
   \   000105   E5..         MOV       A,?V0
   \   000107   2402         ADD       A,#0x2
   \   000109   F5..         MOV       ?V0,A
   \   00010B   5002         JNC       ??ZDP_EndDeviceBindReq_9
   \   00010D   05..         INC       ?V1
   \                     ??ZDP_EndDeviceBindReq_9:
   \   00010F   0C           INC       R4
   \                     ??ZDP_EndDeviceBindReq_7:
   \   000110   EC           MOV       A,R4
   \   000111   C3           CLR       C
   \   000112   9F           SUBB      A,R7
   \   000113   40D6         JC        ??ZDP_EndDeviceBindReq_8
   1123          
   1124            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \   000115                ; Setup parameters for call to function fillAndSend
   \   000115   75..20       MOV       ?V0,#0x20
   \   000118   75..00       MOV       ?V1,#0x0
   \   00011B   78..         MOV       R0,#?V0
   \   00011D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000120   EE           MOV       A,R6
   \   000121   F9           MOV       R1,A
   \   000122   AC..         MOV       R4,?V6
   \   000124   AD..         MOV       R5,?V7
   \   000126   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000129   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   00012C   80..         SJMP      ??Subroutine114_0
   1125          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine113_0
   \   000002                ; // Fall through to label ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000003   E5..         MOV       A,?V3
   \   000005   F0           MOVX      @DPTR,A
   \   000006   22           RET
   1126          
   1127          /*********************************************************************
   1128           * @fn          ZDP_BindUnbindReq
   1129           *
   1130           * @brief       This builds and send a Bind_req or Unbind_req message
   1131           *              Depending on the ClusterID. This function
   1132           *              sends a unicast message to the local coordinator.
   1133           *
   1134           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1135           * @param       dstAddr - destination address of the message
   1136           * @param       SourceAddr - source 64 bit address of the binding
   1137           * @param       SrcEPIntf - Source endpoint/interface
   1138           * @param       ClusterID - Binding cluster ID
   1139           * @param       DestinationAddr - destination 64 bit addr of binding
   1140           * @param       DstEPIntf - destination endpoint/interface
   1141           * @param       SecurityEnable - Security Options
   1142           *
   1143           * @return      afStatus_t
   1144           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1145          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1146                                        uint8 *SourceAddr, byte SrcEndPoint,
   1147                                        cId_t ClusterID,
   1148                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1149                                        byte SecurityEnable )
   1150          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   \   00000D   89..         MOV       ?V3,R1
   1151            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   12....       LCALL     ?Subroutine54 & 0xFFFF
   1152            byte len;
   1153          
   1154            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1155          
   1156            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1157            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \                     ??CrossCallReturnLabel_278:
   \   000012   75..0C       MOV       ?V2,#0xc
   \   000015   7416         MOV       A,#0x16
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   12....       LCALL     ?Subroutine49 & 0xFFFF
   1158            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_95:
   \   00001D   EE           MOV       A,R6
   \   00001E   2408         ADD       A,#0x8
   \   000020   F5..         MOV       ?V0,A
   \   000022   E4           CLR       A
   \   000023   3F           ADDC      A,R7
   \   000024   F5..         MOV       ?V1,A
   \   000026   85..82       MOV       DPL,?V0
   \   000029   F583         MOV       DPH,A
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F8           MOV       R0,A
   \   00002D   7403         MOV       A,#0x3
   \   00002F   68           XRL       A,R0
   \   000030   7005         JNZ       ??ZDP_BindUnbindReq_0
   1159              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   000032   75..15       MOV       ?V2,#0x15
   \   000035   8008         SJMP      ??ZDP_BindUnbindReq_1
   1160            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   000037   7401         MOV       A,#0x1
   \   000039   68           XRL       A,R0
   \   00003A   7003         JNZ       ??ZDP_BindUnbindReq_1
   1161              len += sizeof ( uint16 );
   \   00003C   75..0E       MOV       ?V2,#0xe
   1162          
   1163            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   00003F                ; Setup parameters for call to function sAddrExtCpy
   \   00003F   7412         MOV       A,#0x12
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000047   12....       LCALL     ?Subroutine72 & 0xFFFF
   1164            *pBuf++ = SrcEndPoint;
   \                     ??CrossCallReturnLabel_128:
   \   00004A   7414         MOV       A,#0x14
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   12....       LCALL     ?Subroutine13 & 0xFFFF
   1165          
   1166            *pBuf++ = LO_UINT16( ClusterID );
   1167          
   1168            *pBuf++ = HI_UINT16( ClusterID );
   1169            *pBuf++ = destinationAddr->addrMode;
   \                     ??CrossCallReturnLabel_10:
   \   000052   85..82       MOV       DPL,?V0
   \   000055   85..83       MOV       DPH,?V1
   \   000058   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00005B   5001         JNC       ??ZDP_BindUnbindReq_2
   \   00005D   0B           INC       R3
   1170            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??ZDP_BindUnbindReq_2:
   \   00005E   85..82       MOV       DPL,?V0
   \   000061   85..83       MOV       DPH,?V1
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F8           MOV       R0,A
   \   000066   7403         MOV       A,#0x3
   \   000068   68           XRL       A,R0
   \   000069   7013         JNZ       ??ZDP_BindUnbindReq_3
   1171            {
   1172              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   1173              *pBuf = DstEndPoint;
   \   00006B   7418         MOV       A,#0x18
   \   00006D   12....       LCALL     ?XSTACK_DISP0_8
   \   000070   E0           MOVX      A,@DPTR
   \   000071   C0E0         PUSH      A
   \   000073                ; Setup parameters for call to function sAddrExtCpy
   \   000073   EE           MOV       A,R6
   \   000074   FC           MOV       R4,A
   \   000075   EF           MOV       A,R7
   \   000076   FD           MOV       R5,A
   \   000077   12....       LCALL     ?Subroutine96 & 0xFFFF
   1174            }
   \                     ??CrossCallReturnLabel_162:
   \   00007A   D0E0         POP       A
   \   00007C   8015         SJMP      ??CrossCallReturnLabel_119
   1175            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_3:
   \   00007E   7401         MOV       A,#0x1
   \   000080   68           XRL       A,R0
   \   000081   7011         JNZ       ??ZDP_BindUnbindReq_4
   1176            {
   1177              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   000083   8E82         MOV       DPL,R6
   \   000085   8F83         MOV       DPH,R7
   \   000087   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   00008A   F0           MOVX      @DPTR,A
   1178              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   \   00008B   8E82         MOV       DPL,R6
   \   00008D   8F83         MOV       DPH,R7
   \   00008F   A3           INC       DPTR
   \   000090   12....       LCALL     ?Subroutine67 & 0xFFFF
   1179            }
   \                     ??CrossCallReturnLabel_119:
   \   000093   F0           MOVX      @DPTR,A
   1180          
   1181            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_4:
   \   000094   90....       MOV       DPTR,#ZDP_TxOptions
   \   000097   7410         MOV       A,#0x10
   \   000099   F0           MOVX      @DPTR,A
   \   00009A                ; Setup parameters for call to function fillAndSend
   \   00009A   78..         MOV       R0,#?V6
   \   00009C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009F   A9..         MOV       R1,?V2
   \   0000A1   AC..         MOV       R4,?V4
   \   0000A3   AD..         MOV       R5,?V5
   \   0000A5   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   0000A8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AB   E9           MOV       A,R1
   \   0000AC   F9           MOV       R1,A
   \   0000AD   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000B0   E4           CLR       A
   \   0000B1   F0           MOVX      @DPTR,A
   \   0000B2   02....       LJMP      ??Subroutine114_0 & 0xFFFF
   1182          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   EA           MOV       A,R2
   \   000005   2404         ADD       A,#0x4
   \   000007   FA           MOV       R2,A
   \   000008   22           RET
   1183          
   1184          /*********************************************************************
   1185           * Network Management
   1186           */
   1187          
   1188          /*********************************************************************
   1189           * @fn          ZDP_MgmtNwkDiscReq
   1190           *
   1191           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1192           *              function sends a unicast message.
   1193           *
   1194           * @param       dstAddr - destination address of the message
   1195           * @param       ScanChannels - 32 bit address bit map
   1196           * @param       StartIndex - Starting index within the reporting network
   1197           *                           list
   1198           * @param       SecurityEnable - Security Options
   1199           *
   1200           * @return      afStatus_t
   1201           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1202          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1203                                         uint32 ScanChannels,
   1204                                         byte ScanDuration,
   1205                                         byte StartIndex,
   1206                                         byte SecurityEnable )
   1207          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V0,R1
   \   00000B   8C..         MOV       ?V1,R4
   1208            uint8 *pBuf = ZDP_TmpBuf;
   1209            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   1210          
   1211            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1212          
   1213            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   00000D                ; Setup parameters for call to function osal_buffer_uint32
   \   00000D   740C         MOV       A,#0xc
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000015   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000018   12....       LCALL     ?DEALLOC_XSTACK8
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   1214          
   1215            *pBuf++ = ScanDuration;
   \   00001F   E5..         MOV       A,?V0
   \   000021   F0           MOVX      @DPTR,A
   1216            *pBuf = StartIndex;
   \   000022   A3           INC       DPTR
   \   000023   E5..         MOV       A,?V1
   \   000025   F0           MOVX      @DPTR,A
   1217          
   1218            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   000026                ; Setup parameters for call to function fillAndSend
   \   000026   75..30       MOV       ?V2,#0x30
   \   000029   75..00       MOV       ?V3,#0x0
   \   00002C   78..         MOV       R0,#?V2
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   7906         MOV       R1,#0x6
   \   000033   80..         SJMP      ??Subroutine115_0
   1219          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000003                REQUIRE ??Subroutine116_0
   \   000003                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FA           MOV       R2,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FB           MOV       R3,A
   \   000008   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00000B   7404         MOV       A,#0x4
   \   00000D   22           RET
   1220          
   1221          /*********************************************************************
   1222           * @fn          ZDP_MgmtDirectJoinReq
   1223           *
   1224           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1225           *              function sends a unicast message.
   1226           *
   1227           * @param       dstAddr - destination address of the message
   1228           * @param       deviceAddr - 64 bit IEEE Address
   1229           * @param       SecurityEnable - Security Options
   1230           *
   1231           * @return      afStatus_t
   1232           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   75..00       MOV       ?V3,#0x0
   \   000003   78..         MOV       R0,#?V2
   \   000005   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000008   7909         MOV       R1,#0x9
   \   00000A                REQUIRE ??Subroutine115_0
   \   00000A                ; // Fall through to label ??Subroutine115_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1233          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1234                                         uint8 *deviceAddr,
   1235                                         byte capInfo,
   1236                                         byte SecurityEnable )
   1237          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine44 & 0xFFFF
   1238            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1239          
   1240            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   1241            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \                     ??CrossCallReturnLabel_81:
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   C8           XCH       A,R0
   \   00000C   2408         ADD       A,#0x8
   \   00000E   F582         MOV       DPL,A
   \   000010   E4           CLR       A
   \   000011   38           ADDC      A,R0
   \   000012   F583         MOV       DPH,A
   \   000014   E5..         MOV       A,?V0
   \   000016   F0           MOVX      @DPTR,A
   1242          
   1243            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   000017                ; Setup parameters for call to function fillAndSend
   \   000017   75..35       MOV       ?V2,#0x35
   \   00001A   80..         SJMP      ?Subroutine1
   1244          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   89..         MOV       ?V0,R1
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   FA           MOV       R2,A
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   FB           MOV       R3,A
   \   00000E   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000011   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000014   E0           MOVX      A,@DPTR
   \   000015   22           RET
   1245          
   1246          /*********************************************************************
   1247           * @fn          ZDP_MgmtPermitJoinReq
   1248           *
   1249           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1250           *
   1251           * @param       dstAddr - destination address of the message
   1252           * @param       duration - Permit duration
   1253           * @param       TcSignificance - Trust Center Significance
   1254           *
   1255           * @return      afStatus_t
   1256           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1257          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1258                                            byte TcSignificance, byte SecurityEnable )
   1259          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1260            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1261          
   1262            // Build buffer
   1263            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   000005   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000008   E9           MOV       A,R1
   \   000009   12....       LCALL     ?Subroutine18 & 0xFFFF
   1264            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \                     ??CrossCallReturnLabel_22:
   \   00000C   EC           MOV       A,R4
   \   00000D   F0           MOVX      @DPTR,A
   1265          
   1266            // Send the message
   1267            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1268                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \   00000E                ; Setup parameters for call to function fillAndSend
   \   00000E   75..36       MOV       ?V0,#0x36
   \   000011   02....       LJMP      ?Subroutine2 & 0xFFFF
   1269          }
   1270          
   1271          /*********************************************************************
   1272           * @fn          ZDP_MgmtLeaveReq
   1273           *
   1274           * @brief       This builds and send a Mgmt_Leave_req message.
   1275           *
   1276           * @param       dstAddr - destination address of the message
   1277           *              IEEEAddr - IEEE adddress of device that is removed
   1278           *              RemoveChildren - set to 1 to remove the children of the
   1279           *                                device as well. 0 otherwise.
   1280           *              Rejoin - set to 1 if the removed device should rejoin
   1281                                   afterwards. 0 otherwise.
   1282           *
   1283           * @return      afStatus_t
   1284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1285          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1286                           uint8 Rejoin, uint8 SecurityEnable )
   1287          
   1288          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine44 & 0xFFFF
   1289            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1290          
   1291            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   1292            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \                     ??CrossCallReturnLabel_82:
   \   000008   2408         ADD       A,#0x8
   \   00000A   F8           MOV       R0,A
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   3400         ADDC      A,#0x0
   \   00000F   F9           MOV       R1,A
   \   000010   8882         MOV       DPL,R0
   \   000012   F583         MOV       DPH,A
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
   1293          
   1294            if ( RemoveChildren == TRUE )
   \   000016   04           INC       A
   \   000017   65..         XRL       A,?V0
   \   000019   7003         JNZ       ??ZDP_MgmtLeaveReq_0
   1295            {
   1296              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   00001B   7440         MOV       A,#0x40
   \   00001D   F0           MOVX      @DPTR,A
   1297            }
   1298            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   00001E   740C         MOV       A,#0xc
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6401         XRL       A,#0x1
   \   000026   7008         JNZ       ??ZDP_MgmtLeaveReq_1
   1299            {
   1300              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   000028   8882         MOV       DPL,R0
   \   00002A   8983         MOV       DPH,R1
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   D2E7         SETB      0xE0 /* A   */.7
   \   00002F   F0           MOVX      @DPTR,A
   1301            }
   1302          
   1303            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   000030                ; Setup parameters for call to function fillAndSend
   \   000030   75..34       MOV       ?V2,#0x34
   \   000033   02....       LJMP      ?Subroutine1 & 0xFFFF
   1304          }
   1305          
   1306          /*********************************************************************
   1307           * @fn          ZDP_MgmtNwkUpdateReq
   1308           *
   1309           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1310           *              function sends a unicast or broadcast message.
   1311           *
   1312           * @param       dstAddr - destination address of the message
   1313           * @param       ChannelMask - 32 bit address bit map
   1314           * @param       ScanDuration - length of time to spend scanning each channel
   1315           * @param       ScanCount - number of energy scans to be conducted
   1316           * @param       NwkUpdateId - NWk Update Id value
   1317           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1318           *                               bit set in its Node Descriptor
   1319           *
   1320           * @return      afStatus_t
   1321           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1322          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1323                                           uint32 ChannelMask,
   1324                                           uint8 ScanDuration,
   1325                                           uint8 ScanCount,
   1326                                           uint8 NwkUpdateId,
   1327                                           uint16 NwkManagerAddr )
   1328          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   E9           MOV       A,R1
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V2,R4
   \   00000D   8D..         MOV       ?V3,R5
   1329            uint8 *pBuf = ZDP_TmpBuf;
   1330            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \   00000F   7E05         MOV       R6,#0x5
   1331          
   1332            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   000011                ; Setup parameters for call to function osal_buffer_uint32
   \   000011   740E         MOV       A,#0xe
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000019   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00001C   12....       LCALL     ?DEALLOC_XSTACK8
   1333          
   1334            *pBuf++ = ScanDuration;
   \   00001F   EF           MOV       A,R7
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   F0           MOVX      @DPTR,A
   1335          
   1336            if ( ScanDuration <= 0x05 )
   \   000025   EA           MOV       A,R2
   \   000026   2402         ADD       A,#0x2
   \   000028   FC           MOV       R4,A
   \   000029   E4           CLR       A
   \   00002A   3B           ADDC      A,R3
   \   00002B   FD           MOV       R5,A
   \   00002C   A3           INC       DPTR
   \   00002D   EF           MOV       A,R7
   \   00002E   C3           CLR       C
   \   00002F   9406         SUBB      A,#0x6
   \   000031   5007         JNC       ??ZDP_MgmtNwkUpdateReq_0
   1337            {
   1338              // Request is to scan over channelMask
   1339              len += sizeof( uint8 );
   \   000033   7E06         MOV       R6,#0x6
   1340          
   1341              *pBuf++ = ScanCount;
   \   000035   E5..         MOV       A,?V2
   \   000037   F0           MOVX      @DPTR,A
   \   000038   8025         SJMP      ??ZDP_MgmtNwkUpdateReq_1
   1342            }
   1343            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   00003A   74FE         MOV       A,#-0x2
   \   00003C   6F           XRL       A,R7
   \   00003D   6005         JZ        ??ZDP_MgmtNwkUpdateReq_2
   \   00003F   74FF         MOV       A,#-0x1
   \   000041   6F           XRL       A,R7
   \   000042   701B         JNZ       ??ZDP_MgmtNwkUpdateReq_1
   1344            {
   1345              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1346              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   000044   7E06         MOV       R6,#0x6
   1347          
   1348              *pBuf++ = NwkUpdateId;
   \   000046   E5..         MOV       A,?V3
   \   000048   F0           MOVX      @DPTR,A
   1349          
   1350              if ( ScanDuration == 0xFF )
   \   000049   74FF         MOV       A,#-0x1
   \   00004B   6F           XRL       A,R7
   \   00004C   7011         JNZ       ??ZDP_MgmtNwkUpdateReq_1
   1351              {
   1352                len += sizeof( uint16 );
   \   00004E   7E08         MOV       R6,#0x8
   \   000050   7412         MOV       A,#0x12
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   12....       LCALL     ?Subroutine51 & 0xFFFF
   1353          
   1354                *pBuf++  = LO_UINT16( NwkManagerAddr );
   1355                *pBuf++  = HI_UINT16( NwkManagerAddr );
   1356              }
   1357            }
   \                     ??CrossCallReturnLabel_102:
   \   000058   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   EA           MOV       A,R2
   \   00005D   2404         ADD       A,#0x4
   1358          
   1359            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   00005F                ; Setup parameters for call to function fillAndSend
   \   00005F   75..38       MOV       ?V4,#0x38
   \   000062   75..00       MOV       ?V5,#0x0
   \   000065   78..         MOV       R0,#?V4
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006A   EE           MOV       A,R6
   \   00006B   F9           MOV       R1,A
   \   00006C   AC..         MOV       R4,?V0
   \   00006E   AD..         MOV       R5,?V1
   \   000070   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000073   02....       LJMP      ?Subroutine0 & 0xFFFF
   1360          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000003   A3           INC       DPTR
   \   000004   22           RET
   1361          
   1362          
   1363          /*********************************************************************
   1364           * Network Management Responses
   1365           */
   1366          
   1367          /*********************************************************************
   1368           * @fn          ZDP_MgmtNwkDiscRsp
   1369           *
   1370           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1371           *              function sends a unicast message.
   1372           *
   1373           * @param       dstAddr - destination address of the message
   1374           * @param       Status - message status (ZDP_SUCCESS or other)
   1375           * @param       NetworkCount - Total number of networks found
   1376           * @param       StartIndex - Starting index within the reporting network
   1377           *                           list
   1378           * @param       NetworkListCount - number of network lists included
   1379           *                                 in this message
   1380           * @param       NetworkList - List of network descriptors
   1381           * @param       SecurityEnable - Security Options
   1382           *
   1383           * @return      afStatus_t
   1384           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1385          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1386                                      byte Status,
   1387                                      byte NetworkCount,
   1388                                      byte StartIndex,
   1389                                      byte NetworkListCount,
   1390                                      networkDesc_t *NetworkList,
   1391                                      byte SecurityEnable )
   1392          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V12,R2
   \   000014   8B..         MOV       ?V13,R3
   \   000016   8C..         MOV       ?V10,R4
   \   000018   8D..         MOV       ?V7,R5
   \   00001A   7418         MOV       A,#0x18
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V4,A
   1393            uint8 *buf;
   1394            uint8 *pBuf;
   1395            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   1396            byte idx;
   1397          
   1398            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1399          
   1400            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \   000022   75F00C       MOV       B,#0xc
   \   000025   A4           MUL       AB
   \   000026   2404         ADD       A,#0x4
   \   000028   F5..         MOV       ?V5,A
   1401          
   1402            buf = osal_mem_alloc( len+1 );
   \   00002A                ; Setup parameters for call to function osal_mem_alloc
   \   00002A   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   00002D   8A..         MOV       ?V0,R2
   \   00002F   8B..         MOV       ?V1,R3
   1403            if ( buf == NULL )
   \   000031   EA           MOV       A,R2
   \   000032   4B           ORL       A,R3
   \   000033   7005         JNZ       ??ZDP_MgmtNwkDiscRsp_0
   1404            {
   1405              return afStatus_MEM_FAIL;
   \   000035   7910         MOV       R1,#0x10
   \   000037   02....       LJMP      ??CrossCallReturnLabel_227 & 0xFFFF
   1406            }
   1407          
   1408            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   00003A   8A82         MOV       DPL,R2
   \   00003C   8B83         MOV       DPH,R3
   \   00003E   A3           INC       DPTR
   \   00003F   8582..       MOV       ?V8,DPL
   \   000042   8583..       MOV       ?V9,DPH
   \   000045   AE..         MOV       R6,?V8
   \   000047   AF..         MOV       R7,?V9
   1409          
   1410            *pBuf++ = Status;
   \   000049   E5..         MOV       A,?V10
   \   00004B   F0           MOVX      @DPTR,A
   1411            *pBuf++ = NetworkCount;
   \   00004C   A3           INC       DPTR
   \   00004D   E5..         MOV       A,?V7
   \   00004F   F0           MOVX      @DPTR,A
   1412            *pBuf++ = StartIndex;
   \   000050   7417         MOV       A,#0x17
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000058   A3           INC       DPTR
   \   000059   12....       LCALL     ?Subroutine17 & 0xFFFF
   1413            *pBuf++ = NetworkListCount;
   \                     ??CrossCallReturnLabel_20:
   \   00005C   E5..         MOV       A,?V4
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   EE           MOV       A,R6
   \   000060   2404         ADD       A,#0x4
   \   000062   FE           MOV       R6,A
   \   000063   5001         JNC       ??ZDP_MgmtNwkDiscRsp_1
   \   000065   0F           INC       R7
   1414          
   1415            for ( idx = 0; idx < NetworkListCount; idx++ )
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   000066   75..00       MOV       ?V6,#0x0
   \   000069   7419         MOV       A,#0x19
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000071   8016         SJMP      ??ZDP_MgmtNwkDiscRsp_2
   1416            {
   1417              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   1418              pBuf += Z_EXTADDR_LEN;
   1419          
   1420              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   1421              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   1422              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   1423              *pBuf    = NetworkList->beaconOrder;                   // Beacon Order
   1424              *pBuf++ |= (byte)(NetworkList->superFrameOrder << 4);  // Superframe Order
   1425          
   1426              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   1427              {
   1428                *pBuf++ = TRUE;                         // Permit Joining
   1429              }
   1430              else
   1431              {
   1432                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   000073   E4           CLR       A
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   000074   F0           MOVX      @DPTR,A
   \   000075   E8           MOV       A,R0
   \   000076   FE           MOV       R6,A
   \   000077   E9           MOV       A,R1
   \   000078   FF           MOV       R7,A
   1433              }
   1434          
   1435              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \   000079   E5..         MOV       A,?V2
   \   00007B   2416         ADD       A,#0x16
   \   00007D   F582         MOV       DPL,A
   \   00007F   E4           CLR       A
   \   000080   35..         ADDC      A,?V3
   \   000082   F583         MOV       DPH,A
   \   000084   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000087   05..         INC       ?V6
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   000089   E5..         MOV       A,?V6
   \   00008B   C3           CLR       C
   \   00008C   95..         SUBB      A,?V4
   \   00008E   507D         JNC       ??ZDP_MgmtNwkDiscRsp_5
   \   000090                ; Setup parameters for call to function sAddrExtCpy
   \   000090   E5..         MOV       A,?V2
   \   000092   240D         ADD       A,#0xd
   \   000094   FC           MOV       R4,A
   \   000095   E4           CLR       A
   \   000096   35..         ADDC      A,?V3
   \   000098   FD           MOV       R5,A
   \   000099   EE           MOV       A,R6
   \   00009A   FA           MOV       R2,A
   \   00009B   EF           MOV       A,R7
   \   00009C   FB           MOV       R3,A
   \   00009D   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000A0   85..82       MOV       DPL,?V2
   \   0000A3   85..83       MOV       DPH,?V3
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0000B5   85..82       MOV       DPL,?V2
   \   0000B8   85..83       MOV       DPH,?V3
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000C3   A3           INC       DPTR
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0000C9   240A         ADD       A,#0xa
   \   0000CB   08           INC       R0
   \   0000CC   E4           CLR       A
   \   0000CD   3F           ADDC      A,R7
   \   0000CE   F9           MOV       R1,A
   \   0000CF   85..82       MOV       DPL,?V2
   \   0000D2   85..83       MOV       DPH,?V3
   \   0000D5   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000D8   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   0000DB   240C         ADD       A,#0xc
   \   0000DD   F8           MOV       R0,A
   \   0000DE   E4           CLR       A
   \   0000DF   3F           ADDC      A,R7
   \   0000E0   F9           MOV       R1,A
   \   0000E1   EE           MOV       A,R6
   \   0000E2   240B         ADD       A,#0xb
   \   0000E4   FA           MOV       R2,A
   \   0000E5   E4           CLR       A
   \   0000E6   3F           ADDC      A,R7
   \   0000E7   FB           MOV       R3,A
   \   0000E8   85..82       MOV       DPL,?V2
   \   0000EB   85..83       MOV       DPH,?V3
   \   0000EE   A3           INC       DPTR
   \   0000EF   A3           INC       DPTR
   \   0000F0   A3           INC       DPTR
   \   0000F1   A3           INC       DPTR
   \   0000F2   A3           INC       DPTR
   \   0000F3   A3           INC       DPTR
   \   0000F4   A3           INC       DPTR
   \   0000F5   A3           INC       DPTR
   \   0000F6   A3           INC       DPTR
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   64FE         XRL       A,#0xfe
   \   0000FA   7003         JNZ       ??ZDP_MgmtNwkDiscRsp_6
   \   0000FC   A3           INC       DPTR
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   F4           CPL       A
   \                     ??ZDP_MgmtNwkDiscRsp_6:
   \   0000FF   8A82         MOV       DPL,R2
   \   000101   8B83         MOV       DPH,R3
   \   000103   7003         JNZ       $+5
   \   000105   02....       LJMP      ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
   \   000108   7401         MOV       A,#0x1
   \   00010A   02....       LJMP      ??ZDP_MgmtNwkDiscRsp_4 & 0xFFFF
   1436            }
   1437          
   1438            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   00010D   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000110   E5..         MOV       A,?V8
   \   000112   F0           MOVX      @DPTR,A
   \   000113   A3           INC       DPTR
   \   000114   E5..         MOV       A,?V9
   \   000116   F0           MOVX      @DPTR,A
   \   000117                ; Setup parameters for call to function fillAndSend
   \   000117   75..30       MOV       ?V2,#0x30
   \   00011A   75..80       MOV       ?V3,#-0x80
   \   00011D   78..         MOV       R0,#?V2
   \   00011F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000122   A9..         MOV       R1,?V5
   \   000124   AC..         MOV       R4,?V12
   \   000126   AD..         MOV       R5,?V13
   \   000128   7402         MOV       A,#0x2
   \   00012A   12....       LCALL     ?XSTACK_DISP101_8
   \   00012D   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000130   12....       LCALL     ?DEALLOC_XSTACK8
   \   000133   E9           MOV       A,R1
   \   000134   FE           MOV       R6,A
   \   000135                ; Setup parameters for call to function osal_mem_free
   \   000135   AA..         MOV       R2,?V0
   \   000137   AB..         MOV       R3,?V1
   \   000139   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   00013C                REQUIRE ?Subroutine4
   \   00013C                ; // Fall through to label ?Subroutine4
   1439          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7401         MOV       A,#0x1
   \   000002                REQUIRE ??Subroutine118_0
   \   000002                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   C4           SWAP      A
   \   000002   54F0         ANL       A,#0xf0
   \   000004   FA           MOV       R2,A
   \   000005   8882         MOV       DPL,R0
   \   000007   8983         MOV       DPH,R1
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   4A           ORL       A,R2
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   EE           MOV       A,R6
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000003   EE           MOV       A,R6
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   2401         ADD       A,#0x1
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   3400         ADDC      A,#0x0
   \   000006   FB           MOV       R3,A
   \   000007   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   2409         ADD       A,#0x9
   \   000004   F8           MOV       R0,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F9           MOV       R1,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000003   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000006   74..         MOV       A,#(ZDP_Buf + 1) & 0xff
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   74..         MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   22           RET
   1440          
   1441          /*********************************************************************
   1442           * @fn          ZDP_MgmtLqiRsp
   1443           *
   1444           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1445           *              function sends a unicast message.
   1446           *
   1447           * @param       dstAddr - destination address of the message
   1448           * @param       Status - message status (ZDP_SUCCESS or other)
   1449           * @param       NeighborLqiEntries - Total number of entries found
   1450           * @param       StartIndex - Starting index within the reporting list
   1451           * @param       NeighborLqiCount - number of lists included
   1452           *                                 in this message
   1453           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1454           *                is the list to be sent, not the entire list
   1455           * @param       SecurityEnable - true if secure
   1456           *
   1457           * @return      ZStatus_t
   1458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1459          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1460                                    byte Status,
   1461                                    byte NeighborLqiEntries,
   1462                                    byte StartIndex,
   1463                                    byte NeighborLqiCount,
   1464                                    ZDP_MgmtLqiItem_t* NeighborList,
   1465                                    byte SecurityEnable )
   1466          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000   74EB         MOV       A,#-0x15
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V10,R2
   \   000014   8B..         MOV       ?V11,R3
   \   000016   8D..         MOV       ?V12,R5
   1467            ZDP_MgmtLqiItem_t* list = NeighborList;
   \   000018   7418         MOV       A,#0x18
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine49 & 0xFFFF
   1468            uint8 *buf, *pBuf;
   1469            byte len, x;
   1470          
   1471            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1472          
   1473            if ( ZSuccess != Status )
   \                     ??CrossCallReturnLabel_96:
   \   000020   EC           MOV       A,R4
   \   000021   601E         JZ        ??ZDP_MgmtLqiRsp_0
   1474            {
   1475              ZDP_TmpBuf[0] = Status;
   \   000023   12....       LCALL     ?Subroutine41 & 0xFFFF
   1476              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   1477            }
   \                     ??CrossCallReturnLabel_190:
   \   000026   EC           MOV       A,R4
   \   000027   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   7901         MOV       R1,#0x1
   \   00002F   AC..         MOV       R4,?V10
   \   000031   AD..         MOV       R5,?V11
   \   000033   7402         MOV       A,#0x2
   \   000035   12....       LCALL     ?XSTACK_DISP101_8
   \   000038   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   00003B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003E   02....       LJMP      ??CrossCallReturnLabel_225 & 0xFFFF
   \                     ??ZDP_MgmtLqiRsp_0:
   \   000041   7417         MOV       A,#0x17
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F5..         MOV       ?V5,A
   1478          
   1479            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1480            //  neighbor LQI data.
   1481            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \   000049   75F016       MOV       B,#0x16
   \   00004C   A4           MUL       AB
   \   00004D   2404         ADD       A,#0x4
   \   00004F   F5..         MOV       ?V6,A
   1482          
   1483            buf = osal_mem_alloc( len+1 );
   \   000051                ; Setup parameters for call to function osal_mem_alloc
   \   000051   12....       LCALL     ?Subroutine70 & 0xFFFF
   1484            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_122:
   \   000054   7005         JNZ       ??ZDP_MgmtLqiRsp_1
   1485            {
   1486              return afStatus_MEM_FAIL;
   \   000056   7910         MOV       R1,#0x10
   \   000058   02....       LJMP      ??CrossCallReturnLabel_225 & 0xFFFF
   1487            }
   1488          
   1489            pBuf = buf+1;
   \                     ??ZDP_MgmtLqiRsp_1:
   \   00005B   8A82         MOV       DPL,R2
   \   00005D   8B83         MOV       DPH,R3
   \   00005F   A3           INC       DPTR
   \   000060   8582..       MOV       ?V8,DPL
   \   000063   8583..       MOV       ?V9,DPH
   \   000066   85....       MOV       ?V0,?V8
   \   000069   85....       MOV       ?V1,?V9
   1490          
   1491            *pBuf++ = Status;
   \   00006C   E4           CLR       A
   \   00006D   F0           MOVX      @DPTR,A
   1492            *pBuf++ = NeighborLqiEntries;
   \   00006E   A3           INC       DPTR
   \   00006F   E5..         MOV       A,?V12
   \   000071   F0           MOVX      @DPTR,A
   1493            *pBuf++ = StartIndex;
   \   000072   7416         MOV       A,#0x16
   \   000074   12....       LCALL     ?XSTACK_DISP0_8
   \   000077   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00007A   F0           MOVX      @DPTR,A
   1494            *pBuf++ = NeighborLqiCount;
   \   00007B   85..82       MOV       DPL,?V0
   \   00007E   85..83       MOV       DPH,?V1
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   E5..         MOV       A,?V5
   \   000086   F0           MOVX      @DPTR,A
   \   000087   E5..         MOV       A,?V0
   \   000089   2404         ADD       A,#0x4
   \   00008B   F5..         MOV       ?V0,A
   \   00008D   5002         JNC       ??ZDP_MgmtLqiRsp_2
   \   00008F   05..         INC       ?V1
   1495          
   1496            for ( x = 0; x < NeighborLqiCount; x++ )
   \                     ??ZDP_MgmtLqiRsp_2:
   \   000091   75..00       MOV       ?V4,#0x0
   \   000094   02....       LJMP      ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   1497            {
   1498              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \                     ??ZDP_MgmtLqiRsp_4:
   \   000097                ; Setup parameters for call to function sAddrExtCpy
   \   000097   EE           MOV       A,R6
   \   000098   2402         ADD       A,#0x2
   \   00009A   FC           MOV       R4,A
   \   00009B   E4           CLR       A
   \   00009C   3F           ADDC      A,R7
   \   00009D   FD           MOV       R5,A
   \   00009E   AA..         MOV       R2,?V0
   \   0000A0   AB..         MOV       R3,?V1
   \   0000A2   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1499              pBuf += Z_EXTADDR_LEN;
   1500          
   1501              // EXTADDR
   1502              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \   0000A5                ; Setup parameters for call to function sAddrExtCpy
   \   0000A5   EE           MOV       A,R6
   \   0000A6   240A         ADD       A,#0xa
   \   0000A8   FC           MOV       R4,A
   \   0000A9   E4           CLR       A
   \   0000AA   3F           ADDC      A,R7
   \   0000AB   FD           MOV       R5,A
   \   0000AC   E5..         MOV       A,?V0
   \   0000AE   2408         ADD       A,#0x8
   \   0000B0   FA           MOV       R2,A
   \   0000B1   E4           CLR       A
   \   0000B2   35..         ADDC      A,?V1
   \   0000B4   FB           MOV       R3,A
   \   0000B5   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000B8   8A..         MOV       ?V0,R2
   \   0000BA   8B..         MOV       ?V1,R3
   \   0000BC   A8..         MOV       R0,?V0
   \   0000BE   A9..         MOV       R1,?V1
   1503          
   1504              // NWKADDR
   1505              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   0000C0   EE           MOV       A,R6
   \   0000C1   2412         ADD       A,#0x12
   \   0000C3   FA           MOV       R2,A
   \   0000C4   E4           CLR       A
   \   0000C5   3F           ADDC      A,R7
   \   0000C6   FB           MOV       R3,A
   \   0000C7   8A82         MOV       DPL,R2
   \   0000C9   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   0000CC   12....       LCALL     ?Subroutine35 & 0xFFFF
   1506              *pBuf++ = HI_UINT16( list->nwkAddr );
   \                     ??CrossCallReturnLabel_58:
   \   0000CF   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   0000D2   A3           INC       DPTR
   \   0000D3   F0           MOVX      @DPTR,A
   1507          
   1508              // DEVICETYPE
   1509              *pBuf = list->devType;
   \   0000D4   E8           MOV       A,R0
   \   0000D5   2402         ADD       A,#0x2
   \   0000D7   FA           MOV       R2,A
   \   0000D8   E4           CLR       A
   \   0000D9   39           ADDC      A,R1
   \   0000DA   FB           MOV       R3,A
   \   0000DB   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   0000DE   F0           MOVX      @DPTR,A
   1510          
   1511              // RXONIDLE
   1512              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \   0000DF   EE           MOV       A,R6
   \   0000E0   2415         ADD       A,#0x15
   \   0000E2   F582         MOV       DPL,A
   \   0000E4   E4           CLR       A
   \   0000E5   3F           ADDC      A,R7
   \   0000E6   F583         MOV       DPH,A
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   33           RLC       A
   \   0000EA   33           RLC       A
   \   0000EB   54FC         ANL       A,#0xfc
   \   0000ED   FC           MOV       R4,A
   \   0000EE   8A82         MOV       DPL,R2
   \   0000F0   8B83         MOV       DPH,R3
   \   0000F2   E0           MOVX      A,@DPTR
   \   0000F3   4C           ORL       A,R4
   \   0000F4   F0           MOVX      @DPTR,A
   1513          
   1514              // RELATIONSHIP
   1515              *pBuf++ |= (uint8)(list->relation << 4);
   \   0000F5   EE           MOV       A,R6
   \   0000F6   2416         ADD       A,#0x16
   \   0000F8   F582         MOV       DPL,A
   \   0000FA   E4           CLR       A
   \   0000FB   3F           ADDC      A,R7
   \   0000FC   F583         MOV       DPH,A
   \   0000FE   E0           MOVX      A,@DPTR
   \   0000FF   C4           SWAP      A
   \   000100   54F0         ANL       A,#0xf0
   \   000102   FC           MOV       R4,A
   \   000103   8A82         MOV       DPL,R2
   \   000105   8B83         MOV       DPH,R3
   \   000107   E0           MOVX      A,@DPTR
   \   000108   4C           ORL       A,R4
   \   000109   F0           MOVX      @DPTR,A
   1516          
   1517              // PERMITJOINING
   1518              *pBuf++ = (uint8)(list->permit);
   \   00010A   EE           MOV       A,R6
   \   00010B   2417         ADD       A,#0x17
   \   00010D   F582         MOV       DPL,A
   \   00010F   E4           CLR       A
   \   000110   3F           ADDC      A,R7
   \   000111   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000114   A3           INC       DPTR
   \   000115   F0           MOVX      @DPTR,A
   1519          
   1520              // DEPTH
   1521              *pBuf++ = list->depth;
   \   000116   EE           MOV       A,R6
   \   000117   2418         ADD       A,#0x18
   \   000119   F582         MOV       DPL,A
   \   00011B   E4           CLR       A
   \   00011C   3F           ADDC      A,R7
   \   00011D   F583         MOV       DPH,A
   \   00011F   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000122   F0           MOVX      @DPTR,A
   1522          
   1523              // LQI
   1524              *pBuf++ = list->lqi;
   \   000123   EE           MOV       A,R6
   \   000124   2419         ADD       A,#0x19
   \   000126   F582         MOV       DPL,A
   \   000128   E4           CLR       A
   \   000129   3F           ADDC      A,R7
   \   00012A   F583         MOV       DPH,A
   \   00012C   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00012F   F0           MOVX      @DPTR,A
   \   000130   E8           MOV       A,R0
   \   000131   2406         ADD       A,#0x6
   \   000133   F5..         MOV       ?V0,A
   \   000135   E4           CLR       A
   \   000136   39           ADDC      A,R1
   \   000137   F5..         MOV       ?V1,A
   1525          
   1526              list++; // next list entry
   \   000139   EE           MOV       A,R6
   \   00013A   241A         ADD       A,#0x1a
   \   00013C   FE           MOV       R6,A
   \   00013D   5001         JNC       ??ZDP_MgmtLqiRsp_5
   \   00013F   0F           INC       R7
   1527            }
   \                     ??ZDP_MgmtLqiRsp_5:
   \   000140   05..         INC       ?V4
   \                     ??ZDP_MgmtLqiRsp_3:
   \   000142   E5..         MOV       A,?V4
   \   000144   C3           CLR       C
   \   000145   95..         SUBB      A,?V5
   \   000147   5003         JNC       $+5
   \   000149   02....       LJMP      ??ZDP_MgmtLqiRsp_4 & 0xFFFF
   1528          
   1529            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \   00014C   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00014F   E5..         MOV       A,?V8
   \   000151   F0           MOVX      @DPTR,A
   \   000152   A3           INC       DPTR
   \   000153   E5..         MOV       A,?V9
   \   000155   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000158   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00015B   A9..         MOV       R1,?V6
   \   00015D   AC..         MOV       R4,?V10
   \   00015F   AD..         MOV       R5,?V11
   \   000161   7402         MOV       A,#0x2
   \   000163   12....       LCALL     ?XSTACK_DISP101_8
   \   000166   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000169   12....       LCALL     ?DEALLOC_XSTACK8
   \   00016C   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   00016F   7401         MOV       A,#0x1
   \   000171   12....       LCALL     ?DEALLOC_XSTACK8
   \   000174   7F0D         MOV       R7,#0xd
   \   000176   02....       LJMP      ?BANKED_LEAVE_XDATA
   1530          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function fillAndSend
   \   000001                ; Setup parameters for call to function fillAndSend
   \   000001   75..31       MOV       ?V0,#0x31
   \   000004   75..80       MOV       ?V1,#-0x80
   \   000007   78..         MOV       R0,#?V0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E9           MOV       A,R1
   \   000001   FE           MOV       R6,A
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002   AA..         MOV       R2,?V2
   \   000004   AB..         MOV       R3,?V3
   \   000006                REQUIRE ??Subroutine122_0
   \   000006                ; // Fall through to label ??Subroutine122_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   EE           MOV       A,R6
   \   000001   2414         ADD       A,#0x14
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007                REQUIRE ??Subroutine123_0
   \   000007                ; // Fall through to label ??Subroutine123_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine124_0
   \   000002                ; // Fall through to label ??Subroutine124_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000003   8A..         MOV       ?V2,R2
   \   000005   8B..         MOV       ?V3,R3
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   22           RET
   1531          
   1532          /*********************************************************************
   1533           * @fn          ZDP_MgmtRtgRsp
   1534           *
   1535           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1536           *              function sends a unicast message.
   1537           *
   1538           * @param       dstAddr - destination address of the message
   1539           * @param       Status - message status (ZDP_SUCCESS or other)
   1540           * @param       RoutingTableEntries - Total number of entries
   1541           * @param       StartIndex - Starting index within the reporting list
   1542           * @param       RoutingTableListCount - number of entries included
   1543           *                                      in this message
   1544           * @param       RoutingTableList - List of Routing Table entries
   1545           * @param       SecurityEnable - true to enable security for this message
   1546           *
   1547           * @return      ZStatus_t
   1548           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1549          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1550                                      byte Status,
   1551                                      byte RoutingTableEntries,
   1552                                      byte StartIndex,
   1553                                      byte RoutingListCount,
   1554                                      rtgItem_t *RoutingTableList,
   1555                                      byte SecurityEnable )
   1556          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V2,R2
   \   000014   8B..         MOV       ?V3,R3
   \   000016   8C..         MOV       ?V1,R4
   \   000018   8D..         MOV       ?V0,R5
   \   00001A   7416         MOV       A,#0x16
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V5,A
   1557            uint8 *buf;
   1558            uint8 *pBuf;
   1559            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1560            byte len = 1 + 1 + 1 + 1;
   1561            byte x;
   1562          
   1563            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1564          
   1565            // Add an array for Routing List data
   1566            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \   000022   75F005       MOV       B,#0x5
   \   000025   A4           MUL       AB
   \   000026   2404         ADD       A,#0x4
   \   000028   F5..         MOV       ?V4,A
   1567          
   1568            buf = osal_mem_alloc( (short)(len+1) );
   \   00002A                ; Setup parameters for call to function osal_mem_alloc
   \   00002A   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   00002D   8A..         MOV       ?V6,R2
   \   00002F   8B..         MOV       ?V7,R3
   \   000031   AE..         MOV       R6,?V6
   \   000033   AF..         MOV       R7,?V7
   1569            if ( buf == NULL )
   \   000035   EA           MOV       A,R2
   \   000036   4F           ORL       A,R7
   \   000037   7005         JNZ       ??ZDP_MgmtRtgRsp_0
   1570            {
   1571              return afStatus_MEM_FAIL;
   \   000039   7910         MOV       R1,#0x10
   \   00003B   02....       LJMP      ??ZDP_MgmtRtgRsp_1 & 0xFFFF
   1572            }
   1573          
   1574            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_0:
   \   00003E   8A82         MOV       DPL,R2
   \   000040   8B83         MOV       DPH,R3
   \   000042   A3           INC       DPTR
   \   000043   A882         MOV       R0,DPL
   \   000045   A983         MOV       R1,DPH
   \   000047   E9           MOV       A,R1
   \   000048   FB           MOV       R3,A
   1575          
   1576            *pBuf++ = Status;
   \   000049   E5..         MOV       A,?V1
   \   00004B   F0           MOVX      @DPTR,A
   1577            *pBuf++ = RoutingTableEntries;
   \   00004C   A3           INC       DPTR
   \   00004D   E5..         MOV       A,?V0
   \   00004F   F0           MOVX      @DPTR,A
   1578            *pBuf++ = StartIndex;
   \   000050   7415         MOV       A,#0x15
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000058   12....       LCALL     ??Subroutine107_0 & 0xFFFF
   1579            *pBuf++ = RoutingListCount;
   \                     ??CrossCallReturnLabel_170:
   \   00005B   E5..         MOV       A,?V5
   \   00005D   F0           MOVX      @DPTR,A
   \   00005E   E8           MOV       A,R0
   \   00005F   2404         ADD       A,#0x4
   \   000061   FA           MOV       R2,A
   \   000062   5001         JNC       ??ZDP_MgmtRtgRsp_2
   \   000064   0B           INC       R3
   1580          
   1581            for ( x = 0; x < RoutingListCount; x++ )
   \                     ??ZDP_MgmtRtgRsp_2:
   \   000065   75..00       MOV       ?V6,#0x0
   \   000068   7417         MOV       A,#0x17
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000070   8045         SJMP      ??ZDP_MgmtRtgRsp_3
   1582            {
   1583              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \                     ??ZDP_MgmtRtgRsp_4:
   \   000072   8C82         MOV       DPL,R4
   \   000074   8D83         MOV       DPH,R5
   \   000076   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000079   12....       LCALL     ?Subroutine29 & 0xFFFF
   1584              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   \                     ??CrossCallReturnLabel_45:
   \   00007C   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   00007F   12....       LCALL     ?Subroutine22 & 0xFFFF
   1585              *pBuf++ = RoutingTableList->status;
   \                     ??CrossCallReturnLabel_28:
   \   000082   8A82         MOV       DPL,R2
   \   000084   8B83         MOV       DPH,R3
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   F0           MOVX      @DPTR,A
   1586              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \   000089   EC           MOV       A,R4
   \   00008A   2402         ADD       A,#0x2
   \   00008C   F5..         MOV       ?V8,A
   \   00008E   E4           CLR       A
   \   00008F   3D           ADDC      A,R5
   \   000090   F5..         MOV       ?V9,A
   \   000092   85..82       MOV       DPL,?V8
   \   000095   F583         MOV       DPH,A
   \   000097   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00009A   F0           MOVX      @DPTR,A
   1587              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   \   00009B   85..82       MOV       DPL,?V8
   \   00009E   85..83       MOV       DPH,?V9
   \   0000A1   A3           INC       DPTR
   \   0000A2   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   0000A5   A3           INC       DPTR
   \   0000A6   F0           MOVX      @DPTR,A
   \   0000A7   EA           MOV       A,R2
   \   0000A8   2405         ADD       A,#0x5
   \   0000AA   FA           MOV       R2,A
   \   0000AB   5001         JNC       ??ZDP_MgmtRtgRsp_5
   \   0000AD   0B           INC       R3
   1588              RoutingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtRtgRsp_5:
   \   0000AE   EC           MOV       A,R4
   \   0000AF   2406         ADD       A,#0x6
   \   0000B1   FC           MOV       R4,A
   \   0000B2   5001         JNC       ??ZDP_MgmtRtgRsp_6
   \   0000B4   0D           INC       R5
   1589            }
   \                     ??ZDP_MgmtRtgRsp_6:
   \   0000B5   05..         INC       ?V6
   \                     ??ZDP_MgmtRtgRsp_3:
   \   0000B7   E5..         MOV       A,?V6
   \   0000B9   C3           CLR       C
   \   0000BA   95..         SUBB      A,?V5
   \   0000BC   40B4         JC        ??ZDP_MgmtRtgRsp_4
   1590          
   1591            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \   0000BE   90....       MOV       DPTR,#ZDP_TmpBuf
   \   0000C1   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000C4                ; Setup parameters for call to function fillAndSend
   \   0000C4   75..32       MOV       ?V6,#0x32
   \   0000C7   75..80       MOV       ?V7,#-0x80
   \   0000CA   78..         MOV       R0,#?V6
   \   0000CC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CF   A9..         MOV       R1,?V4
   \   0000D1   AC..         MOV       R4,?V2
   \   0000D3   AD..         MOV       R5,?V3
   \   0000D5   7402         MOV       A,#0x2
   \   0000D7   12....       LCALL     ?XSTACK_DISP101_8
   \   0000DA   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   0000DD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E0   E9           MOV       A,R1
   \   0000E1   F5..         MOV       ?V2,A
   \   0000E3                ; Setup parameters for call to function osal_mem_free
   \   0000E3   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   0000E6   A9..         MOV       R1,?V2
   \                     ??ZDP_MgmtRtgRsp_1:
   \   0000E8   7401         MOV       A,#0x1
   \   0000EA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000ED   02....       LJMP      ?Subroutine5 & 0xFFFF
   1592          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   EE           MOV       A,R6
   \   000001   FA           MOV       R2,A
   \   000002   EF           MOV       A,R7
   \   000003   FB           MOV       R3,A
   \   000004   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000007   22           RET
   1593          
   1594          /*********************************************************************
   1595           * @fn          ZDP_MgmtBindRsp
   1596           *
   1597           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1598           *              function sends a unicast message.
   1599           *
   1600           * @param       dstAddr - destination address of the message
   1601           * @param       Status - message status (ZDP_SUCCESS or other)
   1602           * @param       BindingTableEntries - Total number of entries
   1603           * @param       StartIndex - Starting index within the reporting list
   1604           * @param       BindingTableListCount - number of entries included
   1605           *                                 in this message
   1606           * @param       BindingTableList - List of Binding Table entries
   1607           * @param       SecurityEnable - Security Options
   1608           *
   1609           * @return      ZStatus_t
   1610           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1611          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1612                                      byte Status,
   1613                                      byte BindingTableEntries,
   1614                                      byte StartIndex,
   1615                                      byte BindingTableListCount,
   1616                                      apsBindingItem_t *BindingTableList,
   1617                                      byte SecurityEnable )
   1618          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V12,R2
   \   000014   8B..         MOV       ?V13,R3
   \   000016   8C..         MOV       ?V10,R4
   \   000018   8D..         MOV       ?V5,R5
   \   00001A   7418         MOV       A,#0x18
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V4,A
   1619            uint8 *buf;
   1620            uint8 *pBuf;
   1621            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1622            uint8 len;    // Actual length varies due to different addrMode
   1623            uint8 x;
   1624            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   1625            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   1626          
   1627            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1628          
   1629            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1630            maxLen = 1 + 1 + 1 + 1;
   1631            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   1632            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   75F015       MOV       B,#0x15
   \   000025   A4           MUL       AB
   \   000026   2404         ADD       A,#0x4
   \   000028   12....       LCALL     ?Subroutine70 & 0xFFFF
   1633          
   1634            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_123:
   \   00002B   7005         JNZ       ??ZDP_MgmtBindRsp_0
   1635            {
   1636              return afStatus_MEM_FAIL;
   \   00002D   7910         MOV       R1,#0x10
   \   00002F   02....       LJMP      ??CrossCallReturnLabel_226 & 0xFFFF
   1637            }
   1638          
   1639            pBuf = buf+1;
   \                     ??ZDP_MgmtBindRsp_0:
   \   000032   8A82         MOV       DPL,R2
   \   000034   8B83         MOV       DPH,R3
   \   000036   A3           INC       DPTR
   \   000037   8582..       MOV       ?V6,DPL
   \   00003A   8583..       MOV       ?V7,DPH
   \   00003D   AA..         MOV       R2,?V6
   \   00003F   AB..         MOV       R3,?V7
   1640          
   1641            *pBuf++ = Status;
   \   000041   E5..         MOV       A,?V10
   \   000043   F0           MOVX      @DPTR,A
   1642            *pBuf++ = BindingTableEntries;
   \   000044   A3           INC       DPTR
   \   000045   E5..         MOV       A,?V5
   \   000047   F0           MOVX      @DPTR,A
   1643            *pBuf++ = StartIndex;
   \   000048   7417         MOV       A,#0x17
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000050   A3           INC       DPTR
   \   000051   12....       LCALL     ?Subroutine34 & 0xFFFF
   1644            *pBuf++ = BindingTableListCount;
   \                     ??CrossCallReturnLabel_54:
   \   000054   E5..         MOV       A,?V4
   \   000056   F0           MOVX      @DPTR,A
   \   000057   EA           MOV       A,R2
   \   000058   2404         ADD       A,#0x4
   \   00005A   FA           MOV       R2,A
   \   00005B   5001         JNC       ??ZDP_MgmtBindRsp_1
   \   00005D   0B           INC       R3
   1645          
   1646            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1647            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1648            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1649            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1650          
   1651            len = 1 + 1 + 1 + 1;
   \                     ??ZDP_MgmtBindRsp_1:
   \   00005E   75..04       MOV       ?V0,#0x4
   1652            for ( x = 0; x < BindingTableListCount; x++ )
   \   000061   75..00       MOV       ?V1,#0x0
   \   000064   7419         MOV       A,#0x19
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00006C   8015         SJMP      ??ZDP_MgmtBindRsp_2
   1653            {
   1654              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   1655              *pBuf++ = BindingTableList->srcEP;
   1656          
   1657              // Cluster ID
   1658              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   1659              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   1660          
   1661              *pBuf++ = BindingTableList->dstAddr.addrMode;
   1662              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   1663              {
   1664                len += extZdpBindEntrySize;
   1665                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1666                *pBuf++ = BindingTableList->dstEP;
   1667              }
   1668              else
   1669              {
   1670                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_3:
   \   00006E   740E         MOV       A,#0xe
   \   000070   25..         ADD       A,?V0
   \   000072   F5..         MOV       ?V0,A
   1671                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   000074   12....       LCALL     ?Subroutine11 & 0xFFFF
   1672                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   1673              }
   \                     ??CrossCallReturnLabel_5:
   \   000077   5001         JNC       ??ZDP_MgmtBindRsp_4
   \   000079   0B           INC       R3
   1674              BindingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtBindRsp_4:
   \   00007A   EE           MOV       A,R6
   \   00007B   2415         ADD       A,#0x15
   \   00007D   FE           MOV       R6,A
   \   00007E   5001         JNC       ??ZDP_MgmtBindRsp_5
   \   000080   0F           INC       R7
   \                     ??ZDP_MgmtBindRsp_5:
   \   000081   05..         INC       ?V1
   \                     ??ZDP_MgmtBindRsp_2:
   \   000083   E5..         MOV       A,?V1
   \   000085   C3           CLR       C
   \   000086   95..         SUBB      A,?V4
   \   000088   5058         JNC       ??ZDP_MgmtBindRsp_6
   \   00008A                ; Setup parameters for call to function sAddrExtCpy
   \   00008A   EE           MOV       A,R6
   \   00008B   FC           MOV       R4,A
   \   00008C   EF           MOV       A,R7
   \   00008D   FD           MOV       R5,A
   \   00008E   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000091   8E82         MOV       DPL,R6
   \   000093   8F83         MOV       DPH,R7
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   0000A0   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000A3   8882         MOV       DPL,R0
   \   0000A5   12....       LCALL     ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   0000A8   12....       LCALL     ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   0000AB   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   0000AE   A3           INC       DPTR
   \   0000AF   F0           MOVX      @DPTR,A
   \   0000B0   EE           MOV       A,R6
   \   0000B1   2413         ADD       A,#0x13
   \   0000B3   F8           MOV       R0,A
   \   0000B4   E4           CLR       A
   \   0000B5   3F           ADDC      A,R7
   \   0000B6   F9           MOV       R1,A
   \   0000B7   8882         MOV       DPL,R0
   \   0000B9   F583         MOV       DPH,A
   \   0000BB   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000BE   5001         JNC       ??ZDP_MgmtBindRsp_7
   \   0000C0   0B           INC       R3
   \                     ??ZDP_MgmtBindRsp_7:
   \   0000C1   EE           MOV       A,R6
   \   0000C2   240B         ADD       A,#0xb
   \   0000C4   FC           MOV       R4,A
   \   0000C5   E4           CLR       A
   \   0000C6   3F           ADDC      A,R7
   \   0000C7   FD           MOV       R5,A
   \   0000C8   8882         MOV       DPL,R0
   \   0000CA   8983         MOV       DPH,R1
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   6403         XRL       A,#0x3
   \   0000CF   709D         JNZ       ??ZDP_MgmtBindRsp_3
   \   0000D1   7415         MOV       A,#0x15
   \   0000D3   25..         ADD       A,?V0
   \   0000D5   F5..         MOV       ?V0,A
   \   0000D7                ; Setup parameters for call to function sAddrExtCpy
   \   0000D7   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000DA   12....       LCALL     ?Subroutine68 & 0xFFFF
   1675            }
   \                     ??CrossCallReturnLabel_237:
   \   0000DD   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000E0   8098         SJMP      ??ZDP_MgmtBindRsp_4
   1676          
   1677            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_6:
   \   0000E2   90....       MOV       DPTR,#ZDP_TmpBuf
   \   0000E5   E5..         MOV       A,?V6
   \   0000E7   F0           MOVX      @DPTR,A
   \   0000E8   A3           INC       DPTR
   \   0000E9   E5..         MOV       A,?V7
   \   0000EB   F0           MOVX      @DPTR,A
   \   0000EC                ; Setup parameters for call to function fillAndSend
   \   0000EC   75..33       MOV       ?V6,#0x33
   \   0000EF   75..80       MOV       ?V7,#-0x80
   \   0000F2   78..         MOV       R0,#?V6
   \   0000F4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F7   A9..         MOV       R1,?V0
   \   0000F9   AC..         MOV       R4,?V12
   \   0000FB   AD..         MOV       R5,?V13
   \   0000FD   7402         MOV       A,#0x2
   \   0000FF   12....       LCALL     ?XSTACK_DISP101_8
   \   000102   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000105   12....       LCALL     ?DEALLOC_XSTACK8
   \   000108   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   00010B   02....       LJMP      ?Subroutine4 & 0xFFFF
   1678          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET
   1679          
   1680          /*********************************************************************
   1681           * @fn          ZDP_MgmtNwkUpdateNotify
   1682           *
   1683           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1684           *              function sends a unicast message.
   1685           *
   1686           * @param       dstAddr - destination address of the message
   1687           * @param       status - message status (ZDP_SUCCESS or other)
   1688           * @param       scannedChannels - List of channels scanned by the request
   1689           * @param       totalTransmissions - Total transmissions
   1690           * @param       transmissionFailures - Sum of transmission failures
   1691           * @param       listCount - Number of records contained in the energyValues list
   1692           * @param       energyValues - List of descriptors, one for each of ListCount,
   1693           *                             of the enegry detect descriptors
   1694           * @param       txOptions - Transmit options
   1695           * @param       securityEnable - Security options
   1696           *
   1697           * @return      afStatus_t
   1698           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1699          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1700                                              uint8 status, uint32 scannedChannels,
   1701                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1702                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1703                                              uint8 securityEnable )
   1704          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V8,R2
   \   000014   8B..         MOV       ?V9,R3
   \   000016   8C..         MOV       ?V7,R4
   \   000018   8D..         MOV       ?V0,R5
   1705            uint8 *buf;
   1706            uint8 *pBuf;
   1707            uint8 len;
   1708          
   1709            (void)securityEnable;  // Intentionally unreferenced parameter
   1710          
   1711            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1712            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   00001A   740A         MOV       A,#0xa
   \   00001C   2D           ADD       A,R5
   \   00001D   F5..         MOV       ?V1,A
   1713          
   1714            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000022   8A..         MOV       ?V2,R2
   \   000024   8B..         MOV       ?V3,R3
   \   000026   AE..         MOV       R6,?V2
   \   000028   AF..         MOV       R7,?V3
   1715            if ( buf == NULL )
   \   00002A   EA           MOV       A,R2
   \   00002B   4F           ORL       A,R7
   \   00002C   7005         JNZ       ??ZDP_MgmtNwkUpdateNotify_0
   1716            {
   1717              return afStatus_MEM_FAIL;
   \   00002E   7910         MOV       R1,#0x10
   \   000030   02....       LJMP      ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
   1718            }
   1719          
   1720            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   000033   8A82         MOV       DPL,R2
   \   000035   8B83         MOV       DPH,R3
   \   000037   A3           INC       DPTR
   \   000038   8582..       MOV       ?V2,DPL
   \   00003B   8583..       MOV       ?V3,DPH
   1721          
   1722            *pBuf++ = status;
   \   00003E   E5..         MOV       A,?V7
   \   000040   12....       LCALL     ?Subroutine28 & 0xFFFF
   1723          
   1724            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \                     ??CrossCallReturnLabel_42:
   \   000043                ; Setup parameters for call to function osal_buffer_uint32
   \   000043   7413         MOV       A,#0x13
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00004B   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00004E   7404         MOV       A,#0x4
   \   000050   12....       LCALL     ?DEALLOC_XSTACK8
   \   000053   7417         MOV       A,#0x17
   \   000055   12....       LCALL     ?XSTACK_DISP0_8
   \   000058   12....       LCALL     ?Subroutine52 & 0xFFFF
   1725          
   1726            *pBuf++ = LO_UINT16( totalTransmissions );
   \                     ??CrossCallReturnLabel_103:
   \   00005B   F0           MOVX      @DPTR,A
   1727            *pBuf++ = HI_UINT16( totalTransmissions );
   \   00005C   E9           MOV       A,R1
   \   00005D   A3           INC       DPTR
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   7419         MOV       A,#0x19
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   12....       LCALL     ?Subroutine52 & 0xFFFF
   1728          
   1729            *pBuf++ = LO_UINT16( transmissionFailures );
   \                     ??CrossCallReturnLabel_104:
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   12....       LCALL     ?Subroutine27 & 0xFFFF
   1730            *pBuf++ = HI_UINT16( transmissionFailures );
   \                     ??CrossCallReturnLabel_39:
   \   00006C   12....       LCALL     ?Subroutine14 & 0xFFFF
   1731          
   1732            *pBuf++ = listCount;
   \                     ??CrossCallReturnLabel_11:
   \   00006F   E5..         MOV       A,?V0
   \   000071   F0           MOVX      @DPTR,A
   1733          
   1734            if ( listCount > 0 )
   \   000072   601C         JZ        ??ZDP_MgmtNwkUpdateNotify_2
   1735              osal_memcpy( pBuf, energyValues, listCount );
   \   000074                ; Setup parameters for call to function osal_memcpy
   \   000074   741B         MOV       A,#0x1b
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00007C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007F   AC..         MOV       R4,?V0
   \   000081   7D00         MOV       R5,#0x0
   \   000083   EA           MOV       A,R2
   \   000084   2405         ADD       A,#0x5
   \   000086   FA           MOV       R2,A
   \   000087   5001         JNC       ??ZDP_MgmtNwkUpdateNotify_3
   \   000089   0B           INC       R3
   \                     ??ZDP_MgmtNwkUpdateNotify_3:
   \   00008A   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00008D   12....       LCALL     ?DEALLOC_XSTACK8
   1736          
   1737            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   000090   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000093   E5..         MOV       A,?V2
   \   000095   F0           MOVX      @DPTR,A
   \   000096   A3           INC       DPTR
   \   000097   E5..         MOV       A,?V3
   \   000099   F0           MOVX      @DPTR,A
   \   00009A   741D         MOV       A,#0x1d
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000A3   F0           MOVX      @DPTR,A
   \   0000A4                ; Setup parameters for call to function fillAndSend
   \   0000A4   75..38       MOV       ?V2,#0x38
   \   0000A7   75..80       MOV       ?V3,#-0x80
   \   0000AA   78..         MOV       R0,#?V2
   \   0000AC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AF   A9..         MOV       R1,?V1
   \   0000B1   AC..         MOV       R4,?V8
   \   0000B3   AD..         MOV       R5,?V9
   \   0000B5   7402         MOV       A,#0x2
   \   0000B7   12....       LCALL     ?XSTACK_DISP101_8
   \   0000BA   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   0000BD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C0   E9           MOV       A,R1
   \   0000C1   F5..         MOV       ?V1,A
   \   0000C3                ; Setup parameters for call to function osal_mem_free
   \   0000C3   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   0000C6   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000C9   E4           CLR       A
   \   0000CA   F0           MOVX      @DPTR,A
   \   0000CB   A9..         MOV       R1,?V1
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   0000CD   02....       LJMP      ?Subroutine6 & 0xFFFF
   1738          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000003   A3           INC       DPTR
   \   000004   22           RET
   1739          
   1740          /*********************************************************************
   1741           * Functions to register for ZDO Over-the-air messages
   1742           */
   1743          
   1744          /*********************************************************************
   1745           * @fn          ZDO_RegisterForZDOMsg
   1746           *
   1747           * @brief       Call this function to register of an incoming over
   1748           *              the air ZDO message - probably a response message
   1749           *              but requests can also be received.
   1750           *              Messages are delivered to the task with ZDO_CB_MSG
   1751           *              as the message ID.
   1752           *
   1753           * @param       taskID - Where you would like the message delivered
   1754           * @param       clusterID - What message?
   1755           *
   1756           * @return      ZSuccess - successful, ZMemError if not
   1757           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1758          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1759          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   1760            ZDO_MsgCB_t *pList;
   1761            ZDO_MsgCB_t *pLast;
   1762            ZDO_MsgCB_t *pNew;
   1763          
   1764            // Look for duplicate
   1765            pList = pLast = zdoMsgCBs;
   \   00000B   90....       MOV       DPTR,#zdoMsgCBs
   \   00000E   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000011   EE           MOV       A,R6
   \   000012   F8           MOV       R0,A
   \   000013   EF           MOV       A,R7
   \   000014   8026         SJMP      ??CrossCallReturnLabel_294
   1766            while ( pList )
   1767            {
   1768              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   000016   8882         MOV       DPL,R0
   \   000018   8983         MOV       DPH,R1
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   65..         XRL       A,?V2
   \   00001F   7010         JNZ       ??ZDO_RegisterForZDOMsg_1
   \   000021   8882         MOV       DPL,R0
   \   000023   8983         MOV       DPH,R1
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   6A           XRL       A,R2
   \   00002A   7003         JNZ       ??ZDO_RegisterForZDOMsg_2
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   6B           XRL       A,R3
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   00002F   6053         JZ        ??CrossCallReturnLabel_34
   1769                return ( ZSuccess );
   1770              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000031   E8           MOV       A,R0
   \   000032   FE           MOV       R6,A
   \   000033   E9           MOV       A,R1
   \   000034   FF           MOV       R7,A
   1771              pList = (ZDO_MsgCB_t *)pList->next;
   \   000035   8882         MOV       DPL,R0
   \   000037   8983         MOV       DPH,R1
   \   000039   12....       LCALL     ??Subroutine131_0 & 0xFFFF
   1772            }
   \                     ??CrossCallReturnLabel_294:
   \   00003C   F9           MOV       R1,A
   \   00003D   E8           MOV       A,R0
   \   00003E   49           ORL       A,R1
   \   00003F   70D5         JNZ       ??ZDO_RegisterForZDOMsg_0
   1773          
   1774            // Add to the list
   1775            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \   000041                ; Setup parameters for call to function osal_mem_alloc
   \   000041   7A05         MOV       R2,#0x5
   \   000043   7B00         MOV       R3,#0x0
   \   000045   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000048   8A..         MOV       ?V4,R2
   \   00004A   8B..         MOV       ?V5,R3
   \   00004C   A8..         MOV       R0,?V4
   \   00004E   A9..         MOV       R1,?V5
   1776            if ( pNew )
   \   000050   EA           MOV       A,R2
   \   000051   49           ORL       A,R1
   \   000052   6034         JZ        ??ZDO_RegisterForZDOMsg_3
   1777            {
   1778              pNew->taskID = taskID;
   \   000054   8A82         MOV       DPL,R2
   \   000056   8B83         MOV       DPH,R3
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   E5..         MOV       A,?V2
   \   00005C   12....       LCALL     ?Subroutine34 & 0xFFFF
   1779              pNew->clusterID = clusterID;
   \                     ??CrossCallReturnLabel_55:
   \   00005F   E5..         MOV       A,?V0
   \   000061   F0           MOVX      @DPTR,A
   \   000062   A3           INC       DPTR
   \   000063   E5..         MOV       A,?V1
   \   000065   F0           MOVX      @DPTR,A
   1780              pNew->next = NULL;
   \   000066   8A82         MOV       DPL,R2
   \   000068   8B83         MOV       DPH,R3
   \   00006A   E4           CLR       A
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   A3           INC       DPTR
   \   00006D   F0           MOVX      @DPTR,A
   1781              if ( zdoMsgCBs )
   \   00006E   90....       MOV       DPTR,#zdoMsgCBs
   \   000071   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000074   EA           MOV       A,R2
   \   000075   4B           ORL       A,R3
   \   000076   6006         JZ        ??ZDO_RegisterForZDOMsg_4
   1782              {
   1783                pLast->next = pNew;
   \   000078   8E82         MOV       DPL,R6
   \   00007A   8F83         MOV       DPH,R7
   \   00007C   8003         SJMP      ??ZDO_RegisterForZDOMsg_5
   1784              }
   1785              else
   1786                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   00007E   90....       MOV       DPTR,#zdoMsgCBs
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   000081   12....       LCALL     ?Subroutine26 & 0xFFFF
   1787              return ( ZSuccess );
   \                     ??CrossCallReturnLabel_34:
   \   000084   7900         MOV       R1,#0x0
   \   000086   8002         SJMP      ??ZDO_RegisterForZDOMsg_6
   1788            }
   1789            else
   1790              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   000088   7910         MOV       R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   00008A   02....       LJMP      ??Subroutine106_0 & 0xFFFF
   1791          }
   1792          
   1793          /*********************************************************************
   1794           * @fn          ZDO_RemoveRegisteredCB
   1795           *
   1796           * @brief       Call this function if you don't want to receive the
   1797           *              incoming message.
   1798           *
   1799           * @param       taskID - Where the messages are being delivered.
   1800           * @param       clusterID - What message?
   1801           *
   1802           * @return      ZSuccess - successful, ZFailure if not found
   1803           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1804          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1805          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1806            ZDO_MsgCB_t *pList;
   1807            ZDO_MsgCB_t *pLast = NULL;
   \   000007   7C00         MOV       R4,#0x0
   \   000009   7D00         MOV       R5,#0x0
   1808          
   1809            pList = zdoMsgCBs;
   \   00000B   90....       MOV       DPTR,#zdoMsgCBs
   \   00000E   8008         SJMP      ??ZDO_RemoveRegisteredCB_0
   1810            while ( pList )
   1811            {
   1812              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1813              {
   1814                if ( pLast )
   1815                {
   1816                  // remove this one from the linked list
   1817                  pLast->next = pList->next;
   1818                }
   1819                else if ( pList->next )
   1820                {
   1821                  // remove the first one from the linked list
   1822                  zdoMsgCBs = pList->next;
   1823                }
   1824                else
   1825                {
   1826                  // remove the only item from the list
   1827                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   1828                }
   1829                osal_mem_free( pList );
   1830                return ( ZSuccess );
   1831              }
   1832              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   000010   E8           MOV       A,R0
   \   000011   FC           MOV       R4,A
   \   000012   E9           MOV       A,R1
   \   000013   FD           MOV       R5,A
   1833              pList = pList->next;
   \   000014   8882         MOV       DPL,R0
   \   000016   8983         MOV       DPH,R1
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   000018   12....       LCALL     ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   00001B   49           ORL       A,R1
   \   00001C   6047         JZ        ??ZDO_RemoveRegisteredCB_2
   \   00001E   8882         MOV       DPL,R0
   \   000020   8983         MOV       DPH,R1
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   6E           XRL       A,R6
   \   000026   70E8         JNZ       ??ZDO_RemoveRegisteredCB_1
   \   000028   8882         MOV       DPL,R0
   \   00002A   8983         MOV       DPH,R1
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   6A           XRL       A,R2
   \   000031   7003         JNZ       ??ZDO_RemoveRegisteredCB_3
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   6B           XRL       A,R3
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   000036   70D8         JNZ       ??ZDO_RemoveRegisteredCB_1
   \   000038   8882         MOV       DPL,R0
   \   00003A   8983         MOV       DPH,R1
   \   00003C   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   00003F   EC           MOV       A,R4
   \   000040   4D           ORL       A,R5
   \   000041   6006         JZ        ??ZDO_RemoveRegisteredCB_4
   \   000043   8C82         MOV       DPL,R4
   \   000045   8D83         MOV       DPH,R5
   \   000047   8007         SJMP      ??ZDO_RemoveRegisteredCB_5
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   000049   EA           MOV       A,R2
   \   00004A   4B           ORL       A,R3
   \   00004B   90....       MOV       DPTR,#zdoMsgCBs
   \   00004E   6006         JZ        ??ZDO_RemoveRegisteredCB_6
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   000050   EA           MOV       A,R2
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   EB           MOV       A,R3
   \   000054   8003         SJMP      ??ZDO_RemoveRegisteredCB_7
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   000056   E4           CLR       A
   \   000057   F0           MOVX      @DPTR,A
   \   000058   A3           INC       DPTR
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   000059   F0           MOVX      @DPTR,A
   \   00005A                ; Setup parameters for call to function osal_mem_free
   \   00005A   E8           MOV       A,R0
   \   00005B   FA           MOV       R2,A
   \   00005C   E9           MOV       A,R1
   \   00005D   FB           MOV       R3,A
   \   00005E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000061   7900         MOV       R1,#0x0
   \   000063   8002         SJMP      ??ZDO_RemoveRegisteredCB_8
   1834            }
   1835          
   1836            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   000065   7901         MOV       R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_8:
   \   000067   02....       LJMP      ?Subroutine7 & 0xFFFF
   1837          }
   1838          
   1839          /*********************************************************************
   1840           * @fn          ZDO_SendMsgCBs
   1841           *
   1842           * @brief       This function sends messages to registered tasks.
   1843           *              Local to ZDO and shouldn't be called outside of ZDO.
   1844           *
   1845           * @param       inMsg - incoming message
   1846           *
   1847           * @return      TRUE if sent to at least 1 task, FALSE if not
   1848           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   7D00         MOV       R5,#0x0
   \   000002                REQUIRE ??Subroutine110_0
   \   000002                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1849          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   1850          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   1851            uint8 ret = FALSE;
   \   000009   75..00       MOV       ?V4,#0x0
   1852            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV       DPTR,#zdoMsgCBs
   \   00000F   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000012   2410         ADD       A,#0x10
   \   000014   F5..         MOV       ?V8,A
   \   000016   E4           CLR       A
   \   000017   35..         ADDC      A,?V3
   \   000019   F5..         MOV       ?V9,A
   \   00001B   02....       LJMP      ??CrossCallReturnLabel_198 & 0xFFFF
   1853            while ( pList )
   1854            {
   1855              if ( pList->clusterID == inMsg->clusterID )
   \                     ??ZDO_SendMsgCBs_0:
   \   00001E   85..82       MOV       DPL,?V0
   \   000021   85..83       MOV       DPH,?V1
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   00002A   E5..         MOV       A,?V2
   \   00002C   240C         ADD       A,#0xc
   \   00002E   F582         MOV       DPL,A
   \   000030   E4           CLR       A
   \   000031   35..         ADDC      A,?V3
   \   000033   F583         MOV       DPH,A
   \   000035   E0           MOVX      A,@DPTR
   \   000036   68           XRL       A,R0
   \   000037   7003         JNZ       ??ZDO_SendMsgCBs_1
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   69           XRL       A,R1
   \                     ??ZDO_SendMsgCBs_1:
   \   00003C   6003         JZ        $+5
   \   00003E   02....       LJMP      ??ZDO_SendMsgCBs_2 & 0xFFFF
   1856              {
   1857                zdoIncomingMsg_t *msgPtr;
   1858          
   1859                // Send the address to the task
   1860                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \   000041                ; Setup parameters for call to function osal_msg_allocate
   \   000041   85..82       MOV       DPL,?V8
   \   000044   85..83       MOV       DPH,?V9
   \   000047   E0           MOVX      A,@DPTR
   \   000048   2415         ADD       A,#0x15
   \   00004A   FA           MOV       R2,A
   \   00004B   E4           CLR       A
   \   00004C   3400         ADDC      A,#0x0
   \   00004E   FB           MOV       R3,A
   \   00004F   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000052   8A..         MOV       ?V6,R2
   \   000054   8B..         MOV       ?V7,R3
   \   000056   AE..         MOV       R6,?V6
   \   000058   AF..         MOV       R7,?V7
   1861                if ( msgPtr )
   \   00005A   EA           MOV       A,R2
   \   00005B   4F           ORL       A,R7
   \   00005C   6074         JZ        ??ZDO_SendMsgCBs_2
   1862                {
   1863                  // copy struct
   1864                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   00005E                ; Setup parameters for call to function osal_memcpy
   \   00005E   85....       MOV       ?V4,?V2
   \   000061   85....       MOV       ?V5,?V3
   \   000064   75..00       MOV       ?V6,#0x0
   \   000067   78..         MOV       R0,#?V4
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00006C   7C15         MOV       R4,#0x15
   \   00006E   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   1865          
   1866                  if ( inMsg->asduLen )
   \   000074   85..82       MOV       DPL,?V8
   \   000077   85..83       MOV       DPH,?V9
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   603A         JZ        ??ZDO_SendMsgCBs_3
   1867                  {
   1868                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   00007D   EE           MOV       A,R6
   \   00007E   2415         ADD       A,#0x15
   \   000080   FA           MOV       R2,A
   \   000081   E4           CLR       A
   \   000082   3F           ADDC      A,R7
   \   000083   FB           MOV       R3,A
   \   000084   EE           MOV       A,R6
   \   000085   2413         ADD       A,#0x13
   \   000087   F582         MOV       DPL,A
   \   000089   E4           CLR       A
   \   00008A   3F           ADDC      A,R7
   \   00008B   F583         MOV       DPH,A
   \   00008D   EA           MOV       A,R2
   \   00008E   F0           MOVX      @DPTR,A
   \   00008F   A3           INC       DPTR
   \   000090   EB           MOV       A,R3
   \   000091   F0           MOVX      @DPTR,A
   1869                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \   000092                ; Setup parameters for call to function osal_memcpy
   \   000092   E5..         MOV       A,?V2
   \   000094   2413         ADD       A,#0x13
   \   000096   F582         MOV       DPL,A
   \   000098   E4           CLR       A
   \   000099   35..         ADDC      A,?V3
   \   00009B   F583         MOV       DPH,A
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   F5..         MOV       ?V4,A
   \   0000A0   A3           INC       DPTR
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   F5..         MOV       ?V5,A
   \   0000A4   78..         MOV       R0,#?V4
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000A9   85..82       MOV       DPL,?V8
   \   0000AC   85..83       MOV       DPH,?V9
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   FC           MOV       R4,A
   \   0000B1   12....       LCALL     ?Subroutine73 & 0xFFFF
   1870                  }
   \                     ??CrossCallReturnLabel_180:
   \   0000B4   12....       LCALL     ?DEALLOC_XSTACK8
   1871          
   1872                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_3:
   \   0000B7   8E82         MOV       DPL,R6
   \   0000B9   8F83         MOV       DPH,R7
   \   0000BB   74D3         MOV       A,#-0x2d
   \   0000BD   F0           MOVX      @DPTR,A
   1873                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   0000BE                ; Setup parameters for call to function osal_msg_send
   \   0000BE   EE           MOV       A,R6
   \   0000BF   FA           MOV       R2,A
   \   0000C0   EF           MOV       A,R7
   \   0000C1   FB           MOV       R3,A
   \   0000C2   85..82       MOV       DPL,?V0
   \   0000C5   85..83       MOV       DPH,?V1
   \   0000C8   A3           INC       DPTR
   \   0000C9   A3           INC       DPTR
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   F9           MOV       R1,A
   \   0000CC   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   1874                  ret = TRUE;
   \   0000CF   75..01       MOV       ?V4,#0x1
   1875                }
   1876              }
   1877              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_2:
   \   0000D2   85..82       MOV       DPL,?V0
   \   0000D5   85..83       MOV       DPH,?V1
   \   0000D8   12....       LCALL     ??Subroutine112_0 & 0xFFFF
   1878            }
   \                     ??CrossCallReturnLabel_198:
   \   0000DB   E5..         MOV       A,?V0
   \   0000DD   45..         ORL       A,?V1
   \   0000DF   6003         JZ        $+5
   \   0000E1   02....       LJMP      ??ZDO_SendMsgCBs_0 & 0xFFFF
   1879            return ( ret );
   \   0000E4   A9..         MOV       R1,?V4
   \   0000E6   02....       LJMP      ??Subroutine114_0 & 0xFFFF
   1880          }
   1881          
   1882          /*********************************************************************
   1883           * Incoming message processor
   1884           */
   1885          
   1886          /*********************************************************************
   1887           * @fn          ZDP_IncomingData
   1888           *
   1889           * @brief       This function indicates the transfer of a data PDU (ASDU)
   1890           *              from the APS sub-layer to the ZDO.
   1891           *
   1892           * @param       pData - Incoming Message
   1893           *
   1894           * @return      none
   1895           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1896          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   1897          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1898            uint8 x = 0;
   \   00000A   7E00         MOV       R6,#0x0
   1899            uint8 handled;
   1900            zdoIncomingMsg_t inMsg;
   1901          
   1902            inMsg.srcAddr.addrMode = Addr16Bit;
   \   00000C   740A         MOV       A,#0xa
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   7402         MOV       A,#0x2
   \   000013   12....       LCALL     ?Subroutine14 & 0xFFFF
   1903            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_12:
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   00001B   7402         MOV       A,#0x2
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ?Subroutine26 & 0xFFFF
   1904            inMsg.wasBroadcast = pData->wasBroadcast;
   \                     ??CrossCallReturnLabel_35:
   \   000023   EA           MOV       A,R2
   \   000024   2415         ADD       A,#0x15
   \   000026   F582         MOV       DPL,A
   \   000028   E4           CLR       A
   \   000029   3B           ADDC      A,R3
   \   00002A   F583         MOV       DPH,A
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   C0E0         PUSH      A
   \   00002F   740B         MOV       A,#0xb
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   D0E0         POP       A
   \   000036   12....       LCALL     ?Subroutine14 & 0xFFFF
   1905            inMsg.clusterID = pData->clusterId;
   \                     ??CrossCallReturnLabel_13:
   \   000039   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   00003C   740C         MOV       A,#0xc
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   12....       LCALL     ?Subroutine26 & 0xFFFF
   1906            inMsg.SecurityUse = pData->SecurityUse;
   \                     ??CrossCallReturnLabel_36:
   \   000044   EA           MOV       A,R2
   \   000045   2419         ADD       A,#0x19
   \   000047   F582         MOV       DPL,A
   \   000049   E4           CLR       A
   \   00004A   3B           ADDC      A,R3
   \   00004B   F583         MOV       DPH,A
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   C0E0         PUSH      A
   \   000050   740E         MOV       A,#0xe
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   D0E0         POP       A
   \   000057   F0           MOVX      @DPTR,A
   1907          
   1908            inMsg.asduLen = pData->cmd.DataLength-1;
   \   000058   EA           MOV       A,R2
   \   000059   241F         ADD       A,#0x1f
   \   00005B   F582         MOV       DPL,A
   \   00005D   E4           CLR       A
   \   00005E   3B           ADDC      A,R3
   \   00005F   F583         MOV       DPH,A
   \   000061   E0           MOVX      A,@DPTR
   \   000062   14           DEC       A
   \   000063   C0E0         PUSH      A
   \   000065   7410         MOV       A,#0x10
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   D0E0         POP       A
   \   00006C   F0           MOVX      @DPTR,A
   1909            inMsg.asdu = pData->cmd.Data+1;
   \   00006D   EA           MOV       A,R2
   \   00006E   2421         ADD       A,#0x21
   \   000070   F8           MOV       R0,A
   \   000071   E4           CLR       A
   \   000072   3B           ADDC      A,R3
   \   000073   F9           MOV       R1,A
   \   000074   8882         MOV       DPL,R0
   \   000076   F583         MOV       DPH,A
   \   000078   E0           MOVX      A,@DPTR
   \   000079   2401         ADD       A,#0x1
   \   00007B   FC           MOV       R4,A
   \   00007C   A3           INC       DPTR
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   3400         ADDC      A,#0x0
   \   000080   FD           MOV       R5,A
   \   000081   7413         MOV       A,#0x13
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   EC           MOV       A,R4
   \   000087   F0           MOVX      @DPTR,A
   \   000088   A3           INC       DPTR
   \   000089   ED           MOV       A,R5
   \   00008A   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   1910            inMsg.TransSeq = pData->cmd.Data[0];
   \                     ??CrossCallReturnLabel_273:
   \   00008D   12....       LCALL     ??Subroutine111_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000090   E0           MOVX      A,@DPTR
   \   000091   C0E0         PUSH      A
   \   000093   740F         MOV       A,#0xf
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   D0E0         POP       A
   \   00009A   F0           MOVX      @DPTR,A
   1911            inMsg.macDestAddr = pData->macDestAddr;
   \   00009B   EA           MOV       A,R2
   \   00009C   2412         ADD       A,#0x12
   \   00009E   F582         MOV       DPL,A
   \   0000A0   E4           CLR       A
   \   0000A1   3B           ADDC      A,R3
   \   0000A2   F583         MOV       DPH,A
   \   0000A4   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   0000A7   7411         MOV       A,#0x11
   \   0000A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AC   12....       LCALL     ?Subroutine26 & 0xFFFF
   1912          
   1913            handled = ZDO_SendMsgCBs( &inMsg );
   \                     ??CrossCallReturnLabel_37:
   \   0000AF                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   0000AF   AA..         MOV       R2,?XSP + 0
   \   0000B1   AB..         MOV       R3,?XSP + 1
   \   0000B3   12....       LCALL     `??ZDO_SendMsgCBs::?relay`; Banked call to: ZDO_SendMsgCBs
   \   0000B6   E9           MOV       A,R1
   \   0000B7   FC           MOV       R4,A
   \   0000B8   8001         SJMP      ??ZDP_IncomingData_0
   1914          
   1915          #if (defined MT_ZDO_CB_FUNC)
   1916          #if !defined MT_TASK
   1917            if (zgZdoDirectCB)
   1918          #endif
   1919            {
   1920              MT_ZdoDirectCB( pData, &inMsg );
   1921            }
   1922          #endif
   1923          
   1924            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   1925            {
   1926              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   1927              {
   1928                zdpMsgProcs[x].pFn( &inMsg );
   1929                return;
   1930              }
   1931              x++;
   \                     ??ZDP_IncomingData_1:
   \   0000BA   0E           INC       R6
   \                     ??ZDP_IncomingData_0:
   \   0000BB   EE           MOV       A,R6
   \   0000BC   F5..         MOV       ?V0,A
   \   0000BE   75..00       MOV       ?V1,#0x0
   \   0000C1   7402         MOV       A,#0x2
   \   0000C3   78..         MOV       R0,#?V0
   \   0000C5   12....       LCALL     ?S_SHL
   \   0000C8   74..         MOV       A,#zdpMsgProcs & 0xff
   \   0000CA   25..         ADD       A,?V0
   \   0000CC   F8           MOV       R0,A
   \   0000CD   74..         MOV       A,#(zdpMsgProcs >> 8) & 0xff
   \   0000CF   35..         ADDC      A,?V1
   \   0000D1   F9           MOV       R1,A
   \   0000D2   8882         MOV       DPL,R0
   \   0000D4   F583         MOV       DPH,A
   \   0000D6   E4           CLR       A
   \   0000D7   93           MOVC      A,@A+DPTR
   \   0000D8   C0E0         PUSH      A
   \   0000DA   7401         MOV       A,#0x1
   \   0000DC   93           MOVC      A,@A+DPTR
   \   0000DD   F583         MOV       DPH,A
   \   0000DF   D082         POP       DPL
   \   0000E1   AA82         MOV       R2,DPL
   \   0000E3   AB83         MOV       R3,DPH
   \   0000E5   74FF         MOV       A,#-0x1
   \   0000E7   6A           XRL       A,R2
   \   0000E8   7003         JNZ       ??ZDP_IncomingData_2
   \   0000EA   74FF         MOV       A,#-0x1
   \   0000EC   6B           XRL       A,R3
   \                     ??ZDP_IncomingData_2:
   \   0000ED   6028         JZ        ??ZDP_IncomingData_3
   \   0000EF   740C         MOV       A,#0xc
   \   0000F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   6A           XRL       A,R2
   \   0000F6   7003         JNZ       ??ZDP_IncomingData_4
   \   0000F8   A3           INC       DPTR
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   6B           XRL       A,R3
   \                     ??ZDP_IncomingData_4:
   \   0000FB   70BD         JNZ       ??ZDP_IncomingData_1
   \   0000FD                ; Setup parameters for indirect call
   \   0000FD   AA..         MOV       R2,?XSP + 0
   \   0000FF   AB..         MOV       R3,?XSP + 1
   \   000101   8882         MOV       DPL,R0
   \   000103   8983         MOV       DPH,R1
   \   000105   A3           INC       DPTR
   \   000106   A3           INC       DPTR
   \   000107   E4           CLR       A
   \   000108   93           MOVC      A,@A+DPTR
   \   000109   C0E0         PUSH      A
   \   00010B   7401         MOV       A,#0x1
   \   00010D   93           MOVC      A,@A+DPTR
   \   00010E   F583         MOV       DPH,A
   \   000110   D082         POP       DPL
   \   000112   12....       LCALL     ?CALL_IND
   \   000115   800A         SJMP      ??ZDP_IncomingData_5
   1932            }
   1933          
   1934            // Handle unhandled messages
   1935            if ( !handled )
   \                     ??ZDP_IncomingData_3:
   \   000117   EC           MOV       A,R4
   \   000118   7007         JNZ       ??ZDP_IncomingData_5
   1936              ZDApp_InMsgCB( &inMsg );
   \   00011A                ; Setup parameters for call to function ZDApp_InMsgCB
   \   00011A   AA..         MOV       R2,?XSP + 0
   \   00011C   AB..         MOV       R3,?XSP + 1
   \   00011E   12....       LCALL     `??ZDApp_InMsgCB::?relay`; Banked call to: ZDApp_InMsgCB
   1937          }
   \                     ??ZDP_IncomingData_5:
   \   000121   7415         MOV       A,#0x15
   \   000123   02....       LJMP      ??Subroutine105_0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??fillAndSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    fillAndSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SendData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NWKAddrOfInterestReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NWKAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NwkAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NwkAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_IEEEAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IEEEAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_UserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_DeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_DeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zdpProcessAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdpProcessAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NodeDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NodeDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_PowerDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_PowerDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SimpleDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EPRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EPRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_UserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_GenericRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_GenericRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_BindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_BindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZDOMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveRegisteredCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SendMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_IncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IncomingData
   1938          
   1939          /*********************************************************************
   1940          *********************************************************************/
   1941          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     14   ZDO_RegisterForZDOMsg
        0     14   -> osal_mem_alloc
      0      9   ZDO_RemoveRegisteredCB
        0      9   -> osal_mem_free
      0     52   ZDO_SendMsgCBs
        0     21   -> osal_memcpy
        0     18   -> osal_msg_allocate
        0     18   -> osal_msg_send
      1     28   ZDP_BindUnbindReq
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
        1     18   -> sAddrExtCpy
      1     22   ZDP_DeviceAnnce
        0     21   -> fillAndSend
        0     19   -> sAddrExtCpy
      1     26   ZDP_EPRsp
        0     18   -> fillAndSend
        0     19   -> osal_memcpy
      1     29   ZDP_EndDeviceBindReq
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
      1     16   ZDP_GenericRsp
        0     12   -> fillAndSend
      1     21   ZDP_IEEEAddrReq
        0     21   -> fillAndSend
      1     31   ZDP_IncomingData
        0     31   -> ZDApp_InMsgCB
        0     31   -> ZDO_SendMsgCBs
      1     24   ZDP_MatchDescReq
        0     16   -> fillAndSend
      1     30   ZDP_MgmtBindRsp
        0     25   -> fillAndSend
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     23   -> sAddrExtCpy
      1     15   ZDP_MgmtDirectJoinReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      0     16   ZDP_MgmtLeaveReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      1     29   ZDP_MgmtLqiRsp
        0     24   -> fillAndSend
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     22   -> sAddrExtCpy
      1     20   ZDP_MgmtNwkDiscReq
        0     14   -> fillAndSend
        0     16   -> osal_buffer_uint32
      1     30   ZDP_MgmtNwkDiscRsp
        0     25   -> fillAndSend
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     23   -> sAddrExtCpy
      1     35   ZDP_MgmtNwkUpdateNotify
        0     21   -> fillAndSend
        0     23   -> osal_buffer_uint32
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
      1     24   ZDP_MgmtNwkUpdateReq
        0     16   -> fillAndSend
        0     18   -> osal_buffer_uint32
      1     12   ZDP_MgmtPermitJoinReq
        0     12   -> fillAndSend
      1     28   ZDP_MgmtRtgRsp
        0     23   -> fillAndSend
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
      1     13   ZDP_NWKAddrOfInterestReq
        0     12   -> fillAndSend
      1     14   ZDP_NodeDescMsg
        0     12   -> fillAndSend
      1     23   ZDP_NwkAddrReq
        0     23   -> fillAndSend
        0     21   -> sAddrExtCmp
        0     21   -> sAddrExtCpy
      1     14   ZDP_PowerDescMsg
        0     12   -> fillAndSend
      1     19   ZDP_SendData
        0     14   -> fillAndSend
      1     21   ZDP_ServerDiscReq
        0     21   -> fillAndSend
      1     17   ZDP_ServerDiscRsp
        0     13   -> fillAndSend
      1     22   ZDP_SimpleDescMsg
        0     22   -> fillAndSend
      1     13   ZDP_SimpleDescReq
        0     12   -> fillAndSend
      1     25   ZDP_UserDescRsp
        0     21   -> fillAndSend
        0     22   -> osal_memcpy
      1     20   ZDP_UserDescSet
        0     17   -> fillAndSend
        0     18   -> osal_memcpy
        0     15   -> osal_memset
      1     73   fillAndSend
        0     35   -> AF_DataRequest
        0     26   -> osal_memset
      1     38   zdpProcessAddrReq
        0     36   -> AddrMgrEntryGet
        0     36   -> AssocGetWithExt
        0     36   -> AssocGetWithShort
        0     36   -> AssocMakeList
        0     38   -> fillAndSend
        0     36   -> osal_mem_free
        0     36   -> sAddrExtCmp
        0     36   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDP_TmpBuf>
       4  ??Subroutine102_0
       8  ??Subroutine103_0
       3  ??Subroutine104_0
       8  ??Subroutine105_0
       5  ??Subroutine106_0
       7  ??Subroutine107_0
       6  ??Subroutine108_0
       4  ??Subroutine109_0
       6  ??Subroutine110_0
       4  ??Subroutine111_0
       8  ??Subroutine112_0
       8  ??Subroutine113_0
       5  ??Subroutine114_0
       3  ??Subroutine115_0
       3  ??Subroutine116_0
       5  ??Subroutine117_0
       8  ??Subroutine118_0
       6  ??Subroutine119_0
       4  ??Subroutine120_0
       6  ??Subroutine121_0
       6  ??Subroutine122_0
       2  ??Subroutine123_0
       4  ??Subroutine124_0
       1  ??Subroutine125_0
       4  ??Subroutine126_0
       6  ??Subroutine127_0
       1  ??Subroutine128_0
       5  ??Subroutine129_0
       3  ??Subroutine130_0
       5  ??Subroutine131_0
       6  ??Subroutine132_0
       5  ??Subroutine133_0
       3  ?Subroutine0
      10  ?Subroutine1
      12  ?Subroutine10
       9  ?Subroutine100
       9  ?Subroutine101
      20  ?Subroutine11
       7  ?Subroutine12
       9  ?Subroutine13
       5  ?Subroutine14
      12  ?Subroutine15
       5  ?Subroutine16
       9  ?Subroutine17
       4  ?Subroutine18
       6  ?Subroutine19
      10  ?Subroutine2
       6  ?Subroutine20
      10  ?Subroutine21
      10  ?Subroutine22
      11  ?Subroutine23
       3  ?Subroutine24
       2  ?Subroutine25
       6  ?Subroutine26
       5  ?Subroutine27
       7  ?Subroutine28
       4  ?Subroutine29
       8  ?Subroutine3
      10  ?Subroutine30
      10  ?Subroutine31
       9  ?Subroutine32
      10  ?Subroutine33
       4  ?Subroutine34
       7  ?Subroutine35
       9  ?Subroutine36
      10  ?Subroutine37
      13  ?Subroutine38
       5  ?Subroutine39
       2  ?Subroutine4
       6  ?Subroutine40
       3  ?Subroutine41
       9  ?Subroutine42
      14  ?Subroutine43
      22  ?Subroutine44
       5  ?Subroutine45
      13  ?Subroutine46
      11  ?Subroutine47
       8  ?Subroutine48
       6  ?Subroutine49
       5  ?Subroutine5
       9  ?Subroutine50
       8  ?Subroutine51
       4  ?Subroutine52
      14  ?Subroutine53
       3  ?Subroutine54
       4  ?Subroutine55
       7  ?Subroutine56
       3  ?Subroutine57
       5  ?Subroutine58
       8  ?Subroutine59
       5  ?Subroutine6
       2  ?Subroutine60
       2  ?Subroutine61
      10  ?Subroutine62
       2  ?Subroutine63
       9  ?Subroutine64
       3  ?Subroutine65
       4  ?Subroutine66
       5  ?Subroutine67
       7  ?Subroutine68
       3  ?Subroutine69
       5  ?Subroutine7
      10  ?Subroutine70
       4  ?Subroutine71
       7  ?Subroutine72
       2  ?Subroutine73
      12  ?Subroutine74
       8  ?Subroutine75
       9  ?Subroutine76
       7  ?Subroutine77
      10  ?Subroutine78
      11  ?Subroutine79
      11  ?Subroutine8
       9  ?Subroutine80
       7  ?Subroutine81
       1  ?Subroutine82
       4  ?Subroutine83
       4  ?Subroutine84
       4  ?Subroutine85
       9  ?Subroutine86
       6  ?Subroutine87
      16  ?Subroutine88
      11  ?Subroutine89
      27  ?Subroutine9
       2  ?Subroutine90
       7  ?Subroutine91
       9  ?Subroutine92
       5  ?Subroutine93
       9  ?Subroutine94
      11  ?Subroutine95
       8  ?Subroutine96
       9  ?Subroutine97
      14  ?Subroutine98
       6  ?Subroutine99
     141  ZDO_RegisterForZDOMsg
       6  ZDO_RegisterForZDOMsg::?relay
     106  ZDO_RemoveRegisteredCB
       6  ZDO_RemoveRegisteredCB::?relay
     233  ZDO_SendMsgCBs
       6  ZDO_SendMsgCBs::?relay
       1  ZDP_AF_ENDPOINT
     181  ZDP_BindUnbindReq
       6  ZDP_BindUnbindReq::?relay
      80  ZDP_Buf
      74  ZDP_DeviceAnnce
       6  ZDP_DeviceAnnce::?relay
     160  ZDP_EPRsp
       6  ZDP_EPRsp::?relay
     302  ZDP_EndDeviceBindReq
       6  ZDP_EndDeviceBindReq::?relay
      85  ZDP_GenericRsp
       6  ZDP_GenericRsp::?relay
      65  ZDP_IEEEAddrReq
       6  ZDP_IEEEAddrReq::?relay
     294  ZDP_IncomingData
       6  ZDP_IncomingData::?relay
     230  ZDP_MatchDescReq
       6  ZDP_MatchDescReq::?relay
     270  ZDP_MgmtBindRsp
       6  ZDP_MgmtBindRsp::?relay
      28  ZDP_MgmtDirectJoinReq
       6  ZDP_MgmtDirectJoinReq::?relay
      54  ZDP_MgmtLeaveReq
       6  ZDP_MgmtLeaveReq::?relay
     377  ZDP_MgmtLqiRsp
       6  ZDP_MgmtLqiRsp::?relay
      53  ZDP_MgmtNwkDiscReq
       6  ZDP_MgmtNwkDiscReq::?relay
     316  ZDP_MgmtNwkDiscRsp
       6  ZDP_MgmtNwkDiscRsp::?relay
     208  ZDP_MgmtNwkUpdateNotify
       6  ZDP_MgmtNwkUpdateNotify::?relay
     118  ZDP_MgmtNwkUpdateReq
       6  ZDP_MgmtNwkUpdateReq::?relay
      20  ZDP_MgmtPermitJoinReq
       6  ZDP_MgmtPermitJoinReq::?relay
     240  ZDP_MgmtRtgRsp
       6  ZDP_MgmtRtgRsp::?relay
      15  ZDP_NWKAddrOfInterestReq
       6  ZDP_NWKAddrOfInterestReq::?relay
     220  ZDP_NodeDescMsg
       6  ZDP_NodeDescMsg::?relay
     112  ZDP_NwkAddrReq
       6  ZDP_NwkAddrReq::?relay
      86  ZDP_PowerDescMsg
       6  ZDP_PowerDescMsg::?relay
     106  ZDP_SendData
       6  ZDP_SendData::?relay
      75  ZDP_ServerDiscReq
       6  ZDP_ServerDiscReq::?relay
      95  ZDP_ServerDiscRsp
       6  ZDP_ServerDiscRsp::?relay
     411  ZDP_SimpleDescMsg
       6  ZDP_SimpleDescMsg::?relay
      27  ZDP_SimpleDescReq
       6  ZDP_SimpleDescReq::?relay
       2  ZDP_TmpBuf
       1  ZDP_TransID
       1  ZDP_TxOptions
     155  ZDP_UserDescRsp
       6  ZDP_UserDescRsp::?relay
     117  ZDP_UserDescSet
       6  ZDP_UserDescSet::?relay
     165  fillAndSend
       6  fillAndSend::?relay
       2  zdoMsgCBs
      48  zdpMsgProcs
     681  zdpProcessAddrReq
       6  zdpProcessAddrReq::?relay

 
 6 763 bytes in segment BANKED_CODE
   204 bytes in segment BANK_RELAYS
    49 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
    84 bytes in segment XDATA_Z
 
   255 bytes of CODE     memory
 6 763 bytes of HUGECODE memory
    86 bytes of XDATA    memory

Errors: none
Warnings: none
