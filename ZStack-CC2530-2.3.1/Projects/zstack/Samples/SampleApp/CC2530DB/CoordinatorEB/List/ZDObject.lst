###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               12/Sep/2018  03:56:57
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.20
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\stack\zdo\ZDObject.c
#    Command line       =  
#        -f C:\Users\ANANDA~1\AppData\Local\Temp\EW5DF6.tmp ("C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\stack\zdo\ZDObject.c"
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\ZDObject.lst
#    Object file        =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\ZDObject.r51
#
###############################################################################

C:\Users\Ananda Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2010-06-28 16:08:35 -0700 (Mon, 28 Jun 2010) $
      4            Revision:       $Revision: 22835 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8          
      9            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "rtg.h"
     47          #include "NLMEDE.h"
     48          #include "nwk_globals.h"
     49          #include "APS.h"
     50          #include "APSMEDE.h"
     51          #include "AssocList.h"
     52          #include "BindingTable.h"
     53          #include "AddrMgr.h"
     54          #include "AF.h"
     55          #include "ZDObject.h"
     56          #include "ZDProfile.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     61          #include "ZGlobals.h"
     62          #if defined MT_ZDO_CB_FUNC
     63          #include "MT.h"
     64          #endif
     65          
     66          #if defined( LCD_SUPPORTED )
     67            #include "OnBoard.h"
     68          #endif
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          
     73          /*********************************************************************
     74           * MACROS
     75           */
     76          
     77          /*********************************************************************
     78           * CONSTANTS
     79           */
     80          // NLME Stub Implementations
     81          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     82          
     83          // Status fields used by ZDO_ProcessMgmtRtgReq
     84          #define ZDO_MGMT_RTG_ENTRY_ACTIVE             0x00
     85          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY 0x01
     86          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED   0x02
     87          #define ZDO_MGMT_RTG_ENTRY_INACTIVE           0x03
     88          
     89          /*********************************************************************
     90           * TYPEDEFS
     91           */
     92          #if defined ( REFLECTOR )
     93          typedef struct
     94          {
     95            byte SrcTransSeq;
     96            zAddrType_t SrcAddr;
     97            uint16 LocalCoordinator;
     98            byte epIntf;
     99            uint16 ProfileID;
    100            byte numInClusters;
    101            uint16 *inClusters;
    102            byte numOutClusters;
    103            uint16 *outClusters;
    104            byte SecurityUse;
    105            byte status;
    106          } ZDO_EDBind_t;
    107          #endif // defined ( REFLECTOR )
    108          
    109          enum
    110          {
    111            ZDMATCH_INIT,           // Initialized
    112            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
    113            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
    114          };
    115          
    116          enum
    117          {
    118            ZDMATCH_SENDING_NOT,
    119            ZDMATCH_SENDING_UNBIND,
    120            ZDMATCH_SENDING_BIND
    121          };
    122          
    123          /*********************************************************************
    124           * GLOBAL VARIABLES
    125           */
    126          
    127          /*********************************************************************
    128           * EXTERNAL VARIABLES
    129           */
    130          
    131          /*********************************************************************
    132           * EXTERNAL FUNCTIONS
    133           */
    134          
    135          /*********************************************************************
    136           * LOCAL VARIABLES
    137           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    139          
    140          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    142          #endif
    143          
    144          #if defined ( MANAGED_SCAN )
    145            uint32 managedScanNextChannel = 0;
    146            uint32 managedScanChannelMask = 0;
    147            uint8  managedScanTimesPerChannel = 0;
    148          #endif
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    151          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    153          
    154          /*********************************************************************
    155           * LOCAL FUNCTIONS
    156           */
    157          static void ZDODeviceSetup( void );
    158          #if defined ( MANAGED_SCAN )
    159            static void ZDOManagedScan_Next( void );
    160          #endif
    161          #if defined ( REFLECTOR )
    162            static void ZDO_RemoveEndDeviceBind( void );
    163            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    164          #endif
    165          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    166                                          byte numList2, uint16 *list2, uint16 *pMatches );
    167          static void ZDO_RemoveMatchMemory( void );
    168          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    169          static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    170          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    171          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
    172          
    173          /*********************************************************************
    174           * @fn          ZDO_Init
    175           *
    176           * @brief       ZDObject and ZDProfile initialization.
    177           *
    178           * @param       none
    179           *
    180           * @return      none
    181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          void ZDO_Init( void )
   \                     ZDO_Init:
    183          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    184            // Initialize ZD items
    185            #if defined ( REFLECTOR )
    186            ZDO_EDBind = NULL;
   \   000004   90....       MOV       DPTR,#ZDO_EDBind
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   F0           MOVX      @DPTR,A
    187            #endif
    188          
    189            // Initialize default ZDO_UseExtendedPANID to the APS one.
    190            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   7C..         MOV       R4,#AIB_apsUseExtendedPANID & 0xff
   \   00000D   7D..         MOV       R5,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00000F   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000011   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000013   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    191          
    192            // Setup the device - type of device to create.
    193            ZDODeviceSetup();
   \   000016                ; Setup parameters for call to function NLME_CoordinatorInit
   \   000016   12....       LCALL     `??NLME_CoordinatorInit::?relay`; Banked call to: NLME_CoordinatorInit
   \   000019                ; Setup parameters for call to function APS_ReflectorInit
   \   000019   7900         MOV       R1,#0x0
   \   00001B   12....       LCALL     `??APS_ReflectorInit::?relay`; Banked call to: APS_ReflectorInit
    194          }
   \   00001E   80..         SJMP      ??Subroutine171_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine171_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    195          
    196          #if defined ( MANAGED_SCAN )
    197          /*********************************************************************
    198           * @fn      ZDOManagedScan_Next()
    199           *
    200           * @brief   Setup a managed scan.
    201           *
    202           * @param   none
    203           *
    204           * @return  none
    205           */
    206          static void ZDOManagedScan_Next( void )
    207          {
    208            // Is it the first time
    209            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    210            {
    211              // Setup the defaults
    212              managedScanNextChannel  = 1;
    213          
    214              while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    215                managedScanNextChannel <<= 1;
    216          
    217              managedScanChannelMask = managedScanNextChannel;
    218              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    219            }
    220            else
    221            {
    222              // Do we need to go to the next channel
    223              if ( managedScanTimesPerChannel == 0 )
    224              {
    225                // Find next active channel
    226                managedScanChannelMask  = managedScanNextChannel;
    227                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    228              }
    229              else
    230              {
    231                managedScanTimesPerChannel--;
    232          
    233                if ( managedScanTimesPerChannel == 0 )
    234                {
    235                  managedScanNextChannel  <<= 1;
    236                  while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    237                    managedScanNextChannel <<= 1;
    238          
    239                  if ( managedScanNextChannel == 0 )
    240                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    241                }
    242              }
    243            }
    244          }
    245          #endif // MANAGED_SCAN
    246          
    247          /*********************************************************************
    248           * @fn      ZDODeviceSetup()
    249           *
    250           * @brief   Call set functions depending on the type of device compiled.
    251           *
    252           * @param   none
    253           *
    254           * @return  none
    255           */
    256          static void ZDODeviceSetup( void )
    257          {
    258            if ( ZG_BUILD_COORDINATOR_TYPE )
    259            {
    260              NLME_CoordinatorInit();
    261            }
    262          
    263          #if defined ( REFLECTOR )
    264            APS_ReflectorInit( (ZG_DEVICE_COORDINATOR_TYPE) ? APS_REFLECTOR_PUBLIC :  APS_REFLECTOR_PRIVATE );
    265          #endif
    266          
    267            if ( ZG_BUILD_JOINING_TYPE )
    268            {
    269              NLME_DeviceJoiningInit();
    270            }
    271          }
    272          
    273          /*********************************************************************
    274           * @fn          ZDO_StartDevice
    275           *
    276           * @brief       This function starts a device in a network.
    277           *
    278           * @param       logicalType     - Device type to start
    279           *              startMode       - indicates mode of device startup
    280           *              beaconOrder     - indicates time betwen beacons
    281           *              superframeOrder - indicates length of active superframe
    282           *
    283           * @return      none
    284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    285          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    286          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EB           MOV       A,R3
   \   000006   FE           MOV       R6,A
    287            ZStatus_t ret;
    288          #if defined ( ZIGBEE_FREQ_AGILITY )
    289            static uint8 discRetries = 0;
    290          #endif
    291          #if defined ( ZIGBEE_COMMISSIONING )
    292            static uint8 scanCnt = 0;
    293          #endif
    294          
    295            ret = ZUnsupportedMode;
    296          
    297            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
   \   000007   E9           MOV       A,R1
   \   000008   7065         JNZ       ??ZDO_StartDevice_0
    298            {
    299              if ( startMode == MODE_HARD )
   \   00000A   7402         MOV       A,#0x2
   \   00000C   6A           XRL       A,R2
   \   00000D   703D         JNZ       ??ZDO_StartDevice_1
    300              {
    301                devState = DEV_COORD_STARTING;
   \   00000F   90....       MOV       DPTR,#devState
   \   000012   7408         MOV       A,#0x8
   \   000014   F0           MOVX      @DPTR,A
    302                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, zgDefaultChannelList,
    303                                                    zgDefaultStartingScanDuration, beaconOrder,
    304                                                    superframeOrder, false );
   \   000015                ; Setup parameters for call to function NLME_NetworkFormationRequest
   \   000015   75..00       MOV       ?V2,#0x0
   \   000018   78..         MOV       R0,#?V2
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00001D   EC           MOV       A,R4
   \   00001E   F5..         MOV       ?V2,A
   \   000020   78..         MOV       R0,#?V2
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000025   EB           MOV       A,R3
   \   000026   F5..         MOV       ?V2,A
   \   000028   78..         MOV       R0,#?V2
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00002D   90....       MOV       DPTR,#zgDefaultChannelList
   \   000030   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000033   90....       MOV       DPTR,#zgDefaultStartingScanDuration
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F9           MOV       R1,A
   \   000038   7C..         MOV       R4,#zgApsUseExtendedPANID & 0xff
   \   00003A   7D..         MOV       R5,#(zgApsUseExtendedPANID >> 8) & 0xff
   \   00003C   90....       MOV       DPTR,#zgConfigPANID
   \   00003F   12....       LCALL     ??Subroutine191_0 & 0xFFFF
    305              }
   \                     ??CrossCallReturnLabel_351:
   \   000042   12....       LCALL     `??NLME_NetworkFormationRequest::?relay`; Banked call to: NLME_NetworkFormationRequest
   \   000045   7407         MOV       A,#0x7
   \   000047   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004A   8013         SJMP      ??ZDO_StartDevice_2
    306              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_1:
   \   00004C   7401         MOV       A,#0x1
   \   00004E   6A           XRL       A,R2
   \   00004F   7013         JNZ       ??ZDO_StartDevice_3
    307              {
    308                // Just start the coordinator
    309                devState = DEV_COORD_STARTING;
   \   000051   90....       MOV       DPTR,#devState
   \   000054   7408         MOV       A,#0x8
   \   000056   F0           MOVX      @DPTR,A
    310                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
   \   000057                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000057   7B00         MOV       R3,#0x0
   \   000059   EE           MOV       A,R6
   \   00005A   FA           MOV       R2,A
   \   00005B   F9           MOV       R1,A
   \   00005C   12....       LCALL     `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   \                     ??ZDO_StartDevice_2:
   \   00005F   E9           MOV       A,R1
    311              }
    312              else
    313              {
    314          #if defined( LCD_SUPPORTED )
    315                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    316          #endif
    317              }
    318            }
    319          
    320            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
    321            {
    322              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
    323              {
    324                devState = DEV_NWK_DISC;
    325          
    326            #if defined( MANAGED_SCAN )
    327                ZDOManagedScan_Next();
    328                ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    329            #else
    330                ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
    331              #if defined ( ZIGBEE_FREQ_AGILITY )
    332                if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    333                      ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
    334                {
    335                  // For devices with RxOnWhenIdle equals to FALSE, any network channel
    336                  // change will not be recieved. On these devices or routers that have
    337                  // lost the network, an active scan shall be conducted on the Default
    338                  // Channel list using the extended PANID to find the network. If the
    339                  // extended PANID isn't found using the Default Channel list, an scan
    340                  // should be completed using all channels.
    341                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
    342                }
    343              #endif // ZIGBEE_FREQ_AGILITY
    344              #if defined ( ZIGBEE_COMMISSIONING )
    345                if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
    346                {
    347                  // When ApsUseExtendedPanID is commissioned to a non zero value via
    348                  // application specific means, the device shall conduct an active scan
    349                  // on the Default Channel list and join the PAN with the same
    350                  // ExtendedPanID. If the PAN is not found, an scan should be completed
    351                  // on all channels.
    352                  // When devices rejoin the network and the PAN is not found from
    353                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
    354                }
    355              #endif // ZIGBEE_COMMISSIONING
    356            #endif
    357              }
    358              else if ( startMode == MODE_RESUME )
    359              {
    360                if ( logicalType == NODETYPE_ROUTER )
    361                {
    362                  ZMacScanCnf_t scanCnf;
    363                  devState = DEV_NWK_ORPHAN;
    364          
    365                  /* if router and nvram is available, fake successful orphan scan */
    366                  scanCnf.hdr.Status = ZSUCCESS;
    367                  scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
    368                  scanCnf.UnscannedChannels = 0;
    369                  scanCnf.ResultListSize = 0;
    370                  nwk_ScanJoiningOrphan(&scanCnf);
    371          
    372                  ret = ZSuccess;
    373                }
    374                else
    375                {
    376                  devState = DEV_NWK_ORPHAN;
    377                  ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
    378                                                zgDefaultStartingScanDuration );
    379                }
    380              }
    381              else
    382              {
    383          #if defined( LCD_SUPPORTED )
    384                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    385          #endif
    386              }
    387            }
    388          
    389            if ( ret != ZSuccess )
   \   000060   700D         JNZ       ??ZDO_StartDevice_0
   \   000062   801B         SJMP      ??ZDO_StartDevice_4
   \                     ??ZDO_StartDevice_3:
   \   000064                ; Setup parameters for call to function HalLcdWriteScreen
   \   000064   7C..         MOV       R4,#`?<Constant "MODE unknown">` & 0xff
   \   000066   7D..         MOV       R5,#(`?<Constant "MODE unknown">` >> 8) & 0xff
   \   000068   7A..         MOV       R2,#`?<Constant "StartDevice ERR">` & 0xff
   \   00006A   7B..         MOV       R3,#(`?<Constant "StartDevice ERR">` >> 8) & 0xff
   \   00006C   12....       LCALL     `??HalLcdWriteScreen::?relay`; Banked call to: HalLcdWriteScreen
    390              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \                     ??ZDO_StartDevice_0:
   \   00006F                ; Setup parameters for call to function osal_start_timerEx
   \   00006F   7CE8         MOV       R4,#-0x18
   \   000071   7D03         MOV       R5,#0x3
   \   000073   7A01         MOV       R2,#0x1
   \   000075   7B00         MOV       R3,#0x0
   \   000077   90....       MOV       DPTR,#ZDAppTaskID
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   F9           MOV       R1,A
   \   00007C   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    391          }
   \                     ??ZDO_StartDevice_4:
   \   00007F   7F03         MOV       R7,#0x3
   \   000081   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine191_0:
   \   000000   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   12....       LCALL     ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   000003   FB           MOV       R3,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine192_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    392          
    393          /**************************************************************************************************
    394           * @fn          zdoSendStateChangeMsg
    395           *
    396           * @brief       Helper function for ZDO_UpdateNwkStatus.
    397           *
    398           * input parameters
    399           *
    400           * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
    401           * @param       state - The current device state.
    402           *
    403           * output parameters
    404           *
    405           * None.
    406           *
    407           * @return      None.
    408           **************************************************************************************************
    409           */
    410          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
    411          {
    412            osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
    413          
    414            if (NULL == pMsg)
    415            {
    416              if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
    417              {
    418                // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
    419                // try again later when more Heap may be available.
    420                osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
    421              }
    422              else
    423              {
    424                pMsg->event = ZDO_STATE_CHANGE;
    425                pMsg->status = state;
    426          
    427                (void)osal_msg_send(taskId, (uint8 *)pMsg);
    428              }
    429            }
    430            else
    431            {
    432              // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
    433              pMsg->status = state;
    434            }
    435          }
    436          
    437          /**************************************************************************************************
    438           * @fn          ZDO_UpdateNwkStatus
    439           *
    440           * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
    441           *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
    442           *              than one registered EndPoint, it will only receive one notification per state
    443           *              change. Although the device may go through a sequence of state changes, the
    444           *              Application task may only receive notification of the final, steady-state state
    445           *              because it has the lowest priority and never even runs to receive the intermediate
    446           *              state change notifications.
    447           *
    448           * input parameters
    449           *
    450           * @param       state - The current device state.
    451           *
    452           * output parameters
    453           *
    454           * None.
    455           *
    456           * @return      None.
    457           **************************************************************************************************
    458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    459          void ZDO_UpdateNwkStatus(devStates_t state)
   \                     ZDO_UpdateNwkStatus:
    460          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V1,R1
    461            epList_t *pItem = epList;
   \   000007   90....       MOV       DPTR,#epList
   \   00000A   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_471:
   \   00000D   8013         SJMP      ??ZDO_UpdateNwkStatus_0
    462          
    463            while (pItem != NULL)
    464            {
    465              if (pItem->epDesc->endPoint != ZDO_EP)
    466              {
    467                zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
   \                     ??ZDO_UpdateNwkStatus_1:
   \   00000F   A3           INC       DPTR
   \   000010   E5..         MOV       A,?V1
   \   000012   F0           MOVX      @DPTR,A
    468              }
    469          
    470              pItem = pItem->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_2:
   \   000013   8E82         MOV       DPL,R6
   \   000015   8F83         MOV       DPH,R7
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   00001F   E8           MOV       A,R0
   \   000020   FE           MOV       R6,A
   \   000021   E9           MOV       A,R1
   \                     ??ZDO_UpdateNwkStatus_0:
   \   000022   FF           MOV       R7,A
   \   000023   EE           MOV       A,R6
   \   000024   4F           ORL       A,R7
   \   000025   6049         JZ        ??ZDO_UpdateNwkStatus_3
   \   000027   8E82         MOV       DPL,R6
   \   000029   8F83         MOV       DPH,R7
   \   00002B   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   60E2         JZ        ??ZDO_UpdateNwkStatus_2
   \   000031   A3           INC       DPTR
   \   000032   12....       LCALL     ??Subroutine189_0 & 0xFFFF
    471            }
   \                     ??CrossCallReturnLabel_340:
   \   000035   F5..         MOV       ?V0,A
   \   000037                ; Setup parameters for call to function osal_msg_find
   \   000037   7AD1         MOV       R2,#-0x2f
   \   000039   F9           MOV       R1,A
   \   00003A   12....       LCALL     `??osal_msg_find::?relay`; Banked call to: osal_msg_find
   \   00003D   8A82         MOV       DPL,R2
   \   00003F   8B83         MOV       DPH,R3
   \   000041   E582         MOV       A,DPL
   \   000043   4583         ORL       A,DPH
   \   000045   70C8         JNZ       ??ZDO_UpdateNwkStatus_1
   \   000047                ; Setup parameters for call to function osal_msg_allocate
   \   000047   7A02         MOV       R2,#0x2
   \   000049   7B00         MOV       R3,#0x0
   \   00004B   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00004E   EA           MOV       A,R2
   \   00004F   4B           ORL       A,R3
   \   000050   700E         JNZ       ??ZDO_UpdateNwkStatus_4
   \   000052                ; Setup parameters for call to function osal_set_event
   \   000052   7A10         MOV       R2,#0x10
   \   000054   7B00         MOV       R3,#0x0
   \   000056   90....       MOV       DPTR,#ZDAppTaskID
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   F9           MOV       R1,A
   \   00005B   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00005E   80B3         SJMP      ??ZDO_UpdateNwkStatus_2
   \                     ??ZDO_UpdateNwkStatus_4:
   \   000060   8A82         MOV       DPL,R2
   \   000062   8B83         MOV       DPH,R3
   \   000064   74D1         MOV       A,#-0x2f
   \   000066   12....       LCALL     ??Subroutine177_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000069                ; Setup parameters for call to function osal_msg_send
   \   000069   A9..         MOV       R1,?V0
   \   00006B   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00006E   80A3         SJMP      ??ZDO_UpdateNwkStatus_2
    472          #if defined MT_ZDO_CB_FUNC
    473            zdoSendStateChangeMsg(state, MT_TaskID);
    474          #endif
    475          
    476            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??ZDO_UpdateNwkStatus_3:
   \   000070                ; Setup parameters for call to function NLME_GetShortAddr
   \   000070   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000073   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000076   12....       LCALL     ?Subroutine31 & 0xFFFF
    477            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \                     ??CrossCallReturnLabel_309:
   \   000079                ; Setup parameters for call to function NLME_GetExtAddr
   \   000079   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    478          }
   \   00007C   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine177_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E5..         MOV       A,?V1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   12....       LCALL     ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_463:
   \   000003   8882         MOV       DPL,R0
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine179_0:
   \   000000   12....       LCALL     ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine182_0
   \   000001                ; // Fall through to label ??Subroutine182_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine182_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   EB           MOV       A,R3
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine189_0:
   \   000000   12....       LCALL     ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine154:
   \   000000   12....       LCALL     ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_466:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine201_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine206_0:
   \   000000   12....       LCALL     ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_469:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine212_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    479          
    480          #if defined ( REFLECTOR )
    481          /*********************************************************************
    482           * @fn          ZDO_RemoveEndDeviceBind
    483           *
    484           * @brief       Remove the end device bind
    485           *
    486           * @param  none
    487           *
    488           * @return      none
    489           */
    490          static void ZDO_RemoveEndDeviceBind( void )
    491          {
    492            if ( ZDO_EDBind != NULL )
    493            {
    494              // Free the RAM
    495              if ( ZDO_EDBind->inClusters != NULL )
    496                osal_mem_free( ZDO_EDBind->inClusters );
    497              if ( ZDO_EDBind->outClusters != NULL )
    498                osal_mem_free( ZDO_EDBind->outClusters );
    499              osal_mem_free( ZDO_EDBind );
    500              ZDO_EDBind = NULL;
    501            }
    502          }
    503          #endif // REFLECTOR
    504          
    505          #if defined ( REFLECTOR )
    506          /*********************************************************************
    507           * @fn          ZDO_RemoveEndDeviceBind
    508           *
    509           * @brief       Remove the end device bind
    510           *
    511           * @param  none
    512           *
    513           * @return      none
    514           */
    515          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
    516          {
    517            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
    518          
    519          #if defined( LCD_SUPPORTED )
    520            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
    521            if ( Status == ZDP_SUCCESS )
    522              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
    523            else
    524              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
    525          #endif
    526          
    527          }
    528          #endif // REFLECTOR
    529          
    530          /*********************************************************************
    531           * @fn          ZDO_CompareClusterLists
    532           *
    533           * @brief       Compare one list to another list
    534           *
    535           * @param       numList1 - number of items in list 1
    536           * @param       list1 - first list of cluster IDs
    537           * @param       numList2 - number of items in list 2
    538           * @param       list2 - second list of cluster IDs
    539           * @param       pMatches - buffer to put matches
    540           *
    541           * @return      number of matches
    542           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    543          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
   \                     ZDO_CompareClusterLists:
    544                                    byte numList2, uint16 *list2, uint16 *pMatches )
    545          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
   \   000007   8C..         MOV       ?V4,R4
    546            byte x, y;
    547            uint16 z;
    548            byte numMatches = 0;
   \   000009   75..00       MOV       ?V1,#0x0
    549          
    550            // Check the first in against the seconds out
    551            for ( x = 0; x < numList1; x++ )
   \   00000C   75..00       MOV       ?V0,#0x0
   \   00000F   7410         MOV       A,#0x10
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000017   7412         MOV       A,#0x12
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_515:
   \   00001F   FD           MOV       R5,A
   \   000020   8047         SJMP      ??ZDO_CompareClusterLists_0
    552            {
    553              for ( y = 0; y < numList2; y++ )
    554              {
    555                z = list2[y];
   \                     ??ZDO_CompareClusterLists_1:
   \   000022   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000025   F5..         MOV       ?V6,A
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F5..         MOV       ?V7,A
    556                if ( list1[x] == z )
   \   00002B   AE..         MOV       R6,?V0
   \   00002D   EE           MOV       A,R6
   \   00002E   2E           ADD       A,R6
   \   00002F   FE           MOV       R6,A
   \   000030   E4           CLR       A
   \   000031   33           RLC       A
   \   000032   FF           MOV       R7,A
   \   000033   EA           MOV       A,R2
   \   000034   2E           ADD       A,R6
   \   000035   F582         MOV       DPL,A
   \   000037   EB           MOV       A,R3
   \   000038   12....       LCALL     ??Subroutine184_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   00003B   65..         XRL       A,?V6
   \   00003D   7004         JNZ       ??ZDO_CompareClusterLists_2
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   65..         XRL       A,?V7
   \                     ??ZDO_CompareClusterLists_2:
   \   000043   7019         JNZ       ??ZDO_CompareClusterLists_3
    557                  pMatches[numMatches++] = z;
   \   000045   AE..         MOV       R6,?V1
   \   000047   EE           MOV       A,R6
   \   000048   2E           ADD       A,R6
   \   000049   FE           MOV       R6,A
   \   00004A   E4           CLR       A
   \   00004B   33           RLC       A
   \   00004C   FF           MOV       R7,A
   \   00004D   EC           MOV       A,R4
   \   00004E   2E           ADD       A,R6
   \   00004F   F582         MOV       DPL,A
   \   000051   ED           MOV       A,R5
   \   000052   3F           ADDC      A,R7
   \   000053   F583         MOV       DPH,A
   \   000055   E5..         MOV       A,?V6
   \   000057   F0           MOVX      @DPTR,A
   \   000058   A3           INC       DPTR
   \   000059   E5..         MOV       A,?V7
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   05..         INC       ?V1
    558              }
   \                     ??ZDO_CompareClusterLists_3:
   \   00005E   05..         INC       ?V2
   \                     ??ZDO_CompareClusterLists_4:
   \   000060   E5..         MOV       A,?V2
   \   000062   C3           CLR       C
   \   000063   95..         SUBB      A,?V4
   \   000065   40BB         JC        ??ZDO_CompareClusterLists_1
   \   000067   05..         INC       ?V0
   \                     ??ZDO_CompareClusterLists_0:
   \   000069   E5..         MOV       A,?V0
   \   00006B   C3           CLR       C
   \   00006C   95..         SUBB      A,?V3
   \   00006E   5005         JNC       ??ZDO_CompareClusterLists_5
   \   000070   75..00       MOV       ?V2,#0x0
   \   000073   80EB         SJMP      ??ZDO_CompareClusterLists_4
    559            }
    560          
    561            return ( numMatches );
   \                     ??ZDO_CompareClusterLists_5:
   \   000075   A9..         MOV       R1,?V1
   \   000077   02....       LJMP      ??Subroutine193_0 & 0xFFFF
    562          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   AE..         MOV       R6,?V2
   \   000002   EE           MOV       A,R6
   \   000003   2E           ADD       A,R6
   \   000004   FE           MOV       R6,A
   \   000005   E4           CLR       A
   \   000006   33           RLC       A
   \   000007   FF           MOV       R7,A
   \   000008   E8           MOV       A,R0
   \   000009   2E           ADD       A,R6
   \   00000A   F582         MOV       DPL,A
   \   00000C   E9           MOV       A,R1
   \   00000D   3F           ADDC      A,R7
   \   00000E   F583         MOV       DPH,A
   \   000010   E0           MOVX      A,@DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine184_0:
   \   000000   3F           ADDC      A,R7
   \   000001   F583         MOV       DPH,A
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine193_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine220_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    563          
    564          /*********************************************************************
    565           * Utility functions
    566           */
    567          
    568          /*********************************************************************
    569           * @fn          ZDO_CompareByteLists
    570           *
    571           * @brief       Compares two lists for matches.
    572           *
    573           * @param       ACnt  - number of entries in list A
    574           * @param       AList  - List A
    575           * @param       BCnt  - number of entries in list B
    576           * @param       BList  - List B
    577           *
    578           * @return      true if a match is found
    579           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    580          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    581          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
    582            byte x, y;
    583          
    584            for ( x = 0; x < ACnt; x++ )
   \   000007   7D00         MOV       R5,#0x0
   \   000009   740C         MOV       A,#0xc
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000011   8001         SJMP      ??ZDO_AnyClusterMatches_0
   \                     ??ZDO_AnyClusterMatches_1:
   \   000013   0D           INC       R5
   \                     ??ZDO_AnyClusterMatches_0:
   \   000014   ED           MOV       A,R5
   \   000015   C3           CLR       C
   \   000016   95..         SUBB      A,?V3
   \   000018   502E         JNC       ??ZDO_AnyClusterMatches_2
    585            {
    586              for ( y = 0; y < BCnt; y++ )
   \   00001A   75..00       MOV       ?V2,#0x0
   \   00001D   8002         SJMP      ??ZDO_AnyClusterMatches_3
   \                     ??ZDO_AnyClusterMatches_4:
   \   00001F   05..         INC       ?V2
   \                     ??ZDO_AnyClusterMatches_3:
   \   000021   E5..         MOV       A,?V2
   \   000023   C3           CLR       C
   \   000024   9C           SUBB      A,R4
   \   000025   50EC         JNC       ??ZDO_AnyClusterMatches_1
    587              {
    588                if ( AList[x] == BList[y] )
   \   000027   ED           MOV       A,R5
   \   000028   25E0         ADD       A,0xE0 /* A   */
   \   00002A   FE           MOV       R6,A
   \   00002B   E4           CLR       A
   \   00002C   33           RLC       A
   \   00002D   FF           MOV       R7,A
   \   00002E   EA           MOV       A,R2
   \   00002F   2E           ADD       A,R6
   \   000030   F582         MOV       DPL,A
   \   000032   EB           MOV       A,R3
   \   000033   3F           ADDC      A,R7
   \   000034   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000037   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   00003A   65..         XRL       A,?V0
   \   00003C   7004         JNZ       ??ZDO_AnyClusterMatches_5
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   65..         XRL       A,?V1
   \                     ??ZDO_AnyClusterMatches_5:
   \   000042   70DB         JNZ       ??ZDO_AnyClusterMatches_4
    589                {
    590                  return true;
   \   000044   7901         MOV       R1,#0x1
   \   000046   8002         SJMP      ??ZDO_AnyClusterMatches_6
    591                }
    592              }
    593            }
    594          
    595            return false;
   \                     ??ZDO_AnyClusterMatches_2:
   \   000048   7900         MOV       R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   00004A   02....       LJMP      ?Subroutine1 & 0xFFFF
    596          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine172_0
   \   000002                ; // Fall through to label ??Subroutine172_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine172_0:
   \   000000   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000003   F5..         MOV       ?V1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET
    597          
    598          /*********************************************************************
    599           * Callback functions from ZDProfile
    600           */
    601          
    602          /*********************************************************************
    603           * @fn          ZDO_ProcessNodeDescReq
    604           *
    605           * @brief       This function processes and responds to the
    606           *              Node_Desc_req message.
    607           *
    608           * @param       inMsg - incoming message
    609           *
    610           * @return      none
    611           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    612          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescReq:
    613          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine54 & 0xFFFF
    614            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    615            NodeDescriptorFormat_t *desc = NULL;
    616          
    617            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_72:
   \   000008   7003         JNZ       ??ZDO_ProcessNodeDescReq_0
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   6D           XRL       A,R5
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   00000D   7017         JNZ       ??ZDO_ProcessNodeDescReq_1
    618            {
    619              desc = &ZDO_Config_Node_Descriptor;
    620            }
    621          
    622            if ( desc != NULL )
    623            {
    624              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00000F   75....       MOV       ?V0,#ZDO_Config_Node_Descriptor & 0xff
   \   000012   75....       MOV       ?V1,#(ZDO_Config_Node_Descriptor >> 8) & 0xff
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV       A,R6
   \   00001B   FA           MOV       R2,A
   \   00001C   12....       LCALL     `??ZDP_NodeDescMsg::?relay`; Banked call to: ZDP_NodeDescMsg
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
   \   000024   801A         SJMP      ??ZDO_ProcessNodeDescReq_2
    625            }
    626            else
    627            {
    628              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    629                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..02       MOV       ?V0,#0x2
   \   000029   75..80       MOV       ?V1,#-0x80
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   8A..         MOV       ?V0,R2
   \   000033   89..         MOV       ?V1,R1
   \   000035   78..         MOV       R0,#?V0
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL     ?Subroutine55 & 0xFFFF
    630            }
   \                     ??CrossCallReturnLabel_74:
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
    631          }
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   000040   80..         SJMP      ??Subroutine174_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   EE           MOV       A,R6
   \   000001   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000004   3F           ADDC      A,R7
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FD           MOV       R5,A
   \   000009   7C80         MOV       R4,#-0x80
   \   00000B   EE           MOV       A,R6
   \   00000C   2402         ADD       A,#0x2
   \   00000E   FA           MOV       R2,A
   \   00000F   E4           CLR       A
   \   000010   3F           ADDC      A,R7
   \   000011   FB           MOV       R3,A
   \   000012   EE           MOV       A,R6
   \   000013   12....       LCALL     ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000016   3F           ADDC      A,R7
   \   000017   F583         MOV       DPH,A
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F9           MOV       R1,A
   \   00001B   12....       LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   00001E   7404         MOV       A,#0x4
   \   000020   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL     ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   C8           XCH       A,R0
   \   000006   F9           MOV       R1,A
   \   000007   EA           MOV       A,R2
   \   000008   28           ADD       A,R0
   \   000009   FC           MOV       R4,A
   \   00000A   E4           CLR       A
   \   00000B   39           ADDC      A,R1
   \   00000C   FD           MOV       R5,A
   \   00000D   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000010   E0           MOVX      A,@DPTR
   \   000011   6C           XRL       A,R4
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine174_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine159:
   \   000000   240F         ADD       A,#0xf
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   EA           MOV       A,R2
   \   000005   2413         ADD       A,#0x13
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3F           ADDC      A,R7
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_465:
   \   000010   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine167:
   \   000000   8882         MOV       DPL,R0
   \   000002   F583         MOV       DPH,A
   \   000004                REQUIRE ??Subroutine192_0
   \   000004                ; // Fall through to label ??Subroutine192_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine158:
   \   000000   240E         ADD       A,#0xe
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET
    632          
    633          /*********************************************************************
    634           * @fn          ZDO_ProcessPowerDescReq
    635           *
    636           * @brief       This function processes and responds to the
    637           *              Node_Power_req message.
    638           *
    639           * @param       inMsg  - incoming request
    640           *
    641           * @return      none
    642           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    643          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    644          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine54 & 0xFFFF
    645            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    646            NodePowerDescriptorFormat_t *desc = NULL;
    647          
    648            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_73:
   \   000008   7003         JNZ       ??ZDO_ProcessPowerDescReq_0
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   6D           XRL       A,R5
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   00000D   7017         JNZ       ??ZDO_ProcessPowerDescReq_1
    649            {
    650              desc = &ZDO_Config_Power_Descriptor;
    651            }
    652          
    653            if ( desc != NULL )
    654            {
    655              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00000F   75....       MOV       ?V0,#ZDO_Config_Power_Descriptor & 0xff
   \   000012   75....       MOV       ?V1,#(ZDO_Config_Power_Descriptor >> 8) & 0xff
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV       A,R6
   \   00001B   FA           MOV       R2,A
   \   00001C   12....       LCALL     `??ZDP_PowerDescMsg::?relay`; Banked call to: ZDP_PowerDescMsg
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
   \   000024   801A         SJMP      ??ZDO_ProcessPowerDescReq_2
    656            }
    657            else
    658            {
    659              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    660                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..03       MOV       ?V0,#0x3
   \   000029   75..80       MOV       ?V1,#-0x80
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   8A..         MOV       ?V0,R2
   \   000033   89..         MOV       ?V1,R1
   \   000035   78..         MOV       R0,#?V0
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL     ?Subroutine55 & 0xFFFF
    661            }
   \                     ??CrossCallReturnLabel_75:
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
    662          }
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   000040   80..         SJMP      ??Subroutine174_0
    663          
    664          /*********************************************************************
    665           * @fn          ZDO_ProcessSimpleDescReq
    666           *
    667           * @brief       This function processes and responds to the
    668           *              Simple_Desc_req message.
    669           *
    670           * @param       inMsg - incoming message (request)
    671           *
    672           * @return      none
    673           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7402         MOV       A,#0x2
   \   000002                REQUIRE ??Subroutine173_0
   \   000002                ; // Fall through to label ??Subroutine173_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine173_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine174_0
   \   000003                ; // Fall through to label ??Subroutine174_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    674          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    675          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    676            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   F0           MOVX      @DPTR,A
    677            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000018   12....       LCALL     ??Subroutine190_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   00001B   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00001E   FB           MOV       R3,A
   \   00001F   EC           MOV       A,R4
   \   000020   FA           MOV       R2,A
    678            byte endPoint = inMsg->asdu[2];
   \   000021   8882         MOV       DPL,R0
   \   000023   8983         MOV       DPH,R1
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F9           MOV       R1,A
    679            byte free = false;
   \   000029   75..00       MOV       ?V1,#0x0
    680            byte stat = ZDP_SUCCESS;
   \   00002C   75..00       MOV       ?V0,#0x0
    681          
    682            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   00002F   6005         JZ        ??ZDO_ProcessSimpleDescReq_0
   \   000031   C3           CLR       C
   \   000032   94F1         SUBB      A,#-0xf
   \   000034   4005         JC        ??ZDO_ProcessSimpleDescReq_1
    683            {
    684              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   000036   75..82       MOV       ?V0,#-0x7e
   \   000039   8024         SJMP      ??ZDO_ProcessSimpleDescReq_2
    685            }
    686            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   00003B   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   6A           XRL       A,R2
   \   000040   7003         JNZ       ??ZDO_ProcessSimpleDescReq_3
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   6B           XRL       A,R3
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   000045   7015         JNZ       ??ZDO_ProcessSimpleDescReq_4
    687            {
    688              free = afFindSimpleDesc( &sDesc, endPoint );
   \   000047                ; Setup parameters for call to function afFindSimpleDesc
   \   000047   AA..         MOV       R2,?XSP + 0
   \   000049   AB..         MOV       R3,?XSP + 1
   \   00004B   12....       LCALL     `??afFindSimpleDesc::?relay`; Banked call to: afFindSimpleDesc
   \   00004E   E9           MOV       A,R1
   \   00004F   FA           MOV       R2,A
    689              if ( sDesc == NULL )
   \   000050   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   000053   7003         JNZ       ??ZDO_ProcessSimpleDescReq_5
    690              {
    691                stat = ZDP_NOT_ACTIVE;
   \   000055   75..83       MOV       ?V0,#-0x7d
   \                     ??ZDO_ProcessSimpleDescReq_5:
   \   000058   8A..         MOV       ?V1,R2
   \   00005A   8003         SJMP      ??ZDO_ProcessSimpleDescReq_2
    692              }
    693            }
    694            else
    695            {
    696              if ( ZSTACK_ROUTER_BUILD )
    697              {
    698                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   00005C   75..81       MOV       ?V0,#-0x7f
    699              }
    700              else if ( ZSTACK_END_DEVICE_BUILD )
    701              {
    702                stat = ZDP_INVALID_REQTYPE;
    703              }
    704            }
    705          
    706            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   00005F                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   00005F   12....       LCALL     ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_519:
   \   000062   FD           MOV       R5,A
   \   000063   A9..         MOV       R1,?V0
   \   000065   EE           MOV       A,R6
   \   000066   FA           MOV       R2,A
   \   000067   EF           MOV       A,R7
   \   000068   FB           MOV       R3,A
   \   000069   12....       LCALL     `??ZDP_SimpleDescMsg::?relay`; Banked call to: ZDP_SimpleDescMsg
    707          
    708            if ( free && sDesc )
   \   00006C   E5..         MOV       A,?V1
   \   00006E   6008         JZ        ??CrossCallReturnLabel_278
   \   000070   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   000073   6003         JZ        ??CrossCallReturnLabel_278
    709            {
    710              osal_mem_free( sDesc );
   \   000075                ; Setup parameters for call to function osal_mem_free
   \   000075   12....       LCALL     ?Subroutine60 & 0xFFFF
    711            }
    712          }
   \                     ??CrossCallReturnLabel_278:
   \   000078   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine175_0
   \   000006                ; // Fall through to label ??Subroutine175_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine175_0:
   \   000000   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000003   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine190_0:
   \   000000   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_385:
   \   000003   3F           ADDC      A,R7
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine161:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine195_0
   \   000001                ; // Fall through to label ??Subroutine195_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine195_0:
   \   000000   2413         ADD       A,#0x13
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   000003   8882         MOV       DPL,R0
   \   000005   F583         MOV       DPH,A
   \   000007   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_517:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine202_0
   \   000006                ; // Fall through to label ??Subroutine202_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine202_0:
   \   000000   12....       LCALL     ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine206_0
   \   000002                ; // Fall through to label ??Subroutine206_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine153:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine220_0
   \   000006                ; // Fall through to label ??Subroutine220_0
    713          
    714          /*********************************************************************
    715           * @fn          ZDO_ProcessActiveEPReq
    716           *
    717           * @brief       This function processes and responds to the
    718           *              Active_EP_req message.
    719           *
    720           * @param       inMsg  - incoming message (request)
    721           *
    722           * @return      none
    723           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    724          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    725          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    726            byte cnt = 0;
   \   000009   75..00       MOV       ?V0,#0x0
    727            uint16 aoi;
    728            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV       ?V1,#0x0
    729          
    730            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   EA           MOV       A,R2
   \   000010   2413         ADD       A,#0x13
   \   000012   12....       LCALL     ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   000015   F8           MOV       R0,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   8882         MOV       DPL,R0
   \   00001A   12....       LCALL     ?Subroutine52 & 0xFFFF
    731          
    732            if ( aoi == NLME_GetShortAddr() )
   \                     ??CrossCallReturnLabel_283:
   \   00001D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001D   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000020   EA           MOV       A,R2
   \   000021   65..         XRL       A,?V2
   \   000023   7003         JNZ       ??ZDO_ProcessActiveEPReq_0
   \   000025   EB           MOV       A,R3
   \   000026   65..         XRL       A,?V3
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   000028   7012         JNZ       ??ZDO_ProcessActiveEPReq_1
    733            {
    734              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   00002A                ; Setup parameters for call to function afNumEndPoints
   \   00002A   12....       LCALL     `??afNumEndPoints::?relay`; Banked call to: afNumEndPoints
   \   00002D   E9           MOV       A,R1
   \   00002E   14           DEC       A
   \   00002F   F5..         MOV       ?V0,A
    735              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   000031                ; Setup parameters for call to function afEndPoints
   \   000031   7901         MOV       R1,#0x1
   \   000033   7A..         MOV       R2,#ZDOBuildBuf & 0xff
   \   000035   7B..         MOV       R3,#(ZDOBuildBuf >> 8) & 0xff
   \   000037   12....       LCALL     `??afEndPoints::?relay`; Banked call to: afEndPoints
   \   00003A   8003         SJMP      ??ZDO_ProcessActiveEPReq_2
    736            }
    737            else
    738            {
    739              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   00003C   75..80       MOV       ?V1,#-0x80
    740            }
    741          
    742            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
    743                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   00003F                ; Setup parameters for call to function ZDP_EPRsp
   \   00003F   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   000042   F5..         MOV       ?V4,A
   \   000044   78..         MOV       R0,#?V4
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000049   75....       MOV       ?V4,#ZDOBuildBuf & 0xff
   \   00004C   75....       MOV       ?V5,#(ZDOBuildBuf >> 8) & 0xff
   \   00004F   78..         MOV       R0,#?V4
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000054   78..         MOV       R0,#?V0
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000059   78..         MOV       R0,#?V2
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005E   E5..         MOV       A,?V1
   \   000060   F5..         MOV       ?V0,A
   \   000062   78..         MOV       R0,#?V0
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000067   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   00006A   EE           MOV       A,R6
   \   00006B   240F         ADD       A,#0xf
   \   00006D   12....       LCALL     ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000070   F9           MOV       R1,A
   \   000071   7A05         MOV       R2,#0x5
   \   000073   7B80         MOV       R3,#-0x80
   \   000075   12....       LCALL     `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   000078   7407         MOV       A,#0x7
   \   00007A   12....       LCALL     ?DEALLOC_XSTACK8
    744          }
   \   00007D   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine176_0
   \   000002                ; // Fall through to label ??Subroutine176_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine176_0:
   \   000000   12....       LCALL     ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   C8           XCH       A,R0
   \   000006   F9           MOV       R1,A
   \   000007   EA           MOV       A,R2
   \   000008   28           ADD       A,R0
   \   000009   F5..         MOV       ?V2,A
   \   00000B   E4           CLR       A
   \   00000C   39           ADDC      A,R1
   \   00000D   F5..         MOV       ?V3,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   EE           MOV       A,R6
   \   000001   240E         ADD       A,#0xe
   \   000003                REQUIRE ??Subroutine183_0
   \   000003                ; // Fall through to label ??Subroutine183_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine183_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003                REQUIRE ??Subroutine184_0
   \   000003                ; // Fall through to label ??Subroutine184_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   EE           MOV       A,R6
   \   000001   2402         ADD       A,#0x2
   \   000003   FC           MOV       R4,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   FD           MOV       R5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    745          
    746          /*********************************************************************
    747           * @fn          ZDO_ConvertOTAClusters
    748           *
    749           * @brief       This function will convert the over-the-air cluster list
    750           *              format to an internal format.
    751           *
    752           * @param       inMsg  - incoming message (request)
    753           *
    754           * @return      pointer to incremented inBuf
    755           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    756          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    757          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
    758            uint8 x;
    759          
    760            for ( x = 0; x < cnt; x++ )
   \   000007   7E00         MOV       R6,#0x0
   \   000009   802A         SJMP      ??ZDO_ConvertOTAClusters_0
    761            {
    762              // convert ota format to internal
    763              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   00000B   8A82         MOV       DPL,R2
   \   00000D   8B83         MOV       DPH,R3
   \   00000F   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000012   F8           MOV       R0,A
   \   000013   E4           CLR       A
   \   000014   C8           XCH       A,R0
   \   000015   F9           MOV       R1,A
   \   000016   E5..         MOV       A,?V0
   \   000018   28           ADD       A,R0
   \   000019   E4           CLR       A
   \   00001A   39           ADDC      A,R1
   \   00001B   F5..         MOV       ?V1,A
   \   00001D   EE           MOV       A,R6
   \   00001E   25E0         ADD       A,0xE0 /* A   */
   \   000020   F8           MOV       R0,A
   \   000021   E4           CLR       A
   \   000022   33           RLC       A
   \   000023   F9           MOV       R1,A
   \   000024   EC           MOV       A,R4
   \   000025   28           ADD       A,R0
   \   000026   F582         MOV       DPL,A
   \   000028   ED           MOV       A,R5
   \   000029   39           ADDC      A,R1
   \   00002A   12....       LCALL     ?Subroutine29 & 0xFFFF
    764              inBuf += sizeof( uint16 );
   \                     ??CrossCallReturnLabel_287:
   \   00002D   EA           MOV       A,R2
   \   00002E   2402         ADD       A,#0x2
   \   000030   FA           MOV       R2,A
   \   000031   5001         JNC       ??ZDO_ConvertOTAClusters_2
   \   000033   0B           INC       R3
    765            }
   \                     ??ZDO_ConvertOTAClusters_2:
   \   000034   0E           INC       R6
   \                     ??ZDO_ConvertOTAClusters_0:
   \   000035   EE           MOV       A,R6
   \   000036   C3           CLR       C
   \   000037   9F           SUBB      A,R7
   \   000038   40D1         JC        ??ZDO_ConvertOTAClusters_1
    766            return ( inBuf );
   \   00003A   02....       LJMP      ??Subroutine174_0 & 0xFFFF
    767          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F583         MOV       DPH,A
   \   000002   E5..         MOV       A,?V0
   \   000004                REQUIRE ??Subroutine177_0
   \   000004                ; // Fall through to label ??Subroutine177_0
    768          
    769          /*********************************************************************
    770           * @fn          ZDO_ProcessMatchDescReq
    771           *
    772           * @brief       This function processes and responds to the
    773           *              Match_Desc_req message.
    774           *
    775           * @param       inMsg  - incoming message (request)
    776           *
    777           * @return      none
    778           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    779          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    780          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V12,R2
   \   00000C   8B..         MOV       ?V13,R3
    781            uint8 epCnt = 0;
   \   00000E   75..00       MOV       ?V7,#0x0
    782            uint8 numInClusters;
    783            uint16 *inClusters = NULL;
   \   000011   85..82       MOV       DPL,?XSP + 0
   \   000014   85..83       MOV       DPH,?XSP + 1
   \   000017   E4           CLR       A
   \   000018   F0           MOVX      @DPTR,A
   \   000019   A3           INC       DPTR
   \   00001A   F0           MOVX      @DPTR,A
    784            uint8 numOutClusters;
    785            uint16 *outClusters = NULL;
   \   00001B   F5..         MOV       ?V14,A
   \   00001D   F5..         MOV       ?V15,A
    786            epList_t *epDesc;
    787            SimpleDescriptionFormat_t *sDesc = NULL;
    788            uint8 allocated;
    789            uint8 *msg;
    790            uint16 aoi;
    791            uint16 profileID;
    792          
    793            // Parse the incoming message
    794            msg = inMsg->asdu;
   \   00001F   12....       LCALL     ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   000022   35..         ADDC      A,?V13
   \   000024   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_475:
   \   000027   FF           MOV       R7,A
    795            aoi = BUILD_UINT16( msg[0], msg[1] );
   \   000028   8E82         MOV       DPL,R6
   \   00002A   12....       LCALL     ?Subroutine52 & 0xFFFF
    796            profileID = BUILD_UINT16( msg[2], msg[3] );
   \                     ??CrossCallReturnLabel_284:
   \   00002D   8E82         MOV       DPL,R6
   \   00002F   8F83         MOV       DPH,R7
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   FA           MOV       R2,A
   \   000035   8E82         MOV       DPL,R6
   \   000037   8F83         MOV       DPH,R7
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F9           MOV       R1,A
   \   00003E   EA           MOV       A,R2
   \   00003F   F5..         MOV       ?V0,A
   \   000041   E4           CLR       A
   \   000042   39           ADDC      A,R1
   \   000043   F5..         MOV       ?V1,A
   \   000045                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000045   AA..         MOV       R2,?V2
   \   000047   AB..         MOV       R3,?V3
    797            msg += 4;
    798          
    799            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \   000049   12....       LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   00004C   E9           MOV       A,R1
   \   00004D   6401         XRL       A,#0x1
   \   00004F   6018         JZ        ??ZDO_ProcessMatchDescReq_0
    800            {
    801              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    802                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
    803              return;
    804            }
    805            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \   000051                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000051   AA..         MOV       R2,?V2
   \   000053   AB..         MOV       R3,?V3
   \   000055   12....       LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000058   E9           MOV       A,R1
   \   000059   703A         JNZ       ??ZDO_ProcessMatchDescReq_1
   \   00005B   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   65..         XRL       A,?V2
   \   000061   7004         JNZ       ??ZDO_ProcessMatchDescReq_2
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   65..         XRL       A,?V3
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   000067   602C         JZ        ??ZDO_ProcessMatchDescReq_1
    806            {
    807              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    808                                       ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   000069                ; Setup parameters for call to function ZDP_EPRsp
   \   000069   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   00006C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006F   E4           CLR       A
   \   000070   F5..         MOV       ?V0,A
   \   000072   F5..         MOV       ?V1,A
   \   000074   78..         MOV       R0,#?V0
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000079   78..         MOV       R0,#?V0
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007E   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000081   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000084   75..80       MOV       ?V0,#-0x80
   \   000087   78..         MOV       R0,#?V0
   \   000089   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008C   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   00008F   12....       LCALL     ?DEALLOC_XSTACK8
    809              return;
   \   000092   02....       LJMP      ??ZDO_ProcessMatchDescReq_3 & 0xFFFF
    810            }
    811          
    812            if ((numInClusters = *msg++) &&
    813                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   000095   8E82         MOV       DPL,R6
   \   000097   8F83         MOV       DPH,R7
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   F5..         MOV       ?V3,A
   \   0000A0   EE           MOV       A,R6
   \   0000A1   2405         ADD       A,#0x5
   \   0000A3   FE           MOV       R6,A
   \   0000A4   5001         JNC       ??ZDO_ProcessMatchDescReq_4
   \   0000A6   0F           INC       R7
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   0000A7   E5..         MOV       A,?V3
   \   0000A9   602B         JZ        ??ZDO_ProcessMatchDescReq_5
   \   0000AB                ; Setup parameters for call to function osal_mem_alloc
   \   0000AB   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   0000AE   85..82       MOV       DPL,?XSP + 0
   \   0000B1   85..83       MOV       DPH,?XSP + 1
   \   0000B4   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   0000B7   F8           MOV       R0,A
   \   0000B8   A3           INC       DPTR
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   F9           MOV       R1,A
   \   0000BB   E8           MOV       A,R0
   \   0000BC   49           ORL       A,R1
   \   0000BD   6017         JZ        ??ZDO_ProcessMatchDescReq_5
    814            {
    815              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   0000BF                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000BF   12....       LCALL     ?Subroutine153 & 0xFFFF
    816            }
   \                     ??CrossCallReturnLabel_520:
   \   0000C2   FD           MOV       R5,A
   \   0000C3   EE           MOV       A,R6
   \   0000C4   FA           MOV       R2,A
   \   0000C5   EF           MOV       A,R7
   \   0000C6   FB           MOV       R3,A
   \   0000C7   A9..         MOV       R1,?V3
   \   0000C9   12....       LCALL     `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0000CC   8A..         MOV       ?V4,R2
   \   0000CE   8B..         MOV       ?V5,R3
   \   0000D0   AE..         MOV       R6,?V4
   \   0000D2   AF..         MOV       R7,?V5
   \   0000D4   8003         SJMP      ??ZDO_ProcessMatchDescReq_6
    817            else
    818            {
    819              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   0000D6   75..00       MOV       ?V3,#0x0
    820            }
    821          
    822            if ((numOutClusters = *msg++) &&
    823                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   0000D9   8E82         MOV       DPL,R6
   \   0000DB   8F83         MOV       DPH,R7
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   F5..         MOV       ?V2,A
   \   0000E0   A3           INC       DPTR
   \   0000E1   AE82         MOV       R6,DPL
   \   0000E3   AF83         MOV       R7,DPH
   \   0000E5   601A         JZ        ??ZDO_ProcessMatchDescReq_7
   \   0000E7                ; Setup parameters for call to function osal_mem_alloc
   \   0000E7   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   0000EA   8A..         MOV       ?V14,R2
   \   0000EC   8B..         MOV       ?V15,R3
   \   0000EE   EA           MOV       A,R2
   \   0000EF   4B           ORL       A,R3
   \   0000F0   600F         JZ        ??ZDO_ProcessMatchDescReq_7
    824            {
    825              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   0000F2                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000F2   AC..         MOV       R4,?V14
   \   0000F4   AD..         MOV       R5,?V15
   \   0000F6   EE           MOV       A,R6
   \   0000F7   FA           MOV       R2,A
   \   0000F8   EF           MOV       A,R7
   \   0000F9   FB           MOV       R3,A
   \   0000FA   A9..         MOV       R1,?V2
   \   0000FC   12....       LCALL     `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0000FF   8003         SJMP      ??ZDO_ProcessMatchDescReq_8
    826            }
    827            else
    828            {
    829              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   000101   75..00       MOV       ?V2,#0x0
    830            }
    831          
    832            // First count the number of endpoints that match.
    833            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   000104   90....       MOV       DPTR,#epList
   \   000107   8049         SJMP      ??ZDO_ProcessMatchDescReq_9
    834            while ( epDesc )
    835            {
    836              // Don't search endpoint 0 and check if response is allowed
    837              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
    838              {
    839                if ( epDesc->pfnDescCB )
    840                {
    841                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
    842                  allocated = TRUE;
    843                }
    844                else
    845                {
    846                  sDesc = epDesc->epDesc->simpleDesc;
    847                  allocated = FALSE;
    848                }
    849          
    850                if ( sDesc && sDesc->AppProfId == profileID )
    851                {
    852                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
    853          
    854                  // Are there matching input clusters?
    855                  if ((ZDO_AnyClusterMatches( numInClusters, inClusters,
    856                             sDesc->AppNumInClusters, sDesc->pAppInClusterList )) ||
    857                      // Are there matching output clusters?
    858                      (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    859                             sDesc->AppNumOutClusters, sDesc->pAppOutClusterList )))
    860                  {
    861                    // Notify the endpoint of the match.
    862                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
    863                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
    864          
    865                    if (pRspSent)
    866                    {
    867                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
    868                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
    869                      pRspSent->numInClusters = numInClusters;
    870                      pRspSent->numOutClusters = numOutClusters;
    871          
    872                      if (numInClusters)
    873                      {
    874                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
    875                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
    876                      }
    877                      else
    878                      {
    879                        pRspSent->pInClusters = NULL;
    880                      }
    881          
    882                      if (numOutClusters)
    883                      {
    884                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
    885                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
    886                      }
    887                      else
    888                      {
    889                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   000109   E4           CLR       A
   \   00010A   F0           MOVX      @DPTR,A
   \   00010B   A3           INC       DPTR
   \   00010C   F0           MOVX      @DPTR,A
    890                      }
    891          
    892                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   00010D                ; Setup parameters for call to function osal_msg_send
   \   00010D   EE           MOV       A,R6
   \   00010E   FA           MOV       R2,A
   \   00010F   EF           MOV       A,R7
   \   000110   FB           MOV       R3,A
   \   000111   85..82       MOV       DPL,?V10
   \   000114   85..83       MOV       DPH,?V11
   \   000117   12....       LCALL     ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   00011A   A3           INC       DPTR
   \   00011B   12....       LCALL     ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   00011E   F9           MOV       R1,A
   \   00011F   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    893                    }
    894          
    895                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   000122   85..82       MOV       DPL,?V8
   \   000125   85..83       MOV       DPH,?V9
   \   000128   E0           MOVX      A,@DPTR
   \   000129   C0E0         PUSH      A
   \   00012B   A8..         MOV       R0,?V7
   \   00012D   74..         MOV       A,#ZDOBuildBuf & 0xff
   \   00012F   28           ADD       A,R0
   \   000130   F582         MOV       DPL,A
   \   000132   E4           CLR       A
   \   000133   34..         ADDC      A,#(ZDOBuildBuf >> 8) & 0xff
   \   000135   F583         MOV       DPH,A
   \   000137   D0E0         POP       A
   \   000139   F0           MOVX      @DPTR,A
   \   00013A   05..         INC       ?V7
    896                  }
    897                }
    898          
    899                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   00013C   A2..         MOV       C,?VB.0
   \   00013E   5007         JNC       ??ZDO_ProcessMatchDescReq_14
    900                {
    901                  osal_mem_free( sDesc );
   \   000140                ; Setup parameters for call to function osal_mem_free
   \   000140   AA..         MOV       R2,?V8
   \   000142   AB..         MOV       R3,?V9
   \   000144   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    902                }
    903              }
    904              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   000147   85..82       MOV       DPL,?V10
   \   00014A   85..83       MOV       DPH,?V11
   \   00014D   A3           INC       DPTR
   \   00014E   A3           INC       DPTR
   \   00014F   A3           INC       DPTR
   \   000150   A3           INC       DPTR
   \   000151   A3           INC       DPTR
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   000152   E0           MOVX      A,@DPTR
   \   000153   F5..         MOV       ?V10,A
   \   000155   A3           INC       DPTR
   \   000156   E0           MOVX      A,@DPTR
   \   000157   F5..         MOV       ?V11,A
   \   000159   E5..         MOV       A,?V10
   \   00015B   45..         ORL       A,?V11
   \   00015D   7003         JNZ       $+5
   \   00015F   02....       LJMP      ??ZDO_ProcessMatchDescReq_15 & 0xFFFF
   \   000162   85..82       MOV       DPL,?V10
   \   000165   85..83       MOV       DPH,?V11
   \   000168   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   00016B   E8           MOV       A,R0
   \   00016C   FA           MOV       R2,A
   \   00016D   E9           MOV       A,R1
   \   00016E   8882         MOV       DPL,R0
   \   000170   F583         MOV       DPH,A
   \   000172   E0           MOVX      A,@DPTR
   \   000173   FC           MOV       R4,A
   \   000174   60D1         JZ        ??ZDO_ProcessMatchDescReq_14
   \   000176   85..82       MOV       DPL,?V10
   \   000179   85..83       MOV       DPH,?V11
   \   00017C   A3           INC       DPTR
   \   00017D   A3           INC       DPTR
   \   00017E   E0           MOVX      A,@DPTR
   \   00017F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000181   50C4         JNC       ??ZDO_ProcessMatchDescReq_14
   \   000183   85..82       MOV       DPL,?V10
   \   000186   85..83       MOV       DPH,?V11
   \   000189   A3           INC       DPTR
   \   00018A   A3           INC       DPTR
   \   00018B   A3           INC       DPTR
   \   00018C   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   00018F   E582         MOV       A,DPL
   \   000191   4583         ORL       A,DPH
   \   000193   600F         JZ        ??ZDO_ProcessMatchDescReq_16
   \   000195                ; Setup parameters for indirect call
   \   000195   EC           MOV       A,R4
   \   000196   FA           MOV       R2,A
   \   000197   7901         MOV       R1,#0x1
   \   000199   12....       LCALL     ?CALL_IND
   \   00019C   8A..         MOV       ?V8,R2
   \   00019E   8B..         MOV       ?V9,R3
   \   0001A0   D2..         SETB      ?VB.0
   \   0001A2   8010         SJMP      ??ZDO_ProcessMatchDescReq_17
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   0001A4   8A82         MOV       DPL,R2
   \   0001A6   8983         MOV       DPH,R1
   \   0001A8   A3           INC       DPTR
   \   0001A9   A3           INC       DPTR
   \   0001AA   A3           INC       DPTR
   \   0001AB   E0           MOVX      A,@DPTR
   \   0001AC   F5..         MOV       ?V8,A
   \   0001AE   A3           INC       DPTR
   \   0001AF   E0           MOVX      A,@DPTR
   \   0001B0   F5..         MOV       ?V9,A
   \   0001B2   C2..         CLR       ?VB.0
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   0001B4   E5..         MOV       A,?V8
   \   0001B6   45..         ORL       A,?V9
   \   0001B8   6082         JZ        ??ZDO_ProcessMatchDescReq_13
   \   0001BA   85..82       MOV       DPL,?V8
   \   0001BD   85..83       MOV       DPH,?V9
   \   0001C0   A3           INC       DPTR
   \   0001C1   E0           MOVX      A,@DPTR
   \   0001C2   65..         XRL       A,?V0
   \   0001C4   7004         JNZ       ??ZDO_ProcessMatchDescReq_18
   \   0001C6   A3           INC       DPTR
   \   0001C7   E0           MOVX      A,@DPTR
   \   0001C8   65..         XRL       A,?V1
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   0001CA   6003         JZ        $+5
   \   0001CC   02....       LJMP      ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \   0001CF                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   0001CF   85..82       MOV       DPL,?V8
   \   0001D2   85..83       MOV       DPH,?V9
   \   0001D5   A3           INC       DPTR
   \   0001D6   A3           INC       DPTR
   \   0001D7   A3           INC       DPTR
   \   0001D8   A3           INC       DPTR
   \   0001D9   A3           INC       DPTR
   \   0001DA   A3           INC       DPTR
   \   0001DB   A3           INC       DPTR
   \   0001DC   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001DF   85..82       MOV       DPL,?V8
   \   0001E2   85..83       MOV       DPH,?V9
   \   0001E5   A3           INC       DPTR
   \   0001E6   A3           INC       DPTR
   \   0001E7   A3           INC       DPTR
   \   0001E8   A3           INC       DPTR
   \   0001E9   A3           INC       DPTR
   \   0001EA   A3           INC       DPTR
   \   0001EB   E0           MOVX      A,@DPTR
   \   0001EC   FC           MOV       R4,A
   \   0001ED   7402         MOV       A,#0x2
   \   0001EF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F2   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   0001F5   A9..         MOV       R1,?V3
   \   0001F7   12....       LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   0001FA   7402         MOV       A,#0x2
   \   0001FC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001FF   E9           MOV       A,R1
   \   000200   7038         JNZ       ??ZDO_ProcessMatchDescReq_19
   \   000202                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000202   85..82       MOV       DPL,?V8
   \   000205   85..83       MOV       DPH,?V9
   \   000208   A3           INC       DPTR
   \   000209   A3           INC       DPTR
   \   00020A   A3           INC       DPTR
   \   00020B   A3           INC       DPTR
   \   00020C   A3           INC       DPTR
   \   00020D   A3           INC       DPTR
   \   00020E   A3           INC       DPTR
   \   00020F   A3           INC       DPTR
   \   000210   A3           INC       DPTR
   \   000211   A3           INC       DPTR
   \   000212   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000215   85..82       MOV       DPL,?V8
   \   000218   85..83       MOV       DPH,?V9
   \   00021B   A3           INC       DPTR
   \   00021C   A3           INC       DPTR
   \   00021D   A3           INC       DPTR
   \   00021E   A3           INC       DPTR
   \   00021F   A3           INC       DPTR
   \   000220   A3           INC       DPTR
   \   000221   A3           INC       DPTR
   \   000222   A3           INC       DPTR
   \   000223   A3           INC       DPTR
   \   000224   E0           MOVX      A,@DPTR
   \   000225   FC           MOV       R4,A
   \   000226   AA..         MOV       R2,?V14
   \   000228   AB..         MOV       R3,?V15
   \   00022A   A9..         MOV       R1,?V2
   \   00022C   12....       LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   00022F   7402         MOV       A,#0x2
   \   000231   12....       LCALL     ?DEALLOC_XSTACK8
   \   000234   E9           MOV       A,R1
   \   000235   7003         JNZ       $+5
   \   000237   02....       LJMP      ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   00023A                ; Setup parameters for call to function osal_msg_allocate
   \   00023A   E5..         MOV       A,?V2
   \   00023C   25..         ADD       A,?V3
   \   00023E   C3           CLR       C
   \   00023F   33           RLC       A
   \   000240   240A         ADD       A,#0xa
   \   000242   FA           MOV       R2,A
   \   000243   7B00         MOV       R3,#0x0
   \   000245   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000248   8A..         MOV       ?V4,R2
   \   00024A   8B..         MOV       ?V5,R3
   \   00024C   AE..         MOV       R6,?V4
   \   00024E   AF..         MOV       R7,?V5
   \   000250   EA           MOV       A,R2
   \   000251   4F           ORL       A,R7
   \   000252   7003         JNZ       $+5
   \   000254   02....       LJMP      ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \   000257   8A82         MOV       DPL,R2
   \   000259   8B83         MOV       DPH,R3
   \   00025B   74D2         MOV       A,#-0x2e
   \   00025D   F0           MOVX      @DPTR,A
   \   00025E   85..82       MOV       DPL,?V12
   \   000261   85..83       MOV       DPH,?V13
   \   000264   A3           INC       DPTR
   \   000265   A3           INC       DPTR
   \   000266   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000269   8A82         MOV       DPL,R2
   \   00026B   8B83         MOV       DPH,R3
   \   00026D   A3           INC       DPTR
   \   00026E   A3           INC       DPTR
   \   00026F   E8           MOV       A,R0
   \   000270   F0           MOVX      @DPTR,A
   \   000271   A3           INC       DPTR
   \   000272   E9           MOV       A,R1
   \   000273   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000276   E5..         MOV       A,?V3
   \   000278   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00027B   EA           MOV       A,R2
   \   00027C   2405         ADD       A,#0x5
   \   00027E   F582         MOV       DPL,A
   \   000280   E4           CLR       A
   \   000281   3F           ADDC      A,R7
   \   000282   F583         MOV       DPH,A
   \   000284   E5..         MOV       A,?V3
   \   000286   6022         JZ        ??ZDO_ProcessMatchDescReq_20
   \   000288   EA           MOV       A,R2
   \   000289   240A         ADD       A,#0xa
   \   00028B   FA           MOV       R2,A
   \   00028C   E4           CLR       A
   \   00028D   3F           ADDC      A,R7
   \   00028E   FB           MOV       R3,A
   \   00028F   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000292   F5..         MOV       ?V4,A
   \   000294   A3           INC       DPTR
   \   000295   E0           MOVX      A,@DPTR
   \   000296   F5..         MOV       ?V5,A
   \   000298   75..00       MOV       ?V6,#0x0
   \   00029B   78..         MOV       R0,#?V4
   \   00029D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002A0   AC..         MOV       R4,?V3
   \   0002A2   12....       LCALL     ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   0002A5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002A8   8004         SJMP      ??ZDO_ProcessMatchDescReq_21
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   0002AA   E4           CLR       A
   \   0002AB   F0           MOVX      @DPTR,A
   \   0002AC   A3           INC       DPTR
   \   0002AD   F0           MOVX      @DPTR,A
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   0002AE   EE           MOV       A,R6
   \   0002AF   2408         ADD       A,#0x8
   \   0002B1   F582         MOV       DPL,A
   \   0002B3   E4           CLR       A
   \   0002B4   3F           ADDC      A,R7
   \   0002B5   F583         MOV       DPH,A
   \   0002B7   E5..         MOV       A,?V2
   \   0002B9   7003         JNZ       $+5
   \   0002BB   02....       LJMP      ??ZDO_ProcessMatchDescReq_10 & 0xFFFF
   \   0002BE   A8..         MOV       R0,?V3
   \   0002C0   E8           MOV       A,R0
   \   0002C1   28           ADD       A,R0
   \   0002C2   F8           MOV       R0,A
   \   0002C3   E4           CLR       A
   \   0002C4   33           RLC       A
   \   0002C5   F9           MOV       R1,A
   \   0002C6   EE           MOV       A,R6
   \   0002C7   28           ADD       A,R0
   \   0002C8   F8           MOV       R0,A
   \   0002C9   EF           MOV       A,R7
   \   0002CA   39           ADDC      A,R1
   \   0002CB   F9           MOV       R1,A
   \   0002CC   E8           MOV       A,R0
   \   0002CD   240A         ADD       A,#0xa
   \   0002CF   FA           MOV       R2,A
   \   0002D0   E4           CLR       A
   \   0002D1   39           ADDC      A,R1
   \   0002D2   FB           MOV       R3,A
   \   0002D3   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   0002D6                ; Setup parameters for call to function osal_memcpy
   \   0002D6   85....       MOV       ?V4,?V14
   \   0002D9   85....       MOV       ?V5,?V15
   \   0002DC   75..00       MOV       ?V6,#0x0
   \   0002DF   78..         MOV       R0,#?V4
   \   0002E1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002E4   AC..         MOV       R4,?V2
   \   0002E6   12....       LCALL     ?Subroutine118 & 0xFFFF
    905            }
   \                     ??CrossCallReturnLabel_190:
   \   0002E9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002EC   02....       LJMP      ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
    906          
    907            // Send the message only if at least one match found.
    908            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   0002EF   E5..         MOV       A,?V7
   \   0002F1   6037         JZ        ??ZDO_ProcessMatchDescReq_22
    909            {
    910              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    911                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   0002F3                ; Setup parameters for call to function ZDP_EPRsp
   \   0002F3   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   0002F6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002F9   75....       MOV       ?V0,#ZDOBuildBuf & 0xff
   \   0002FC   75....       MOV       ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   0002FF   78..         MOV       R0,#?V0
   \   000301   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000304   E5..         MOV       A,?V7
   \   000306   F5..         MOV       ?V0,A
   \   000308   78..         MOV       R0,#?V0
   \   00030A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00030D   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000310   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000313   75..00       MOV       ?V0,#0x0
   \   000316   78..         MOV       R0,#?V0
   \   000318   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00031B   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00031E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000321   E9           MOV       A,R1
   \   000322   7011         JNZ       ??ZDO_ProcessMatchDescReq_23
    912              {
    913          #if defined( LCD_SUPPORTED )
    914                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
   \   000324                ; Setup parameters for call to function HalLcdWriteScreen
   \   000324   7C..         MOV       R4,#`?<Constant "Rsp Sent">` & 0xff
   \   000326   7D..         MOV       R5,#(`?<Constant "Rsp Sent">` >> 8) & 0xff
   \   000328   8004         SJMP      ??ZDO_ProcessMatchDescReq_24
    915          #endif
    916              }
    917            }
    918            else
    919            {
    920          #if defined( LCD_SUPPORTED )
    921              HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   00032A                ; Setup parameters for call to function HalLcdWriteScreen
   \   00032A   7C..         MOV       R4,#`?<Constant "Non Matched">` & 0xff
   \   00032C   7D..         MOV       R5,#(`?<Constant "Non Matched">` >> 8) & 0xff
   \                     ??ZDO_ProcessMatchDescReq_24:
   \   00032E   7A..         MOV       R2,#`?<Constant "Match Desc Req">` & 0xff
   \   000330   7B..         MOV       R3,#(`?<Constant "Match Desc Req">` >> 8) & 0xff
   \   000332   12....       LCALL     `??HalLcdWriteScreen::?relay`; Banked call to: HalLcdWriteScreen
    922          #endif
    923            }
    924          
    925            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_23:
   \   000335   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   000338   6003         JZ        ??CrossCallReturnLabel_279
    926            {
    927              osal_mem_free( inClusters );
   \   00033A                ; Setup parameters for call to function osal_mem_free
   \   00033A   12....       LCALL     ?Subroutine60 & 0xFFFF
    928            }
    929            
    930            if ( outClusters != NULL )
   \                     ??CrossCallReturnLabel_279:
   \   00033D   E5..         MOV       A,?V14
   \   00033F   45..         ORL       A,?V15
   \   000341   6007         JZ        ??ZDO_ProcessMatchDescReq_3
    931            {
    932              osal_mem_free( outClusters );
   \   000343                ; Setup parameters for call to function osal_mem_free
   \   000343   AA..         MOV       R2,?V14
   \   000345   AB..         MOV       R3,?V15
   \   000347   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    933            }
    934          }
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   00034A   7402         MOV       A,#0x2
   \   00034C                REQUIRE ?Subroutine5
   \   00034C                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine178_0
   \   000003                ; // Fall through to label ??Subroutine178_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine178_0:
   \   000000   7F10         MOV       R7,#0x10
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   EC           MOV       A,R4
   \   000001   2C           ADD       A,R4
   \   000002   FC           MOV       R4,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   FD           MOV       R5,A
   \   000006   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000009   7403         MOV       A,#0x3
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   E5..         MOV       A,?V12
   \   000002   2402         ADD       A,#0x2
   \   000004   FC           MOV       R4,A
   \   000005   E4           CLR       A
   \   000006   35..         ADDC      A,?V13
   \   000008   FD           MOV       R5,A
   \   000009   E5..         MOV       A,?V12
   \   00000B   12....       LCALL     ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   00000E   35..         ADDC      A,?V13
   \   000010   F583         MOV       DPH,A
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F9           MOV       R1,A
   \   000014   7A06         MOV       R2,#0x6
   \   000016   7B80         MOV       R3,#-0x80
   \   000018   12....       LCALL     `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   00001B   7407         MOV       A,#0x7
   \   00001D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004                REQUIRE ??Subroutine180_0
   \   000004                ; // Fall through to label ??Subroutine180_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine180_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   E5..         MOV       A,?V12
   \   000002   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000005   35..         ADDC      A,?V13
   \   000007                REQUIRE ??Subroutine185_0
   \   000007                ; // Fall through to label ??Subroutine185_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine185_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine186_0
   \   000002                ; // Fall through to label ??Subroutine186_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine186_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine194_0:
   \   000000   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine156:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   FB           MOV       R3,A
   \   000006   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine212_0
   \   000002                ; // Fall through to label ??Subroutine212_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine165:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   12....       LCALL     ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E5..         MOV       A,?V2
   \   000008   F0           MOVX      @DPTR,A
   \   000009   22           RET
    935          
    936          
    937          /*********************************************************************
    938           * @fn      ZDO_ProcessBindUnbindReq()
    939           *
    940           * @brief   Called to process a Bind or Unbind Request message.
    941           *
    942           * @param   inMsg  - incoming message (request)
    943           * @param   pReq - place to put parsed information
    944           *
    945           * @return  none
    946           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    947          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
    948          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
    949            zAddrType_t SourceAddr;       // Binding Source addres
    950            byte bindStat;
    951          
    952            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV       A,#0xb
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   7403         MOV       A,#0x3
   \   000019   F0           MOVX      @DPTR,A
    953            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   12....       LCALL     ?XSTACK_DISP101_8
   \   00001D   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    954          
    955          
    956            // If the local device is not the primary binding cache
    957            // check the src address of the bind request.
    958            // If it is not the local device's extended address
    959            // discard the request.
    960            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
    961                  (pReq->dstAddress.addrMode != Addr64Bit &&
    962                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000020                ; Setup parameters for call to function NLME_GetExtAddr
   \   000020   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000023   8A..         MOV       ?V0,R2
   \   000025   8B..         MOV       ?V1,R3
   \   000027   AC..         MOV       R4,?V0
   \   000029   AD..         MOV       R5,?V1
   \   00002B   E5..         MOV       A,?V6
   \   00002D   240C         ADD       A,#0xc
   \   00002F   F5..         MOV       ?V10,A
   \   000031   E4           CLR       A
   \   000032   35..         ADDC      A,?V7
   \   000034   F5..         MOV       ?V11,A
   \   000036                ; Setup parameters for call to function sAddrExtCmp
   \   000036   7403         MOV       A,#0x3
   \   000038   12....       LCALL     ?XSTACK_DISP101_8
   \   00003B   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00003E   E9           MOV       A,R1
   \   00003F   6012         JZ        ??ZDO_ProcessBindUnbindReq_0
   \   000041   EE           MOV       A,R6
   \   000042   2413         ADD       A,#0x13
   \   000044   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F8           MOV       R0,A
   \   000049   7403         MOV       A,#0x3
   \   00004B   68           XRL       A,R0
   \   00004C   6010         JZ        ??ZDO_ProcessBindUnbindReq_1
   \   00004E   7401         MOV       A,#0x1
   \   000050   68           XRL       A,R0
   \   000051   600B         JZ        ??ZDO_ProcessBindUnbindReq_1
    963            {
    964              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   000053   85..82       MOV       DPL,?XSP + 0
   \   000056   85..83       MOV       DPH,?XSP + 1
   \   000059   7484         MOV       A,#-0x7c
   \   00005B   02....       LJMP      ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    965            }
    966            else
    967            {
    968              // Check source & destination endpoints
    969              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
    970                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
    971                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   00005E   EE           MOV       A,R6
   \   00005F   2408         ADD       A,#0x8
   \   000061   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F9           MOV       R1,A
   \   000066   6021         JZ        ??ZDO_ProcessBindUnbindReq_3
   \   000068   C3           CLR       C
   \   000069   94F1         SUBB      A,#-0xf
   \   00006B   501C         JNC       ??ZDO_ProcessBindUnbindReq_3
   \   00006D   EE           MOV       A,R6
   \   00006E   2414         ADD       A,#0x14
   \   000070   F5..         MOV       ?V2,A
   \   000072   E4           CLR       A
   \   000073   3F           ADDC      A,R7
   \   000074   F5..         MOV       ?V3,A
   \   000076   7403         MOV       A,#0x3
   \   000078   68           XRL       A,R0
   \   000079   7019         JNZ       ??ZDO_ProcessBindUnbindReq_4
   \   00007B   85..82       MOV       DPL,?V2
   \   00007E   85..83       MOV       DPH,?V3
   \   000081   E0           MOVX      A,@DPTR
   \   000082   6005         JZ        ??ZDO_ProcessBindUnbindReq_3
   \   000084   C3           CLR       C
   \   000085   94F1         SUBB      A,#-0xf
   \   000087   400B         JC        ??ZDO_ProcessBindUnbindReq_4
    972              {
    973                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   000089   85..82       MOV       DPL,?XSP + 0
   \   00008C   85..83       MOV       DPH,?XSP + 1
   \   00008F   7482         MOV       A,#-0x7e
   \   000091   02....       LJMP      ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    974              }
    975              else
    976              {
    977                if ( inMsg->clusterID == Bind_req )
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   000094   EE           MOV       A,R6
   \   000095   2409         ADD       A,#0x9
   \   000097   F5..         MOV       ?V0,A
   \   000099   E4           CLR       A
   \   00009A   3F           ADDC      A,R7
   \   00009B   F5..         MOV       ?V1,A
   \   00009D   EE           MOV       A,R6
   \   00009E   240B         ADD       A,#0xb
   \   0000A0   FE           MOV       R6,A
   \   0000A1   5001         JNC       ??ZDO_ProcessBindUnbindReq_5
   \   0000A3   0F           INC       R7
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   0000A4   85..82       MOV       DPL,?V10
   \   0000A7   85..83       MOV       DPH,?V11
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   6421         XRL       A,#0x21
   \   0000AD   7002         JNZ       ??ZDO_ProcessBindUnbindReq_6
   \   0000AF   A3           INC       DPTR
   \   0000B0   E0           MOVX      A,@DPTR
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   0000B1   7078         JNZ       ??ZDO_ProcessBindUnbindReq_7
    978                {
    979                  // Assume the table is full
    980                  bindStat = ZDP_TABLE_FULL;
   \   0000B3   85..82       MOV       DPL,?XSP + 0
   \   0000B6   85..83       MOV       DPH,?XSP + 1
   \   0000B9   7487         MOV       A,#-0x79
   \   0000BB   F0           MOVX      @DPTR,A
    981          
    982                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   \   0000BC                ; Setup parameters for call to function bindNumOfEntries
   \   0000BC   12....       LCALL     `??bindNumOfEntries::?relay`; Banked call to: bindNumOfEntries
   \   0000BF   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000C2   E4           CLR       A
   \   0000C3   93           MOVC      A,@A+DPTR
   \   0000C4   F8           MOV       R0,A
   \   0000C5   7401         MOV       A,#0x1
   \   0000C7   93           MOVC      A,@A+DPTR
   \   0000C8   F9           MOV       R1,A
   \   0000C9   C3           CLR       C
   \   0000CA   EA           MOV       A,R2
   \   0000CB   98           SUBB      A,R0
   \   0000CC   EB           MOV       A,R3
   \   0000CD   99           SUBB      A,R1
   \   0000CE   4003         JC        $+5
   \   0000D0   02....       LJMP      ??ZDO_ProcessBindUnbindReq_8 & 0xFFFF
    983                  {
    984                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
    985                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \   0000D3                ; Setup parameters for call to function APSME_BindRequest
   \   0000D3   85..82       MOV       DPL,?V2
   \   0000D6   85..83       MOV       DPH,?V3
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   F5..         MOV       ?V2,A
   \   0000DC   78..         MOV       R0,#?V2
   \   0000DE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E1   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   0000E4   85..82       MOV       DPL,?V4
   \   0000E7   85..83       MOV       DPH,?V5
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   F9           MOV       R1,A
   \   0000EC   12....       LCALL     `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   0000EF   7401         MOV       A,#0x1
   \   0000F1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F4   E9           MOV       A,R1
   \   0000F5   7060         JNZ       ??ZDO_ProcessBindUnbindReq_8
    986                    {
    987                      uint16 nwkAddr;
    988          
    989                      // valid entry
    990                      bindStat = ZDP_SUCCESS;
   \   0000F7   85..82       MOV       DPL,?XSP + 0
   \   0000FA   85..83       MOV       DPH,?XSP + 1
   \   0000FD   E4           CLR       A
   \   0000FE   F0           MOVX      @DPTR,A
    991          
    992                      // Notify to save info into NV
    993                      ZDApp_NVUpdate();
   \   0000FF                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000FF   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
    994          
    995                      // Check for the destination address
    996                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   \   000102   85..82       MOV       DPL,?V8
   \   000105   85..83       MOV       DPH,?V9
   \   000108   E0           MOVX      A,@DPTR
   \   000109   6403         XRL       A,#0x3
   \   00010B   704A         JNZ       ??ZDO_ProcessBindUnbindReq_8
    997                      {
    998                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   \   00010D                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   00010D   7401         MOV       A,#0x1
   \   00010F   12....       LCALL     ?XSTACK_DISP102_8
   \   000112   EE           MOV       A,R6
   \   000113   FA           MOV       R2,A
   \   000114   EF           MOV       A,R7
   \   000115   FB           MOV       R3,A
   \   000116   12....       LCALL     `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   000119   E9           MOV       A,R1
   \   00011A   703B         JNZ       ??ZDO_ProcessBindUnbindReq_8
    999                        {
   1000                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   00011C                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   00011C   7D00         MOV       R5,#0x0
   \   00011E   7C00         MOV       R4,#0x0
   \   000120   7900         MOV       R1,#0x0
   \   000122   EE           MOV       A,R6
   \   000123   FA           MOV       R2,A
   \   000124   EF           MOV       A,R7
   \   000125   FB           MOV       R3,A
   \   000126   12....       LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   000129   802C         SJMP      ??ZDO_ProcessBindUnbindReq_8
   1001                        }
   1002                      }
   1003                    }
   1004                  }
   1005                }
   1006                else // Unbind_req
   1007                {
   1008                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
   1009                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   00012B                ; Setup parameters for call to function APSME_UnBindRequest
   \   00012B   85..82       MOV       DPL,?V2
   \   00012E   85..83       MOV       DPH,?V3
   \   000131   E0           MOVX      A,@DPTR
   \   000132   F5..         MOV       ?V2,A
   \   000134   78..         MOV       R0,#?V2
   \   000136   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000139   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   00013C   12....       LCALL     `??APSME_UnBindRequest::?relay`; Banked call to: APSME_UnBindRequest
   \   00013F   7401         MOV       A,#0x1
   \   000141   12....       LCALL     ?DEALLOC_XSTACK8
   \   000144   E9           MOV       A,R1
   \   000145   85..82       MOV       DPL,?XSP + 0
   \   000148   85..83       MOV       DPH,?XSP + 1
   \   00014B   7007         JNZ       ??ZDO_ProcessBindUnbindReq_9
   1010                  {
   1011                    bindStat = ZDP_SUCCESS;
   \   00014D   E4           CLR       A
   \   00014E   F0           MOVX      @DPTR,A
   1012          
   1013                    // Notify to save info into NV
   1014                    ZDApp_NVUpdate();
   \   00014F                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00014F   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   000152   8003         SJMP      ??ZDO_ProcessBindUnbindReq_8
   1015                  }
   1016                  else
   1017                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_9:
   \   000154   7488         MOV       A,#-0x78
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   000156   F0           MOVX      @DPTR,A
   1018                }
   1019              }
   1020            }
   1021          
   1022            // Send back a response message
   1023            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
   1024                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
   1025                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_8:
   \   000157                ; Setup parameters for call to function ZDP_SendData
   \   000157   E5..         MOV       A,?V6
   \   000159   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   00015C   35..         ADDC      A,?V7
   \   00015E   12....       LCALL     ??Subroutine185_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   000161   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000164   7401         MOV       A,#0x1
   \   000166   12....       LCALL     ?XSTACK_DISP100_8
   \   000169   88..         MOV       ?V0,R0
   \   00016B   89..         MOV       ?V1,R1
   \   00016D   78..         MOV       R0,#?V0
   \   00016F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000172   85..82       MOV       DPL,?V10
   \   000175   85..83       MOV       DPH,?V11
   \   000178   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   00017B   4480         ORL       A,#0x80
   \   00017D   F5..         MOV       ?V1,A
   \   00017F   78..         MOV       R0,#?V0
   \   000181   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000184   7901         MOV       R1,#0x1
   \   000186   E5..         MOV       A,?V6
   \   000188   2402         ADD       A,#0x2
   \   00018A   FC           MOV       R4,A
   \   00018B   E4           CLR       A
   \   00018C   35..         ADDC      A,?V7
   \   00018E   FD           MOV       R5,A
   \   00018F   E5..         MOV       A,?V6
   \   000191   240F         ADD       A,#0xf
   \   000193   FA           MOV       R2,A
   \   000194   E4           CLR       A
   \   000195   35..         ADDC      A,?V7
   \   000197   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   00019A   12....       LCALL     ?DEALLOC_XSTACK8
   1026          }
   \   00019D   740C         MOV       A,#0xc
   \   00019F   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A2   7F0E         MOV       R7,#0xe
   \   0001A4   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine181_0
   \   000001                ; // Fall through to label ??Subroutine181_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine181_0:
   \   000000   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000003   7405         MOV       A,#0x5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   F5..         MOV       ?V8,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F5..         MOV       ?V9,A
   \   000006   85..82       MOV       DPL,?V8
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   EE           MOV       A,R6
   \   000001   FC           MOV       R4,A
   \   000002   EF           MOV       A,R7
   \   000003   FD           MOV       R5,A
   \   000004   85..82       MOV       DPL,?V0
   \   000007   85..83       MOV       DPH,?V1
   \   00000A                REQUIRE ??Subroutine191_0
   \   00000A                ; // Fall through to label ??Subroutine191_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   F5..         MOV       ?V4,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F5..         MOV       ?V5,A
   \   000006   85..82       MOV       DPL,?V4
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET
   1027          
   1028          /*********************************************************************
   1029           * @fn      ZDO_UpdateAddrManager
   1030           *
   1031           * @brief   Update the Address Manager.
   1032           *
   1033           * @param   nwkAddr - network address
   1034           * @param   extAddr - extended address
   1035           *
   1036           * @return  none
   1037           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine171_0
   \   000003                ; // Fall through to label ??Subroutine171_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1038          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
   1039          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV       A,#-0xd
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   1040            AddrMgrEntry_t addrEntry;
   1041          
   1042            // Update the address manager
   1043            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   1044            addrEntry.nwkAddr = nwkAddr;
   \   000011   04           INC       A
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine31 & 0xFFFF
   1045            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_311:
   \   000018                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000018   7403         MOV       A,#0x3
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine122 & 0xFFFF
   1046            AddrMgrEntryUpdate( &addrEntry );
   1047          }
   \                     ??CrossCallReturnLabel_194:
   \   000020   740D         MOV       A,#0xd
   \   000022   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   \   000007                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000007                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000007   AA..         MOV       R2,?XSP + 0
   \   000009   AB..         MOV       R3,?XSP + 1
   \   00000B   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00000E   22           RET
   1048          
   1049          /*********************************************************************
   1050           * @fn      ZDO_ProcessServerDiscReq
   1051           *
   1052           * @brief   Process the Server_Discovery_req message.
   1053           *
   1054           * @param   inMsg  - incoming message (request)
   1055           *
   1056           * @return  none
   1057           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1058          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
   1059          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine78 & 0xFFFF
   1060            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   1061            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \                     ??CrossCallReturnLabel_106:
   \   000008   F9           MOV       R1,A
   \   000009   EA           MOV       A,R2
   \   00000A   F8           MOV       R0,A
   \   00000B   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 8
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   58           ANL       A,R0
   \   000010   F5..         MOV       ?V0,A
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   59           ANL       A,R1
   \   000015   F5..         MOV       ?V1,A
   1062          
   1063            if ( matchMask )
   \   000017   E5..         MOV       A,?V0
   \   000019   45..         ORL       A,?V1
   \   00001B   6026         JZ        ??ZDO_ProcessServerDiscReq_0
   1064            {
   1065              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
   1066                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   00001D                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000025   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000028   12....       LCALL     ?Subroutine97 & 0xFFFF
   1067            }
   \                     ??CrossCallReturnLabel_321:
   \   00002B   FD           MOV       R5,A
   \   00002C   7C00         MOV       R4,#0x0
   \   00002E   EE           MOV       A,R6
   \   00002F   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000032   3F           ADDC      A,R7
   \   000033   FB           MOV       R3,A
   \   000034   EE           MOV       A,R6
   \   000035   240F         ADD       A,#0xf
   \   000037   12....       LCALL     ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   00003A   F9           MOV       R1,A
   \   00003B   12....       LCALL     `??ZDP_ServerDiscRsp::?relay`; Banked call to: ZDP_ServerDiscRsp
   \   00003E   7404         MOV       A,#0x4
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
   1068          }
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   000043   02....       LJMP      ??Subroutine174_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   2402         ADD       A,#0x2
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL     ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000003   22           RET
   1069          
   1070          /*********************************************************************
   1071           * Call Back Functions from APS  - API
   1072           */
   1073          
   1074          /*********************************************************************
   1075           * @fn          ZDO_EndDeviceTimeoutCB
   1076           *
   1077           * @brief       This function handles the binding timer for the End
   1078           *              Device Bind command.
   1079           *
   1080           * @param       none
   1081           *
   1082           * @return      none
   1083           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1084          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1085          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1086          #if defined ( REFLECTOR )
   1087            byte stat;
   1088            if ( ZDO_EDBind )
   \   00000A   90....       MOV       DPTR,#ZDO_EDBind
   \   00000D   12....       LCALL     ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   000010   7003         JNZ       $+5
   \   000012   02....       LJMP      ??ZDO_EndDeviceTimeoutCB_0 & 0xFFFF
   1089            {
   1090              stat = ZDO_EDBind->status;
   1091          
   1092              // Send the response message to the first sent
   1093              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1094                                  stat, ZDO_EDBind->SecurityUse );
   \   000015   E8           MOV       A,R0
   \   000016   2416         ADD       A,#0x16
   \   000018   F582         MOV       DPL,A
   \   00001A   E4           CLR       A
   \   00001B   39           ADDC      A,R1
   \   00001C   F583         MOV       DPH,A
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   85..82       MOV       DPL,?XSP + 0
   \   000022   85..83       MOV       DPH,?XSP + 1
   \   000025   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000028   F583         MOV       DPH,A
   \   00002A   8882         MOV       DPL,R0
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   C0E0         PUSH      A
   \   00002F   7401         MOV       A,#0x1
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   D0E0         POP       A
   \   000036   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000039   C8           XCH       A,R0
   \   00003A   2415         ADD       A,#0x15
   \   00003C   F582         MOV       DPL,A
   \   00003E   E4           CLR       A
   \   00003F   38           ADDC      A,R0
   \   000040   12....       LCALL     ??Subroutine185_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000046   7401         MOV       A,#0x1
   \   000048   12....       LCALL     ?XSTACK_DISP100_8
   \   00004B   88..         MOV       ?V0,R0
   \   00004D   89..         MOV       ?V1,R1
   \   00004F   78..         MOV       R0,#?V0
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000054   75..20       MOV       ?V0,#0x20
   \   000057   75..80       MOV       ?V1,#-0x80
   \   00005A   78..         MOV       R0,#?V0
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005F   7901         MOV       R1,#0x1
   \   000061   90....       MOV       DPTR,#ZDO_EDBind
   \   000064   E0           MOVX      A,@DPTR
   \   000065   29           ADD       A,R1
   \   000066   FC           MOV       R4,A
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   3400         ADDC      A,#0x0
   \   00006B   FD           MOV       R5,A
   \   00006C   7406         MOV       A,#0x6
   \   00006E   12....       LCALL     ?XSTACK_DISP101_8
   \   000071   12....       LCALL     ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000074   12....       LCALL     ?DEALLOC_XSTACK8
   \   000077                ; Setup parameters for call to function HalLcdWriteString
   \   000077   7901         MOV       R1,#0x1
   \   000079   7A..         MOV       R2,#`?<Constant "End Device Bind">` & 0xff
   \   00007B   7B..         MOV       R3,#(`?<Constant "End Device Bind">` >> 8) & 0xff
   \   00007D   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000080   85..82       MOV       DPL,?XSP + 0
   \   000083   85..83       MOV       DPH,?XSP + 1
   \   000086   E0           MOVX      A,@DPTR
   \   000087   7902         MOV       R1,#0x2
   \   000089   7006         JNZ       ??ZDO_EndDeviceTimeoutCB_1
   \   00008B                ; Setup parameters for call to function HalLcdWriteString
   \   00008B   7A..         MOV       R2,#`?<Constant "Success Sent">` & 0xff
   \   00008D   7B..         MOV       R3,#(`?<Constant "Success Sent">` >> 8) & 0xff
   \   00008F   8004         SJMP      ??ZDO_EndDeviceTimeoutCB_2
   \                     ??ZDO_EndDeviceTimeoutCB_1:
   \   000091                ; Setup parameters for call to function HalLcdWriteString
   \   000091   7A..         MOV       R2,#`?<Constant "Timeout">` & 0xff
   \   000093   7B..         MOV       R3,#(`?<Constant "Timeout">` >> 8) & 0xff
   \                     ??ZDO_EndDeviceTimeoutCB_2:
   \   000095   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1095          
   1096              ZDO_RemoveEndDeviceBind();
   \   000098   90....       MOV       DPTR,#ZDO_EDBind
   \   00009B   12....       LCALL     ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   00009E   602C         JZ        ??ZDO_EndDeviceTimeoutCB_0
   \   0000A0   E8           MOV       A,R0
   \   0000A1   2410         ADD       A,#0x10
   \   0000A3   F582         MOV       DPL,A
   \   0000A5   E4           CLR       A
   \   0000A6   39           ADDC      A,R1
   \   0000A7   12....       LCALL     ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   0000AA   6003         JZ        ??ZDO_EndDeviceTimeoutCB_3
   \   0000AC                ; Setup parameters for call to function osal_mem_free
   \   0000AC   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_3:
   \   0000AF   90....       MOV       DPTR,#ZDO_EDBind
   \   0000B2   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_433:
   \   0000B5   2413         ADD       A,#0x13
   \   0000B7   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   0000BA   6003         JZ        ??ZDO_EndDeviceTimeoutCB_4
   \   0000BC                ; Setup parameters for call to function osal_mem_free
   \   0000BC   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_4:
   \   0000BF                ; Setup parameters for call to function osal_mem_free
   \   0000BF   90....       MOV       DPTR,#ZDO_EDBind
   \   0000C2   12....       LCALL     ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   0000C5   90....       MOV       DPTR,#ZDO_EDBind
   \   0000C8   E4           CLR       A
   \   0000C9   F0           MOVX      @DPTR,A
   \   0000CA   A3           INC       DPTR
   \   0000CB   F0           MOVX      @DPTR,A
   1097            }
   1098          #endif  // REFLECTOR
   1099          }
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   0000CC   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004                REQUIRE ??Subroutine187_0
   \   000004                ; // Fall through to label ??Subroutine187_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine187_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine188_0
   \   000002                ; // Fall through to label ??Subroutine188_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine188_0:
   \   000000   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   000003   EA           MOV       A,R2
   \   000004   4B           ORL       A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001   90....       MOV       DPTR,#ZDO_EDBind
   \   000004   12....       LCALL     ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_462:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine203_0:
   \   000000   12....       LCALL     ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_470:
   \   000003   C8           XCH       A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine211_0:
   \   000000   12....       LCALL     ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_461:
   \   000003   22           RET
   1100          
   1101          /*********************************************************************
   1102           * Optional Management Messages
   1103           */
   1104          
   1105          /*********************************************************************
   1106           * @fn          ZDO_ProcessMgmtLqiReq
   1107           *
   1108           * @brief       This function handles parsing the incoming Management
   1109           *              LQI request and generate the response.
   1110           *
   1111           *   Note:      This function will limit the number of items returned
   1112           *              to ZDO_MAX_LQI_ITEMS items.
   1113           *
   1114           * @param       inMsg - incoming message (request)
   1115           *
   1116           * @return      none
   1117           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   85..82       MOV       DPL,?V6
   \   000003   85..83       MOV       DPH,?V7
   \   000006                REQUIRE ??Subroutine179_0
   \   000006                ; // Fall through to label ??Subroutine179_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1118          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
   1119          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV       A,#-0x25
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V14,R2
   \   00000C   8B..         MOV       ?V15,R3
   1120            byte x;
   1121            byte index;
   1122            byte numItems;
   1123            byte maxItems;
   1124            ZDP_MgmtLqiItem_t* table = NULL;
   \   00000E   75..00       MOV       ?V12,#0x0
   \   000011   75..00       MOV       ?V13,#0x0
   1125            ZDP_MgmtLqiItem_t* item;
   1126            neighborEntry_t    entry;
   1127            byte aItems;
   1128            associated_devices_t *aDevice;
   1129            AddrMgrEntry_t  nwkEntry;
   1130            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL     ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   000017   35..         ADDC      A,?V15
   \   000019   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   00001C   F5..         MOV       ?V4,A
   1131          
   1132            // Get the number of neighbor items
   1133            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \   00001E                ; Setup parameters for call to function NLME_GetRequest
   \   00001E   AC..         MOV       R4,?XSP + 0
   \   000020   AD..         MOV       R5,?XSP + 1
   \   000022   7A00         MOV       R2,#0x0
   \   000024   7B00         MOV       R3,#0x0
   \   000026   799C         MOV       R1,#-0x64
   \   000028   12....       LCALL     `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1134          
   1135            // Get the number of associated items
   1136            aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \   00002B                ; Setup parameters for call to function AssocCount
   \   00002B   7A04         MOV       R2,#0x4
   \   00002D   7900         MOV       R1,#0x0
   \   00002F   12....       LCALL     `??AssocCount::?relay`; Banked call to: AssocCount
   \   000032   EA           MOV       A,R2
   \   000033   F5..         MOV       ?V2,A
   1137          
   1138            // Total number of items
   1139            maxItems += aItems;
   \   000035   85..82       MOV       DPL,?XSP + 0
   \   000038   85..83       MOV       DPH,?XSP + 1
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   2A           ADD       A,R2
   \   00003D   F0           MOVX      @DPTR,A
   1140          
   1141            // Start with the supplied index
   1142            if ( maxItems > StartIndex )
   \   00003E   F8           MOV       R0,A
   \   00003F   E5..         MOV       A,?V4
   \   000041   C3           CLR       C
   \   000042   98           SUBB      A,R0
   \   000043   4003         JC        $+5
   \   000045   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_0 & 0xFFFF
   1143            {
   1144              numItems = maxItems - StartIndex;
   \   000048   E0           MOVX      A,@DPTR
   \   000049   C3           CLR       C
   \   00004A   95..         SUBB      A,?V4
   \   00004C   F5..         MOV       ?V1,A
   1145          
   1146              // limit the size of the list
   1147              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   00004E   C3           CLR       C
   \   00004F   9404         SUBB      A,#0x4
   \   000051   4003         JC        ??ZDO_ProcessMgmtLqiReq_1
   1148                numItems = ZDO_MAX_LQI_ITEMS;
   \   000053   75..03       MOV       ?V1,#0x3
   1149          
   1150              // Allocate the memory to build the table
   1151              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1152                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   000056                ; Setup parameters for call to function osal_mem_alloc
   \   000056   E5..         MOV       A,?V1
   \   000058   75F01A       MOV       B,#0x1a
   \   00005B   A4           MUL       AB
   \   00005C   FA           MOV       R2,A
   \   00005D   ABF0         MOV       R3,B
   \   00005F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000062   8A..         MOV       ?V12,R2
   \   000064   8B..         MOV       ?V13,R3
   1153          
   1154              if ( table != NULL )
   \   000066   EA           MOV       A,R2
   \   000067   4B           ORL       A,R3
   \   000068   7003         JNZ       $+5
   \   00006A   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   1155              {
   1156                x = 0;
   \   00006D   75..00       MOV       ?V3,#0x0
   1157                item = table;
   \   000070   AE..         MOV       R6,?V12
   \   000072   AF..         MOV       R7,?V13
   1158                index = StartIndex;
   \   000074   85....       MOV       ?V0,?V4
   \   000077   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_3 & 0xFFFF
   1159          
   1160                // Loop through associated items and build list
   1161                for ( ; x < numItems; x++ )
   1162                {
   1163                  if ( index < aItems )
   1164                  {
   1165                    // get next associated device
   1166                    aDevice = AssocFindDevice( index++ );
   1167          
   1168                    // set basic fields
   1169                    item->panID   = _NIB.nwkPanId;
   1170                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1171                    item->nwkAddr = aDevice->shortAddr;
   1172                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   1173                    item->depth   = 0xFF;
   1174                    item->lqi     = aDevice->linkInfo.rxLqi;
   1175          
   1176                    // set extented address
   1177                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   1178                    nwkEntry.nwkAddr = aDevice->shortAddr;
   1179          
   1180                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   1181                    {
   1182                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   1183                    }
   1184                    else
   1185                    {
   1186                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   00007A                ; Setup parameters for call to function osal_memset
   \   00007A   7C08         MOV       R4,#0x8
   \   00007C   7D00         MOV       R5,#0x0
   \   00007E   79FF         MOV       R1,#-0x1
   \   000080   AA..         MOV       R2,?V10
   \   000082   AB..         MOV       R3,?V11
   \   000084   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1187                    }
   1188          
   1189                    // use association info to set other fields
   1190                    if ( aDevice->nodeRelation == PARENT )
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   000087   E5..         MOV       A,?V6
   \   000089   2404         ADD       A,#0x4
   \   00008B   F8           MOV       R0,A
   \   00008C   E4           CLR       A
   \   00008D   35..         ADDC      A,?V7
   \   00008F   F9           MOV       R1,A
   \   000090   EE           MOV       A,R6
   \   000091   2416         ADD       A,#0x16
   \   000093   FA           MOV       R2,A
   \   000094   E4           CLR       A
   \   000095   3F           ADDC      A,R7
   \   000096   FB           MOV       R3,A
   \   000097   EE           MOV       A,R6
   \   000098   2415         ADD       A,#0x15
   \   00009A   FC           MOV       R4,A
   \   00009B   E4           CLR       A
   \   00009C   3F           ADDC      A,R7
   \   00009D   FD           MOV       R5,A
   \   00009E   EE           MOV       A,R6
   \   00009F   2414         ADD       A,#0x14
   \   0000A1   F5..         MOV       ?V10,A
   \   0000A3   E4           CLR       A
   \   0000A4   3F           ADDC      A,R7
   \   0000A5   F5..         MOV       ?V11,A
   \   0000A7   8882         MOV       DPL,R0
   \   0000A9   8983         MOV       DPH,R1
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   702E         JNZ       ??ZDO_ProcessMgmtLqiReq_6
   1191                    {
   1192                      if (  aDevice->shortAddr == 0 )
   \   0000AE   85..82       MOV       DPL,?V6
   \   0000B1   85..83       MOV       DPH,?V7
   \   0000B4   12....       LCALL     ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   0000B7   85..82       MOV       DPL,?V10
   \   0000BA   85..83       MOV       DPH,?V11
   \   0000BD   7004         JNZ       ??ZDO_ProcessMgmtLqiReq_7
   1193                      {
   1194                        item->devType = ZDP_MGMT_DT_COORD;
   \   0000BF   E4           CLR       A
   \   0000C0   F0           MOVX      @DPTR,A
   1195                        item->depth = 0;
   \   0000C1   8008         SJMP      ??ZDO_ProcessMgmtLqiReq_8
   1196                      }
   1197                      else
   1198                      {
   1199                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   0000C3   7401         MOV       A,#0x1
   \   0000C5   F0           MOVX      @DPTR,A
   1200                        item->depth = _NIB.nodeDepth - 1;
   \   0000C6   90....       MOV       DPTR,#_NIB + 52
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   14           DEC       A
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   0000CB   85..82       MOV       DPL,?V8
   \   0000CE   85..83       MOV       DPH,?V9
   1201                      }
   1202          
   1203                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1204                      item->relation = ZDP_MGMT_REL_PARENT;
   1205                    }
   \   0000D1   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0000D4   7402         MOV       A,#0x2
   \   0000D6   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_481:
   \   0000D9   E4           CLR       A
   \   0000DA   8033         SJMP      ??ZDO_ProcessMgmtLqiReq_9
   1206                    else
   1207                    {
   1208                      // If not parent, then it's a child
   1209                      item->depth = _NIB.nodeDepth + 1;
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   0000DC   90....       MOV       DPTR,#_NIB + 52
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   04           INC       A
   \   0000E1   85..82       MOV       DPL,?V8
   \   0000E4   85..83       MOV       DPH,?V9
   \   0000E7   12....       LCALL     ?Subroutine36 & 0xFFFF
   1210          
   1211                      if ( aDevice->nodeRelation < CHILD_FFD )
   \                     ??CrossCallReturnLabel_49:
   \   0000EA   C3           CLR       C
   \   0000EB   9403         SUBB      A,#0x3
   \   0000ED   85..82       MOV       DPL,?V10
   \   0000F0   85..83       MOV       DPH,?V11
   \   0000F3   4003         JC        $+5
   \   0000F5   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_10 & 0xFFFF
   1212                      {
   1213                        item->devType = ZDP_MGMT_DT_ENDDEV;
   \   0000F8   7402         MOV       A,#0x2
   \   0000FA   12....       LCALL     ?Subroutine36 & 0xFFFF
   1214          
   1215                        if ( aDevice->nodeRelation == CHILD_RFD )
   1216                        {
   1217                          item->rxOnIdle = FALSE;
   1218                        }
   1219                        else
   1220                        {
   1221                          item->rxOnIdle = TRUE;
   1222                        }
   1223                      }
   \                     ??CrossCallReturnLabel_50:
   \   0000FD   6401         XRL       A,#0x1
   \   0000FF   7003         JNZ       $+5
   \   000101   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_11 & 0xFFFF
   1224                      else
   1225                      {
   1226                        item->devType = ZDP_MGMT_DT_ROUTER;
   1227          
   1228                        if ( aDevice->nodeRelation == CHILD_FFD )
   1229                        {
   1230                          item->rxOnIdle = FALSE;
   1231                        }
   1232                        else
   1233                        {
   1234                          item->rxOnIdle = TRUE;
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   000104   8C82         MOV       DPL,R4
   \   000106   8D83         MOV       DPH,R5
   \   000108   7401         MOV       A,#0x1
   1235                        }
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   00010A   12....       LCALL     ?Subroutine139 & 0xFFFF
   1236                      }
   1237          
   1238                      item->relation = ZDP_MGMT_REL_CHILD;
   \                     ??CrossCallReturnLabel_482:
   \   00010D   7401         MOV       A,#0x1
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   00010F   F0           MOVX      @DPTR,A
   1239                    }
   1240          
   1241                    item++;
   \   000110   EE           MOV       A,R6
   \   000111   241A         ADD       A,#0x1a
   \   000113   FE           MOV       R6,A
   \   000114   5001         JNC       ??ZDO_ProcessMgmtLqiReq_14
   \   000116   0F           INC       R7
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   000117   05..         INC       ?V3
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   000119   E5..         MOV       A,?V3
   \   00011B   C3           CLR       C
   \   00011C   95..         SUBB      A,?V1
   \   00011E   4003         JC        $+5
   \   000120   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_15 & 0xFFFF
   \   000123   E5..         MOV       A,?V0
   \   000125   C3           CLR       C
   \   000126   95..         SUBB      A,?V2
   \   000128   4003         JC        $+5
   \   00012A   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_16 & 0xFFFF
   \   00012D                ; Setup parameters for call to function AssocFindDevice
   \   00012D   A9..         MOV       R1,?V0
   \   00012F   12....       LCALL     `??AssocFindDevice::?relay`; Banked call to: AssocFindDevice
   \   000132   8A..         MOV       ?V6,R2
   \   000134   8B..         MOV       ?V7,R3
   \   000136   05..         INC       ?V0
   \   000138   90....       MOV       DPTR,#_NIB + 33
   \   00013B   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00013E   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000141   EE           MOV       A,R6
   \   000142   2412         ADD       A,#0x12
   \   000144   F582         MOV       DPL,A
   \   000146   E4           CLR       A
   \   000147   3F           ADDC      A,R7
   \   000148   F583         MOV       DPH,A
   \   00014A   E8           MOV       A,R0
   \   00014B   F0           MOVX      @DPTR,A
   \   00014C   A3           INC       DPTR
   \   00014D   E9           MOV       A,R1
   \   00014E   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000151   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000154   74FF         MOV       A,#-0x1
   \   000156   F0           MOVX      @DPTR,A
   \   000157   85..82       MOV       DPL,?V6
   \   00015A   85..83       MOV       DPH,?V7
   \   00015D   A3           INC       DPTR
   \   00015E   A3           INC       DPTR
   \   00015F   A3           INC       DPTR
   \   000160   A3           INC       DPTR
   \   000161   A3           INC       DPTR
   \   000162   A3           INC       DPTR
   \   000163   A3           INC       DPTR
   \   000164   A3           INC       DPTR
   \   000165   A3           INC       DPTR
   \   000166   A3           INC       DPTR
   \   000167   E0           MOVX      A,@DPTR
   \   000168   C0E0         PUSH      A
   \   00016A   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   00016D   D0E0         POP       A
   \   00016F   F0           MOVX      @DPTR,A
   \   000170   7401         MOV       A,#0x1
   \   000172   12....       LCALL     ?XSTACK_DISP0_8
   \   000175   E4           CLR       A
   \   000176   F0           MOVX      @DPTR,A
   \   000177   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   00017A   7402         MOV       A,#0x2
   \   00017C   12....       LCALL     ?XSTACK_DISP0_8
   \   00017F   E8           MOV       A,R0
   \   000180   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_534:
   \   000183   EE           MOV       A,R6
   \   000184   240A         ADD       A,#0xa
   \   000186   F5..         MOV       ?V10,A
   \   000188   E4           CLR       A
   \   000189   3F           ADDC      A,R7
   \   00018A   F5..         MOV       ?V11,A
   \   00018C                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   00018C   7401         MOV       A,#0x1
   \   00018E   12....       LCALL     ?XSTACK_DISP101_8
   \   000191   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000194   E9           MOV       A,R1
   \   000195   6401         XRL       A,#0x1
   \   000197   6003         JZ        $+5
   \   000199   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   \   00019C                ; Setup parameters for call to function sAddrExtCpy
   \   00019C   7404         MOV       A,#0x4
   \   00019E   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A1   AC82         MOV       R4,DPL
   \   0001A3   AD83         MOV       R5,DPH
   \   0001A5   AA..         MOV       R2,?V10
   \   0001A7   AB..         MOV       R3,?V11
   \   0001A9   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001AC   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   0001AF   7401         MOV       A,#0x1
   \   0001B1   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0001B4   6403         XRL       A,#0x3
   \   0001B6   6003         JZ        $+5
   \   0001B8   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_12 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   0001BB   8C82         MOV       DPL,R4
   \   0001BD   8D83         MOV       DPH,R5
   \   0001BF   E4           CLR       A
   \   0001C0   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_13 & 0xFFFF
   1242                  }
   1243                  else
   1244                  {
   1245                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_16:
   \   0001C3   E5..         MOV       A,?V2
   \   0001C5   C3           CLR       C
   \   0001C6   95..         SUBB      A,?V4
   \   0001C8   4005         JC        ??ZDO_ProcessMgmtLqiReq_17
   1246                      // Start with 1st neighbor
   1247                      index = 0;
   \   0001CA   75..00       MOV       ?V0,#0x0
   \   0001CD   801F         SJMP      ??ZDO_ProcessMgmtLqiReq_18
   1248                    else
   1249                      // Start with >1st neighbor
   1250                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_17:
   \   0001CF   E5..         MOV       A,?V4
   \   0001D1   C3           CLR       C
   \   0001D2   95..         SUBB      A,?V2
   \   0001D4   F5..         MOV       ?V0,A
   \   0001D6   8016         SJMP      ??ZDO_ProcessMgmtLqiReq_18
   1251                    break;
   1252                  }
   1253                }
   1254          
   1255                // Loop through neighbor items and finish list
   1256                for ( ; x < numItems; x++ )
   1257                {
   1258                  // Add next neighbor table item
   1259                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   1260          
   1261                  // set ZDP_MgmtLqiItem_t fields
   1262                  item->panID    = entry.panId;
   1263                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1264                  osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   1265                  item->nwkAddr  = entry.neighborAddress;
   1266                  item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1267                  item->relation = ZDP_MGMT_REL_UNKNOWN;
   1268                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   1269                  item->depth    = 0xFF;
   1270                  item->lqi      = entry.linkInfo.rxLqi;
   1271          
   1272                  if ( item->nwkAddr == 0 )
   1273                  {
   1274                    item->devType = ZDP_MGMT_DT_COORD;
   1275                  }
   1276                  else
   1277                  {
   1278                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_19:
   \   0001D8   7401         MOV       A,#0x1
   \                     ??ZDO_ProcessMgmtLqiReq_20:
   \   0001DA   F0           MOVX      @DPTR,A
   1279                  }
   1280          
   1281                  item++;
   \   0001DB   EE           MOV       A,R6
   \   0001DC   241A         ADD       A,#0x1a
   \   0001DE   FE           MOV       R6,A
   \   0001DF   5001         JNC       ??ZDO_ProcessMgmtLqiReq_21
   \   0001E1   0F           INC       R7
   \                     ??ZDO_ProcessMgmtLqiReq_21:
   \   0001E2   05..         INC       ?V3
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   0001E4   E5..         MOV       A,?V3
   \   0001E6   C3           CLR       C
   \   0001E7   95..         SUBB      A,?V1
   \   0001E9   4003         JC        $+5
   \   0001EB   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_18:
   \   0001EE                ; Setup parameters for call to function NLME_GetRequest
   \   0001EE   740E         MOV       A,#0xe
   \   0001F0   12....       LCALL     ?XSTACK_DISP102_8
   \   0001F3   AA..         MOV       R2,?V0
   \   0001F5   7B00         MOV       R3,#0x0
   \   0001F7   7987         MOV       R1,#-0x79
   \   0001F9   12....       LCALL     `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   0001FC   05..         INC       ?V0
   \   0001FE   7418         MOV       A,#0x18
   \   000200   12....       LCALL     ?XSTACK_DISP0_8
   \   000203   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000206                ; Setup parameters for call to function osal_memset
   \   000206   7C08         MOV       R4,#0x8
   \   000208   7D00         MOV       R5,#0x0
   \   00020A   79FF         MOV       R1,#-0x1
   \   00020C   EE           MOV       A,R6
   \   00020D   240A         ADD       A,#0xa
   \   00020F   FA           MOV       R2,A
   \   000210   E4           CLR       A
   \   000211   3F           ADDC      A,R7
   \   000212   FB           MOV       R3,A
   \   000213   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   000216   EE           MOV       A,R6
   \   000217   2412         ADD       A,#0x12
   \   000219   F8           MOV       R0,A
   \   00021A   E4           CLR       A
   \   00021B   3F           ADDC      A,R7
   \   00021C   F9           MOV       R1,A
   \   00021D   740E         MOV       A,#0xe
   \   00021F   12....       LCALL     ?XSTACK_DISP0_8
   \   000222   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   000225   8882         MOV       DPL,R0
   \   000227   8983         MOV       DPH,R1
   \   000229   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   00022C   EE           MOV       A,R6
   \   00022D   2415         ADD       A,#0x15
   \   00022F   F582         MOV       DPL,A
   \   000231   E4           CLR       A
   \   000232   3F           ADDC      A,R7
   \   000233   F583         MOV       DPH,A
   \   000235   7402         MOV       A,#0x2
   \   000237   F0           MOVX      @DPTR,A
   \   000238   EE           MOV       A,R6
   \   000239   2416         ADD       A,#0x16
   \   00023B   F582         MOV       DPL,A
   \   00023D   E4           CLR       A
   \   00023E   3F           ADDC      A,R7
   \   00023F   F583         MOV       DPH,A
   \   000241   7403         MOV       A,#0x3
   \   000243   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000246   F582         MOV       DPL,A
   \   000248   E4           CLR       A
   \   000249   3F           ADDC      A,R7
   \   00024A   F583         MOV       DPH,A
   \   00024C   74FF         MOV       A,#-0x1
   \   00024E   F0           MOVX      @DPTR,A
   \   00024F   741D         MOV       A,#0x1d
   \   000251   12....       LCALL     ?XSTACK_DISP0_8
   \   000254   E0           MOVX      A,@DPTR
   \   000255   C0E0         PUSH      A
   \   000257   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   00025A   D0E0         POP       A
   \   00025C   F0           MOVX      @DPTR,A
   \   00025D   EE           MOV       A,R6
   \   00025E   2414         ADD       A,#0x14
   \   000260   FA           MOV       R2,A
   \   000261   E4           CLR       A
   \   000262   3F           ADDC      A,R7
   \   000263   FB           MOV       R3,A
   \   000264   8882         MOV       DPL,R0
   \   000266   8983         MOV       DPH,R1
   \   000268   12....       LCALL     ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   00026B   8A82         MOV       DPL,R2
   \   00026D   8B83         MOV       DPH,R3
   \   00026F   6003         JZ        $+5
   \   000271   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_19 & 0xFFFF
   \   000274   E4           CLR       A
   \   000275   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_20 & 0xFFFF
   1282                }
   1283              }
   1284            }
   1285            else
   1286            {
   1287              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   000278   75..00       MOV       ?V1,#0x0
   1288            }
   1289          
   1290            // Send response
   1291            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1292                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   00027B                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   00027B   75..00       MOV       ?V2,#0x0
   \   00027E   78..         MOV       R0,#?V2
   \   000280   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000283   78..         MOV       R0,#?V12
   \   000285   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000288   78..         MOV       R0,#?V1
   \   00028A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00028D   E5..         MOV       A,?V4
   \   00028F   F5..         MOV       ?V1,A
   \   000291   78..         MOV       R0,#?V1
   \   000293   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000296   7405         MOV       A,#0x5
   \   000298   12....       LCALL     ?XSTACK_DISP0_8
   \   00029B   E0           MOVX      A,@DPTR
   \   00029C   FD           MOV       R5,A
   \   00029D   7C00         MOV       R4,#0x0
   \   00029F   E5..         MOV       A,?V14
   \   0002A1   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   0002A4   35..         ADDC      A,?V15
   \   0002A6   FB           MOV       R3,A
   \   0002A7   E5..         MOV       A,?V14
   \   0002A9   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   0002AC   35..         ADDC      A,?V15
   \   0002AE   F583         MOV       DPH,A
   \   0002B0   E0           MOVX      A,@DPTR
   \   0002B1   F9           MOV       R1,A
   \   0002B2   12....       LCALL     `??ZDP_MgmtLqiRsp::?relay`; Banked call to: ZDP_MgmtLqiRsp
   \   0002B5   7405         MOV       A,#0x5
   \   0002B7   12....       LCALL     ?DEALLOC_XSTACK8
   1293          
   1294            if ( table )
   \   0002BA   E5..         MOV       A,?V12
   \   0002BC   45..         ORL       A,?V13
   \   0002BE   6007         JZ        ??ZDO_ProcessMgmtLqiReq_22
   1295            {
   1296              osal_mem_free( table );
   \   0002C0                ; Setup parameters for call to function osal_mem_free
   \   0002C0   AA..         MOV       R2,?V12
   \   0002C2   AB..         MOV       R3,?V13
   \   0002C4   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1297            }
   1298          }
   \                     ??ZDO_ProcessMgmtLqiReq_22:
   \   0002C7   7425         MOV       A,#0x25
   \   0002C9   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   EE           MOV       A,R6
   \   000001   2419         ADD       A,#0x19
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   2417         ADD       A,#0x17
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   3F           ADDC      A,R7
   \   000008   F583         MOV       DPH,A
   \   00000A   7402         MOV       A,#0x2
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   EE           MOV       A,R6
   \   00000E   2418         ADD       A,#0x18
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_419:
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   E8           MOV       A,R0
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   E9           MOV       A,R1
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   00000E   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   000010   EE           MOV       A,R6
   \   000011   2402         ADD       A,#0x2
   \   000013   FA           MOV       R2,A
   \   000014   E4           CLR       A
   \   000015   3F           ADDC      A,R7
   \   000016   FB           MOV       R3,A
   \   000017   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine189_0
   \   000002                ; // Fall through to label ??Subroutine189_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   12....       LCALL     ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine225_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET
   1299          
   1300          /*********************************************************************
   1301           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1302           *
   1303           * @brief       This function handles parsing the incoming Management
   1304           *              Network Discover request and starts the request.
   1305           *
   1306           * @param       inMsg - incoming message (request)
   1307           *
   1308           * @return      none
   1309           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1310          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1311          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV       A,#-0x7
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine109 & 0xFFFF
   1312            NLME_ScanFields_t scan;
   1313            uint8             index;
   1314            uint8             *msg;
   1315          
   1316            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_373:
   \   00000D   35..         ADDC      A,?V1
   \   00000F   12....       LCALL     ?Subroutine58 & 0xFFFF
   1317            scan.channels = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_78:
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   12....       LCALL     ?XSTORE_R0123
   1318            msg += 4;
   1319            scan.duration = *msg++;
   \   00001B   8E82         MOV       DPL,R6
   \   00001D   8F83         MOV       DPH,R7
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   C0E0         PUSH      A
   \   000026   7404         MOV       A,#0x4
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   D0E0         POP       A
   \   00002D   12....       LCALL     ?Subroutine40 & 0xFFFF
   1320            index         = *msg;
   \                     ??CrossCallReturnLabel_55:
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F8           MOV       R0,A
   1321            scan.scanType = ZMAC_ACTIVE_SCAN;
   \   000036   7405         MOV       A,#0x5
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   7401         MOV       A,#0x1
   \   00003D   F0           MOVX      @DPTR,A
   1322            scan.scanApp  = NLME_DISC_SCAN;
   \   00003E   7406         MOV       A,#0x6
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   7401         MOV       A,#0x1
   \   000045   F0           MOVX      @DPTR,A
   1323          
   1324            // Save off the information to be used for the response
   1325            zdappMgmtNwkDiscReqInProgress          = true;
   \   000046   90....       MOV       DPTR,#zdappMgmtNwkDiscReqInProgress
   \   000049   F0           MOVX      @DPTR,A
   1326            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   00004A   90....       MOV       DPTR,#zdappMgmtNwkDiscRspAddr + 8
   \   00004D   04           INC       A
   \   00004E   12....       LCALL     ?Subroutine28 & 0xFFFF
   1327            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_32:
   \   000051   FA           MOV       R2,A
   \   000052   A3           INC       DPTR
   \   000053   E0           MOVX      A,@DPTR
   \   000054   FB           MOV       R3,A
   \   000055   90....       MOV       DPTR,#zdappMgmtNwkDiscRspAddr
   \   000058   12....       LCALL     ?Subroutine31 & 0xFFFF
   1328            zdappMgmtNwkDiscStartIndex             = index;
   \                     ??CrossCallReturnLabel_313:
   \   00005B   E8           MOV       A,R0
   \   00005C   90....       MOV       DPTR,#zdappMgmtNwkDiscStartIndex
   \   00005F   F0           MOVX      @DPTR,A
   1329            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \   000060   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000063   E0           MOVX      A,@DPTR
   \   000064   90....       MOV       DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   000067   F0           MOVX      @DPTR,A
   1330          
   1331            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \   000068                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   000068   AA..         MOV       R2,?XSP + 0
   \   00006A   AB..         MOV       R3,?XSP + 1
   \   00006C   12....       LCALL     `??NLME_NwkDiscReq2::?relay`; Banked call to: NLME_NwkDiscReq2
   \   00006F   E9           MOV       A,R1
   \   000070   6003         JZ        ??ZDO_ProcessMgmtNwkDiscReq_0
   1332            {
   1333              NLME_NwkDiscTerm();
   \   000072                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000072   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1334          
   1335              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1336            }
   1337          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   000075   7407         MOV       A,#0x7
   \   000077   02....       LJMP      ??Subroutine173_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   8A..         MOV       ?V0,R2
   \   000002   8B..         MOV       ?V1,R3
   \   000004                REQUIRE ??Subroutine194_0
   \   000004                ; // Fall through to label ??Subroutine194_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine218_0:
   \   000000   35..         ADDC      A,?V1
   \   000002   F583         MOV       DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   E5..         MOV       A,?V0
   \   000002   12....       LCALL     ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000005   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_501:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   F583         MOV       DPH,A
   \   000002   E0           MOVX      A,@DPTR
   \   000003   FE           MOV       R6,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   FF           MOV       R7,A
   \   000007                ; Setup parameters for call to function osal_build_uint32
   \   000007                ; Setup parameters for call to function osal_build_uint32
   \   000007   7904         MOV       R1,#0x4
   \   000009   EE           MOV       A,R6
   \   00000A   FA           MOV       R2,A
   \   00000B   EF           MOV       A,R7
   \   00000C   FB           MOV       R3,A
   \   00000D   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000010   EA           MOV       A,R2
   \   000011   F8           MOV       R0,A
   \   000012   EB           MOV       A,R3
   \   000013   F9           MOV       R1,A
   \   000014   EC           MOV       A,R4
   \   000015   FA           MOV       R2,A
   \   000016   ED           MOV       A,R5
   \   000017   FB           MOV       R3,A
   \   000018   22           RET
   1338          
   1339          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1340          /*********************************************************************
   1341           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1342           *
   1343           * @brief       This function finishes the processing of the Management
   1344           *              Network Discover Request and generates the response.
   1345           *
   1346           *   Note:      This function will limit the number of items returned
   1347           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1348           *
   1349           * @param       ResultCountSrcAddr - source of the request
   1350           * @param       msg - pointer to incoming message
   1351           * @param       SecurityUse -
   1352           *
   1353           * @return      none
   1354           */
   1355          void ZDO_FinishProcessingMgmtNwkDiscReq( byte ResultCount,
   1356                                                   networkDesc_t *NetworkList )
   1357          {
   1358            byte count, i;
   1359            networkDesc_t *newDesc = NULL, *pList = NetworkList;
   1360          
   1361            if ( ZSTACK_ROUTER_BUILD )
   1362            {
   1363              // Look for my PanID.
   1364              while ( pList )
   1365              {
   1366                if ( pList->panId == _NIB.nwkPanId )
   1367                {
   1368                  break;
   1369                }
   1370          
   1371          
   1372                if ( !pList->nextDesc )
   1373                {
   1374                  break;
   1375                }
   1376                pList = pList->nextDesc;
   1377              }
   1378          
   1379          
   1380              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1381              // prepend it.
   1382              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1383              {
   1384                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1385                if ( newDesc )
   1386                {
   1387                  byte pJoin;
   1388          
   1389                  newDesc->panId = _NIB.nwkPanId;
   1390                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1391                  newDesc->beaconOrder = _NIB.beaconOrder;
   1392                  newDesc->superFrameOrder = _NIB.superFrameOrder;
   1393                  newDesc->version = NLME_GetProtocolVersion();
   1394                  newDesc->stackProfile = zgStackProfile;
   1395                  //Extended PanID
   1396                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1397          
   1398                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   1399                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1400                                                     INVALID_NODE_ADDR);
   1401          
   1402                  newDesc->nextDesc = NetworkList;
   1403                  NetworkList = newDesc;
   1404                  ResultCount++;
   1405                }
   1406              }
   1407            }
   1408          
   1409            // Calc the count and apply a max count.
   1410            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   1411            {
   1412              count = 0;
   1413            }
   1414            else
   1415            {
   1416              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   1417              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   1418              {
   1419                count = ZDO_MAX_NWKDISC_ITEMS;
   1420              }
   1421          
   1422              // Move the list pointer up to the start index.
   1423              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   1424              {
   1425                NetworkList = NetworkList->nextDesc;
   1426              }
   1427            }
   1428          
   1429            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1430                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1431                                zdappMgmtNwkDiscStartIndex,
   1432                                count,
   1433                                NetworkList,
   1434                                false );
   1435          
   1436            if ( ZSTACK_ROUTER_BUILD )
   1437            {
   1438              if ( newDesc != NULL )
   1439              {
   1440                osal_mem_free( newDesc );
   1441              }
   1442            }
   1443          
   1444            NLME_NwkDiscTerm();
   1445          }
   1446          #endif
   1447          
   1448          /*********************************************************************
   1449           * @fn          ZDO_ProcessMgmtRtgReq
   1450           *
   1451           * @brief       This function finishes the processing of the Management
   1452           *              Routing Request and generates the response.
   1453           *
   1454           *   Note:      This function will limit the number of items returned
   1455           *              to ZDO_MAX_RTG_ITEMS items.
   1456           *
   1457           * @param       inMsg - incoming message (request)
   1458           *
   1459           * @return      none
   1460           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1461          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1462          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   1463            byte x;
   1464            byte maxNumItems;
   1465            byte numItems = 0;
   \   00000E   7E00         MOV       R6,#0x0
   1466            uint8 *pBuf = NULL;
   \   000010   8E..         MOV       ?V6,R6
   \   000012   8E..         MOV       ?V7,R6
   1467            rtgItem_t *pList;
   1468            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL     ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   000017   35..         ADDC      A,?V3
   \   000019   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   00001C   FF           MOV       R7,A
   1469          
   1470            // Get the number of table items
   1471            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   00001D                ; Setup parameters for call to function NLME_GetRequest
   \   00001D   AC..         MOV       R4,?XSP + 0
   \   00001F   AD..         MOV       R5,?XSP + 1
   \   000021   7A00         MOV       R2,#0x0
   \   000023   7B00         MOV       R3,#0x0
   \   000025   799D         MOV       R1,#-0x63
   \   000027   12....       LCALL     `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1472          
   1473            if ( maxNumItems > StartIndex )
   \   00002A   85..82       MOV       DPL,?XSP + 0
   \   00002D   85..83       MOV       DPH,?XSP + 1
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   EF           MOV       A,R7
   \   000033   C3           CLR       C
   \   000034   98           SUBB      A,R0
   \   000035   5068         JNC       ??ZDO_ProcessMgmtRtgReq_0
   1474            {
   1475              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000037   E0           MOVX      A,@DPTR
   \   000038   C3           CLR       C
   \   000039   9F           SUBB      A,R7
   \   00003A   FE           MOV       R6,A
   1476          
   1477              // limit the size of the list
   1478              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   00003B   C3           CLR       C
   \   00003C   940B         SUBB      A,#0xb
   \   00003E   4002         JC        ??ZDO_ProcessMgmtRtgReq_1
   1479              {
   1480                numItems = ZDO_MAX_RTG_ITEMS;
   \   000040   7E0A         MOV       R6,#0xa
   1481              }
   1482          
   1483              // Allocate the memory to build the table
   1484              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   000042                ; Setup parameters for call to function osal_mem_alloc
   \   000042   EE           MOV       A,R6
   \   000043   75F006       MOV       B,#0x6
   \   000046   A4           MUL       AB
   \   000047   FA           MOV       R2,A
   \   000048   ABF0         MOV       R3,B
   \   00004A   12....       LCALL     ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_429:
   \   00004D   8A..         MOV       ?V6,R2
   \   00004F   8B..         MOV       ?V7,R3
   1485          
   1486              if ( pBuf != NULL )
   \   000051   EA           MOV       A,R2
   \   000052   4B           ORL       A,R3
   \   000053   6048         JZ        ??ZDO_ProcessMgmtRtgReq_2
   1487              {
   1488                // Convert buffer to list
   1489                pList = (rtgItem_t *)pBuf;
   1490          
   1491                // Loop through items and build list
   1492                for ( x = 0; x < numItems; x++ )
   \   000055   75..00       MOV       ?V4,#0x0
   \   000058   8012         SJMP      ??ZDO_ProcessMgmtRtgReq_3
   1493                {
   1494                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   1495          
   1496                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1497                  switch( pList->status )
   1498                  {
   1499                    case RT_ACTIVE:
   1500                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   1501                      break;
   1502          
   1503                    case RT_DISC:
   1504                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   1505                      break;
   1506          
   1507                    case RT_LINK_FAIL:
   1508                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   00005A   7402         MOV       A,#0x2
   \   00005C   F0           MOVX      @DPTR,A
   1509          
   1510                    case RT_INIT:
   1511                    case RT_REPAIR:
   1512                    default:
   1513                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   00005D   7403         MOV       A,#0x3
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   00005F   F0           MOVX      @DPTR,A
   1514                      break;
   1515                  }
   1516          
   1517                  // Increment pointer to next record
   1518                  pList++;
   \   000060   E5..         MOV       A,?V0
   \   000062   2406         ADD       A,#0x6
   \   000064   F5..         MOV       ?V0,A
   \   000066   5002         JNC       ??ZDO_ProcessMgmtRtgReq_7
   \   000068   05..         INC       ?V1
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   00006A   05..         INC       ?V4
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   00006C   E5..         MOV       A,?V4
   \   00006E   C3           CLR       C
   \   00006F   9E           SUBB      A,R6
   \   000070   502D         JNC       ??ZDO_ProcessMgmtRtgReq_0
   \   000072                ; Setup parameters for call to function NLME_GetRequest
   \   000072   AC..         MOV       R4,?V0
   \   000074   AD..         MOV       R5,?V1
   \   000076   E5..         MOV       A,?V4
   \   000078   2F           ADD       A,R7
   \   000079   FA           MOV       R2,A
   \   00007A   E4           CLR       A
   \   00007B   3400         ADDC      A,#0x0
   \   00007D   FB           MOV       R3,A
   \   00007E   798B         MOV       R1,#-0x75
   \   000080   12....       LCALL     `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   000083   E5..         MOV       A,?V0
   \   000085   2405         ADD       A,#0x5
   \   000087   12....       LCALL     ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   14           DEC       A
   \   00008C   6008         JZ        ??ZDO_ProcessMgmtRtgReq_8
   \   00008E   14           DEC       A
   \   00008F   6008         JZ        ??ZDO_ProcessMgmtRtgReq_9
   \   000091   14           DEC       A
   \   000092   60C6         JZ        ??ZDO_ProcessMgmtRtgReq_4
   \   000094   80C7         SJMP      ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   000096   E4           CLR       A
   \   000097   80C6         SJMP      ??ZDO_ProcessMgmtRtgReq_6
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   000099   7401         MOV       A,#0x1
   \   00009B   80C2         SJMP      ??ZDO_ProcessMgmtRtgReq_6
   1519                }
   1520              }
   1521              else
   1522              {
   1523                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   00009D   7E00         MOV       R6,#0x0
   1524              }
   1525            }
   1526          
   1527            // Send response
   1528            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1529                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   00009F                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   00009F   75..00       MOV       ?V0,#0x0
   \   0000A2   78..         MOV       R0,#?V0
   \   0000A4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A7   78..         MOV       R0,#?V6
   \   0000A9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AC   EE           MOV       A,R6
   \   0000AD   F5..         MOV       ?V0,A
   \   0000AF   78..         MOV       R0,#?V0
   \   0000B1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B4   EF           MOV       A,R7
   \   0000B5   F5..         MOV       ?V0,A
   \   0000B7   78..         MOV       R0,#?V0
   \   0000B9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BC   7405         MOV       A,#0x5
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   FD           MOV       R5,A
   \   0000C3   7C00         MOV       R4,#0x0
   \   0000C5   E5..         MOV       A,?V2
   \   0000C7   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   0000CA   35..         ADDC      A,?V3
   \   0000CC   FB           MOV       R3,A
   \   0000CD   E5..         MOV       A,?V2
   \   0000CF   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   0000D2   35..         ADDC      A,?V3
   \   0000D4   F583         MOV       DPH,A
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   F9           MOV       R1,A
   \   0000D8   12....       LCALL     `??ZDP_MgmtRtgRsp::?relay`; Banked call to: ZDP_MgmtRtgRsp
   \   0000DB   7405         MOV       A,#0x5
   \   0000DD   12....       LCALL     ?DEALLOC_XSTACK8
   1530          
   1531            if ( pBuf )
   \   0000E0   E5..         MOV       A,?V6
   \   0000E2   45..         ORL       A,?V7
   \   0000E4   6007         JZ        ??ZDO_ProcessMgmtRtgReq_10
   1532            {
   1533              osal_mem_free( pBuf );
   \   0000E6                ; Setup parameters for call to function osal_mem_free
   \   0000E6   AA..         MOV       R2,?V6
   \   0000E8   AB..         MOV       R3,?V7
   \   0000EA   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1534            }
   1535          }
   \                     ??ZDO_ProcessMgmtRtgReq_10:
   \   0000ED   7401         MOV       A,#0x1
   \   0000EF                REQUIRE ?Subroutine8
   \   0000EF                ; // Fall through to label ?Subroutine8

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   02....       LJMP      ??Subroutine193_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine207_0:
   \   000000   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine162:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003                REQUIRE ??Subroutine218_0
   \   000003                ; // Fall through to label ??Subroutine218_0
   1536          
   1537          /*********************************************************************
   1538           * @fn          ZDO_ProcessMgmtBindReq
   1539           *
   1540           * @brief       This function finishes the processing of the Management
   1541           *              Bind Request and generates the response.
   1542           *
   1543           *   Note:      This function will limit the number of items returned
   1544           *              to ZDO_MAX_BIND_ITEMS items.
   1545           *
   1546           * @param       inMsg - incoming message (request)
   1547           *
   1548           * @return      none
   1549           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1550          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1551          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   1552          #if defined ( REFLECTOR )
   1553            byte x;
   1554            uint16 maxNumItems;
   1555            uint16 numItems;
   1556            uint8 *pBuf = NULL;
   \   00000E   75..00       MOV       ?V8,#0x0
   \   000011   75..00       MOV       ?V9,#0x0
   1557            apsBindingItem_t *pList;
   1558            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL     ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   000017   35..         ADDC      A,?V5
   \   000019   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   00001C   F5..         MOV       ?V2,A
   1559            uint8 status;
   1560          
   1561            // Get the number of table items
   1562            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \   00001E                ; Setup parameters for call to function APSME_GetRequest
   \   00001E   AC..         MOV       R4,?XSP + 0
   \   000020   AD..         MOV       R5,?XSP + 1
   \   000022   7A00         MOV       R2,#0x0
   \   000024   7B00         MOV       R3,#0x0
   \   000026   79A3         MOV       R1,#-0x5d
   \   000028   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1563          
   1564            if ( maxNumItems > StartIndex )
   \   00002B   AA..         MOV       R2,?V2
   \   00002D   85..82       MOV       DPL,?XSP + 0
   \   000030   85..83       MOV       DPH,?XSP + 1
   \   000033   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   000036   C3           CLR       C
   \   000037   EA           MOV       A,R2
   \   000038   98           SUBB      A,R0
   \   000039   E4           CLR       A
   \   00003A   99           SUBB      A,R1
   \   00003B   5072         JNC       ??ZDO_ProcessMgmtBindReq_0
   1565            {
   1566              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   00003D   85..82       MOV       DPL,?XSP + 0
   \   000040   85..83       MOV       DPH,?XSP + 1
   \   000043   E0           MOVX      A,@DPTR
   \   000044   C3           CLR       C
   \   000045   9A           SUBB      A,R2
   \   000046   FE           MOV       R6,A
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   9400         SUBB      A,#0x0
   \   00004B   FF           MOV       R7,A
   1567            }
   1568            else
   1569            {
   1570              numItems = 0;
   1571            }
   1572          
   1573            // limit the size of the list
   1574            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \   00004C   C3           CLR       C
   \   00004D   EE           MOV       A,R6
   \   00004E   9404         SUBB      A,#0x4
   \   000050   EF           MOV       A,R7
   \   000051   9400         SUBB      A,#0x0
   \   000053   4006         JC        ??ZDO_ProcessMgmtBindReq_1
   1575            {
   1576              numItems = ZDO_MAX_BIND_ITEMS;
   \   000055   7E03         MOV       R6,#0x3
   \   000057   7F00         MOV       R7,#0x0
   \   000059   8004         SJMP      ??ZDO_ProcessMgmtBindReq_2
   1577            }
   1578          
   1579            // Allocate the memory to build the table
   1580            if ( numItems && (pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems )) )
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   00005B   EE           MOV       A,R6
   \   00005C   4F           ORL       A,R7
   \   00005D   6050         JZ        ??ZDO_ProcessMgmtBindReq_0
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   00005F                ; Setup parameters for call to function osal_mem_alloc
   \   00005F   EE           MOV       A,R6
   \   000060   FA           MOV       R2,A
   \   000061   EF           MOV       A,R7
   \   000062   FB           MOV       R3,A
   \   000063   EA           MOV       A,R2
   \   000064   75F015       MOV       B,#0x15
   \   000067   A4           MUL       AB
   \   000068   FA           MOV       R2,A
   \   000069   A8F0         MOV       R0,B
   \   00006B   75F015       MOV       B,#0x15
   \   00006E   EB           MOV       A,R3
   \   00006F   A4           MUL       AB
   \   000070   28           ADD       A,R0
   \   000071   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   000074   8A..         MOV       ?V8,R2
   \   000076   8B..         MOV       ?V9,R3
   \   000078   EA           MOV       A,R2
   \   000079   4B           ORL       A,R3
   \   00007A   6033         JZ        ??ZDO_ProcessMgmtBindReq_0
   1581            {
   1582              status = ZSuccess;
   \   00007C   75..00       MOV       ?V3,#0x0
   1583          
   1584              // Convert buffer to list
   1585              pList = (apsBindingItem_t *)pBuf;
   1586          
   1587              // Loop through items and build list
   1588              for ( x = 0; x < numItems; x++ )
   \   00007F   75..00       MOV       ?V6,#0x0
   \   000082   801F         SJMP      ??ZDO_ProcessMgmtBindReq_3
   1589              {
   1590                APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   000084                ; Setup parameters for call to function APSME_GetRequest
   \   000084   AC..         MOV       R4,?V0
   \   000086   AD..         MOV       R5,?V1
   \   000088   A8..         MOV       R0,?V2
   \   00008A   E5..         MOV       A,?V6
   \   00008C   28           ADD       A,R0
   \   00008D   FA           MOV       R2,A
   \   00008E   E4           CLR       A
   \   00008F   3400         ADDC      A,#0x0
   \   000091   FB           MOV       R3,A
   \   000092   79A2         MOV       R1,#-0x5e
   \   000094   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1591                pList++;
   \   000097   E5..         MOV       A,?V0
   \   000099   2415         ADD       A,#0x15
   \   00009B   F5..         MOV       ?V0,A
   \   00009D   5002         JNC       ??ZDO_ProcessMgmtBindReq_5
   \   00009F   05..         INC       ?V1
   1592              }
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   0000A1   05..         INC       ?V6
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   0000A3   C3           CLR       C
   \   0000A4   E5..         MOV       A,?V6
   \   0000A6   9E           SUBB      A,R6
   \   0000A7   E4           CLR       A
   \   0000A8   9F           SUBB      A,R7
   \   0000A9   40D9         JC        ??ZDO_ProcessMgmtBindReq_4
   \   0000AB   EE           MOV       A,R6
   \   0000AC   F9           MOV       R1,A
   \   0000AD   8005         SJMP      ??ZDO_ProcessMgmtBindReq_6
   1593          
   1594            }
   1595            else
   1596            {
   1597              status = ZDP_NOT_PERMITTED;
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   0000AF   75..8B       MOV       ?V3,#-0x75
   1598              numItems = 0;
   \   0000B2   7900         MOV       R1,#0x0
   1599            }
   1600          
   1601            // Send response
   1602            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1603                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_6:
   \   0000B4                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   0000B4   75..00       MOV       ?V0,#0x0
   \   0000B7   78..         MOV       R0,#?V0
   \   0000B9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BC   78..         MOV       R0,#?V8
   \   0000BE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C1   E9           MOV       A,R1
   \   0000C2   F5..         MOV       ?V0,A
   \   0000C4   78..         MOV       R0,#?V0
   \   0000C6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C9   E5..         MOV       A,?V2
   \   0000CB   F5..         MOV       ?V0,A
   \   0000CD   78..         MOV       R0,#?V0
   \   0000CF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D2   7405         MOV       A,#0x5
   \   0000D4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   FD           MOV       R5,A
   \   0000D9   AC..         MOV       R4,?V3
   \   0000DB   E5..         MOV       A,?V4
   \   0000DD   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   0000E0   35..         ADDC      A,?V5
   \   0000E2   FB           MOV       R3,A
   \   0000E3   E5..         MOV       A,?V4
   \   0000E5   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   0000E8   35..         ADDC      A,?V5
   \   0000EA   F583         MOV       DPH,A
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   F9           MOV       R1,A
   \   0000EE   12....       LCALL     `??ZDP_MgmtBindRsp::?relay`; Banked call to: ZDP_MgmtBindRsp
   \   0000F1   7405         MOV       A,#0x5
   \   0000F3   12....       LCALL     ?DEALLOC_XSTACK8
   1604          
   1605            if ( pBuf )
   \   0000F6   E5..         MOV       A,?V8
   \   0000F8   45..         ORL       A,?V9
   \   0000FA   6007         JZ        ??ZDO_ProcessMgmtBindReq_7
   1606            {
   1607              osal_mem_free( pBuf );
   \   0000FC                ; Setup parameters for call to function osal_mem_free
   \   0000FC   AA..         MOV       R2,?V8
   \   0000FE   AB..         MOV       R3,?V9
   \   000100   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1608            }
   1609          #else
   1610            (void)inMsg;
   1611          #endif
   1612          }
   \                     ??ZDO_ProcessMgmtBindReq_7:
   \   000103   7402         MOV       A,#0x2
   \   000105   02....       LJMP      ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine207_0
   \   000001                ; // Fall through to label ??Subroutine207_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine209_0
   \   000003                ; // Fall through to label ??Subroutine209_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine209_0:
   \   000000   7F0A         MOV       R7,#0xa
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1613          
   1614          /*********************************************************************
   1615           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1616           *
   1617           * @brief       This function finishes the processing of the Management
   1618           *              Direct Join Request and generates the response.
   1619           *
   1620           * @param       inMsg - incoming message (request)
   1621           *
   1622           * @return      none
   1623           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1624          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1625          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine107 & 0xFFFF
   1626            uint8 *deviceAddr;
   1627            uint8 capInfo;
   1628            uint8 stat;
   1629          
   1630            // Parse the message
   1631            deviceAddr = inMsg->asdu;
   1632            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   1633          
   1634            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \                     ??CrossCallReturnLabel_348:
   \   00000D   F583         MOV       DPH,A
   \   00000F   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   000012                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   000012   8A82         MOV       DPL,R2
   \   000014   F583         MOV       DPH,A
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F9           MOV       R1,A
   \   000020   12....       LCALL     `??NLME_DirectJoinRequest::?relay`; Banked call to: NLME_DirectJoinRequest
   \   000023   E9           MOV       A,R1
   \   000024   85..82       MOV       DPL,?XSP + 0
   \   000027   85..83       MOV       DPH,?XSP + 1
   \   00002A   F0           MOVX      @DPTR,A
   1635          
   1636            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   00002B                ; Setup parameters for call to function ZDP_SendData
   \   00002B   75..00       MOV       ?V0,#0x0
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000033   7401         MOV       A,#0x1
   \   000035   12....       LCALL     ?XSTACK_DISP100_8
   \   000038   88..         MOV       ?V0,R0
   \   00003A   89..         MOV       ?V1,R1
   \   00003C   78..         MOV       R0,#?V0
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000041   75..35       MOV       ?V0,#0x35
   \   000044   75..80       MOV       ?V1,#-0x80
   \   000047   78..         MOV       R0,#?V0
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004C   7901         MOV       R1,#0x1
   \   00004E   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000051   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
   1637          }
   \   000057                REQUIRE ?Subroutine9
   \   000057                ; // Fall through to label ?Subroutine9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7401         MOV       A,#0x1
   \   000002   02....       LJMP      ??Subroutine173_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000004                REQUIRE ??Subroutine190_0
   \   000004                ; // Fall through to label ??Subroutine190_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   EE           MOV       A,R6
   \   000001   240F         ADD       A,#0xf
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   FB           MOV       R3,A
   \   000007   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00000A   7405         MOV       A,#0x5
   \   00000C   22           RET
   1638          
   1639          /*********************************************************************
   1640           * @fn          ZDO_ProcessMgmtLeaveReq
   1641           *
   1642           * @brief       This function processes a Management Leave Request
   1643           *              and generates the response.
   1644           *
   1645           * @param       inMsg - incoming message (request)
   1646           *
   1647           * @return      none
   1648           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1649          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1650          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine109 & 0xFFFF
   1651            NLME_LeaveReq_t req;
   1652            ZStatus_t       status;
   1653            uint8           option;
   1654            uint8 *msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_374:
   \   00000D   35..         ADDC      A,?V1
   \   00000F   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_476:
   \   000012   FF           MOV       R7,A
   1655          
   1656            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1657                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \   000013                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000013   EE           MOV       A,R6
   \   000014   FA           MOV       R2,A
   \   000015   EF           MOV       A,R7
   \   000016   FB           MOV       R3,A
   \   000017   12....       LCALL     `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   00001A   E9           MOV       A,R1
   \   00001B   6017         JZ        ??ZDO_ProcessMgmtLeaveReq_0
   \   00001D                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001D   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000020   8A..         MOV       ?V2,R2
   \   000022   8B..         MOV       ?V3,R3
   \   000024   AC..         MOV       R4,?V2
   \   000026   AD..         MOV       R5,?V3
   \   000028                ; Setup parameters for call to function sAddrExtCmp
   \   000028   EE           MOV       A,R6
   \   000029   FA           MOV       R2,A
   \   00002A   EF           MOV       A,R7
   \   00002B   FB           MOV       R3,A
   \   00002C   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00002F   E9           MOV       A,R1
   \   000030   6401         XRL       A,#0x1
   \   000032   700A         JNZ       ??ZDO_ProcessMgmtLeaveReq_1
   1658            {
   1659              // Remove this device
   1660              req.extAddr = NULL;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   000034   7401         MOV       A,#0x1
   \   000036   12....       LCALL     ?XSTACK_DISP0_8
   \   000039   E4           CLR       A
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   A3           INC       DPTR
   \   00003C   8009         SJMP      ??ZDO_ProcessMgmtLeaveReq_2
   1661            }
   1662            else
   1663            {
   1664              // Remove child device
   1665              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   00003E   7401         MOV       A,#0x1
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   EE           MOV       A,R6
   \   000044   F0           MOVX      @DPTR,A
   \   000045   A3           INC       DPTR
   \   000046   EF           MOV       A,R7
   1666            }
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   000047   12....       LCALL     ?Subroutine17 & 0xFFFF
   1667          
   1668            option = msg[Z_EXTADDR_LEN];
   \                     ??CrossCallReturnLabel_12:
   \   00004A   F8           MOV       R0,A
   1669            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   00004B   A2E6         MOV       C,0xE0 /* A   */.6
   \   00004D   5008         JNC       ??ZDO_ProcessMgmtLeaveReq_3
   1670            {
   1671              req.removeChildren = TRUE;
   \   00004F   7403         MOV       A,#0x3
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   7401         MOV       A,#0x1
   \   000056   F0           MOVX      @DPTR,A
   1672            }
   1673          
   1674            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   000057   E8           MOV       A,R0
   \   000058   A2E7         MOV       C,0xE0 /* A   */.7
   \   00005A   5008         JNC       ??ZDO_ProcessMgmtLeaveReq_4
   1675            {
   1676               req.rejoin = TRUE;
   \   00005C   7404         MOV       A,#0x4
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   7401         MOV       A,#0x1
   \   000063   F0           MOVX      @DPTR,A
   1677            }
   1678          
   1679            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   000064   7405         MOV       A,#0x5
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   E4           CLR       A
   \   00006A   F0           MOVX      @DPTR,A
   1680          
   1681            status = NLME_LeaveReq( &req );
   \   00006B                ; Setup parameters for call to function NLME_LeaveReq
   \   00006B   04           INC       A
   \   00006C   12....       LCALL     ?XSTACK_DISP101_8
   \   00006F   12....       LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   000072   E9           MOV       A,R1
   \   000073   85..82       MOV       DPL,?XSP + 0
   \   000076   85..83       MOV       DPH,?XSP + 1
   \   000079   F0           MOVX      @DPTR,A
   1682          
   1683            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   00007A                ; Setup parameters for call to function ZDP_SendData
   \   00007A   75..00       MOV       ?V2,#0x0
   \   00007D   78..         MOV       R0,#?V2
   \   00007F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000082   7401         MOV       A,#0x1
   \   000084   12....       LCALL     ?XSTACK_DISP100_8
   \   000087   88..         MOV       ?V2,R0
   \   000089   89..         MOV       ?V3,R1
   \   00008B   78..         MOV       R0,#?V2
   \   00008D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000090   75..34       MOV       ?V2,#0x34
   \   000093   75..80       MOV       ?V3,#-0x80
   \   000096   78..         MOV       R0,#?V2
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009B   7901         MOV       R1,#0x1
   \   00009D   E5..         MOV       A,?V0
   \   00009F   2402         ADD       A,#0x2
   \   0000A1   FC           MOV       R4,A
   \   0000A2   E4           CLR       A
   \   0000A3   35..         ADDC      A,?V1
   \   0000A5   FD           MOV       R5,A
   \   0000A6   E5..         MOV       A,?V0
   \   0000A8   240F         ADD       A,#0xf
   \   0000AA   FA           MOV       R2,A
   \   0000AB   E4           CLR       A
   \   0000AC   35..         ADDC      A,?V1
   \   0000AE   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   0000B1   12....       LCALL     ?DEALLOC_XSTACK8
   1684          }
   \   0000B4   7406         MOV       A,#0x6
   \   0000B6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B9                REQUIRE ?Subroutine1
   \   0000B9                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET
   1685          
   1686          
   1687          /*********************************************************************
   1688           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1689           *
   1690           * @brief       This function processes a Management Permit Join Request
   1691           *              and generates the response.
   1692           *
   1693           * @param       inMsg - incoming message (request)
   1694           *
   1695           * @return      none
   1696           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1697          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1698          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine107 & 0xFFFF
   1699            uint8 stat;
   1700            uint8 duration;
   1701            uint8 tcsig;
   1702          
   1703            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   1704            tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   1705          
   1706            // Set the network layer permit join duration
   1707            stat = (byte) NLME_PermitJoiningRequest( duration );
   \                     ??CrossCallReturnLabel_349:
   \   00000D   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   000010   F9           MOV       R1,A
   \   000011   12....       LCALL     `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \   000014   E9           MOV       A,R1
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   F0           MOVX      @DPTR,A
   1708          
   1709            // Handle the Trust Center Significance
   1710            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1711            {
   1712              if ( tcsig == TRUE )
   1713              {
   1714                ZDSecMgrPermitJoining( duration );
   1715              }
   1716            }
   1717          
   1718            // Send a response if unicast
   1719            if (inMsg->srcAddr.addr.shortAddr != NWK_BROADCAST_SHORTADDR)
   \   00001C   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   00001F   8C82         MOV       DPL,R4
   \   000021   F583         MOV       DPH,A
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F4           CPL       A
   \   000025   7003         JNZ       ??ZDO_ProcessMgmtPermitJoinReq_0
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F4           CPL       A
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   00002A   6029         JZ        ??ZDO_ProcessMgmtPermitJoinReq_1
   1720            {
   1721              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   00002C                ; Setup parameters for call to function ZDP_SendData
   \   00002C   75..00       MOV       ?V0,#0x0
   \   00002F   78..         MOV       R0,#?V0
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000034   7401         MOV       A,#0x1
   \   000036   12....       LCALL     ?XSTACK_DISP100_8
   \   000039   88..         MOV       ?V0,R0
   \   00003B   89..         MOV       ?V1,R1
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000042   75..36       MOV       ?V0,#0x36
   \   000045   75..80       MOV       ?V1,#-0x80
   \   000048   78..         MOV       R0,#?V0
   \   00004A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004D   7901         MOV       R1,#0x1
   \   00004F   12....       LCALL     ?Subroutine110 & 0xFFFF
   1722            }
   \                     ??CrossCallReturnLabel_164:
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
   1723          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_1:
   \   000055   02....       LJMP      ?Subroutine9 & 0xFFFF
   1724          
   1725          /*
   1726           * This function stub allows the next higher layer to be notified of
   1727           * a permit joining timeout.
   1728           */
   1729          /*********************************************************************
   1730           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   1731           *
   1732           * @brief       This function stub allows the next higher layer to be
   1733           *              notified of a permit joining timeout. Currently, this
   1734           *              directly bypasses the APS layer.
   1735           *
   1736           * @param       none
   1737           *
   1738           * @return      none
   1739           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1740          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   1741          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1742            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   1743            // Currently, only the ZDSecMgr needs to be notified
   1744            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1745            {
   1746              ZDSecMgrPermitJoiningTimeout();
   1747            }
   1748            #endif
   1749          }
   \   000000   02....       LJMP      ?BRET
   1750          
   1751          /*********************************************************************
   1752           * @fn          ZDO_ProcessUserDescReq
   1753           *
   1754           * @brief       This function finishes the processing of the User
   1755           *              Descriptor Request and generates the response.
   1756           *
   1757           * @param       inMsg - incoming message (request)
   1758           *
   1759           * @return      none
   1760           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1761          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   1762          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine78 & 0xFFFF
   1763            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??CrossCallReturnLabel_107:
   \   00000D   F8           MOV       R0,A
   \   00000E   E4           CLR       A
   \   00000F   C8           XCH       A,R0
   \   000010   F9           MOV       R1,A
   \   000011   EA           MOV       A,R2
   \   000012   28           ADD       A,R0
   \   000013   F5..         MOV       ?V4,A
   \   000015   E4           CLR       A
   \   000016   39           ADDC      A,R1
   \   000017   F5..         MOV       ?V5,A
   1764            UserDescriptorFormat_t userDesc;
   1765          
   1766            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   1767                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \   000019   EE           MOV       A,R6
   \   00001A   240F         ADD       A,#0xf
   \   00001C   F5..         MOV       ?V2,A
   \   00001E   E4           CLR       A
   \   00001F   3F           ADDC      A,R7
   \   000020   F5..         MOV       ?V3,A
   \   000022   EE           MOV       A,R6
   \   000023   2402         ADD       A,#0x2
   \   000025   F5..         MOV       ?V0,A
   \   000027   E4           CLR       A
   \   000028   3F           ADDC      A,R7
   \   000029   F5..         MOV       ?V1,A
   \   00002B   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   6A           XRL       A,R2
   \   000030   7003         JNZ       ??ZDO_ProcessUserDescReq_0
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   69           XRL       A,R1
   \                     ??ZDO_ProcessUserDescReq_0:
   \   000035   705B         JNZ       ??ZDO_ProcessUserDescReq_1
   \   000037                ; Setup parameters for call to function osal_nv_read
   \   000037   A8..         MOV       R0,?XSP + 0
   \   000039   A9..         MOV       R1,?XSP + 1
   \   00003B   88..         MOV       ?V6,R0
   \   00003D   89..         MOV       ?V7,R1
   \   00003F   78..         MOV       R0,#?V6
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000044   75..11       MOV       ?V6,#0x11
   \   000047   75..00       MOV       ?V7,#0x0
   \   00004A   78..         MOV       R0,#?V6
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   7C00         MOV       R4,#0x0
   \   000051   7D00         MOV       R5,#0x0
   \   000053   7A81         MOV       R2,#-0x7f
   \   000055   7B00         MOV       R3,#0x0
   \   000057   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00005A   7404         MOV       A,#0x4
   \   00005C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005F   E9           MOV       A,R1
   \   000060   7030         JNZ       ??ZDO_ProcessUserDescReq_1
   1768            {
   1769              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   000062                ; Setup parameters for call to function ZDP_UserDescRsp
   \   000062   75..00       MOV       ?V6,#0x0
   \   000065   78..         MOV       R0,#?V6
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006A   7401         MOV       A,#0x1
   \   00006C   12....       LCALL     ?XSTACK_DISP100_8
   \   00006F   88..         MOV       ?V6,R0
   \   000071   89..         MOV       ?V7,R1
   \   000073   78..         MOV       R0,#?V6
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000078   AC..         MOV       R4,?V4
   \   00007A   AD..         MOV       R5,?V5
   \   00007C   AA..         MOV       R2,?V0
   \   00007E   AB..         MOV       R3,?V1
   \   000080   85..82       MOV       DPL,?V2
   \   000083   85..83       MOV       DPH,?V3
   \   000086   E0           MOVX      A,@DPTR
   \   000087   F9           MOV       R1,A
   \   000088   12....       LCALL     `??ZDP_UserDescRsp::?relay`; Banked call to: ZDP_UserDescRsp
   \   00008B   7403         MOV       A,#0x3
   \   00008D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000090   802A         SJMP      ??ZDO_ProcessUserDescReq_2
   1770            }
   1771            else
   1772            {
   1773              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
   1774                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   000092                ; Setup parameters for call to function ZDP_GenericRsp
   \   000092   75..11       MOV       ?V6,#0x11
   \   000095   75..80       MOV       ?V7,#-0x80
   \   000098   78..         MOV       R0,#?V6
   \   00009A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009D   78..         MOV       R0,#?V4
   \   00009F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A2   12....       LCALL     ?Subroutine97 & 0xFFFF
   1775            }
   \                     ??CrossCallReturnLabel_322:
   \   0000A5   FD           MOV       R5,A
   \   0000A6   7C84         MOV       R4,#-0x7c
   \   0000A8   AA..         MOV       R2,?V0
   \   0000AA   AB..         MOV       R3,?V1
   \   0000AC   85..82       MOV       DPL,?V2
   \   0000AF   85..83       MOV       DPH,?V3
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   F9           MOV       R1,A
   \   0000B4   12....       LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   0000B7   7404         MOV       A,#0x4
   \   0000B9   12....       LCALL     ?DEALLOC_XSTACK8
   1776          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   0000BC   7411         MOV       A,#0x11
   \   0000BE   02....       LJMP      ?Subroutine8 & 0xFFFF
   1777          
   1778          /*********************************************************************
   1779           * @fn          ZDO_ProcessUserDescSet
   1780           *
   1781           * @brief       This function finishes the processing of the User
   1782           *              Descriptor Set and generates the response.
   1783           *
   1784           * @param       inMsg - incoming message (request)
   1785           *
   1786           * @return      none
   1787           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1788          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   1789          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   1790            uint8 *msg;
   1791            uint16 aoi;
   1792            UserDescriptorFormat_t userDesc;
   1793            uint8 outMsg[3];
   1794            uint8 status;
   1795          
   1796            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   000011   35..         ADDC      A,?V3
   \   000013   12....       LCALL     ?Subroutine71 & 0xFFFF
   1797            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_96:
   \   000016   FA           MOV       R2,A
   \   000017   E4           CLR       A
   \   000018   CA           XCH       A,R2
   \   000019   FB           MOV       R3,A
   \   00001A   EC           MOV       A,R4
   \   00001B   2A           ADD       A,R2
   \   00001C   FE           MOV       R6,A
   \   00001D   E4           CLR       A
   \   00001E   3B           ADDC      A,R3
   \   00001F   FF           MOV       R7,A
   1798          
   1799            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000020   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6E           XRL       A,R6
   \   000025   7003         JNZ       ??ZDO_ProcessUserDescSet_0
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   6F           XRL       A,R7
   \                     ??ZDO_ProcessUserDescSet_0:
   \   00002A   6003         JZ        $+5
   \   00002C   02....       LJMP      ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   1800            {
   1801              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   00002F   8882         MOV       DPL,R0
   \   000031   8983         MOV       DPH,R1
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   FA           MOV       R2,A
   \   000037   9410         SUBB      A,#0x10
   \   000039   5004         JNC       ??ZDO_ProcessUserDescSet_2
   \   00003B   8A..         MOV       ?V0,R2
   \   00003D   8003         SJMP      ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   00003F   75..10       MOV       ?V0,#0x10
   \                     ??ZDO_ProcessUserDescSet_3:
   \   000042   7404         MOV       A,#0x4
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   E5..         MOV       A,?V0
   \   000049   12....       LCALL     ?Subroutine27 & 0xFFFF
   1802              msg ++;  // increment one for the length field
   1803          
   1804              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \                     ??CrossCallReturnLabel_29:
   \   00004C   A982         MOV       R1,DPL
   \   00004E   AA83         MOV       R2,DPH
   \   000050   89..         MOV       ?V4,R1
   \   000052   8A..         MOV       ?V5,R2
   \   000054   75..00       MOV       ?V6,#0x0
   \   000057   78..         MOV       R0,#?V4
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00005C   7407         MOV       A,#0x7
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   E0           MOVX      A,@DPTR
   \   000062   FC           MOV       R4,A
   \   000063   7D00         MOV       R5,#0x0
   \   000065   7408         MOV       A,#0x8
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   AA82         MOV       R2,DPL
   \   00006C   AB83         MOV       R3,DPH
   \   00006E   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_489:
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   1805              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   000074                ; Setup parameters for call to function osal_nv_write
   \   000074   7404         MOV       A,#0x4
   \   000076   12....       LCALL     ?XSTACK_DISP100_8
   \   000079   88..         MOV       ?V4,R0
   \   00007B   89..         MOV       ?V5,R1
   \   00007D   78..         MOV       R0,#?V4
   \   00007F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000082   75..11       MOV       ?V4,#0x11
   \   000085   75..00       MOV       ?V5,#0x0
   \   000088   78..         MOV       R0,#?V4
   \   00008A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008D   7C00         MOV       R4,#0x0
   \   00008F   7D00         MOV       R5,#0x0
   \   000091   7A81         MOV       R2,#-0x7f
   \   000093   7B00         MOV       R3,#0x0
   \   000095   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000098   7404         MOV       A,#0x4
   \   00009A   12....       LCALL     ?DEALLOC_XSTACK8
   1806              if ( userDesc.len != 0 )
   \   00009D   7404         MOV       A,#0x4
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   0000A6   6005         JZ        ??ZDO_ProcessUserDescSet_4
   1807              {
   1808                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   D2E4         SETB      0xE0 /* A   */.4
   \   0000AB   8003         SJMP      ??ZDO_ProcessUserDescSet_5
   1809              }
   1810              else
   1811              {
   1812                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   C2E4         CLR       0xE0 /* A   */.4
   \                     ??ZDO_ProcessUserDescSet_5:
   \   0000B0   F0           MOVX      @DPTR,A
   1813              }
   1814          
   1815              status = ZDP_SUCCESS;
   \   0000B1   85..82       MOV       DPL,?XSP + 0
   \   0000B4   85..83       MOV       DPH,?XSP + 1
   \   0000B7   E4           CLR       A
   \   0000B8   8008         SJMP      ??ZDO_ProcessUserDescSet_6
   1816            }
   1817            else
   1818            {
   1819              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   0000BA   85..82       MOV       DPL,?XSP + 0
   \   0000BD   85..83       MOV       DPH,?XSP + 1
   \   0000C0   7484         MOV       A,#-0x7c
   \                     ??ZDO_ProcessUserDescSet_6:
   \   0000C2   F0           MOVX      @DPTR,A
   1820            }
   1821          
   1822            outMsg[0] = status;
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   C0E0         PUSH      A
   \   0000C6   7401         MOV       A,#0x1
   \   0000C8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CB   D0E0         POP       A
   \   0000CD   F0           MOVX      @DPTR,A
   1823            outMsg[1] = LO_UINT16( aoi );
   \   0000CE   7402         MOV       A,#0x2
   \   0000D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D3   EE           MOV       A,R6
   \   0000D4   F0           MOVX      @DPTR,A
   1824            outMsg[2] = LO_UINT16( aoi );
   \   0000D5   7403         MOV       A,#0x3
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   EE           MOV       A,R6
   \   0000DB   F0           MOVX      @DPTR,A
   1825          
   1826            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
   1827                         inMsg->SecurityUse );
   \   0000DC                ; Setup parameters for call to function ZDP_SendData
   \   0000DC   E5..         MOV       A,?V2
   \   0000DE   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   0000E1   35..         ADDC      A,?V3
   \   0000E3   F583         MOV       DPH,A
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   F5..         MOV       ?V1,A
   \   0000E8   78..         MOV       R0,#?V1
   \   0000EA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000ED   7402         MOV       A,#0x2
   \   0000EF   12....       LCALL     ?XSTACK_DISP100_8
   \   0000F2   88..         MOV       ?V4,R0
   \   0000F4   89..         MOV       ?V5,R1
   \   0000F6   78..         MOV       R0,#?V4
   \   0000F8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FB   75..14       MOV       ?V4,#0x14
   \   0000FE   75..80       MOV       ?V5,#-0x80
   \   000101   78..         MOV       R0,#?V4
   \   000103   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000106   7903         MOV       R1,#0x3
   \   000108   E5..         MOV       A,?V2
   \   00010A   2402         ADD       A,#0x2
   \   00010C   FC           MOV       R4,A
   \   00010D   E4           CLR       A
   \   00010E   35..         ADDC      A,?V3
   \   000110   FD           MOV       R5,A
   \   000111   E5..         MOV       A,?V2
   \   000113   240F         ADD       A,#0xf
   \   000115   FA           MOV       R2,A
   \   000116   E4           CLR       A
   \   000117   35..         ADDC      A,?V3
   \   000119   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   00011C   12....       LCALL     ?DEALLOC_XSTACK8
   1828          }
   \   00011F   7415         MOV       A,#0x15
   \   000121   12....       LCALL     ?DEALLOC_XSTACK8
   \   000124   7F07         MOV       R7,#0x7
   \   000126   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   12....       LCALL     ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine164:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine215_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET
   1829          
   1830          /*********************************************************************
   1831           * @fn          ZDO_ProcessDeviceAnnce
   1832           *
   1833           * @brief       This function processes a device annouce message.
   1834           *
   1835           * @param       inMsg - incoming message
   1836           *
   1837           * @return      none
   1838           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1839          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessDeviceAnnce:
   1840          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 32
   \   000004   74E0         MOV       A,#-0x20
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   1841            ZDO_DeviceAnnce_t Annce;
   1842            AddrMgrEntry_t addrEntry;
   1843            uint8 parentExt[Z_EXTADDR_LEN];
   1844          
   1845            // Parse incoming message
   1846            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \   000009                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   000009   7415         MOV       A,#0x15
   \   00000B   12....       LCALL     ?XSTACK_DISP102_8
   \   00000E   12....       LCALL     `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   1847          
   1848            if ( ZSTACK_END_DEVICE_BUILD )
   1849            {
   1850              // Make sure the message didn't come from myself - end device only
   1851              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   1852              {
   1853                return;
   1854              }
   1855            }
   1856          
   1857          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1858            // Clean up the neighbor table
   1859            nwkNeighborRemoveAllStranded();
   1860          
   1861            // If address conflict is detected, no need to update the address manager
   1862            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   1863            {
   1864              return;
   1865            }
   1866          #endif
   1867          
   1868          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1869            // Check for parent's address
   1870            NLME_GetCoordExtAddr( parentExt );
   1871            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   1872            {
   1873              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   1874              {
   1875                // Set the Parent's MAC's new short address
   1876                _NIB.nwkCoordAddress = Annce.nwkAddr;
   1877                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   1878              }
   1879            }
   1880          
   1881            if ( ZSTACK_ROUTER_BUILD )
   1882            {
   1883              // If the device annce comes from a end device child that has moved
   1884              // to another parent, remove it from associated device list
   1885          
   1886              // If the dev annce is coming from other device's children,
   1887              // (The dev annce from its own children shall be unicast to itself,
   1888              // So check the mac destination address)
   1889              // Remove it from the associated device list. If it is not
   1890              // a child, no action will be taken in AssocRemove() anyway.
   1891              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   1892              {
   1893                associated_devices_t *dev_ptr;
   1894          
   1895                // If it's an end device child
   1896                dev_ptr = AssocGetWithExt( Annce.extAddr );
   1897                if ( dev_ptr )
   1898                {
   1899                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   1900                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   1901                  {
   1902                    AssocRemove( Annce.extAddr );
   1903                  }
   1904                }
   1905              }
   1906          
   1907              if ( Annce.nwkAddr != NLME_GetShortAddr() )
   1908              {
   1909                // If an associated device is found with matched extended Address,
   1910                // update its short address
   1911                if ( AssocChangeNwkAddr( Annce.nwkAddr, Annce.extAddr ) )
   1912                {
   1913                  // Update the neighbor table
   1914                  nwkNeighborUpdateNwkAddr( Annce.nwkAddr, Annce.extAddr );
   1915          
   1916                  // Set event to save NV
   1917                  ZDApp_NVUpdate();
   1918                }
   1919              }
   1920            }
   1921            
   1922            // Assume that the device has moved, remove existing routing entries
   1923            RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
   1924            
   1925          #endif // ZIGBEE_STOCHASTIC_ADDRESSING
   1926          
   1927          
   1928            // Fill in the extended address in address manager if we don't have it already.
   1929            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000011   85..82       MOV       DPL,?XSP + 0
   \   000014   85..83       MOV       DPH,?XSP + 1
   \   000017   E4           CLR       A
   \   000018   F0           MOVX      @DPTR,A
   1930            addrEntry.nwkAddr = Annce.nwkAddr;
   \   000019   7415         MOV       A,#0x15
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   12....       LCALL     ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   E8           MOV       A,R0
   \   000025   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   1931            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \                     ??CrossCallReturnLabel_535:
   \   000028                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000028   AA..         MOV       R2,?XSP + 0
   \   00002A   AB..         MOV       R3,?XSP + 1
   \   00002C   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00002F   E9           MOV       A,R1
   \   000030   6033         JZ        ??CrossCallReturnLabel_195
   1932            {
   1933              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   000032                ; Setup parameters for call to function osal_memset
   \   000032   7C08         MOV       R4,#0x8
   \   000034   7D00         MOV       R5,#0x0
   \   000036   7900         MOV       R1,#0x0
   \   000038   740D         MOV       A,#0xd
   \   00003A   12....       LCALL     ?XSTACK_DISP101_8
   \   00003D   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1934              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   000040                ; Setup parameters for call to function sAddrExtCmp
   \   000040   7403         MOV       A,#0x3
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   AC82         MOV       R4,DPL
   \   000047   AD83         MOV       R5,DPH
   \   000049   740D         MOV       A,#0xd
   \   00004B   12....       LCALL     ?XSTACK_DISP101_8
   \   00004E   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000051   E9           MOV       A,R1
   \   000052   6011         JZ        ??CrossCallReturnLabel_195
   1935              {
   1936                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   000054                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000054   7417         MOV       A,#0x17
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   AC82         MOV       R4,DPL
   \   00005B   AD83         MOV       R5,DPH
   \   00005D   7403         MOV       A,#0x3
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   12....       LCALL     ?Subroutine122 & 0xFFFF
   1937                AddrMgrEntryUpdate( &addrEntry );
   1938              }
   1939            }
   1940          }
   \                     ??CrossCallReturnLabel_195:
   \   000065   7420         MOV       A,#0x20
   \   000067   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine205_0:
   \   000000   12....       LCALL     ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   000003   7401         MOV       A,#0x1
   \   000005   22           RET
   1941          
   1942          /*********************************************************************
   1943           * @fn          ZDO_BuildSimpleDescBuf
   1944           *
   1945           * @brief       Build a byte sequence representation of a Simple Descriptor.
   1946           *
   1947           * @param       buf  - pointer to a byte array big enough for data.
   1948           * @param       desc - SimpleDescriptionFormat_t *
   1949           *
   1950           * @return      none
   1951           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1952          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   1953          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   1954            byte cnt;
   1955            uint16 *ptr;
   1956          
   1957            *buf++ = desc->EndPoint;
   \   000005   8C82         MOV       DPL,R4
   \   000007   8D83         MOV       DPH,R5
   \   000009   12....       LCALL     ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_521:
   \   00000C   12....       LCALL     ?Subroutine33 & 0xFFFF
   1958            *buf++ = HI_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_41:
   \   00000F   A3           INC       DPTR
   \   000010   A882         MOV       R0,DPL
   \   000012   A983         MOV       R1,DPH
   \   000014   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_525:
   \   000017   12....       LCALL     ?Subroutine22 & 0xFFFF
   1959            *buf++ = LO_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_18:
   \   00001A   F0           MOVX      @DPTR,A
   1960            *buf++ = HI_UINT16( desc->AppDeviceId );
   \   00001B   EC           MOV       A,R4
   \   00001C   2403         ADD       A,#0x3
   \   00001E   F8           MOV       R0,A
   \   00001F   E4           CLR       A
   \   000020   3D           ADDC      A,R5
   \   000021   F9           MOV       R1,A
   \   000022   8882         MOV       DPL,R0
   \   000024   F583         MOV       DPH,A
   \   000026   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_526:
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   12....       LCALL     ?Subroutine22 & 0xFFFF
   1961            *buf++ = LO_UINT16( desc->AppDeviceId );
   \                     ??CrossCallReturnLabel_19:
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   12....       LCALL     ?Subroutine33 & 0xFFFF
   1962          
   1963            *buf++ = (byte)(desc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_42:
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   C4           SWAP      A
   \   00003A   54F0         ANL       A,#0xf0
   \   00003C   8A82         MOV       DPL,R2
   \   00003E   8B83         MOV       DPH,R3
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   F0           MOVX      @DPTR,A
   1964          
   1965            *buf++ = desc->AppNumInClusters;
   \   000046   EC           MOV       A,R4
   \   000047   2406         ADD       A,#0x6
   \   000049   F8           MOV       R0,A
   \   00004A   E4           CLR       A
   \   00004B   3D           ADDC      A,R5
   \   00004C   88..         MOV       ?V2,R0
   \   00004E   F5..         MOV       ?V3,A
   \   000050   8882         MOV       DPL,R0
   \   000052   F583         MOV       DPH,A
   \   000054   12....       LCALL     ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_522:
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   F0           MOVX      @DPTR,A
   \   00005E   EA           MOV       A,R2
   \   00005F   2407         ADD       A,#0x7
   \   000061   FA           MOV       R2,A
   \   000062   5001         JNC       ??ZDO_BuildSimpleDescBuf_0
   \   000064   0B           INC       R3
   1966            ptr = desc->pAppInClusterList;
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   000065   8C82         MOV       DPL,R4
   \   000067   8D83         MOV       DPH,R5
   \   000069   12....       LCALL     ?Subroutine91 & 0xFFFF
   1967            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_128:
   \   00006C   8018         SJMP      ??ZDO_BuildSimpleDescBuf_1
   1968            {
   1969              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_2:
   \   00006E   12....       LCALL     ?Subroutine38 & 0xFFFF
   1970              *buf++ = LO_UINT16( *ptr );
   1971            }
   \                     ??CrossCallReturnLabel_387:
   \   000071   8882         MOV       DPL,R0
   \   000073   8983         MOV       DPH,R1
   \   000075   F0           MOVX      @DPTR,A
   \   000076   EA           MOV       A,R2
   \   000077   2402         ADD       A,#0x2
   \   000079   FA           MOV       R2,A
   \   00007A   5001         JNC       ??ZDO_BuildSimpleDescBuf_3
   \   00007C   0B           INC       R3
   \                     ??ZDO_BuildSimpleDescBuf_3:
   \   00007D   EE           MOV       A,R6
   \   00007E   2402         ADD       A,#0x2
   \   000080   FE           MOV       R6,A
   \   000081   5001         JNC       ??ZDO_BuildSimpleDescBuf_4
   \   000083   0F           INC       R7
   \                     ??ZDO_BuildSimpleDescBuf_4:
   \   000084   05..         INC       ?V0
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   000086   8A82         MOV       DPL,R2
   \   000088   8B83         MOV       DPH,R3
   \   00008A   A3           INC       DPTR
   \   00008B   A882         MOV       R0,DPL
   \   00008D   A983         MOV       R1,DPH
   \   00008F   85..82       MOV       DPL,?V2
   \   000092   85..83       MOV       DPH,?V3
   \   000095   E0           MOVX      A,@DPTR
   \   000096   F5..         MOV       ?V1,A
   \   000098   E5..         MOV       A,?V0
   \   00009A   C3           CLR       C
   \   00009B   95..         SUBB      A,?V1
   \   00009D   40CF         JC        ??ZDO_BuildSimpleDescBuf_2
   1972          
   1973            *buf++ = desc->AppNumOutClusters;
   \   00009F   EC           MOV       A,R4
   \   0000A0   2409         ADD       A,#0x9
   \   0000A2   FE           MOV       R6,A
   \   0000A3   E4           CLR       A
   \   0000A4   3D           ADDC      A,R5
   \   0000A5   8E..         MOV       ?V2,R6
   \   0000A7   F5..         MOV       ?V3,A
   \   0000A9   8E82         MOV       DPL,R6
   \   0000AB   F583         MOV       DPH,A
   \   0000AD   12....       LCALL     ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_523:
   \   0000B0   F0           MOVX      @DPTR,A
   \   0000B1   E8           MOV       A,R0
   \   0000B2   FA           MOV       R2,A
   \   0000B3   E9           MOV       A,R1
   \   0000B4   FB           MOV       R3,A
   1974            ptr = desc->pAppOutClusterList;
   \   0000B5   8C82         MOV       DPL,R4
   \   0000B7   8D83         MOV       DPH,R5
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   12....       LCALL     ?Subroutine91 & 0xFFFF
   1975            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_129:
   \   0000BF   8019         SJMP      ??ZDO_BuildSimpleDescBuf_5
   1976            {
   1977              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_6:
   \   0000C1   12....       LCALL     ?Subroutine38 & 0xFFFF
   1978              *buf++ = LO_UINT16( *ptr );
   1979            }
   \                     ??CrossCallReturnLabel_388:
   \   0000C4   8A82         MOV       DPL,R2
   \   0000C6   8B83         MOV       DPH,R3
   \   0000C8   A3           INC       DPTR
   \   0000C9   F0           MOVX      @DPTR,A
   \   0000CA   EA           MOV       A,R2
   \   0000CB   2402         ADD       A,#0x2
   \   0000CD   FA           MOV       R2,A
   \   0000CE   5001         JNC       ??ZDO_BuildSimpleDescBuf_7
   \   0000D0   0B           INC       R3
   \                     ??ZDO_BuildSimpleDescBuf_7:
   \   0000D1   EE           MOV       A,R6
   \   0000D2   2402         ADD       A,#0x2
   \   0000D4   FE           MOV       R6,A
   \   0000D5   5001         JNC       ??ZDO_BuildSimpleDescBuf_8
   \   0000D7   0F           INC       R7
   \                     ??ZDO_BuildSimpleDescBuf_8:
   \   0000D8   05..         INC       ?V0
   \                     ??ZDO_BuildSimpleDescBuf_5:
   \   0000DA   85..82       MOV       DPL,?V2
   \   0000DD   85..83       MOV       DPH,?V3
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   F8           MOV       R0,A
   \   0000E2   E5..         MOV       A,?V0
   \   0000E4   C3           CLR       C
   \   0000E5   98           SUBB      A,R0
   \   0000E6   40D9         JC        ??ZDO_BuildSimpleDescBuf_6
   1980          }
   \   0000E8   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FE           MOV       R6,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FF           MOV       R7,A
   \   00000C   75..00       MOV       ?V0,#0x0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   8A82         MOV       DPL,R2
   \   000008   8B83         MOV       DPH,R3
   \   00000A                REQUIRE ??Subroutine196_0
   \   00000A                ; // Fall through to label ??Subroutine196_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine196_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine221_0
   \   000001                ; // Fall through to label ??Subroutine221_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine221_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET
   1981          
   1982          /*********************************************************************
   1983           * @fn      ZDO_MatchEndDeviceBind()
   1984           *
   1985           * @brief
   1986           *
   1987           *   Called to match end device binding requests
   1988           *
   1989           * @param  bindReq  - binding request information
   1990           * @param  SecurityUse - Security enable/disable
   1991           *
   1992           * @return  none
   1993           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1994          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   \                     ZDO_MatchEndDeviceBind:
   1995          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   1996            zAddrType_t dstAddr;
   1997            uint8 sendRsp = FALSE;
   \   00000E   7E00         MOV       R6,#0x0
   1998            uint8 status;
   1999          
   2000            // Is this the first request?
   2001            if ( matchED == NULL )
   \   000010   90....       MOV       DPTR,#matchED
   \   000013   12....       LCALL     ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   000016   7045         JNZ       ??ZDO_MatchEndDeviceBind_0
   2002            {
   2003              // Create match info structure
   2004              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   7A37         MOV       R2,#0x37
   \   00001A   7B00         MOV       R3,#0x0
   \   00001C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001F   90....       MOV       DPTR,#matchED
   \   000022   12....       LCALL     ?Subroutine31 & 0xFFFF
   2005              if ( matchED )
   \                     ??CrossCallReturnLabel_314:
   \   000025   F9           MOV       R1,A
   \   000026   EA           MOV       A,R2
   \   000027   49           ORL       A,R1
   \   000028   6019         JZ        ??ZDO_MatchEndDeviceBind_1
   2006              {
   2007                // Clear the structure
   2008                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   \   00002A                ; Setup parameters for call to function osal_memset
   \   00002A   7C37         MOV       R4,#0x37
   \   00002C   7D00         MOV       R5,#0x0
   \   00002E   7900         MOV       R1,#0x0
   \   000030   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2009          
   2010                // Copy the first request's information
   2011                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   \   000033                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000033   AC..         MOV       R4,?V4
   \   000035   AD..         MOV       R5,?V5
   \   000037   90....       MOV       DPTR,#matchED
   \   00003A   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   2012                {
   2013          
   2014                  status = ZDP_NO_ENTRY;
   2015                  sendRsp = TRUE;
   2016                }
   2017              }
   \                     ??CrossCallReturnLabel_355:
   \   00003D   12....       LCALL     `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
   \   000040   E9           MOV       A,R1
   \   000041   700B         JNZ       ??ZDO_MatchEndDeviceBind_2
   2018              else
   2019              {
   2020                status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_1:
   \   000043   85..82       MOV       DPL,?XSP + 0
   \   000046   85..83       MOV       DPH,?XSP + 1
   \   000049   7488         MOV       A,#-0x78
   \   00004B   02....       LJMP      ??ZDO_MatchEndDeviceBind_3 & 0xFFFF
   2021                sendRsp = TRUE;
   2022              }
   2023          
   2024              if ( !sendRsp )
   2025              {
   2026                // Set into the correct state
   2027                matchED->state = ZDMATCH_WAIT_REQ;
   \                     ??ZDO_MatchEndDeviceBind_2:
   \   00004E   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   000051   12....       LCALL     ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000054   7401         MOV       A,#0x1
   \   000056   F0           MOVX      @DPTR,A
   2028          
   2029                // Setup the timeout
   2030                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   000057                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000057   12....       LCALL     ?Subroutine84 & 0xFFFF
   2031              }
   2032            }
   \                     ??CrossCallReturnLabel_118:
   \   00005A   02....       LJMP      ??ZDO_MatchEndDeviceBind_4 & 0xFFFF
   2033            else
   2034            {
   2035                matchED->state = ZDMATCH_SENDING_BINDS;
   \                     ??ZDO_MatchEndDeviceBind_0:
   \   00005D   E8           MOV       A,R0
   \   00005E   242E         ADD       A,#0x2e
   \   000060   F582         MOV       DPL,A
   \   000062   E4           CLR       A
   \   000063   39           ADDC      A,R1
   \   000064   F583         MOV       DPH,A
   \   000066   7402         MOV       A,#0x2
   \   000068   F0           MOVX      @DPTR,A
   2036          
   2037                // Copy the 2nd request's information
   2038                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   \   000069                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000069   AC..         MOV       R4,?V4
   \   00006B   AD..         MOV       R5,?V5
   \   00006D   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000070   12....       LCALL     `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
   \   000073   E9           MOV       A,R1
   \   000074   700B         JNZ       ??ZDO_MatchEndDeviceBind_5
   2039                {
   2040                  status = ZDP_NO_ENTRY;
   \   000076   85..82       MOV       DPL,?XSP + 0
   \   000079   85..83       MOV       DPH,?XSP + 1
   \   00007C   7488         MOV       A,#-0x78
   \   00007E   F0           MOVX      @DPTR,A
   2041                  sendRsp = TRUE;
   \   00007F   7E01         MOV       R6,#0x1
   2042                }
   2043          
   2044                // Make a source match for ed1
   2045                matchED->ed1numMatched = ZDO_CompareClusterLists(
   2046                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   2047                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_5:
   \   000081                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   000081   75....       MOV       ?V0,#ZDOBuildBuf & 0xff
   \   000084   75....       MOV       ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   000087   78..         MOV       R0,#?V0
   \   000089   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008C   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   00008F   2429         ADD       A,#0x29
   \   000091   F582         MOV       DPL,A
   \   000093   E4           CLR       A
   \   000094   38           ADDC      A,R0
   \   000095   F583         MOV       DPH,A
   \   000097   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00009A   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   00009D   2428         ADD       A,#0x28
   \   00009F   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   0000A2   FC           MOV       R4,A
   \   0000A3   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   0000A6   2415         ADD       A,#0x15
   \   0000A8   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_456:
   \   0000AB   2414         ADD       A,#0x14
   \   0000AD   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   0000B0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B3   E9           MOV       A,R1
   \   0000B4   F8           MOV       R0,A
   \   0000B5   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   0000B8   2431         ADD       A,#0x31
   \   0000BA   12....       LCALL     ?Subroutine16 & 0xFFFF
   2048                if ( matchED->ed1numMatched )
   \                     ??CrossCallReturnLabel_398:
   \   0000BD   2431         ADD       A,#0x31
   \   0000BF   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   0000C2   F8           MOV       R0,A
   \   0000C3   75..00       MOV       ?V2,#0x0
   \   0000C6   602A         JZ        ??ZDO_MatchEndDeviceBind_6
   2049                {
   2050                  // Save the match list
   2051                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000C8                ; Setup parameters for call to function osal_mem_alloc
   \   0000C8   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   0000CB   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   0000CE   2432         ADD       A,#0x32
   \   0000D0   12....       LCALL     ?Subroutine20 & 0xFFFF
   2052                  if ( matchED->ed1Matched )
   \                     ??CrossCallReturnLabel_394:
   \   0000D3   6012         JZ        ??ZDO_MatchEndDeviceBind_7
   2053                  {
   2054                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000D5                ; Setup parameters for call to function osal_memcpy
   \   0000D5   78..         MOV       R0,#?V0
   \   0000D7   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000DA   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   2055                  }
   \                     ??CrossCallReturnLabel_442:
   \   0000DD   2431         ADD       A,#0x31
   \   0000DF   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   0000E2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E5   800B         SJMP      ??ZDO_MatchEndDeviceBind_6
   2056                  else
   2057                  {
   2058                    // Allocation error, stop
   2059                    status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_7:
   \   0000E7   85..82       MOV       DPL,?XSP + 0
   \   0000EA   85..83       MOV       DPH,?XSP + 1
   \   0000ED   7488         MOV       A,#-0x78
   \   0000EF   F0           MOVX      @DPTR,A
   2060                    sendRsp = TRUE;
   \   0000F0   7E01         MOV       R6,#0x1
   2061                  }
   2062                }
   2063          
   2064                // Make a source match for ed2
   2065                matchED->ed2numMatched = ZDO_CompareClusterLists(
   2066                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   2067                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_6:
   \   0000F2                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   0000F2   75....       MOV       ?V6,#ZDOBuildBuf & 0xff
   \   0000F5   75....       MOV       ?V7,#(ZDOBuildBuf >> 8) & 0xff
   \   0000F8   78..         MOV       R0,#?V6
   \   0000FA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FD   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   000100   2412         ADD       A,#0x12
   \   000102   F582         MOV       DPL,A
   \   000104   E4           CLR       A
   \   000105   38           ADDC      A,R0
   \   000106   F583         MOV       DPH,A
   \   000108   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00010B   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   00010E   2411         ADD       A,#0x11
   \   000110   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000113   FC           MOV       R4,A
   \   000114   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   000117   242C         ADD       A,#0x2c
   \   000119   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_457:
   \   00011C   242B         ADD       A,#0x2b
   \   00011E   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000121   12....       LCALL     ?DEALLOC_XSTACK8
   \   000124   E9           MOV       A,R1
   \   000125   F8           MOV       R0,A
   \   000126   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_446:
   \   000129   2434         ADD       A,#0x34
   \   00012B   12....       LCALL     ?Subroutine16 & 0xFFFF
   2068                if ( matchED->ed2numMatched )
   \                     ??CrossCallReturnLabel_399:
   \   00012E   2434         ADD       A,#0x34
   \   000130   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000133   601D         JZ        ??ZDO_MatchEndDeviceBind_8
   2069                {
   2070                  // Save the match list
   2071                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   \   000135                ; Setup parameters for call to function osal_mem_alloc
   \   000135   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000138   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_447:
   \   00013B   2435         ADD       A,#0x35
   \   00013D   12....       LCALL     ?Subroutine20 & 0xFFFF
   2072                  if ( matchED->ed2Matched )
   \                     ??CrossCallReturnLabel_395:
   \   000140   602E         JZ        ??ZDO_MatchEndDeviceBind_9
   2073                  {
   2074                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   \   000142                ; Setup parameters for call to function osal_memcpy
   \   000142   78..         MOV       R0,#?V0
   \   000144   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000147   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   2075                  }
   \                     ??CrossCallReturnLabel_448:
   \   00014A   2434         ADD       A,#0x34
   \   00014C   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   00014F   12....       LCALL     ?DEALLOC_XSTACK8
   2076                  else
   2077                  {
   2078                    // Allocation error, stop
   2079                    status = ZDP_NO_ENTRY;
   2080                    sendRsp = TRUE;
   2081                  }
   2082                }
   2083          
   2084                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   \                     ??ZDO_MatchEndDeviceBind_8:
   \   000152   EE           MOV       A,R6
   \   000153   A2E0         MOV       C,0xE0 /* A   */.0
   \   000155   4022         JC        ??ZDO_MatchEndDeviceBind_10
   \   000157   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00015A   7008         JNZ       ??ZDO_MatchEndDeviceBind_11
   \   00015C   90....       MOV       DPTR,#matchED
   \   00015F   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000162   6015         JZ        ??ZDO_MatchEndDeviceBind_10
   2085                {
   2086                  // Do the first unbind/bind state
   2087                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   \                     ??ZDO_MatchEndDeviceBind_11:
   \   000164                ; Setup parameters for call to function ZDMatchSendState
   \   000164   7B00         MOV       R3,#0x0
   \   000166   7A00         MOV       R2,#0x0
   \   000168   7900         MOV       R1,#0x0
   \   00016A   12....       LCALL     `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   2088                }
   2089                else
   2090                {
   2091                  status = ZDP_NO_MATCH;
   2092                  sendRsp = TRUE;
   2093                }
   2094            }
   2095          
   2096            if ( sendRsp )
   \   00016D   02....       LJMP      ??ZDO_MatchEndDeviceBind_4 & 0xFFFF
   \                     ??ZDO_MatchEndDeviceBind_9:
   \   000170   85..82       MOV       DPL,?XSP + 0
   \   000173   85..83       MOV       DPH,?XSP + 1
   \   000176   7488         MOV       A,#-0x78
   \   000178   F0           MOVX      @DPTR,A
   \                     ??ZDO_MatchEndDeviceBind_10:
   \   000179   85..82       MOV       DPL,?XSP + 0
   \   00017C   85..83       MOV       DPH,?XSP + 1
   \   00017F   7486         MOV       A,#-0x7a
   \                     ??ZDO_MatchEndDeviceBind_3:
   \   000181   F0           MOVX      @DPTR,A
   2097            {
   2098              // send response to this requester
   2099              dstAddr.addrMode = Addr16Bit;
   \   000182   7409         MOV       A,#0x9
   \   000184   12....       LCALL     ?XSTACK_DISP0_8
   \   000187   7402         MOV       A,#0x2
   \   000189   F0           MOVX      @DPTR,A
   2100              dstAddr.addr.shortAddr = bindReq->srcAddr;
   \   00018A   85..82       MOV       DPL,?V4
   \   00018D   85..83       MOV       DPH,?V5
   \   000190   12....       LCALL     ??Subroutine204_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   000193   12....       LCALL     ?XSTACK_DISP0_8
   \   000196   E8           MOV       A,R0
   \   000197   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   2101              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   \                     ??CrossCallReturnLabel_536:
   \   00019A                ; Setup parameters for call to function ZDP_SendData
   \   00019A   85..82       MOV       DPL,?V4
   \   00019D   85..83       MOV       DPH,?V5
   \   0001A0   A3           INC       DPTR
   \   0001A1   12....       LCALL     ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   0001A4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001A7   7401         MOV       A,#0x1
   \   0001A9   12....       LCALL     ?XSTACK_DISP100_8
   \   0001AC   88..         MOV       ?V0,R0
   \   0001AE   89..         MOV       ?V1,R1
   \   0001B0   78..         MOV       R0,#?V0
   \   0001B2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B5   75..20       MOV       ?V0,#0x20
   \   0001B8   75..80       MOV       ?V1,#-0x80
   \   0001BB   78..         MOV       R0,#?V0
   \   0001BD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C0   7901         MOV       R1,#0x1
   \   0001C2   7406         MOV       A,#0x6
   \   0001C4   12....       LCALL     ?XSTACK_DISP102_8
   \   0001C7   AA..         MOV       R2,?V4
   \   0001C9   AB..         MOV       R3,?V5
   \   0001CB   12....       LCALL     ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   0001CE   12....       LCALL     ?DEALLOC_XSTACK8
   2102          
   2103              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   0001D1   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0001D4   703C         JNZ       ??ZDO_MatchEndDeviceBind_12
   2104              {
   2105                // send response to first requester
   2106                dstAddr.addrMode = Addr16Bit;
   \   0001D6   7409         MOV       A,#0x9
   \   0001D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DB   7402         MOV       A,#0x2
   \   0001DD   12....       LCALL     ?Subroutine45 & 0xFFFF
   2107                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   2108                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   2109              }
   \                     ??CrossCallReturnLabel_64:
   \   0001E0   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   0001E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E6   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0001E9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001EC   7401         MOV       A,#0x1
   \   0001EE   12....       LCALL     ?XSTACK_DISP100_8
   \   0001F1   88..         MOV       ?V0,R0
   \   0001F3   89..         MOV       ?V1,R1
   \   0001F5   78..         MOV       R0,#?V0
   \   0001F7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001FA   75..20       MOV       ?V0,#0x20
   \   0001FD   75..80       MOV       ?V1,#-0x80
   \   000200   78..         MOV       R0,#?V0
   \   000202   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000205   7901         MOV       R1,#0x1
   \   000207   7406         MOV       A,#0x6
   \   000209   12....       LCALL     ?XSTACK_DISP102_8
   \   00020C   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00020F   12....       LCALL     ?DEALLOC_XSTACK8
   2110          
   2111              // Process ended - release memory used
   2112              ZDO_RemoveMatchMemory();
   \                     ??ZDO_MatchEndDeviceBind_12:
   \   000212                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   000212   12....       LCALL     `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
   2113            }
   2114          }
   \                     ??ZDO_MatchEndDeviceBind_4:
   \   000215   740A         MOV       A,#0xa
   \   000217   02....       LJMP      ?Subroutine8 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F9           MOV       R1,A
   \   000008   12....       LCALL     `??ZDO_CompareClusterLists::?relay`; Banked call to: ZDO_CompareClusterLists
   \   00000B   7404         MOV       A,#0x4
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine197_0
   \   000006                ; // Fall through to label ??Subroutine197_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine197_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_530:
   \   000004   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000007   7403         MOV       A,#0x3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine198_0
   \   000006                ; // Fall through to label ??Subroutine198_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine198_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine199_0
   \   000006                ; // Fall through to label ??Subroutine199_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine199_0:
   \   000000   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   000003   C8           XCH       A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   E9           MOV       A,R1
   \   000001                REQUIRE ??Subroutine200_0
   \   000001                ; // Fall through to label ??Subroutine200_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine200_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001   12....       LCALL     ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_468:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine168:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003                REQUIRE ??Subroutine201_0
   \   000003                ; // Fall through to label ??Subroutine201_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2417         ADD       A,#0x17
   \   000006   FA           MOV       R2,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   3400         ADDC      A,#0x0
   \   00000B   FB           MOV       R3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   7C..         MOV       R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   000002   7D..         MOV       R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   000004   90....       MOV       DPTR,#AIB_MaxBindingTime
   \   000007   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   00000A   12....       LCALL     `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   000006   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000009   7405         MOV       A,#0x5
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL     ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_458:
   \   000003   2434         ADD       A,#0x34
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_460:
   \   000003   2431         ADD       A,#0x31
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003                REQUIRE ??Subroutine203_0
   \   000003                ; // Fall through to label ??Subroutine203_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_459:
   \   000003   12....       LCALL     ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000006   E0           MOVX      A,@DPTR
   \   000007   6402         XRL       A,#0x2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine163:
   \   000000   242E         ADD       A,#0x2e
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   F583         MOV       DPH,A
   \   000002   8882         MOV       DPL,R0
   \   000004                REQUIRE ??Subroutine204_0
   \   000004                ; // Fall through to label ??Subroutine204_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine204_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine205_0
   \   000002                ; // Fall through to label ??Subroutine205_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL     ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   000006   F583         MOV       DPH,A
   \   000008   8882         MOV       DPL,R0
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F5..         MOV       ?V0,A
   \   00000E   78..         MOV       R0,#?V0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   000009                REQUIRE ??Subroutine210_0
   \   000009                ; // Fall through to label ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine210_0:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003                REQUIRE ??Subroutine211_0
   \   000003                ; // Fall through to label ??Subroutine211_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine222_0:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   FC           MOV       R4,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   FD           MOV       R5,A
   \   000006   22           RET
   2115          
   2116          /*********************************************************************
   2117           * @fn      ZDO_RemoveMatchMemory()
   2118           *
   2119           * @brief   Called to clear the memory used for the end device bind.
   2120           *
   2121           * @param  none
   2122           *
   2123           * @return  none
   2124           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2125          static void ZDO_RemoveMatchMemory( void )
   \                     ZDO_RemoveMatchMemory:
   2126          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2127            if ( matchED != NULL )
   \   000004   90....       MOV       DPTR,#matchED
   \   000007   12....       LCALL     ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   00000A   605D         JZ        ??ZDO_RemoveMatchMemory_0
   2128            {
   2129              if ( matchED->ed2Matched != NULL )
   \   00000C   E8           MOV       A,R0
   \   00000D   2435         ADD       A,#0x35
   \   00000F   F582         MOV       DPL,A
   \   000011   E4           CLR       A
   \   000012   39           ADDC      A,R1
   \   000013   12....       LCALL     ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   000016   6003         JZ        ??ZDO_RemoveMatchMemory_1
   2130                osal_mem_free( matchED->ed2Matched );
   \   000018                ; Setup parameters for call to function osal_mem_free
   \   000018   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2131              if ( matchED->ed1Matched != NULL )
   \                     ??ZDO_RemoveMatchMemory_1:
   \   00001B   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_449:
   \   00001E   2432         ADD       A,#0x32
   \   000020   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000023   6003         JZ        ??ZDO_RemoveMatchMemory_2
   2132                osal_mem_free( matchED->ed1Matched );
   \   000025                ; Setup parameters for call to function osal_mem_free
   \   000025   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2133          
   2134              if ( matchED->ed1.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_2:
   \   000028   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_450:
   \   00002B   2412         ADD       A,#0x12
   \   00002D   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   000030   6003         JZ        ??ZDO_RemoveMatchMemory_3
   2135                osal_mem_free( matchED->ed1.inClusters );
   \   000032                ; Setup parameters for call to function osal_mem_free
   \   000032   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2136          
   2137              if ( matchED->ed1.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_3:
   \   000035   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   000038   2415         ADD       A,#0x15
   \   00003A   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   00003D   6003         JZ        ??ZDO_RemoveMatchMemory_4
   2138                osal_mem_free( matchED->ed1.outClusters );
   \   00003F                ; Setup parameters for call to function osal_mem_free
   \   00003F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2139          
   2140              if ( matchED->ed2.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_4:
   \   000042   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   000045   2429         ADD       A,#0x29
   \   000047   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   00004A   6003         JZ        ??ZDO_RemoveMatchMemory_5
   2141                osal_mem_free( matchED->ed2.inClusters );
   \   00004C                ; Setup parameters for call to function osal_mem_free
   \   00004C   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2142          
   2143              if ( matchED->ed2.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_5:
   \   00004F   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   000052   242C         ADD       A,#0x2c
   \   000054   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000057   6003         JZ        ??ZDO_RemoveMatchMemory_6
   2144                osal_mem_free( matchED->ed2.outClusters );
   \   000059                ; Setup parameters for call to function osal_mem_free
   \   000059   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2145          
   2146              osal_mem_free( matchED );
   \                     ??ZDO_RemoveMatchMemory_6:
   \   00005C                ; Setup parameters for call to function osal_mem_free
   \   00005C   90....       MOV       DPTR,#matchED
   \   00005F   12....       LCALL     ??Subroutine175_0 & 0xFFFF
   2147          
   2148              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     ??CrossCallReturnLabel_280:
   \   000062   90....       MOV       DPTR,#matchED
   \   000065   E4           CLR       A
   \   000066   F0           MOVX      @DPTR,A
   \   000067   A3           INC       DPTR
   \   000068   F0           MOVX      @DPTR,A
   2149            }
   2150          }
   \                     ??ZDO_RemoveMatchMemory_0:
   \   000069   02....       LJMP      ??Subroutine171_0 & 0xFFFF
   2151          
   2152          /*********************************************************************
   2153           * @fn      ZDO_CopyMatchInfo()
   2154           *
   2155           * @brief   Called to copy memory used for the end device bind.
   2156           *
   2157           * @param  srcReq - source information
   2158           * @param  dstReq - destination location
   2159           *
   2160           * @return  TRUE if copy was successful.
   2161           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2162          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   \                     ZDO_CopyMatchInfo:
   2163          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   2164            uint8 allOK = TRUE;
   \   00000D   75..01       MOV       ?V7,#0x1
   2165          
   2166            // Copy bind information into the match info structure
   2167            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   \   000010                ; Setup parameters for call to function osal_memcpy
   \   000010   8C..         MOV       ?V4,R4
   \   000012   8D..         MOV       ?V5,R5
   \   000014   75..00       MOV       ?V6,#0x0
   \   000017   78..         MOV       R0,#?V4
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00001C   7C17         MOV       R4,#0x17
   \   00001E   7D00         MOV       R5,#0x0
   \   000020   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_490:
   \   000023   12....       LCALL     ?DEALLOC_XSTACK8
   2168          
   2169            // Initialize the destination cluster pointers
   2170            destReq->inClusters = NULL;
   \   000026   EE           MOV       A,R6
   \   000027   2412         ADD       A,#0x12
   \   000029   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   00002C   E4           CLR       A
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   A3           INC       DPTR
   \   00002F   F0           MOVX      @DPTR,A
   2171            destReq->outClusters = NULL;
   \   000030   EE           MOV       A,R6
   \   000031   2415         ADD       A,#0x15
   \   000033   FE           MOV       R6,A
   \   000034   5001         JNC       ??ZDO_CopyMatchInfo_0
   \   000036   0F           INC       R7
   \                     ??ZDO_CopyMatchInfo_0:
   \   000037   F582         MOV       DPL,A
   \   000039   8F83         MOV       DPH,R7
   \   00003B   E4           CLR       A
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   F0           MOVX      @DPTR,A
   2172          
   2173            // Copy input cluster IDs
   2174            if ( srcReq->numInClusters )
   \   00003F   E5..         MOV       A,?V0
   \   000041   2411         ADD       A,#0x11
   \   000043   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000046   6029         JZ        ??ZDO_CopyMatchInfo_1
   2175            {
   2176              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   \   000048                ; Setup parameters for call to function osal_mem_alloc
   \   000048   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   00004B   85..82       MOV       DPL,?V8
   \   00004E   85..83       MOV       DPH,?V9
   \   000051   12....       LCALL     ??Subroutine198_0 & 0xFFFF
   2177              if ( destReq->inClusters )
   \                     ??CrossCallReturnLabel_396:
   \   000054   6018         JZ        ??ZDO_CopyMatchInfo_2
   2178              {
   2179                // Copy the clusters
   2180                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   2181                                (srcReq->numInClusters * sizeof ( uint16 )) );
   \   000056                ; Setup parameters for call to function osal_memcpy
   \   000056   E5..         MOV       A,?V0
   \   000058   2412         ADD       A,#0x12
   \   00005A   12....       LCALL     ?Subroutine88 & 0xFFFF
   2182              }
   \                     ??CrossCallReturnLabel_122:
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000060   85..82       MOV       DPL,?V2
   \   000063   85..83       MOV       DPH,?V3
   \   000066   12....       LCALL     ??Subroutine197_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   000069   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006C   8003         SJMP      ??ZDO_CopyMatchInfo_1
   2183              else
   2184                allOK = FALSE;
   \                     ??ZDO_CopyMatchInfo_2:
   \   00006E   75..00       MOV       ?V7,#0x0
   2185            }
   2186          
   2187            // Copy output cluster IDs
   2188            if ( srcReq->numOutClusters )
   \                     ??ZDO_CopyMatchInfo_1:
   \   000071   E5..         MOV       A,?V0
   \   000073   2414         ADD       A,#0x14
   \   000075   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000078   6022         JZ        ??ZDO_CopyMatchInfo_3
   2189            {
   2190              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   \   00007A                ; Setup parameters for call to function osal_mem_alloc
   \   00007A   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00007D   8E82         MOV       DPL,R6
   \   00007F   8F83         MOV       DPH,R7
   \   000081   12....       LCALL     ??Subroutine198_0 & 0xFFFF
   2191              if ( destReq->outClusters )
   \                     ??CrossCallReturnLabel_397:
   \   000084   603B         JZ        ??ZDO_CopyMatchInfo_4
   2192              {
   2193                // Copy the clusters
   2194                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2195                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   \   000086                ; Setup parameters for call to function osal_memcpy
   \   000086   E5..         MOV       A,?V0
   \   000088   2415         ADD       A,#0x15
   \   00008A   12....       LCALL     ?Subroutine88 & 0xFFFF
   2196              }
   \                     ??CrossCallReturnLabel_123:
   \   00008D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000090   85..82       MOV       DPL,?V2
   \   000093   85..83       MOV       DPH,?V3
   \   000096   12....       LCALL     ??Subroutine197_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   000099   12....       LCALL     ?DEALLOC_XSTACK8
   2197              else
   2198                allOK = FALSE;
   2199            }
   2200          
   2201            if ( !allOK )
   \                     ??ZDO_CopyMatchInfo_3:
   \   00009C   E5..         MOV       A,?V7
   \   00009E   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000A0   401A         JC        ??ZDO_CopyMatchInfo_5
   2202            {
   2203              if ( destReq->inClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_6:
   \   0000A2   85..82       MOV       DPL,?V8
   \   0000A5   85..83       MOV       DPH,?V9
   \   0000A8   12....       LCALL     ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   0000AB   6003         JZ        ??ZDO_CopyMatchInfo_7
   2204                osal_mem_free( destReq->inClusters );
   \   0000AD                ; Setup parameters for call to function osal_mem_free
   \   0000AD   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2205              if ( destReq->outClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_7:
   \   0000B0   8E82         MOV       DPL,R6
   \   0000B2   8F83         MOV       DPH,R7
   \   0000B4   12....       LCALL     ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   0000B7   6003         JZ        ??ZDO_CopyMatchInfo_5
   2206                osal_mem_free( destReq->outClusters );
   \   0000B9                ; Setup parameters for call to function osal_mem_free
   \   0000B9   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2207            }
   2208          
   2209            return ( allOK );
   \                     ??ZDO_CopyMatchInfo_5:
   \   0000BC   A9..         MOV       R1,?V7
   \   0000BE   02....       LJMP      ??Subroutine209_0 & 0xFFFF
   \                     ??ZDO_CopyMatchInfo_4:
   \   0000C1   75..00       MOV       ?V7,#0x0
   \   0000C4   80DC         SJMP      ??ZDO_CopyMatchInfo_6
   2210          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   F5..         MOV       ?V2,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V1
   \   000005   F5..         MOV       ?V3,A
   \   000007   85..82       MOV       DPL,?V2
   \   00000A   F583         MOV       DPH,A
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   12....       LCALL     ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F5..         MOV       ?V4,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F5..         MOV       ?V5,A
   \   00000A   78..         MOV       R0,#?V4
   \   00000C   22           RET
   2211          
   2212          /*********************************************************************
   2213           * @fn      ZDMatchSendState()
   2214           *
   2215           * @brief   State machine for the End device match message algorithm.
   2216           *
   2217           * @param  reason - state of algoritm
   2218           * @param  status - initial message status
   2219           * @param  TransSeq - next transaction sequence number
   2220           *
   2221           * @return  FALSE if error and we are not currently matching, TRUE
   2222           *          if success.
   2223           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2224          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   \                     ZDMatchSendState:
   2225          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V3,R1
   \   00000C   8A..         MOV       ?V6,R2
   2226            uint8 *dstIEEEAddr = NULL;
   \   00000E   75..00       MOV       ?V4,#0x0
   \   000011   75..00       MOV       ?V5,#0x0
   2227            uint8 dstEP = 0xFF;
   \   000014   75..FF       MOV       ?V2,#-0x1
   2228            zAddrType_t dstAddr;
   2229            zAddrType_t destinationAddr;
   2230            uint16 msgType;
   2231            uint16 clusterID = 0xFFFF;
   \   000017   75..FF       MOV       ?V8,#-0x1
   \   00001A   75..FF       MOV       ?V9,#-0x1
   2232            ZDEndDeviceBind_t *ed = NULL;
   \   00001D   75..00       MOV       ?V0,#0x0
   \   000020   75..00       MOV       ?V1,#0x0
   2233            uint8 rspStatus = ZDP_SUCCESS;
   \   000023   85..82       MOV       DPL,?XSP + 0
   \   000026   85..83       MOV       DPH,?XSP + 1
   \   000029   E4           CLR       A
   \   00002A   12....       LCALL     ?Subroutine45 & 0xFFFF
   2234          
   2235            if ( matchED == NULL )
   \                     ??CrossCallReturnLabel_65:
   \   00002D   F9           MOV       R1,A
   \   00002E   E8           MOV       A,R0
   \   00002F   49           ORL       A,R1
   \   000030   6016         JZ        ??ZDMatchSendState_0
   2236              return ( FALSE );
   2237          
   2238            // Check sequence number
   2239            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   \   000032   7403         MOV       A,#0x3
   \   000034   65..         XRL       A,?V3
   \   000036   6006         JZ        ??ZDMatchSendState_1
   \   000038   7402         MOV       A,#0x2
   \   00003A   65..         XRL       A,?V3
   \   00003C   700F         JNZ       ??ZDMatchSendState_2
   2240            {
   2241              if ( TransSeq != matchED->transSeq )
   \                     ??ZDMatchSendState_1:
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   C8           XCH       A,R0
   \   000040   2430         ADD       A,#0x30
   \   000042   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000045   6B           XRL       A,R3
   \   000046   6005         JZ        ??ZDMatchSendState_2
   2242                return( FALSE ); // ignore the message
   \                     ??ZDMatchSendState_0:
   \   000048   7900         MOV       R1,#0x0
   \   00004A   02....       LJMP      ??ZDMatchSendState_3 & 0xFFFF
   2243            }
   2244          
   2245            // turn off timer
   2246            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   \                     ??ZDMatchSendState_2:
   \   00004D                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   00004D   7C..         MOV       R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   00004F   7D..         MOV       R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   000051   7A00         MOV       R2,#0x0
   \   000053   7B00         MOV       R3,#0x0
   \   000055   12....       LCALL     `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   2247          
   2248            if ( reason == ZDMATCH_REASON_TIMEOUT )
   \   000058   7401         MOV       A,#0x1
   \   00005A   65..         XRL       A,?V3
   \   00005C   700A         JNZ       ??ZDMatchSendState_4
   2249            {
   2250              rspStatus = ZDP_TIMEOUT;    // The process will stop
   \   00005E   85..82       MOV       DPL,?XSP + 0
   \   000061   85..83       MOV       DPH,?XSP + 1
   \   000064   7485         MOV       A,#-0x7b
   \   000066   803D         SJMP      ??ZDMatchSendState_5
   2251            }
   2252          
   2253            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   \                     ??ZDMatchSendState_4:
   \   000068   E5..         MOV       A,?V3
   \   00006A   6006         JZ        ??ZDMatchSendState_6
   \   00006C   7403         MOV       A,#0x3
   \   00006E   65..         XRL       A,?V3
   \   000070   7019         JNZ       ??ZDMatchSendState_7
   2254            {
   2255              matchED->sending = ZDMATCH_SENDING_UNBIND;
   \                     ??ZDMatchSendState_6:
   \   000072   90....       MOV       DPTR,#matchED
   \   000075   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000078   F0           MOVX      @DPTR,A
   2256          
   2257              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   \   000079   7403         MOV       A,#0x3
   \   00007B   65..         XRL       A,?V3
   \   00007D   7029         JNZ       ??ZDMatchSendState_8
   \   00007F   E5..         MOV       A,?V6
   \   000081   6029         JZ        ??ZDMatchSendState_9
   2258              {
   2259                rspStatus = status;
   \   000083   85..82       MOV       DPL,?XSP + 0
   \   000086   85..83       MOV       DPH,?XSP + 1
   \   000089   801A         SJMP      ??ZDMatchSendState_5
   2260              }
   2261            }
   2262            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_7:
   \   00008B   7402         MOV       A,#0x2
   \   00008D   65..         XRL       A,?V3
   \   00008F   701B         JNZ       ??ZDMatchSendState_9
   2263            {
   2264              if ( status == ZDP_SUCCESS )
   \   000091   E5..         MOV       A,?V6
   \   000093   90....       MOV       DPTR,#matchED
   \   000096   7005         JNZ       ??ZDMatchSendState_10
   2265              {
   2266                matchED->sending = ZDMATCH_SENDING_UNBIND;
   \   000098   12....       LCALL     ?Subroutine66 & 0xFFFF
   2267              }
   \                     ??CrossCallReturnLabel_91:
   \   00009B   8008         SJMP      ??ZDMatchSendState_5
   2268              else
   2269              {
   2270                matchED->sending = ZDMATCH_SENDING_BIND;
   \                     ??ZDMatchSendState_10:
   \   00009D   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   2271              }
   2272            }
   \                     ??CrossCallReturnLabel_434:
   \   0000A0   12....       LCALL     ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   0000A3   7402         MOV       A,#0x2
   \                     ??ZDMatchSendState_5:
   \   0000A5   F0           MOVX      @DPTR,A
   \   0000A6   8004         SJMP      ??ZDMatchSendState_9
   2273          
   2274            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   \                     ??ZDMatchSendState_8:
   \   0000A8   E5..         MOV       A,?V3
   \   0000AA   601D         JZ        ??ZDMatchSendState_11
   \                     ??ZDMatchSendState_9:
   \   0000AC   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   0000AF   7018         JNZ       ??ZDMatchSendState_11
   2275            {
   2276              // Move to the next cluster ID
   2277              if ( matchED->ed1numMatched )
   \   0000B1   90....       MOV       DPTR,#matchED
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   2431         ADD       A,#0x31
   \   0000B7   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   0000BA   700B         JNZ       ??ZDMatchSendState_12
   2278                matchED->ed1numMatched--;
   2279              else if ( matchED->ed2numMatched )
   \   0000BC   90....       MOV       DPTR,#matchED
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   2434         ADD       A,#0x34
   \   0000C2   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   0000C5   6002         JZ        ??ZDMatchSendState_11
   2280                matchED->ed2numMatched--;
   \                     ??ZDMatchSendState_12:
   \   0000C7   14           DEC       A
   \   0000C8   F0           MOVX      @DPTR,A
   2281            }
   2282          
   2283            // What message do we send now
   2284            if ( matchED->ed1numMatched )
   \                     ??ZDMatchSendState_11:
   \   0000C9   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0000CC   F8           MOV       R0,A
   \   0000CD   90....       MOV       DPTR,#matchED
   \   0000D0   6014         JZ        ??ZDMatchSendState_13
   2285            {
   2286              ed = &(matchED->ed1);
   \   0000D2   12....       LCALL     ??Subroutine172_0 & 0xFFFF
   2287              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   \                     ??CrossCallReturnLabel_271:
   \   0000D5   12....       LCALL     ?Subroutine103 & 0xFFFF
   2288              dstIEEEAddr = matchED->ed2.ieeeAddr;
   2289              dstEP = matchED->ed2.endpoint;
   2290            }
   \                     ??CrossCallReturnLabel_153:
   \   0000D8   2432         ADD       A,#0x32
   \   0000DA   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0000DD   241D         ADD       A,#0x1d
   \   0000DF   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   0000E2   2425         ADD       A,#0x25
   \   0000E4   8023         SJMP      ??ZDMatchSendState_14
   2291            else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_13:
   \   0000E6   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0000E9   F8           MOV       R0,A
   \   0000EA   6026         JZ        ??ZDMatchSendState_15
   2292            {
   2293              ed = &(matchED->ed2);
   \   0000EC   90....       MOV       DPTR,#matchED
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   2417         ADD       A,#0x17
   \   0000F2   F5..         MOV       ?V0,A
   \   0000F4   A3           INC       DPTR
   \   0000F5   E0           MOVX      A,@DPTR
   \   0000F6   3400         ADDC      A,#0x0
   \   0000F8   F5..         MOV       ?V1,A
   2294              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   \   0000FA   12....       LCALL     ?Subroutine103 & 0xFFFF
   2295              dstIEEEAddr = matchED->ed1.ieeeAddr;
   2296              dstEP = matchED->ed1.endpoint;
   2297            }
   \                     ??CrossCallReturnLabel_154:
   \   0000FD   2435         ADD       A,#0x35
   \   0000FF   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000102   2406         ADD       A,#0x6
   \   000104   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000107   240E         ADD       A,#0xe
   \                     ??ZDMatchSendState_14:
   \   000109   F582         MOV       DPL,A
   \   00010B   E4           CLR       A
   \   00010C   3A           ADDC      A,R2
   \   00010D   F583         MOV       DPH,A
   \   00010F   E0           MOVX      A,@DPTR
   \   000110   F5..         MOV       ?V2,A
   2298          
   2299            dstAddr.addrMode = Addr16Bit;
   \                     ??ZDMatchSendState_15:
   \   000112   7409         MOV       A,#0x9
   \   000114   12....       LCALL     ?XSTACK_DISP0_8
   \   000117   7402         MOV       A,#0x2
   \   000119   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   2300          
   2301            // Send the next message
   2302            if ( rspStatus == ZDP_SUCCESS && ed )
   \                     ??CrossCallReturnLabel_299:
   \   00011C   6003         JZ        $+5
   \   00011E   02....       LJMP      ??ZDMatchSendState_16 & 0xFFFF
   \   000121   E5..         MOV       A,?V0
   \   000123   45..         ORL       A,?V1
   \   000125   7003         JNZ       $+5
   \   000127   02....       LJMP      ??ZDMatchSendState_16 & 0xFFFF
   2303            {
   2304              // Send unbind/bind message to source
   2305              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   \   00012A   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00012D   7004         JNZ       ??ZDMatchSendState_17
   2306                msgType = Unbind_req;
   \   00012F   7E22         MOV       R6,#0x22
   \   000131   8002         SJMP      ??ZDMatchSendState_18
   2307              else
   2308                msgType = Bind_req;
   \                     ??ZDMatchSendState_17:
   \   000133   7E21         MOV       R6,#0x21
   2309          
   2310              dstAddr.addr.shortAddr = ed->srcAddr;
   \                     ??ZDMatchSendState_18:
   \   000135   85..82       MOV       DPL,?V0
   \   000138   85..83       MOV       DPH,?V1
   \   00013B   12....       LCALL     ??Subroutine204_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_416:
   \   00013E   12....       LCALL     ?XSTACK_DISP0_8
   \   000141   E8           MOV       A,R0
   \   000142   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   2311          
   2312              // Save off the transaction sequence number
   2313              matchED->transSeq = ZDP_TransID;
   \                     ??CrossCallReturnLabel_537:
   \   000145   90....       MOV       DPTR,#ZDP_TransID
   \   000148   E0           MOVX      A,@DPTR
   \   000149   C0E0         PUSH      A
   \   00014B   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_454:
   \   00014E   2430         ADD       A,#0x30
   \   000150   F582         MOV       DPL,A
   \   000152   E4           CLR       A
   \   000153   38           ADDC      A,R0
   \   000154   F583         MOV       DPH,A
   \   000156   D0E0         POP       A
   \   000158   F0           MOVX      @DPTR,A
   2314          
   2315              destinationAddr.addrMode = Addr64Bit;
   \   000159   7412         MOV       A,#0x12
   \   00015B   12....       LCALL     ?XSTACK_DISP0_8
   \   00015E   7403         MOV       A,#0x3
   \   000160   F0           MOVX      @DPTR,A
   2316              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   \   000161                ; Setup parameters for call to function sAddrExtCpy
   \   000161   AC..         MOV       R4,?V4
   \   000163   AD..         MOV       R5,?V5
   \   000165   740A         MOV       A,#0xa
   \   000167   12....       LCALL     ?XSTACK_DISP101_8
   \   00016A   12....       LCALL     ?Subroutine142 & 0xFFFF
   2317          
   2318              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2319                  &destinationAddr, dstEP, ed->SecurityUse );
   \                     ??CrossCallReturnLabel_235:
   \   00016D   E0           MOVX      A,@DPTR
   \   00016E   F5..         MOV       ?V4,A
   \   000170   78..         MOV       R0,#?V4
   \   000172   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000175   78..         MOV       R0,#?V2
   \   000177   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00017A   740C         MOV       A,#0xc
   \   00017C   12....       LCALL     ?XSTACK_DISP100_8
   \   00017F   88..         MOV       ?V4,R0
   \   000181   89..         MOV       ?V5,R1
   \   000183   78..         MOV       R0,#?V4
   \   000185   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000188   78..         MOV       R0,#?V8
   \   00018A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00018D   E5..         MOV       A,?V0
   \   00018F   2406         ADD       A,#0x6
   \   000191   F5..         MOV       ?V4,A
   \   000193   E4           CLR       A
   \   000194   35..         ADDC      A,?V1
   \   000196   F5..         MOV       ?V5,A
   \   000198   78..         MOV       R0,#?V4
   \   00019A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00019D   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   0001A0   E0           MOVX      A,@DPTR
   \   0001A1   F9           MOV       R1,A
   \   0001A2   7409         MOV       A,#0x9
   \   0001A4   12....       LCALL     ?XSTACK_DISP102_8
   \   0001A7   EE           MOV       A,R6
   \   0001A8   FA           MOV       R2,A
   \   0001A9   7B00         MOV       R3,#0x0
   \   0001AB   12....       LCALL     `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   0001AE   7408         MOV       A,#0x8
   \   0001B0   12....       LCALL     ?DEALLOC_XSTACK8
   2320          
   2321              // Set timeout for response
   2322              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   0001B3                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   0001B3   12....       LCALL     ?Subroutine84 & 0xFFFF
   2323            }
   \                     ??CrossCallReturnLabel_119:
   \   0001B6   02....       LJMP      ??ZDMatchSendState_19 & 0xFFFF
   2324            else
   2325            {
   2326              // Send the response messages to requesting devices
   2327              // send response to first requester
   2328              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \                     ??ZDMatchSendState_16:
   \   0001B9   12....       LCALL     ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_467:
   \   0001BC   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   0001BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C2   12....       LCALL     ?Subroutine12 & 0xFFFF
   2329              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   \                     ??CrossCallReturnLabel_5:
   \   0001C5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001C8   7401         MOV       A,#0x1
   \   0001CA   12....       LCALL     ?XSTACK_DISP100_8
   \   0001CD   88..         MOV       ?V0,R0
   \   0001CF   89..         MOV       ?V1,R1
   \   0001D1   78..         MOV       R0,#?V0
   \   0001D3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001D6   75..20       MOV       ?V0,#0x20
   \   0001D9   75..80       MOV       ?V1,#-0x80
   \   0001DC   78..         MOV       R0,#?V0
   \   0001DE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001E1   7901         MOV       R1,#0x1
   \   0001E3   7406         MOV       A,#0x6
   \   0001E5   12....       LCALL     ?XSTACK_DISP102_8
   \   0001E8   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   0001EB   12....       LCALL     ?DEALLOC_XSTACK8
   2330          
   2331              // send response to second requester
   2332              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   0001EE   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0001F1   704C         JNZ       ??ZDMatchSendState_20
   2333              {
   2334                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   \   0001F3   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   2335                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   2336              }
   \                     ??CrossCallReturnLabel_455:
   \   0001F6   2419         ADD       A,#0x19
   \   0001F8   F582         MOV       DPL,A
   \   0001FA   E4           CLR       A
   \   0001FB   38           ADDC      A,R0
   \   0001FC   F583         MOV       DPH,A
   \   0001FE   12....       LCALL     ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   000201   12....       LCALL     ?XSTACK_DISP0_8
   \   000204   E8           MOV       A,R0
   \   000205   F0           MOVX      @DPTR,A
   \   000206   A3           INC       DPTR
   \   000207   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   00020A   2418         ADD       A,#0x18
   \   00020C   F582         MOV       DPL,A
   \   00020E   E4           CLR       A
   \   00020F   38           ADDC      A,R0
   \   000210   12....       LCALL     ??Subroutine185_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   000213   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000216   7401         MOV       A,#0x1
   \   000218   12....       LCALL     ?XSTACK_DISP100_8
   \   00021B   88..         MOV       ?V0,R0
   \   00021D   89..         MOV       ?V1,R1
   \   00021F   78..         MOV       R0,#?V0
   \   000221   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000224   75..20       MOV       ?V0,#0x20
   \   000227   75..80       MOV       ?V1,#-0x80
   \   00022A   78..         MOV       R0,#?V0
   \   00022C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00022F   7901         MOV       R1,#0x1
   \   000231   7406         MOV       A,#0x6
   \   000233   12....       LCALL     ?XSTACK_DISP102_8
   \   000236   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000239   12....       LCALL     ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   00023C   12....       LCALL     ?DEALLOC_XSTACK8
   2337          
   2338              // Process ended - release memory used
   2339              ZDO_RemoveMatchMemory();
   \                     ??ZDMatchSendState_20:
   \   00023F                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   00023F   12....       LCALL     `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
   2340            }
   2341          
   2342            return ( TRUE );
   \                     ??ZDMatchSendState_19:
   \   000242   7901         MOV       R1,#0x1
   \                     ??ZDMatchSendState_3:
   \   000244   7413         MOV       A,#0x13
   \   000246   02....       LJMP      ?Subroutine6 & 0xFFFF
   2343          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   E8           MOV       A,R0
   \   000001   28           ADD       A,R0
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   F9           MOV       R1,A
   \   000006   90....       MOV       DPTR,#matchED
   \   000009   12....       LCALL     ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   00000C   CA           XCH       A,R2
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   3400         ADDC      A,#0x0
   \   000005   8882         MOV       DPL,R0
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   F5..         MOV       ?V4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   3400         ADDC      A,#0x0
   \   000006   F5..         MOV       ?V5,A
   \   000008   90....       MOV       DPTR,#matchED
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000003   7401         MOV       A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000006   E0           MOVX      A,@DPTR
   \   000007   6401         XRL       A,#0x1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   12....       LCALL     ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_464:
   \   000003   C8           XCH       A,R0
   \   000004   12....       LCALL     ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine170:
   \   000000   242F         ADD       A,#0x2f
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3A           ADDC      A,R2
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   28           ADD       A,R0
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   39           ADDC      A,R1
   \   00000C   F9           MOV       R1,A
   \   00000D   E8           MOV       A,R0
   \   00000E   24FE         ADD       A,#-0x2
   \   000010   F582         MOV       DPL,A
   \   000012   E9           MOV       A,R1
   \   000013   34FF         ADDC      A,#-0x1
   \   000015   F583         MOV       DPH,A
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V8,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V9,A
   \   00001E   90....       MOV       DPTR,#matchED
   \   000021   E0           MOVX      A,@DPTR
   \   000022   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000003                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000003   85..82       MOV       DPL,?V0
   \   000006   85..83       MOV       DPH,?V1
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   E5..         MOV       A,?V0
   \   000002   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000005   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_500:
   \   000008   22           RET
   2344          
   2345          /*********************************************************************
   2346           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2347           *
   2348           * @brief   End device bind timeout.
   2349           *
   2350           * @param  none
   2351           *
   2352           * @return  none
   2353           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2354          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   \                     ZDO_EndDeviceBindMatchTimeoutCB:
   2355          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2356            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   \   000004                ; Setup parameters for call to function ZDMatchSendState
   \   000004   7B00         MOV       R3,#0x0
   \   000006   7A85         MOV       R2,#-0x7b
   \   000008   7901         MOV       R1,#0x1
   \   00000A   12....       LCALL     `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   2357          }
   \   00000D   02....       LJMP      ??Subroutine171_0 & 0xFFFF
   2358          
   2359          /*********************************************************************
   2360           * ZDO MESSAGE PARSING API FUNCTIONS
   2361           */
   2362          
   2363          /*********************************************************************
   2364           * @fn          ZDO_ParseEndDeviceBindReq
   2365           *
   2366           * @brief       This function parses the End_Device_Bind_req message.
   2367           *
   2368           *     NOTE:  The clusters lists in bindReq are allocated in this
   2369           *            function and must be freed by that calling function.
   2370           *
   2371           * @param       inMsg  - incoming message (request)
   2372           * @param       bindReq - pointer to place to parse message to
   2373           *
   2374           * @return      none
   2375           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2376          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2377          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   2378            uint8 *msg;
   2379          
   2380            // Parse the message
   2381            bindReq->TransSeq = inMsg->TransSeq;
   \   000009   EA           MOV       A,R2
   \   00000A   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   00000D   3B           ADDC      A,R3
   \   00000E   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   2382            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_477:
   \   000011   A3           INC       DPTR
   \   000012   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000015   8C82         MOV       DPL,R4
   \   000017   8D83         MOV       DPH,R5
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E8           MOV       A,R0
   \   00001C   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   2383            bindReq->SecurityUse = inMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_538:
   \   00001F   EA           MOV       A,R2
   \   000020   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000023   3B           ADDC      A,R3
   \   000024   F583         MOV       DPH,A
   \   000026   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000029   F0           MOVX      @DPTR,A
   2384            msg = inMsg->asdu;
   \   00002A   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   00002D   F5..         MOV       ?V3,A
   2385          
   2386            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \   00002F   85..82       MOV       DPL,?V2
   \   000032   F583         MOV       DPH,A
   \   000034   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   12....       LCALL     ?Subroutine25 & 0xFFFF
   2387            msg += 2;
   \                     ??CrossCallReturnLabel_25:
   \   00003C   5002         JNC       ??ZDO_ParseEndDeviceBindReq_0
   \   00003E   05..         INC       ?V3
   2388          
   2389            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   000040                ; Setup parameters for call to function sAddrExtCpy
   \   000040   FC           MOV       R4,A
   \   000041   AD..         MOV       R5,?V3
   \   000043   EE           MOV       A,R6
   \   000044   2406         ADD       A,#0x6
   \   000046   FA           MOV       R2,A
   \   000047   E4           CLR       A
   \   000048   3F           ADDC      A,R7
   \   000049   12....       LCALL     ?Subroutine47 & 0xFFFF
   2390            msg += Z_EXTADDR_LEN;
   2391          
   2392            bindReq->endpoint = *msg++;
   \                     ??CrossCallReturnLabel_430:
   \   00004C   C0E0         PUSH      A
   \   00004E   EE           MOV       A,R6
   \   00004F   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000052   3F           ADDC      A,R7
   \   000053   F583         MOV       DPH,A
   \   000055   D0E0         POP       A
   \   000057   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00005A   5002         JNC       ??ZDO_ParseEndDeviceBindReq_1
   \   00005C   05..         INC       ?V3
   2393            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   00005E   F582         MOV       DPL,A
   \   000060   85..83       MOV       DPH,?V3
   \   000063   12....       LCALL     ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   000066   F9           MOV       R1,A
   \   000067   EE           MOV       A,R6
   \   000068   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   00006B   3F           ADDC      A,R7
   \   00006C   F583         MOV       DPH,A
   \   00006E   EA           MOV       A,R2
   \   00006F   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   2394            msg += 2;
   2395          
   2396            bindReq->inClusters = NULL;
   \                     ??CrossCallReturnLabel_539:
   \   000072   EE           MOV       A,R6
   \   000073   2412         ADD       A,#0x12
   \   000075   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000078   E4           CLR       A
   \   000079   F0           MOVX      @DPTR,A
   \   00007A   A3           INC       DPTR
   \   00007B   F0           MOVX      @DPTR,A
   2397            bindReq->outClusters = NULL;
   \   00007C   EE           MOV       A,R6
   \   00007D   2415         ADD       A,#0x15
   \   00007F   F5..         MOV       ?V6,A
   \   000081   E4           CLR       A
   \   000082   3F           ADDC      A,R7
   \   000083   F5..         MOV       ?V7,A
   \   000085   85..82       MOV       DPL,?V6
   \   000088   F583         MOV       DPH,A
   \   00008A   E4           CLR       A
   \   00008B   F0           MOVX      @DPTR,A
   \   00008C   A3           INC       DPTR
   \   00008D   12....       LCALL     ?Subroutine41 & 0xFFFF
   2398          
   2399            if ((bindReq->numInClusters = *msg++) &&
   2400                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \                     ??CrossCallReturnLabel_58:
   \   000090   E0           MOVX      A,@DPTR
   \   000091   F8           MOV       R0,A
   \   000092   EE           MOV       A,R6
   \   000093   2411         ADD       A,#0x11
   \   000095   F5..         MOV       ?V0,A
   \   000097   E4           CLR       A
   \   000098   3F           ADDC      A,R7
   \   000099   F5..         MOV       ?V1,A
   \   00009B   E8           MOV       A,R0
   \   00009C   85..82       MOV       DPL,?V0
   \   00009F   85..83       MOV       DPH,?V1
   \   0000A2   F0           MOVX      @DPTR,A
   \   0000A3   E5..         MOV       A,?V2
   \   0000A5   2403         ADD       A,#0x3
   \   0000A7   F5..         MOV       ?V2,A
   \   0000A9   5002         JNC       ??ZDO_ParseEndDeviceBindReq_2
   \   0000AB   05..         INC       ?V3
   \                     ??ZDO_ParseEndDeviceBindReq_2:
   \   0000AD   E8           MOV       A,R0
   \   0000AE   6031         JZ        ??ZDO_ParseEndDeviceBindReq_3
   \   0000B0                ; Setup parameters for call to function osal_mem_alloc
   \   0000B0   28           ADD       A,R0
   \   0000B1   FA           MOV       R2,A
   \   0000B2   E4           CLR       A
   \   0000B3   33           RLC       A
   \   0000B4   FB           MOV       R3,A
   \   0000B5   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B8   8A..         MOV       ?V8,R2
   \   0000BA   8B..         MOV       ?V9,R3
   \   0000BC   AC..         MOV       R4,?V8
   \   0000BE   AD..         MOV       R5,?V9
   \   0000C0   85..82       MOV       DPL,?V4
   \   0000C3   85..83       MOV       DPH,?V5
   \   0000C6   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000C9   4D           ORL       A,R5
   \   0000CA   6015         JZ        ??ZDO_ParseEndDeviceBindReq_3
   2401            {
   2402              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   0000CC                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000CC   AA..         MOV       R2,?V2
   \   0000CE   AB..         MOV       R3,?V3
   \   0000D0   85..82       MOV       DPL,?V0
   \   0000D3   85..83       MOV       DPH,?V1
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   F9           MOV       R1,A
   \   0000D8   12....       LCALL     `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0000DB   8A..         MOV       ?V2,R2
   \   0000DD   8B..         MOV       ?V3,R3
   \   0000DF   8008         SJMP      ??ZDO_ParseEndDeviceBindReq_4
   2403            }
   2404            else
   2405            {
   2406              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_3:
   \   0000E1   85..82       MOV       DPL,?V0
   \   0000E4   85..83       MOV       DPH,?V1
   \   0000E7   E4           CLR       A
   \   0000E8   F0           MOVX      @DPTR,A
   2407            }
   2408          
   2409            if ((bindReq->numOutClusters = *msg++) &&
   2410                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??ZDO_ParseEndDeviceBindReq_4:
   \   0000E9   85..82       MOV       DPL,?V2
   \   0000EC   85..83       MOV       DPH,?V3
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   FA           MOV       R2,A
   \   0000F1   EE           MOV       A,R6
   \   0000F2   2414         ADD       A,#0x14
   \   0000F4   F8           MOV       R0,A
   \   0000F5   E4           CLR       A
   \   0000F6   3F           ADDC      A,R7
   \   0000F7   F9           MOV       R1,A
   \   0000F8   E8           MOV       A,R0
   \   0000F9   FE           MOV       R6,A
   \   0000FA   E9           MOV       A,R1
   \   0000FB   FF           MOV       R7,A
   \   0000FC   EA           MOV       A,R2
   \   0000FD   8882         MOV       DPL,R0
   \   0000FF   8983         MOV       DPH,R1
   \   000101   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000104   8582..       MOV       ?V2,DPL
   \   000107   8583..       MOV       ?V3,DPH
   \   00010A   6026         JZ        ??ZDO_ParseEndDeviceBindReq_5
   \   00010C                ; Setup parameters for call to function osal_mem_alloc
   \   00010C   2A           ADD       A,R2
   \   00010D   FA           MOV       R2,A
   \   00010E   E4           CLR       A
   \   00010F   33           RLC       A
   \   000110   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   000113   AC..         MOV       R4,?V0
   \   000115   AD..         MOV       R5,?V1
   \   000117   85..82       MOV       DPL,?V6
   \   00011A   85..83       MOV       DPH,?V7
   \   00011D   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000120   4D           ORL       A,R5
   \   000121   600F         JZ        ??ZDO_ParseEndDeviceBindReq_5
   2411            {
   2412              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   000123                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000123   AA..         MOV       R2,?V2
   \   000125   AB..         MOV       R3,?V3
   \   000127   8E82         MOV       DPL,R6
   \   000129   8F83         MOV       DPH,R7
   \   00012B   E0           MOVX      A,@DPTR
   \   00012C   F9           MOV       R1,A
   \   00012D   12....       LCALL     `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   000130   8006         SJMP      ??ZDO_ParseEndDeviceBindReq_6
   2413            }
   2414            else
   2415            {
   2416              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_5:
   \   000132   8E82         MOV       DPL,R6
   \   000134   8F83         MOV       DPH,R7
   \   000136   E4           CLR       A
   \   000137   F0           MOVX      @DPTR,A
   2417            }
   2418          }
   \                     ??ZDO_ParseEndDeviceBindReq_6:
   \   000138   80..         SJMP      ??Subroutine209_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine208_0
   \   000001                ; // Fall through to label ??Subroutine208_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine208_0:
   \   000000   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000003   85..82       MOV       DPL,?V2
   \   000006   85..83       MOV       DPH,?V3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL     ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_497:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine213_0:
   \   000000   12....       LCALL     ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   000003                REQUIRE ??Subroutine214_0
   \   000003                ; // Fall through to label ??Subroutine214_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine214_0:
   \   000000   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_484:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine155:
   \   000000   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000003   F5..         MOV       ?V2,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine217_0
   \   000002                ; // Fall through to label ??Subroutine217_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine217_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   E5..         MOV       A,?V2
   \   000006   2402         ADD       A,#0x2
   \   000008   F5..         MOV       ?V2,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   E5..         MOV       A,?V2
   \   000003   2409         ADD       A,#0x9
   \   000005   F5..         MOV       ?V2,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   12....       LCALL     ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL     ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine166:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL     ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_533:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002                REQUIRE ??Subroutine223_0
   \   000002                ; // Fall through to label ??Subroutine223_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine223_0:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F9           MOV       R1,A
   \   000003   EA           MOV       A,R2
   \   000004   8C82         MOV       DPL,R4
   \   000006   8D83         MOV       DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   EA           MOV       A,R2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine169:
   \   000000   EA           MOV       A,R2
   \   000001   2413         ADD       A,#0x13
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3B           ADDC      A,R3
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET
   2419          
   2420          /*********************************************************************
   2421           * @fn          ZDO_ParseBindUnbindReq
   2422           *
   2423           * @brief       This function parses the Bind_req or Unbind_req message.
   2424           *
   2425           * @param       inMsg  - incoming message (request)
   2426           * @param       pReq - place to put parsed information
   2427           *
   2428           * @return      none
   2429           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2430          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2431          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   2432            uint8 *msg;
   2433          
   2434            msg = inMsg->asdu;
   \   000009   12....       LCALL     ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_380:
   \   00000C   3B           ADDC      A,R3
   \   00000D   12....       LCALL     ?Subroutine81 & 0xFFFF
   2435            osal_cpyExtAddr( pReq->srcAddress, msg );
   \                     ??CrossCallReturnLabel_273:
   \   000010                ; Setup parameters for call to function sAddrExtCpy
   \   000010   AC..         MOV       R4,?V0
   \   000012   FD           MOV       R5,A
   \   000013   EE           MOV       A,R6
   \   000014   FA           MOV       R2,A
   \   000015   EF           MOV       A,R7
   \   000016   FB           MOV       R3,A
   \   000017   12....       LCALL     ?Subroutine48 & 0xFFFF
   2436            msg += Z_EXTADDR_LEN;
   2437            pReq->srcEndpoint = *msg++;
   \                     ??CrossCallReturnLabel_68:
   \   00001A   8E82         MOV       DPL,R6
   \   00001C   8F83         MOV       DPH,R7
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   F0           MOVX      @DPTR,A
   \   000027   E5..         MOV       A,?V0
   \   000029   2409         ADD       A,#0x9
   \   00002B   F5..         MOV       ?V0,A
   \   00002D   5002         JNC       ??ZDO_ParseBindUnbindReq_0
   \   00002F   05..         INC       ?V1
   2438            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   000031   F582         MOV       DPL,A
   \   000033   85..83       MOV       DPH,?V1
   \   000036   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000039   F0           MOVX      @DPTR,A
   \   00003A   A3           INC       DPTR
   \   00003B   E9           MOV       A,R1
   \   00003C   12....       LCALL     ?Subroutine28 & 0xFFFF
   2439            msg += 2;
   2440            pReq->dstAddress.addrMode = *msg++;
   \                     ??CrossCallReturnLabel_33:
   \   00003F   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000042   E5..         MOV       A,?V0
   \   000044   2403         ADD       A,#0x3
   \   000046   F5..         MOV       ?V0,A
   \   000048   5002         JNC       ??ZDO_ParseBindUnbindReq_1
   \   00004A   05..         INC       ?V1
   2441            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \                     ??ZDO_ParseBindUnbindReq_1:
   \   00004C   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   00004F   7010         JNZ       ??ZDO_ParseBindUnbindReq_2
   2442            {
   2443              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   000051                ; Setup parameters for call to function sAddrExtCpy
   \   000051   AC..         MOV       R4,?V0
   \   000053   AD..         MOV       R5,?V1
   \   000055   12....       LCALL     ?Subroutine48 & 0xFFFF
   2444              msg += Z_EXTADDR_LEN;
   2445              pReq->dstEndpoint = *msg;
   2446            }
   \                     ??CrossCallReturnLabel_69:
   \   000058   C0E0         PUSH      A
   \   00005A   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   00005D   D0E0         POP       A
   \   00005F   800C         SJMP      ??ZDO_ParseBindUnbindReq_3
   2447            else
   2448            {
   2449              // copy group address
   2450              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_2:
   \   000061   85..82       MOV       DPL,?V0
   \   000064   85..83       MOV       DPH,?V1
   \   000067   12....       LCALL     ?Subroutine83 & 0xFFFF
   2451            }
   \                     ??CrossCallReturnLabel_116:
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   A3           INC       DPTR
   \   00006C   E9           MOV       A,R1
   \                     ??ZDO_ParseBindUnbindReq_3:
   \   00006D   F0           MOVX      @DPTR,A
   2452          }
   \   00006E   02....       LJMP      ??Subroutine174_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL     ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   EE           MOV       A,R6
   \   000001   2414         ADD       A,#0x14
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   EE           MOV       A,R6
   \   000001   240B         ADD       A,#0xb
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   FB           MOV       R3,A
   \   000007   7403         MOV       A,#0x3
   \   000009   68           XRL       A,R0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   F8           MOV       R0,A
   \   000001   EE           MOV       A,R6
   \   000002   12....       LCALL     ??Subroutine195_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   E8           MOV       A,R0
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_518:
   \   000003   F9           MOV       R1,A
   \   000004   EC           MOV       A,R4
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL     ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   000003   F9           MOV       R1,A
   \   000004   EA           MOV       A,R2
   \   000005   8E82         MOV       DPL,R6
   \   000007   8F83         MOV       DPH,R7
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   22           RET
   2453          
   2454          /*********************************************************************
   2455           * @fn      ZDO_ParseAddrRsp
   2456           *
   2457           * @brief   Turns the inMsg (incoming message) into the out parsed
   2458           *          structure.
   2459           *
   2460           * @param   inMsg - incoming message
   2461           *
   2462           * @return  pointer to parsed structures.  This structure was
   2463           *          allocated using osal_mem_alloc, so it must be freed
   2464           *          by the calling function [osal_mem_free()].
   2465           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2466          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   2467          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2468            ZDO_NwkIEEEAddrResp_t *rsp;
   2469            uint8 *msg;
   2470            byte cnt = 0;
   \   000005   75..00       MOV       ?V2,#0x0
   2471          
   2472            // Calculate the number of items in the list
   2473            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   000008   EA           MOV       A,R2
   \   000009   2413         ADD       A,#0x13
   \   00000B   12....       LCALL     ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   00000E   EA           MOV       A,R2
   \   00000F   2410         ADD       A,#0x10
   \   000011   F582         MOV       DPL,A
   \   000013   E4           CLR       A
   \   000014   3B           ADDC      A,R3
   \   000015   F583         MOV       DPH,A
   \   000017   E0           MOVX      A,@DPTR
   \   000018   C3           CLR       C
   \   000019   940C         SUBB      A,#0xc
   \   00001B   400E         JC        ??ZDO_ParseAddrRsp_0
   2474              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   00001D   8882         MOV       DPL,R0
   \   00001F   8983         MOV       DPH,R1
   \   000021   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   000024   240B         ADD       A,#0xb
   \   000026   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000029   F5..         MOV       ?V2,A
   2475            else
   2476              cnt = 0;
   2477          
   2478            // Make buffer
   2479            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_0:
   \   00002B                ; Setup parameters for call to function osal_mem_alloc
   \   00002B   A8..         MOV       R0,?V2
   \   00002D   E8           MOV       A,R0
   \   00002E   28           ADD       A,R0
   \   00002F   F8           MOV       R0,A
   \   000030   E4           CLR       A
   \   000031   33           RLC       A
   \   000032   F9           MOV       R1,A
   \   000033   E8           MOV       A,R0
   \   000034   240D         ADD       A,#0xd
   \   000036   12....       LCALL     ?Subroutine105 & 0xFFFF
   2480          
   2481            if ( rsp )
   \                     ??CrossCallReturnLabel_157:
   \   000039   7003         JNZ       $+5
   \   00003B   02....       LJMP      ??ZDO_ParseAddrRsp_1 & 0xFFFF
   2482            {
   2483              msg = inMsg->asdu;
   \   00003E   8E82         MOV       DPL,R6
   \   000040   8F83         MOV       DPH,R7
   \   000042   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_472:
   \   000045   FF           MOV       R7,A
   2484          
   2485              rsp->status = *msg++;
   \   000046   8E82         MOV       DPL,R6
   \   000048   F583         MOV       DPH,A
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F8           MOV       R0,A
   \   00004C   8A82         MOV       DPL,R2
   \   00004E   8B83         MOV       DPH,R3
   \   000050   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000053   AE82         MOV       R6,DPL
   \   000055   AF83         MOV       R7,DPH
   2486              if ( rsp->status == ZDO_SUCCESS )
   \   000057   707E         JNZ       ??ZDO_ParseAddrRsp_1
   2487              {
   2488                osal_cpyExtAddr( rsp->extAddr, msg );
   \   000059                ; Setup parameters for call to function sAddrExtCpy
   \   000059   EE           MOV       A,R6
   \   00005A   FC           MOV       R4,A
   \   00005B   EF           MOV       A,R7
   \   00005C   FD           MOV       R5,A
   \   00005D   EA           MOV       A,R2
   \   00005E   2403         ADD       A,#0x3
   \   000060   FA           MOV       R2,A
   \   000061   E4           CLR       A
   \   000062   12....       LCALL     ?Subroutine129 & 0xFFFF
   2489                msg += Z_EXTADDR_LEN;
   \                     ??CrossCallReturnLabel_210:
   \   000065   EE           MOV       A,R6
   \   000066   2408         ADD       A,#0x8
   \   000068   FE           MOV       R6,A
   \   000069   5001         JNC       ??ZDO_ParseAddrRsp_2
   \   00006B   0F           INC       R7
   2490                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_2:
   \   00006C   F582         MOV       DPL,A
   \   00006E   8F83         MOV       DPH,R7
   \   000070   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000073   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   2491          
   2492                msg += 2;
   2493                rsp->numAssocDevs = 0;
   \                     ??CrossCallReturnLabel_543:
   \   000076   E5..         MOV       A,?V0
   \   000078   240B         ADD       A,#0xb
   \   00007A   F8           MOV       R0,A
   \   00007B   E4           CLR       A
   \   00007C   35..         ADDC      A,?V1
   \   00007E   F9           MOV       R1,A
   \   00007F   E8           MOV       A,R0
   \   000080   FA           MOV       R2,A
   \   000081   E9           MOV       A,R1
   \   000082   FB           MOV       R3,A
   \   000083   8882         MOV       DPL,R0
   \   000085   F583         MOV       DPH,A
   \   000087   E4           CLR       A
   \   000088   F0           MOVX      @DPTR,A
   2494          
   2495                // StartIndex field is only present if NumAssocDev field is non-zero.
   2496                if ( cnt > 0 )
   \   000089   E5..         MOV       A,?V2
   \   00008B   604A         JZ        ??ZDO_ParseAddrRsp_1
   2497                {
   2498                  uint16 *pList = &(rsp->devList[0]);
   \   00008D   E5..         MOV       A,?V0
   \   00008F   240D         ADD       A,#0xd
   \   000091   F8           MOV       R0,A
   \   000092   E4           CLR       A
   \   000093   35..         ADDC      A,?V1
   \   000095   F9           MOV       R1,A
   2499                  byte n = cnt;
   2500          
   2501                  rsp->numAssocDevs = *msg++;
   \   000096   8E82         MOV       DPL,R6
   \   000098   8F83         MOV       DPH,R7
   \   00009A   A3           INC       DPTR
   \   00009B   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_527:
   \   00009E   12....       LCALL     ?Subroutine37 & 0xFFFF
   2502                  rsp->startIndex = *msg++;
   \                     ??CrossCallReturnLabel_53:
   \   0000A1   C0E0         PUSH      A
   \   0000A3   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   0000A6   D0E0         POP       A
   \   0000A8   F0           MOVX      @DPTR,A
   \   0000A9   EE           MOV       A,R6
   \   0000AA   2404         ADD       A,#0x4
   \   0000AC   FE           MOV       R6,A
   \   0000AD   5001         JNC       ??ZDO_ParseAddrRsp_3
   \   0000AF   0F           INC       R7
   \                     ??ZDO_ParseAddrRsp_3:
   \   0000B0   85....       MOV       ?V3,?V2
   2503          
   2504                  while ( n != 0 )
   2505                  {
   2506                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_4:
   \   0000B3   8E82         MOV       DPL,R6
   \   0000B5   8F83         MOV       DPH,R7
   \   0000B7   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_516:
   \   0000BA   FB           MOV       R3,A
   \   0000BB   EC           MOV       A,R4
   \   0000BC   8882         MOV       DPL,R0
   \   0000BE   8983         MOV       DPH,R1
   \   0000C0   12....       LCALL     ??Subroutine182_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   0000C3   E8           MOV       A,R0
   \   0000C4   2402         ADD       A,#0x2
   \   0000C6   F8           MOV       R0,A
   \   0000C7   5001         JNC       ??ZDO_ParseAddrRsp_5
   \   0000C9   09           INC       R1
   2507                    msg += sizeof( uint16 );
   \                     ??ZDO_ParseAddrRsp_5:
   \   0000CA   EE           MOV       A,R6
   \   0000CB   2402         ADD       A,#0x2
   \   0000CD   FE           MOV       R6,A
   \   0000CE   5001         JNC       ??ZDO_ParseAddrRsp_6
   \   0000D0   0F           INC       R7
   2508                    n--;
   2509                  }
   \                     ??ZDO_ParseAddrRsp_6:
   \   0000D1   15..         DEC       ?V3
   \   0000D3   E5..         MOV       A,?V3
   \   0000D5   70DC         JNZ       ??ZDO_ParseAddrRsp_4
   2510                }
   2511              }
   2512            }
   2513            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_1:
   \   0000D7   AA..         MOV       R2,?V0
   \   0000D9   AB..         MOV       R3,?V1
   \   0000DB                REQUIRE ?Subroutine4
   \   0000DB                ; // Fall through to label ?Subroutine4
   2514          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   3B           ADDC      A,R3
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   FE           MOV       R6,A
   \   000006   E9           MOV       A,R1
   \   000007   FF           MOV       R7,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   35..         ADDC      A,?V1
   \   000002   FB           MOV       R3,A
   \   000003   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   E5..         MOV       A,?V0
   \   000002   240C         ADD       A,#0xc
   \   000004   12....       LCALL     ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_505:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL     ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   12....       LCALL     ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   000003   F9           MOV       R1,A
   \   000004   EA           MOV       A,R2
   \   000005   85..82       MOV       DPL,?V0
   \   000008   85..83       MOV       DPH,?V1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   39           ADDC      A,R1
   \   000003   FB           MOV       R3,A
   \   000004   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EA           MOV       A,R2
   \   00000C   4B           ORL       A,R3
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine224_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine225_0
   \   000001                ; // Fall through to label ??Subroutine225_0
   2515          
   2516          /*********************************************************************
   2517           * @fn          ZDO_ParseNodeDescRsp
   2518           *
   2519           * @brief       This function parses the Node_Desc_rsp message.
   2520           *
   2521           * @param       inMsg - incoming message
   2522           * @param       pNDRsp - place to parse the message into
   2523           *
   2524           * @return      none
   2525           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2526          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   2527          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2528            uint8 *msg;
   2529          
   2530            msg = inMsg->asdu;
   \   000005   12....       LCALL     ?Subroutine10 & 0xFFFF
   2531          
   2532            pNDRsp->status = *msg++;
   2533            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2534          
   2535            if ( pNDRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   000008   6003         JZ        $+5
   \   00000A   02....       LJMP      ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   2536            {
   2537              msg += 2;
   2538              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \   00000D   E8           MOV       A,R0
   \   00000E   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000011   39           ADDC      A,R1
   \   000012   FB           MOV       R3,A
   \   000013   EC           MOV       A,R4
   \   000014   2403         ADD       A,#0x3
   \   000016   FE           MOV       R6,A
   \   000017   E4           CLR       A
   \   000018   3D           ADDC      A,R5
   \   000019   FF           MOV       R7,A
   \   00001A   8A82         MOV       DPL,R2
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   5407         ANL       A,#0x7
   \   000021   F5..         MOV       ?V0,A
   \   000023   8E82         MOV       DPL,R6
   \   000025   8F83         MOV       DPH,R7
   \   000027   E0           MOVX      A,@DPTR
   \   000028   54F8         ANL       A,#0xf8
   \   00002A   45..         ORL       A,?V0
   \   00002C   F5..         MOV       ?V1,A
   \   00002E   12....       LCALL     ?Subroutine34 & 0xFFFF
   2539          
   2540              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \                     ??CrossCallReturnLabel_44:
   \   000031   A2E3         MOV       C,0xE0 /* A   */.3
   \   000033   E4           CLR       A
   \   000034   33           RLC       A
   \   000035   F5..         MOV       ?V0,A
   \   000037   A2E0         MOV       C,0xE0 /* A   */.0
   \   000039   E4           CLR       A
   \   00003A   33           RLC       A
   \   00003B   33           RLC       A
   \   00003C   33           RLC       A
   \   00003D   33           RLC       A
   \   00003E   F5..         MOV       ?V0,A
   \   000040   74F7         MOV       A,#-0x9
   \   000042   55..         ANL       A,?V1
   \   000044   45..         ORL       A,?V0
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   12....       LCALL     ?Subroutine34 & 0xFFFF
   2541              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \                     ??CrossCallReturnLabel_45:
   \   00004D   A2E4         MOV       C,0xE0 /* A   */.4
   \   00004F   E4           CLR       A
   \   000050   33           RLC       A
   \   000051   FA           MOV       R2,A
   \   000052   A2E0         MOV       C,0xE0 /* A   */.0
   \   000054   E4           CLR       A
   \   000055   33           RLC       A
   \   000056   C4           SWAP      A
   \   000057   FA           MOV       R2,A
   \   000058   8E82         MOV       DPL,R6
   \   00005A   8F83         MOV       DPH,R7
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   54EF         ANL       A,#0xef
   \   00005F   4A           ORL       A,R2
   \   000060   F0           MOVX      @DPTR,A
   2542          
   2543              msg++;  // Reserved bits.
   2544              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   000061   E8           MOV       A,R0
   \   000062   2403         ADD       A,#0x3
   \   000064   FA           MOV       R2,A
   \   000065   E4           CLR       A
   \   000066   39           ADDC      A,R1
   \   000067   FB           MOV       R3,A
   \   000068   EC           MOV       A,R4
   \   000069   2404         ADD       A,#0x4
   \   00006B   0E           INC       R6
   \   00006C   E4           CLR       A
   \   00006D   3D           ADDC      A,R5
   \   00006E   FF           MOV       R7,A
   \   00006F   8A82         MOV       DPL,R2
   \   000071   8B83         MOV       DPH,R3
   \   000073   E0           MOVX      A,@DPTR
   \   000074   54F8         ANL       A,#0xf8
   \   000076   F5..         MOV       ?V0,A
   \   000078   8E82         MOV       DPL,R6
   \   00007A   8F83         MOV       DPH,R7
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   5407         ANL       A,#0x7
   \   00007F   45..         ORL       A,?V0
   \   000081   F5..         MOV       ?V0,A
   \   000083   12....       LCALL     ?Subroutine34 & 0xFFFF
   2545              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \                     ??CrossCallReturnLabel_46:
   \   000086   5407         ANL       A,#0x7
   \   000088   FA           MOV       R2,A
   \   000089   74F8         MOV       A,#-0x8
   \   00008B   55..         ANL       A,?V0
   \   00008D   4A           ORL       A,R2
   \   00008E   8E82         MOV       DPL,R6
   \   000090   8F83         MOV       DPH,R7
   \   000092   12....       LCALL     ?Subroutine26 & 0xFFFF
   2546              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \                     ??CrossCallReturnLabel_27:
   \   000095   8C82         MOV       DPL,R4
   \   000097   8D83         MOV       DPH,R5
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   12....       LCALL     ?Subroutine27 & 0xFFFF
   2547              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \                     ??CrossCallReturnLabel_30:
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   12....       LCALL     ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_494:
   \   0000A6   12....       LCALL     ?Subroutine23 & 0xFFFF
   2548              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \                     ??CrossCallReturnLabel_20:
   \   0000A9   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   0000AC   12....       LCALL     ?Subroutine23 & 0xFFFF
   2549              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \                     ??CrossCallReturnLabel_21:
   \   0000AF   A3           INC       DPTR
   \   0000B0   12....       LCALL     ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_495:
   \   0000B3   12....       LCALL     ?Subroutine19 & 0xFFFF
   2550              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_14:
   \   0000B6   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   0000B9   12....       LCALL     ?Subroutine19 & 0xFFFF
   2551              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_15:
   \   0000BC   A3           INC       DPTR
   \   0000BD   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   A3           INC       DPTR
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   F0           MOVX      @DPTR,A
   \   0000CA   E8           MOV       A,R0
   \   0000CB   240A         ADD       A,#0xa
   \   0000CD   F8           MOV       R0,A
   \   0000CE   5001         JNC       ??ZDO_ParseNodeDescRsp_1
   \   0000D0   09           INC       R1
   2552              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseNodeDescRsp_1:
   \   0000D1   F582         MOV       DPL,A
   \   0000D3   8983         MOV       DPH,R1
   \   0000D5   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_473:
   \   0000D8   FB           MOV       R3,A
   \   0000D9   EC           MOV       A,R4
   \   0000DA   240B         ADD       A,#0xb
   \   0000DC   F582         MOV       DPL,A
   \   0000DE   E4           CLR       A
   \   0000DF   3D           ADDC      A,R5
   \   0000E0   F583         MOV       DPH,A
   \   0000E2   EE           MOV       A,R6
   \   0000E3   12....       LCALL     ??Subroutine182_0 & 0xFFFF
   2553              msg += 2;
   2554              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_308:
   \   0000E6   8882         MOV       DPL,R0
   \   0000E8   8983         MOV       DPH,R1
   \   0000EA   A3           INC       DPTR
   \   0000EB   A3           INC       DPTR
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   C0E0         PUSH      A
   \   0000EF   EC           MOV       A,R4
   \   0000F0   240D         ADD       A,#0xd
   \   0000F2   F582         MOV       DPL,A
   \   0000F4   E4           CLR       A
   \   0000F5   3D           ADDC      A,R5
   \   0000F6   F583         MOV       DPH,A
   \   0000F8   D0E0         POP       A
   \   0000FA   12....       LCALL     ?Subroutine27 & 0xFFFF
   2555              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   2556              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   2557            }
   \                     ??CrossCallReturnLabel_31:
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   C0E0         PUSH      A
   \   000100   EC           MOV       A,R4
   \   000101   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000104   3D           ADDC      A,R5
   \   000105   F583         MOV       DPH,A
   \   000107   D0E0         POP       A
   \   000109   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00010C   C0E0         PUSH      A
   \   00010E   EC           MOV       A,R4
   \   00010F   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000112   3D           ADDC      A,R5
   \   000113   F583         MOV       DPH,A
   \   000115   D0E0         POP       A
   \   000117   F0           MOVX      @DPTR,A
   2558          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   000118   02....       LJMP      ??Subroutine174_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_483:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   12....       LCALL     ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   000003   3B           ADDC      A,R3
   \   000004   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_420:
   \   000007   8882         MOV       DPL,R0
   \   000009   12....       LCALL     ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   8882         MOV       DPL,R0
   \   00000F   8983         MOV       DPH,R1
   \   000011   A3           INC       DPTR
   \   000012   A882         MOV       R0,DPL
   \   000014   A983         MOV       R1,DPH
   \   000016   E0           MOVX      A,@DPTR
   \   000017   FE           MOV       R6,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FB           MOV       R3,A
   \   00001B   EE           MOV       A,R6
   \   00001C   8C82         MOV       DPL,R4
   \   00001E   8D83         MOV       DPH,R5
   \   000020   A3           INC       DPTR
   \   000021   F0           MOVX      @DPTR,A
   \   000022   A3           INC       DPTR
   \   000023   EB           MOV       A,R3
   \   000024   F0           MOVX      @DPTR,A
   \   000025   8C82         MOV       DPL,R4
   \   000027   8D83         MOV       DPH,R5
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   22           RET
   2559          
   2560          /*********************************************************************
   2561           * @fn          ZDO_ParesPowerDescRsp
   2562           *
   2563           * @brief       This function parses the Power_Desc_rsp message.
   2564           *
   2565           * @param       inMsg  - incoming message
   2566           * @param       pNPRsp - place to parse the message into
   2567           *
   2568           * @return      none
   2569           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2570          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   2571          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2572            uint8 *msg;
   2573          
   2574            msg = inMsg->asdu;
   \   000005   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000008   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   2575            pNPRsp->status = *msg++;
   \                     ??CrossCallReturnLabel_356:
   \   00000B   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_479:
   \   00000E   AA82         MOV       R2,DPL
   \   000010   AB83         MOV       R3,DPH
   2576            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000012   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_474:
   \   000015   F9           MOV       R1,A
   \   000016   EE           MOV       A,R6
   \   000017   8C82         MOV       DPL,R4
   \   000019   8D83         MOV       DPH,R5
   \   00001B   A3           INC       DPTR
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   E9           MOV       A,R1
   \   00001F   12....       LCALL     ?Subroutine33 & 0xFFFF
   2577          
   2578            if ( pNPRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_43:
   \   000022   E0           MOVX      A,@DPTR
   \   000023   6003         JZ        $+5
   \   000025   02....       LJMP      ??ZDO_ParsePowerDescRsp_0 & 0xFFFF
   2579            {
   2580              msg += 2;
   2581              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   \   000028   EA           MOV       A,R2
   \   000029   2402         ADD       A,#0x2
   \   00002B   12....       LCALL     ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   00002E   EC           MOV       A,R4
   \   00002F   2403         ADD       A,#0x3
   \   000031   E4           CLR       A
   \   000032   3D           ADDC      A,R5
   \   000033   0C           INC       R4
   \   000034   0C           INC       R4
   \   000035   0C           INC       R4
   \   000036   FD           MOV       R5,A
   \   000037   8C82         MOV       DPL,R4
   \   000039   F583         MOV       DPH,A
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   540F         ANL       A,#0xf
   \   00003E   F5..         MOV       ?V0,A
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F5..         MOV       ?V1,A
   \   000044   8882         MOV       DPL,R0
   \   000046   8983         MOV       DPH,R1
   \   000048   E0           MOVX      A,@DPTR
   \   000049   C4           SWAP      A
   \   00004A   540F         ANL       A,#0xf
   \   00004C   F5..         MOV       ?V2,A
   \   00004E   75..00       MOV       ?V3,#0x0
   \   000051   7404         MOV       A,#0x4
   \   000053   78..         MOV       R0,#?V2
   \   000055   12....       LCALL     ?S_SHL
   \   000058   E5..         MOV       A,?V0
   \   00005A   45..         ORL       A,?V2
   \   00005C   F8           MOV       R0,A
   \   00005D   A9..         MOV       R1,?V1
   \   00005F   8C82         MOV       DPL,R4
   \   000061   8D83         MOV       DPH,R5
   \   000063   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   2582              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   \                     ??CrossCallReturnLabel_540:
   \   000066   E8           MOV       A,R0
   \   000067   54F0         ANL       A,#0xf0
   \   000069   F8           MOV       R0,A
   \   00006A   8E82         MOV       DPL,R6
   \   00006C   8F83         MOV       DPH,R7
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   540F         ANL       A,#0xf
   \   000071   FE           MOV       R6,A
   \   000072   E8           MOV       A,R0
   \   000073   4E           ORL       A,R6
   \   000074   F5..         MOV       ?V0,A
   \   000076   8C82         MOV       DPL,R4
   \   000078   8D83         MOV       DPH,R5
   \   00007A   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   2583              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   \                     ??CrossCallReturnLabel_541:
   \   00007D   EA           MOV       A,R2
   \   00007E   2403         ADD       A,#0x3
   \   000080   12....       LCALL     ?Subroutine131 & 0xFFFF
   2584              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   2585            }
   \                     ??CrossCallReturnLabel_217:
   \   000083   E5..         MOV       A,?V1
   \   000085   540F         ANL       A,#0xf
   \   000087   F5..         MOV       ?V1,A
   \   000089   8882         MOV       DPL,R0
   \   00008B   8983         MOV       DPH,R1
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   C4           SWAP      A
   \   00008F   540F         ANL       A,#0xf
   \   000091   F5..         MOV       ?V2,A
   \   000093   740C         MOV       A,#0xc
   \   000095   78..         MOV       R0,#?V2
   \   000097   12....       LCALL     ?S_SHL
   \   00009A   E5..         MOV       A,?V1
   \   00009C   45..         ORL       A,?V3
   \   00009E   F9           MOV       R1,A
   \   00009F   8C82         MOV       DPL,R4
   \   0000A1   8D83         MOV       DPH,R5
   \   0000A3   E5..         MOV       A,?V0
   \   0000A5   F0           MOVX      @DPTR,A
   \   0000A6   A3           INC       DPTR
   \   0000A7   E9           MOV       A,R1
   \   0000A8   12....       LCALL     ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   0000AB   540F         ANL       A,#0xf
   \   0000AD   F8           MOV       R0,A
   \   0000AE   EA           MOV       A,R2
   \   0000AF   2404         ADD       A,#0x4
   \   0000B1   8C82         MOV       DPL,R4
   \   0000B3   8D83         MOV       DPH,R5
   \   0000B5   A3           INC       DPTR
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   54F0         ANL       A,#0xf0
   \   0000B9   F0           MOVX      @DPTR,A
   \   0000BA   E8           MOV       A,R0
   \   0000BB   F9           MOV       R1,A
   \   0000BC   8C82         MOV       DPL,R4
   \   0000BE   8D83         MOV       DPH,R5
   \   0000C0   A3           INC       DPTR
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   49           ORL       A,R1
   \   0000C3   F0           MOVX      @DPTR,A
   2586          }
   \                     ??ZDO_ParsePowerDescRsp_0:
   \   0000C4   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   8A82         MOV       DPL,R2
   \   000002                REQUIRE ??Subroutine213_0
   \   000002                ; // Fall through to label ??Subroutine213_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   000003   3B           ADDC      A,R3
   \   000004   F583         MOV       DPH,A
   \   000006   22           RET
   2587          
   2588          /*********************************************************************
   2589           * @fn          ZDO_ParseSimpleDescRsp
   2590           *
   2591           * @brief       This function parse the Simple_Desc_rsp message.
   2592           *
   2593           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   2594           *         in the SimpleDescriptionFormat_t structure are allocated
   2595           *         and the calling function needs to free [osal_msg_free()]
   2596           *         these buffers.
   2597           *
   2598           * @param       inMsg  - incoming message
   2599           * @param       pSimpleDescRsp - place to parse the message into
   2600           *
   2601           * @return      none
   2602           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2603          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   2604          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2605            uint8 *msg;
   2606          
   2607            msg = inMsg->asdu;
   \   000005   12....       LCALL     ?Subroutine10 & 0xFFFF
   2608            pSimpleDescRsp->status = *msg++;
   2609            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2610            msg += sizeof ( uint16 );
   2611            msg++; // Skip past the length field.
   2612          
   2613            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_1:
   \   000008   7011         JNZ       ??ZDO_ParseSimpleDescRsp_0
   2614            {
   2615              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   00000A                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   00000A   EC           MOV       A,R4
   \   00000B   2403         ADD       A,#0x3
   \   00000D   FC           MOV       R4,A
   \   00000E   5001         JNC       ??ZDO_ParseSimpleDescRsp_1
   \   000010   0D           INC       R5
   \                     ??ZDO_ParseSimpleDescRsp_1:
   \   000011   E8           MOV       A,R0
   \   000012   2403         ADD       A,#0x3
   \   000014   FA           MOV       R2,A
   \   000015   E4           CLR       A
   \   000016   39           ADDC      A,R1
   \   000017   FB           MOV       R3,A
   \   000018   12....       LCALL     `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
   2616            }
   2617          }
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   00001B                REQUIRE ?Subroutine7
   \   00001B                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   2618          
   2619          /*********************************************************************
   2620           * @fn          ZDO_ParseEPListRsp
   2621           *
   2622           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   2623           *
   2624           * @param       inMsg  - incoming message
   2625           *
   2626           * @return      none
   2627           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EE           MOV       A,R6
   \   000001   FA           MOV       R2,A
   \   000002   EF           MOV       A,R7
   \   000003   FB           MOV       R3,A
   \   000004                REQUIRE ??Subroutine193_0
   \   000004                ; // Fall through to label ??Subroutine193_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2628          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   2629          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2630            ZDO_ActiveEndpointRsp_t *pRsp;
   2631            uint8 *msg;
   2632            uint8 Status;
   2633            uint8 cnt;
   2634          
   2635            msg = inMsg->asdu;
   \   000005   12....       LCALL     ?Subroutine102 & 0xFFFF
   2636            Status = *msg++;
   \                     ??CrossCallReturnLabel_152:
   \   000008   85..82       MOV       DPL,?V2
   \   00000B   F583         MOV       DPH,A
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F5..         MOV       ?V5,A
   \   000010   A3           INC       DPTR
   \   000011   8582..       MOV       ?V2,DPL
   \   000014   8583..       MOV       ?V3,DPH
   2637            cnt = msg[2];
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V4,A
   2638          
   2639            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   00001C   F5..         MOV       ?V0,A
   \   00001E                ; Setup parameters for call to function osal_mem_alloc
   \   00001E   12....       LCALL     ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_507:
   \   000021   3400         ADDC      A,#0x0
   \   000023   FB           MOV       R3,A
   \   000024   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000027   8A..         MOV       ?V6,R2
   \   000029   8B..         MOV       ?V7,R3
   \   00002B   AE..         MOV       R6,?V6
   \   00002D   AF..         MOV       R7,?V7
   2640            if ( pRsp )
   \   00002F   EA           MOV       A,R2
   \   000030   4F           ORL       A,R7
   \   000031   6042         JZ        ??ZDO_ParseEPListRsp_0
   2641            {
   2642              pRsp->status = Status;
   \   000033   8A82         MOV       DPL,R2
   \   000035   8B83         MOV       DPH,R3
   \   000037   E5..         MOV       A,?V5
   \   000039   F0           MOVX      @DPTR,A
   2643              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00003A   85..82       MOV       DPL,?V2
   \   00003D   85..83       MOV       DPH,?V3
   \   000040   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_492:
   \   000043   8E82         MOV       DPL,R6
   \   000045   8B83         MOV       DPH,R3
   \   000047   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   2644              msg += sizeof( uint16 );
   2645              pRsp->cnt = cnt;
   \                     ??CrossCallReturnLabel_544:
   \   00004A   8E82         MOV       DPL,R6
   \   00004C   8B83         MOV       DPH,R3
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   E5..         MOV       A,?V4
   \   000053   12....       LCALL     ?Subroutine41 & 0xFFFF
   2646              msg++; // pass cnt
   2647              osal_memcpy( pRsp->epList, msg, cnt );
   2648            }
   \                     ??CrossCallReturnLabel_59:
   \   000056   A3           INC       DPTR
   \   000057   A982         MOV       R1,DPL
   \   000059   AA83         MOV       R2,DPH
   \   00005B   89..         MOV       ?V4,R1
   \   00005D   8A..         MOV       ?V5,R2
   \   00005F   88..         MOV       ?V6,R0
   \   000061   78..         MOV       R0,#?V4
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000066   AC..         MOV       R4,?V0
   \   000068   7D00         MOV       R5,#0x0
   \   00006A   EE           MOV       A,R6
   \   00006B   12....       LCALL     ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_508:
   \   00006E   3F           ADDC      A,R7
   \   00006F   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_486:
   \   000072   12....       LCALL     ?DEALLOC_XSTACK8
   2649          
   2650            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_0:
   \   000075   02....       LJMP      ?Subroutine2 & 0xFFFF
   2651          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine215_0
   \   000001                ; // Fall through to label ??Subroutine215_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002                REQUIRE ??Subroutine216_0
   \   000002                ; // Fall through to label ??Subroutine216_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine216_0:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   C8           XCH       A,R0
   \   000005   F9           MOV       R1,A
   \   000006   EA           MOV       A,R2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine219_0:
   \   000000   2404         ADD       A,#0x4
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   22           RET
   2652          
   2653          /*********************************************************************
   2654           * @fn          ZDO_ParseServerDiscRsp
   2655           *
   2656           * @brief       Parse the Server_Discovery_rsp message.
   2657           *
   2658           * @param       inMsg - incoming message.
   2659           * @param       pRsp - place to put the parsed information.
   2660           *
   2661           * @return      none
   2662           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2663          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   2664          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2665            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV       A,R2
   \   000006   2413         ADD       A,#0x13
   \   000008   F8           MOV       R0,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F9           MOV       R1,A
   \   00000C   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   00000F   F583         MOV       DPH,A
   \   000011   8A82         MOV       DPL,R2
   \   000013   12....       LCALL     ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_496:
   \   000016   12....       LCALL     ?Subroutine36 & 0xFFFF
   2666            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \                     ??CrossCallReturnLabel_52:
   \   000019   F8           MOV       R0,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F9           MOV       R1,A
   \   00001D   8882         MOV       DPL,R0
   \   00001F   F583         MOV       DPH,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FA           MOV       R2,A
   \   000024   8882         MOV       DPL,R0
   \   000026   8983         MOV       DPH,R1
   \   000028   A3           INC       DPTR
   \   000029   12....       LCALL     ?Subroutine39 & 0xFFFF
   2667          }
   \                     ??CrossCallReturnLabel_547:
   \   00002C   02....       LJMP      ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL     ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_531:
   \   000003                REQUIRE ??Subroutine224_0
   \   000003                ; // Fall through to label ??Subroutine224_0
   2668          
   2669          /*********************************************************************
   2670           * @fn          ZDO_ParseMgmtLqiRsp
   2671           *
   2672           * @brief       This function parses the incoming Management
   2673           *              LQI response
   2674           *
   2675           * @param       inMsg - incoming message
   2676           *
   2677           * @return      a pointer to parsed response structure (NULL if not allocated).
   2678           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2679           *          by the calling function [osal_mem_free()].
   2680           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2681          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   2682          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2683            ZDO_MgmtLqiRsp_t *pRsp;
   2684            uint8 status;
   2685            uint8 startIndex = 0;
   \   000005   75..00       MOV       ?V5,#0x0
   2686            uint8 neighborLqiCount = 0;
   \   000008   75..00       MOV       ?V4,#0x0
   2687            uint8 neighborLqiEntries = 0;
   \   00000B   75..00       MOV       ?V6,#0x0
   2688            uint8 *msg;
   2689          
   2690            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ?Subroutine59 & 0xFFFF
   2691          
   2692            status = *msg++;
   2693            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_80:
   \   000011   7007         JNZ       ??ZDO_ParseMgmtLqiRsp_0
   2694            {
   2695              neighborLqiEntries = *msg++;
   \   000013   12....       LCALL     ?Subroutine56 & 0xFFFF
   2696              startIndex = *msg++;
   2697              neighborLqiCount = *msg++;
   2698            }
   \                     ??CrossCallReturnLabel_76:
   \   000016   5002         JNC       ??ZDO_ParseMgmtLqiRsp_0
   \   000018   05..         INC       ?V3
   2699          
   2700            // Allocate a buffer big enough to handle the list.
   2701            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
   2702                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( neighborLqiItem_t )) );
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   00001A                ; Setup parameters for call to function osal_mem_alloc
   \   00001A   E5..         MOV       A,?V4
   \   00001C   75F00E       MOV       B,#0xe
   \   00001F   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   000022   39           ADDC      A,R1
   \   000023   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   000026   AE..         MOV       R6,?V0
   \   000028   AF..         MOV       R7,?V1
   2703            if ( pRsp )
   \   00002A   EA           MOV       A,R2
   \   00002B   4F           ORL       A,R7
   \   00002C   605D         JZ        ??ZDO_ParseMgmtLqiRsp_1
   2704            {
   2705              uint8 x;
   2706              neighborLqiItem_t *pList = pRsp->list;
   \   00002E   EA           MOV       A,R2
   \   00002F   2404         ADD       A,#0x4
   \   000031   F5..         MOV       ?V0,A
   \   000033   E4           CLR       A
   \   000034   3F           ADDC      A,R7
   \   000035   F5..         MOV       ?V1,A
   2707              pRsp->status = status;
   \   000037   12....       LCALL     ?Subroutine11 & 0xFFFF
   2708              pRsp->neighborLqiEntries = neighborLqiEntries;
   2709              pRsp->startIndex = startIndex;
   2710              pRsp->neighborLqiCount = neighborLqiCount;
   2711          
   2712              for ( x = 0; x < neighborLqiCount; x++ )
   \                     ??CrossCallReturnLabel_2:
   \   00003A   8048         SJMP      ??ZDO_ParseMgmtLqiRsp_2
   2713              {
   2714                osal_cpyExtAddr(pList->extPANId, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmtLqiRsp_3:
   \   00003C                ; Setup parameters for call to function sAddrExtCpy
   \   00003C   AC..         MOV       R4,?V2
   \   00003E   AD..         MOV       R5,?V3
   \   000040   E5..         MOV       A,?V0
   \   000042   12....       LCALL     ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_509:
   \   000045   12....       LCALL     ?Subroutine129 & 0xFFFF
   2715                msg += Z_EXTADDR_LEN;
   2716          
   2717                msg += Z_EXTADDR_LEN;  // Throwing away IEEE.
   \                     ??CrossCallReturnLabel_211:
   \   000048   E5..         MOV       A,?V2
   \   00004A   2410         ADD       A,#0x10
   \   00004C   F5..         MOV       ?V2,A
   \   00004E   5002         JNC       ??ZDO_ParseMgmtLqiRsp_4
   \   000050   05..         INC       ?V3
   2718                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtLqiRsp_4:
   \   000052   F582         MOV       DPL,A
   \   000054   85..83       MOV       DPH,?V3
   \   000057   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00005A   12....       LCALL     ?Subroutine21 & 0xFFFF
   2719                msg += 2 + 1 + 1 + 1;      // Skip DeviceType, RxOnIdle, Rlationship, PermitJoining and Depth
   2720                pList->rxLqi = *msg++;
   \                     ??CrossCallReturnLabel_16:
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   E0           MOVX      A,@DPTR
   \   000061   C0E0         PUSH      A
   \   000063   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000066   D0E0         POP       A
   \   000068   F0           MOVX      @DPTR,A
   \   000069   E5..         MOV       A,?V2
   \   00006B   2406         ADD       A,#0x6
   \   00006D   F5..         MOV       ?V2,A
   \   00006F   5002         JNC       ??ZDO_ParseMgmtLqiRsp_5
   \   000071   05..         INC       ?V3
   2721                pList->txQuality = 0;  // This is not specified OTA by ZigBee 1.1.
   \                     ??ZDO_ParseMgmtLqiRsp_5:
   \   000073   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000076   E4           CLR       A
   \   000077   F0           MOVX      @DPTR,A
   2722                pList++;
   \   000078   E5..         MOV       A,?V0
   \   00007A   240E         ADD       A,#0xe
   \   00007C   F5..         MOV       ?V0,A
   \   00007E   5002         JNC       ??ZDO_ParseMgmtLqiRsp_6
   \   000080   05..         INC       ?V1
   2723              }
   \                     ??ZDO_ParseMgmtLqiRsp_6:
   \   000082   05..         INC       ?V5
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   000084   E5..         MOV       A,?V5
   \   000086   C3           CLR       C
   \   000087   95..         SUBB      A,?V4
   \   000089   40B1         JC        ??ZDO_ParseMgmtLqiRsp_3
   2724            }
   2725          
   2726            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   00008B   02....       LJMP      ?Subroutine2 & 0xFFFF
   2727          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   E5..         MOV       A,?V0
   \   000002   240D         ADD       A,#0xd
   \   000004   12....       LCALL     ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_506:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   A4           MUL       AB
   \   000001   A9F0         MOV       R1,B
   \   000003                REQUIRE ??Subroutine219_0
   \   000003                ; // Fall through to label ??Subroutine219_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   12....       LCALL     ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000003   85..82       MOV       DPL,?V2
   \   000006   F583         MOV       DPH,A
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F5..         MOV       ?V7,A
   \   00000B   A3           INC       DPTR
   \   00000C   8582..       MOV       ?V2,DPL
   \   00000F   8583..       MOV       ?V3,DPH
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V6,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   85..82       MOV       DPL,?V2
   \   00000A   85..83       MOV       DPH,?V3
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F5..         MOV       ?V4,A
   \   000012   E5..         MOV       A,?V2
   \   000014   2403         ADD       A,#0x3
   \   000016   F5..         MOV       ?V2,A
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   E5..         MOV       A,?V7
   \   000006   F0           MOVX      @DPTR,A
   \   000007   A3           INC       DPTR
   \   000008   E5..         MOV       A,?V6
   \   00000A   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   E5..         MOV       A,?V5
   \   000011   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000014   E5..         MOV       A,?V4
   \   000016   F0           MOVX      @DPTR,A
   \   000017   75..00       MOV       ?V5,#0x0
   \   00001A   22           RET
   2728          
   2729          /*********************************************************************
   2730           * @fn          ZDO_ParseMgmNwkDiscRsp
   2731           *
   2732           * @brief       This function parses the incoming Management
   2733           *              Network Discover response.
   2734           *
   2735           * @param       inMsg - incoming message
   2736           *
   2737           * @return      pointer to parsed response.  This structure was
   2738           *          allocated using osal_mem_alloc, so it must be freed
   2739           *          by the calling function [osal_mem_free()].
   2740           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2741          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   2742          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2743            ZDO_MgmNwkDiscRsp_t *pRsp;
   2744            uint8 status;
   2745            uint8 networkCount = 0;
   \   000005   75..00       MOV       ?V1,#0x0
   2746            uint8 startIndex = 0;
   \   000008   75..00       MOV       ?V0,#0x0
   2747            uint8 networkListCount = 0;
   \   00000B   75..00       MOV       ?V4,#0x0
   2748            uint8 *msg;
   2749          
   2750            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ?Subroutine86 & 0xFFFF
   2751            status = *msg++;
   \                     ??CrossCallReturnLabel_120:
   \   000011   F5..         MOV       ?V5,A
   \   000013   A3           INC       DPTR
   \   000014   AE82         MOV       R6,DPL
   \   000016   AF83         MOV       R7,DPH
   2752          
   2753            if ( status == ZSuccess )
   \   000018   7017         JNZ       ??ZDO_ParseMgmNwkDiscRsp_0
   2754            {
   2755              networkCount = *msg++;
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V1,A
   2756              startIndex = *msg++;
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V0,A
   2757              networkListCount = *msg++;
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V4,A
   \   00002A   EE           MOV       A,R6
   \   00002B   2403         ADD       A,#0x3
   \   00002D   FE           MOV       R6,A
   \   00002E   5001         JNC       ??ZDO_ParseMgmNwkDiscRsp_0
   \   000030   0F           INC       R7
   2758            }
   2759          
   2760            // Allocate a buffer big enough to handle the list.
   2761            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
   2762                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   E5..         MOV       A,?V4
   \   000033   F5..         MOV       ?V2,A
   \   000035   75..00       MOV       ?V3,#0x0
   \   000038   7404         MOV       A,#0x4
   \   00003A   78..         MOV       R0,#?V2
   \   00003C   12....       LCALL     ?S_SHL
   \   00003F   E5..         MOV       A,?V2
   \   000041   12....       LCALL     ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_510:
   \   000044   35..         ADDC      A,?V3
   \   000046   FB           MOV       R3,A
   \   000047   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00004A   8A..         MOV       ?V2,R2
   \   00004C   8B..         MOV       ?V3,R3
   2763            if ( pRsp )
   \   00004E   EA           MOV       A,R2
   \   00004F   4B           ORL       A,R3
   \   000050   7003         JNZ       $+5
   \   000052   02....       LJMP      ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   2764            {
   2765              uint8 x;
   2766              mgmtNwkDiscItem_t *pList;
   2767          
   2768              pRsp->status = status;
   \   000055   8A82         MOV       DPL,R2
   \   000057   8B83         MOV       DPH,R3
   \   000059   E5..         MOV       A,?V5
   \   00005B   12....       LCALL     ??Subroutine177_0 & 0xFFFF
   2769              pRsp->networkCount = networkCount;
   2770              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_285:
   \   00005E   8A82         MOV       DPL,R2
   \   000060   8B83         MOV       DPH,R3
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   E5..         MOV       A,?V0
   \   000066   12....       LCALL     ?Subroutine43 & 0xFFFF
   2771              pRsp->networkListCount = networkListCount;
   \                     ??CrossCallReturnLabel_62:
   \   000069   E5..         MOV       A,?V4
   \   00006B   F0           MOVX      @DPTR,A
   2772              pList = pRsp->list;
   \   00006C   EA           MOV       A,R2
   \   00006D   2404         ADD       A,#0x4
   \   00006F   F5..         MOV       ?V0,A
   \   000071   E4           CLR       A
   \   000072   35..         ADDC      A,?V3
   \   000074   F5..         MOV       ?V1,A
   2773          
   2774              for ( x = 0; x < networkListCount; x++ )
   \   000076   75..00       MOV       ?V5,#0x0
   \   000079   807D         SJMP      ??ZDO_ParseMgmNwkDiscRsp_2
   2775              {
   2776                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmNwkDiscRsp_3:
   \   00007B                ; Setup parameters for call to function sAddrExtCpy
   \   00007B   EE           MOV       A,R6
   \   00007C   FC           MOV       R4,A
   \   00007D   EF           MOV       A,R7
   \   00007E   FD           MOV       R5,A
   \   00007F   AA..         MOV       R2,?V0
   \   000081   AB..         MOV       R3,?V1
   \   000083   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2777                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \   000086   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000089   A3           INC       DPTR
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   A3           INC       DPTR
   \   00008C   E9           MOV       A,R1
   \   00008D   12....       LCALL     ?Subroutine17 & 0xFFFF
   2778                msg += Z_EXTADDR_LEN;
   2779          
   2780                pList->logicalChannel = *msg++;
   \                     ??CrossCallReturnLabel_13:
   \   000090   85..82       MOV       DPL,?V0
   \   000093   85..83       MOV       DPH,?V1
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   F0           MOVX      @DPTR,A
   2781                pList->stackProfile = (*msg) & 0x0F;
   \   0000A1   EE           MOV       A,R6
   \   0000A2   2409         ADD       A,#0x9
   \   0000A4   F8           MOV       R0,A
   \   0000A5   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   0000A8   C0E0         PUSH      A
   \   0000AA   E5..         MOV       A,?V0
   \   0000AC   240B         ADD       A,#0xb
   \   0000AE   12....       LCALL     ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_503:
   \   0000B1   D0E0         POP       A
   \   0000B3   12....       LCALL     ?Subroutine35 & 0xFFFF
   2782                pList->version = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_47:
   \   0000B6   C0E0         PUSH      A
   \   0000B8   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   0000BB   D0E0         POP       A
   \   0000BD   F0           MOVX      @DPTR,A
   2783                pList->beaconOrder = (*msg) & 0x0F;
   \   0000BE   EE           MOV       A,R6
   \   0000BF   240A         ADD       A,#0xa
   \   0000C1   08           INC       R0
   \   0000C2   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   0000C5   C0E0         PUSH      A
   \   0000C7   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   0000CA   D0E0         POP       A
   \   0000CC   12....       LCALL     ?Subroutine35 & 0xFFFF
   2784                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_48:
   \   0000CF   C0E0         PUSH      A
   \   0000D1   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   0000D4   D0E0         POP       A
   \   0000D6   F0           MOVX      @DPTR,A
   2785                pList->permitJoining = *msg++;
   \   0000D7   EE           MOV       A,R6
   \   0000D8   240B         ADD       A,#0xb
   \   0000DA   12....       LCALL     ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   0000DD   C0E0         PUSH      A
   \   0000DF   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   0000E2   D0E0         POP       A
   \   0000E4   F0           MOVX      @DPTR,A
   \   0000E5   EE           MOV       A,R6
   \   0000E6   240C         ADD       A,#0xc
   \   0000E8   FE           MOV       R6,A
   \   0000E9   5001         JNC       ??ZDO_ParseMgmNwkDiscRsp_4
   \   0000EB   0F           INC       R7
   2786                pList++;
   \                     ??ZDO_ParseMgmNwkDiscRsp_4:
   \   0000EC   E5..         MOV       A,?V0
   \   0000EE   2410         ADD       A,#0x10
   \   0000F0   F5..         MOV       ?V0,A
   \   0000F2   5002         JNC       ??ZDO_ParseMgmNwkDiscRsp_5
   \   0000F4   05..         INC       ?V1
   2787              }
   \                     ??ZDO_ParseMgmNwkDiscRsp_5:
   \   0000F6   05..         INC       ?V5
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   0000F8   E5..         MOV       A,?V5
   \   0000FA   C3           CLR       C
   \   0000FB   95..         SUBB      A,?V4
   \   0000FD   5003         JNC       $+5
   \   0000FF   02....       LJMP      ??ZDO_ParseMgmNwkDiscRsp_3 & 0xFFFF
   2788            }
   2789          
   2790            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   000102   AA..         MOV       R2,?V2
   \   000104   AB..         MOV       R3,?V3
   \   000106   02....       LJMP      ??Subroutine193_0 & 0xFFFF
   2791          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   E4           CLR       A
   \   000001   3F           ADDC      A,R7
   \   000002   F9           MOV       R1,A
   \   000003   8882         MOV       DPL,R0
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   540F         ANL       A,#0xf
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000003   C4           SWAP      A
   \   000004   540F         ANL       A,#0xf
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   12....       LCALL     ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000003   FE           MOV       R6,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   8E82         MOV       DPL,R6
   \   000008   F583         MOV       DPH,A
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine160:
   \   000000   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   22           RET
   2792          
   2793          /*********************************************************************
   2794           * @fn          ZDO_ParseMgmtRtgRsp
   2795           *
   2796           * @brief       This function parses the incoming Management
   2797           *              Routing response.
   2798           *
   2799           * @param       inMsg - incoming message
   2800           *
   2801           * @return      a pointer to parsed response structure (NULL if not allocated).
   2802           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2803           *          by the calling function [osal_mem_free()].
   2804           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2805          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   2806          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2807            ZDO_MgmtRtgRsp_t *pRsp;
   2808            uint8 status;
   2809            uint8 rtgCount = 0;
   \   000005   75..00       MOV       ?V2,#0x0
   2810            uint8 startIndex = 0;
   \   000008   75..00       MOV       ?V1,#0x0
   2811            uint8 rtgListCount = 0;
   \   00000B   75..00       MOV       ?V0,#0x0
   2812            uint8 *msg;
   2813          
   2814            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ?Subroutine86 & 0xFFFF
   2815          
   2816            status = *msg++;
   \                     ??CrossCallReturnLabel_121:
   \   000011   F5..         MOV       ?V3,A
   \   000013   A3           INC       DPTR
   \   000014   AE82         MOV       R6,DPL
   \   000016   AF83         MOV       R7,DPH
   2817            if ( status == ZSuccess )
   \   000018   7017         JNZ       ??ZDO_ParseMgmtRtgRsp_0
   2818            {
   2819              rtgCount = *msg++;
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V2,A
   2820              startIndex = *msg++;
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V1,A
   2821              rtgListCount = *msg++;
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V0,A
   \   00002A   EE           MOV       A,R6
   \   00002B   2403         ADD       A,#0x3
   \   00002D   FE           MOV       R6,A
   \   00002E   5001         JNC       ??ZDO_ParseMgmtRtgRsp_0
   \   000030   0F           INC       R7
   2822            }
   2823          
   2824            // Allocate a buffer big enough to handle the list
   2825            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
   2826                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   E5..         MOV       A,?V0
   \   000033   75F006       MOV       B,#0x6
   \   000036   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_514:
   \   000039   39           ADDC      A,R1
   \   00003A   FB           MOV       R3,A
   \   00003B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   2827            if ( pRsp )
   \   00003E   EA           MOV       A,R2
   \   00003F   4B           ORL       A,R3
   \   000040   6061         JZ        ??ZDO_ParseMgmtRtgRsp_1
   2828            {
   2829              uint8 x;
   2830              rtgItem_t *pList = pRsp->list;
   \   000042   EA           MOV       A,R2
   \   000043   2404         ADD       A,#0x4
   \   000045   F8           MOV       R0,A
   \   000046   E4           CLR       A
   \   000047   3B           ADDC      A,R3
   \   000048   F9           MOV       R1,A
   2831              pRsp->status = status;
   \   000049   8A82         MOV       DPL,R2
   \   00004B   8B83         MOV       DPH,R3
   \   00004D   E5..         MOV       A,?V3
   \   00004F   F0           MOVX      @DPTR,A
   2832              pRsp->rtgCount = rtgCount;
   \   000050   A3           INC       DPTR
   \   000051   E5..         MOV       A,?V2
   \   000053   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   2833              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_478:
   \   000056   A3           INC       DPTR
   \   000057   E5..         MOV       A,?V1
   \   000059   12....       LCALL     ?Subroutine43 & 0xFFFF
   2834              pRsp->rtgListCount = rtgListCount;
   \                     ??CrossCallReturnLabel_63:
   \   00005C   E5..         MOV       A,?V0
   \   00005E   F0           MOVX      @DPTR,A
   2835          
   2836              for ( x = 0; x < rtgListCount; x++ )
   \   00005F   7C00         MOV       R4,#0x0
   \   000061   803A         SJMP      ??ZDO_ParseMgmtRtgRsp_2
   2837              {
   2838                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   000063   8E82         MOV       DPL,R6
   \   000065   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000068   F0           MOVX      @DPTR,A
   \   000069   A3           INC       DPTR
   \   00006A   E5..         MOV       A,?V3
   \   00006C   12....       LCALL     ?Subroutine40 & 0xFFFF
   2839                msg += 2;
   2840                pList->status = *msg++;
   \                     ??CrossCallReturnLabel_56:
   \   00006F   A3           INC       DPTR
   \   000070   E0           MOVX      A,@DPTR
   \   000071   8882         MOV       DPL,R0
   \   000073   8983         MOV       DPH,R1
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   F0           MOVX      @DPTR,A
   \   00007B   EE           MOV       A,R6
   \   00007C   2403         ADD       A,#0x3
   \   00007E   FE           MOV       R6,A
   \   00007F   5001         JNC       ??ZDO_ParseMgmtRtgRsp_4
   \   000081   0F           INC       R7
   2841                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_4:
   \   000082   F582         MOV       DPL,A
   \   000084   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   F0           MOVX      @DPTR,A
   \   00008A   A3           INC       DPTR
   \   00008B   E5..         MOV       A,?V3
   \   00008D   F0           MOVX      @DPTR,A
   2842                msg += 2;
   \   00008E   EE           MOV       A,R6
   \   00008F   2402         ADD       A,#0x2
   \   000091   FE           MOV       R6,A
   \   000092   5001         JNC       ??ZDO_ParseMgmtRtgRsp_5
   \   000094   0F           INC       R7
   2843                pList++;
   \                     ??ZDO_ParseMgmtRtgRsp_5:
   \   000095   E8           MOV       A,R0
   \   000096   2406         ADD       A,#0x6
   \   000098   F8           MOV       R0,A
   \   000099   5001         JNC       ??ZDO_ParseMgmtRtgRsp_6
   \   00009B   09           INC       R1
   2844              }
   \                     ??ZDO_ParseMgmtRtgRsp_6:
   \   00009C   0C           INC       R4
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   00009D   EC           MOV       A,R4
   \   00009E   C3           CLR       C
   \   00009F   95..         SUBB      A,?V0
   \   0000A1   40C0         JC        ??ZDO_ParseMgmtRtgRsp_3
   2845            }
   2846          
   2847            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   0000A3   02....       LJMP      ?Subroutine4 & 0xFFFF
   2848          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   8F83         MOV       DPH,R7
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F5..         MOV       ?V4,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V3,A
   \   000009   E5..         MOV       A,?V4
   \   00000B   8882         MOV       DPL,R0
   \   00000D   8983         MOV       DPH,R1
   \   00000F   22           RET
   2849          
   2850          /*********************************************************************
   2851           * @fn          ZDO_ParseMgmtBindRsp
   2852           *
   2853           * @brief       This function parses the incoming Management
   2854           *              Binding response.
   2855           *
   2856           * @param       inMsg - pointer to message to parse
   2857           *
   2858           * @return      a pointer to parsed response structure (NULL if not allocated).
   2859           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2860           *          by the calling function [osal_mem_free()].
   2861           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2862          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   2863          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   2864            ZDO_MgmtBindRsp_t *pRsp;
   2865            uint8 status;
   2866            uint8 bindingCount = 0;
   \   000005   75..00       MOV       ?V6,#0x0
   2867            uint8 startIndex = 0;
   \   000008   75..00       MOV       ?V5,#0x0
   2868            uint8 bindingListCount = 0;
   \   00000B   75..00       MOV       ?V4,#0x0
   2869            uint8 *msg;
   2870          
   2871            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ?Subroutine59 & 0xFFFF
   2872          
   2873            status = *msg++;
   2874            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_81:
   \   000011   7007         JNZ       ??ZDO_ParseMgmtBindRsp_0
   2875            {
   2876              bindingCount = *msg++;
   \   000013   12....       LCALL     ?Subroutine56 & 0xFFFF
   2877              startIndex = *msg++;
   2878              bindingListCount = *msg++;
   2879            }
   \                     ??CrossCallReturnLabel_77:
   \   000016   5002         JNC       ??ZDO_ParseMgmtBindRsp_0
   \   000018   05..         INC       ?V3
   2880          
   2881            // Allocate a buffer big enough to handle the list
   2882            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
   2883                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   00001A                ; Setup parameters for call to function osal_mem_alloc
   \   00001A   E5..         MOV       A,?V4
   \   00001C   75F015       MOV       B,#0x15
   \   00001F   A4           MUL       AB
   \   000020   A9F0         MOV       R1,B
   \   000022   2404         ADD       A,#0x4
   \   000024   12....       LCALL     ?Subroutine105 & 0xFFFF
   2884            if ( pRsp )
   \                     ??CrossCallReturnLabel_158:
   \   000027   607F         JZ        ??ZDO_ParseMgmtBindRsp_1
   2885            {
   2886              uint8 x;
   2887              apsBindingItem_t *pList = pRsp->list;
   \   000029   EA           MOV       A,R2
   \   00002A   2404         ADD       A,#0x4
   \   00002C   FE           MOV       R6,A
   \   00002D   E4           CLR       A
   \   00002E   35..         ADDC      A,?V1
   \   000030   FF           MOV       R7,A
   2888              pRsp->status = status;
   \   000031   12....       LCALL     ?Subroutine11 & 0xFFFF
   2889              pRsp->bindingCount = bindingCount;
   2890              pRsp->startIndex = startIndex;
   2891              pRsp->bindingListCount = bindingListCount;
   2892          
   2893              for ( x = 0; x < bindingListCount; x++ )
   \                     ??CrossCallReturnLabel_3:
   \   000034   8019         SJMP      ??ZDO_ParseMgmtBindRsp_2
   2894              {
   2895                osal_cpyExtAddr( pList->srcAddr, msg );
   2896                msg += Z_EXTADDR_LEN;
   2897                pList->srcEP = *msg++;
   2898          
   2899                // Get the Cluster ID
   2900          
   2901                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   2902                msg += 2;
   2903                pList->dstAddr.addrMode = *msg++;
   2904                if ( pList->dstAddr.addrMode == Addr64Bit )
   2905                {
   2906                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   2907                  msg += Z_EXTADDR_LEN;
   2908                  pList->dstEP = *msg++;
   2909                }
   2910                else
   2911                {
   2912                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_3:
   \   000036   85..82       MOV       DPL,?V2
   \   000039   85..83       MOV       DPH,?V3
   \   00003C   12....       LCALL     ?Subroutine83 & 0xFFFF
   2913                  msg += 2;
   2914                }
   \                     ??CrossCallReturnLabel_117:
   \   00003F   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000042   5002         JNC       ??ZDO_ParseMgmtBindRsp_4
   \   000044   05..         INC       ?V3
   2915          
   2916                pList++;
   \                     ??ZDO_ParseMgmtBindRsp_4:
   \   000046   EE           MOV       A,R6
   \   000047   2415         ADD       A,#0x15
   \   000049   FE           MOV       R6,A
   \   00004A   5001         JNC       ??ZDO_ParseMgmtBindRsp_5
   \   00004C   0F           INC       R7
   \                     ??ZDO_ParseMgmtBindRsp_5:
   \   00004D   05..         INC       ?V5
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   00004F   E5..         MOV       A,?V5
   \   000051   C3           CLR       C
   \   000052   95..         SUBB      A,?V4
   \   000054   5052         JNC       ??ZDO_ParseMgmtBindRsp_1
   \   000056                ; Setup parameters for call to function sAddrExtCpy
   \   000056   AC..         MOV       R4,?V2
   \   000058   AD..         MOV       R5,?V3
   \   00005A   EE           MOV       A,R6
   \   00005B   FA           MOV       R2,A
   \   00005C   EF           MOV       A,R7
   \   00005D   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   000060   8E82         MOV       DPL,R6
   \   000062   8F83         MOV       DPH,R7
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00006F   5002         JNC       ??ZDO_ParseMgmtBindRsp_6
   \   000071   05..         INC       ?V3
   \                     ??ZDO_ParseMgmtBindRsp_6:
   \   000073   F582         MOV       DPL,A
   \   000075   85..83       MOV       DPH,?V3
   \   000078   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00007B   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000082   E5..         MOV       A,?V2
   \   000084   2403         ADD       A,#0x3
   \   000086   F5..         MOV       ?V2,A
   \   000088   5002         JNC       ??ZDO_ParseMgmtBindRsp_7
   \   00008A   05..         INC       ?V3
   \                     ??ZDO_ParseMgmtBindRsp_7:
   \   00008C   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00008F   70A5         JNZ       ??ZDO_ParseMgmtBindRsp_3
   \   000091                ; Setup parameters for call to function sAddrExtCpy
   \   000091   AC..         MOV       R4,?V2
   \   000093   AD..         MOV       R5,?V3
   \   000095   12....       LCALL     ??Subroutine208_0 & 0xFFFF
   2917              }
   2918            }
   \                     ??CrossCallReturnLabel_432:
   \   000098   C0E0         PUSH      A
   \   00009A   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   00009D   D0E0         POP       A
   \   00009F   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000A2   50A2         JNC       ??ZDO_ParseMgmtBindRsp_4
   \   0000A4   05..         INC       ?V3
   \                     ??ZDO_ParseMgmtBindRsp_8:
   \   0000A6   809E         SJMP      ??ZDO_ParseMgmtBindRsp_4
   2919          
   2920            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   0000A8   AA..         MOV       R2,?V0
   \   0000AA   AB..         MOV       R3,?V1
   \   0000AC   02....       LJMP      ??Subroutine209_0 & 0xFFFF
   2921          }
   2922          
   2923          /*********************************************************************
   2924           * @fn          ZDO_ParseUserDescRsp
   2925           *
   2926           * @brief       This function parses the incoming User
   2927           *              Descriptor Response.
   2928           *
   2929           * @param       inMsg - incoming response message
   2930           *
   2931           * @return      a pointer to parsed response structure (NULL if not allocated).
   2932           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2933           *          by the calling function [osal_mem_free()].
   2934           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2935          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   2936          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2937            ZDO_UserDescRsp_t *pRsp;
   2938            uint8 *msg;
   2939            uint8 descLen = 0;
   \   000005   75..00       MOV       ?V4,#0x0
   2940          
   2941            msg = inMsg->asdu;
   \   000008   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   00000B   88..         MOV       ?V2,R0
   \   00000D   F5..         MOV       ?V3,A
   2942          
   2943            if ( msg[0] == ZSuccess )
   \   00000F   8882         MOV       DPL,R0
   \   000011   F583         MOV       DPH,A
   \   000013   E0           MOVX      A,@DPTR
   \   000014   7006         JNZ       ??ZDO_ParseUserDescRsp_0
   2944              descLen = msg[3];
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V4,A
   2945          
   2946            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   00001C   AE..         MOV       R6,?V4
   \   00001E                ; Setup parameters for call to function osal_mem_alloc
   \   00001E   EE           MOV       A,R6
   \   00001F   12....       LCALL     ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_511:
   \   000022   3400         ADDC      A,#0x0
   \   000024   12....       LCALL     ?Subroutine117 & 0xFFFF
   2947            if ( pRsp )
   \                     ??CrossCallReturnLabel_428:
   \   000027   EA           MOV       A,R2
   \   000028   4B           ORL       A,R3
   \   000029   604F         JZ        ??ZDO_ParseUserDescRsp_1
   2948            {
   2949              pRsp->status = msg[0];
   \   00002B   85..82       MOV       DPL,?V2
   \   00002E   85..83       MOV       DPH,?V3
   \   000031   12....       LCALL     ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_524:
   \   000034   12....       LCALL     ?Subroutine46 & 0xFFFF
   2950              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \                     ??CrossCallReturnLabel_66:
   \   000037   E0           MOVX      A,@DPTR
   \   000038   FA           MOV       R2,A
   \   000039   85..82       MOV       DPL,?V2
   \   00003C   85..83       MOV       DPH,?V3
   \   00003F   A3           INC       DPTR
   \   000040   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_491:
   \   000043   85..82       MOV       DPL,?V0
   \   000046   8B83         MOV       DPH,R3
   \   000048   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   2951              pRsp->length = descLen;
   \                     ??CrossCallReturnLabel_545:
   \   00004B   85..82       MOV       DPL,?V0
   \   00004E   8B83         MOV       DPH,R3
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   EE           MOV       A,R6
   \   000054   F0           MOVX      @DPTR,A
   2952              if ( descLen )
   \   000055   6023         JZ        ??ZDO_ParseUserDescRsp_1
   2953                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   000057                ; Setup parameters for call to function osal_memcpy
   \   000057   E5..         MOV       A,?V2
   \   000059   2404         ADD       A,#0x4
   \   00005B   F5..         MOV       ?V4,A
   \   00005D   E4           CLR       A
   \   00005E   35..         ADDC      A,?V3
   \   000060   F5..         MOV       ?V5,A
   \   000062   88..         MOV       ?V6,R0
   \   000064   78..         MOV       R0,#?V4
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000069   EE           MOV       A,R6
   \   00006A   FC           MOV       R4,A
   \   00006B   7D00         MOV       R5,#0x0
   \   00006D   E5..         MOV       A,?V0
   \   00006F   12....       LCALL     ??Subroutine219_0 & 0xFFFF
   2954            }
   \                     ??CrossCallReturnLabel_512:
   \   000072   35..         ADDC      A,?V1
   \   000074   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   000077   12....       LCALL     ?DEALLOC_XSTACK8
   2955          
   2956            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_1:
   \   00007A   AA..         MOV       R2,?V0
   \   00007C   AB..         MOV       R3,?V1
   \   00007E   02....       LJMP      ??Subroutine193_0 & 0xFFFF
   2957          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   12....       LCALL     ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET
   2958          
   2959          /*********************************************************************
   2960           * @fn          ZDO_ParseSimpleDescBuf
   2961           *
   2962           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   2963           *
   2964           * @param       buf  - pointer to a byte array representing a Simple Desc.
   2965           * @param       desc - SimpleDescriptionFormat_t *
   2966           *
   2967           *              This routine allocates storage for the cluster IDs because
   2968           *              they are 16-bit and need to be aligned to be properly processed.
   2969           *              This routine returns non-zero if an allocation fails.
   2970           *
   2971           *              NOTE: This means that the caller or user of the input structure
   2972           *                    is responsible for freeing the memory
   2973           *
   2974           * @return      0: success
   2975           *              1: failure due to malloc failure.
   2976           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2977          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   2978          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EB           MOV       A,R3
   \   000006   8C..         MOV       ?V0,R4
   \   000008   8D..         MOV       ?V1,R5
   2979            uint8 num, i;
   2980          
   2981            desc->EndPoint = *buf++;
   \   00000A   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_480:
   \   00000D   AE82         MOV       R6,DPL
   \   00000F   AF83         MOV       R7,DPH
   2982            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \   000011   E0           MOVX      A,@DPTR
   \   000012   FA           MOV       R2,A
   \   000013   12....       LCALL     ?Subroutine39 & 0xFFFF
   2983            buf += 2;
   \                     ??CrossCallReturnLabel_548:
   \   000016   EE           MOV       A,R6
   \   000017   2402         ADD       A,#0x2
   \   000019   FE           MOV       R6,A
   \   00001A   5001         JNC       ??ZDO_ParseSimpleDescBuf_0
   \   00001C   0F           INC       R7
   2984            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   00001D   F582         MOV       DPL,A
   \   00001F   8F83         MOV       DPH,R7
   \   000021   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000024   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   2985            buf += 2;
   2986            desc->AppDevVer = *buf >> 4;
   \                     ??CrossCallReturnLabel_546:
   \   000027   8E82         MOV       DPL,R6
   \   000029   8F83         MOV       DPH,R7
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   C4           SWAP      A
   \   00002F   540F         ANL       A,#0xf
   2987          
   2988            desc->Reserved = 0;
   \   000031   8C82         MOV       DPL,R4
   \   000033   8D83         MOV       DPH,R5
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   12....       LCALL     ?Subroutine37 & 0xFFFF
   2989            buf++;
   2990          
   2991            // move in input cluster list (if any). allocate aligned memory.
   2992            num = desc->AppNumInClusters = *buf++;
   \                     ??CrossCallReturnLabel_54:
   \   00003D   F5..         MOV       ?V4,A
   \   00003F   EE           MOV       A,R6
   \   000040   2404         ADD       A,#0x4
   \   000042   FE           MOV       R6,A
   \   000043   5001         JNC       ??ZDO_ParseSimpleDescBuf_1
   \   000045   0F           INC       R7
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   000046   8C82         MOV       DPL,R4
   \   000048   8D83         MOV       DPH,R5
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   E5..         MOV       A,?V4
   \   000052   F0           MOVX      @DPTR,A
   2993            if ( num )
   \   000053   EC           MOV       A,R4
   \   000054   2407         ADD       A,#0x7
   \   000056   F5..         MOV       ?V2,A
   \   000058   E4           CLR       A
   \   000059   35..         ADDC      A,?V1
   \   00005B   F5..         MOV       ?V3,A
   \   00005D   E5..         MOV       A,?V4
   \   00005F   604E         JZ        ??ZDO_ParseSimpleDescBuf_2
   2994            {
   2995              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   000061                ; Setup parameters for call to function osal_mem_alloc
   \   000061   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000064   A8..         MOV       R0,?V6
   \   000066   A9..         MOV       R1,?V7
   \   000068   85..82       MOV       DPL,?V2
   \   00006B   85..83       MOV       DPH,?V3
   \   00006E   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000071   49           ORL       A,R1
   \   000072   7003         JNZ       $+5
   \   000074   02....       LJMP      ??ZDO_ParseSimpleDescBuf_3 & 0xFFFF
   2996              {
   2997                // malloc failed. we're done.
   2998                return 1;
   2999              }
   3000              for (i=0; i<num; ++i)
   \   000077   7A00         MOV       R2,#0x0
   \   000079   802E         SJMP      ??ZDO_ParseSimpleDescBuf_4
   3001              {
   3002                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   00007B   8E82         MOV       DPL,R6
   \   00007D   8F83         MOV       DPH,R7
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   F5..         MOV       ?V6,A
   \   000082   A3           INC       DPTR
   \   000083   E0           MOVX      A,@DPTR
   \   000084   FC           MOV       R4,A
   \   000085   E4           CLR       A
   \   000086   CC           XCH       A,R4
   \   000087   FD           MOV       R5,A
   \   000088   E5..         MOV       A,?V6
   \   00008A   2C           ADD       A,R4
   \   00008B   E4           CLR       A
   \   00008C   3D           ADDC      A,R5
   \   00008D   F5..         MOV       ?V7,A
   \   00008F   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_528:
   \   000092   E8           MOV       A,R0
   \   000093   2C           ADD       A,R4
   \   000094   F582         MOV       DPL,A
   \   000096   EB           MOV       A,R3
   \   000097   3D           ADDC      A,R5
   \   000098   F583         MOV       DPH,A
   \   00009A   E5..         MOV       A,?V6
   \   00009C   F0           MOVX      @DPTR,A
   \   00009D   A3           INC       DPTR
   \   00009E   E5..         MOV       A,?V7
   \   0000A0   F0           MOVX      @DPTR,A
   3003                buf += 2;
   \   0000A1   EE           MOV       A,R6
   \   0000A2   2402         ADD       A,#0x2
   \   0000A4   FE           MOV       R6,A
   \   0000A5   5001         JNC       ??ZDO_ParseSimpleDescBuf_6
   \   0000A7   0F           INC       R7
   3004              }
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   0000A8   0A           INC       R2
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   0000A9   EA           MOV       A,R2
   \   0000AA   C3           CLR       C
   \   0000AB   95..         SUBB      A,?V4
   \   0000AD   40CC         JC        ??ZDO_ParseSimpleDescBuf_5
   3005            }
   3006          
   3007            // move in output cluster list (if any). allocate aligned memory.
   3008            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   0000AF   8E82         MOV       DPL,R6
   \   0000B1   8F83         MOV       DPH,R7
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   F5..         MOV       ?V4,A
   \   0000B6   A3           INC       DPTR
   \   0000B7   AE82         MOV       R6,DPL
   \   0000B9   AF83         MOV       R7,DPH
   \   0000BB   85..82       MOV       DPL,?V0
   \   0000BE   85..83       MOV       DPH,?V1
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   A3           INC       DPTR
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   A3           INC       DPTR
   \   0000CA   F0           MOVX      @DPTR,A
   3009            if (num)
   \   0000CB   6068         JZ        ??ZDO_ParseSimpleDescBuf_7
   3010            {
   3011              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0000CD                ; Setup parameters for call to function osal_mem_alloc
   \   0000CD   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   0000D0   A9..         MOV       R1,?V7
   \   0000D2   85..82       MOV       DPL,?V0
   \   0000D5   85..83       MOV       DPH,?V1
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   A3           INC       DPTR
   \   0000DC   A3           INC       DPTR
   \   0000DD   A3           INC       DPTR
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   A3           INC       DPTR
   \   0000E1   A3           INC       DPTR
   \   0000E2   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000E5   49           ORL       A,R1
   \   0000E6   701C         JNZ       ??ZDO_ParseSimpleDescBuf_8
   3012              {
   3013                // malloc failed. free input cluster list memory if there is any
   3014                if ( desc->pAppInClusterList != NULL )
   \   0000E8   85..82       MOV       DPL,?V2
   \   0000EB   85..83       MOV       DPH,?V3
   \   0000EE   12....       LCALL     ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   0000F1   600D         JZ        ??ZDO_ParseSimpleDescBuf_3
   3015                {
   3016                  osal_mem_free(desc->pAppInClusterList);
   \   0000F3                ; Setup parameters for call to function osal_mem_free
   \   0000F3   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3017                  
   3018                  desc->pAppInClusterList = NULL;
   \   0000F6   85..82       MOV       DPL,?V2
   \   0000F9   85..83       MOV       DPH,?V3
   \   0000FC   E4           CLR       A
   \   0000FD   F0           MOVX      @DPTR,A
   \   0000FE   A3           INC       DPTR
   \   0000FF   F0           MOVX      @DPTR,A
   3019                }
   3020                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   000100   7901         MOV       R1,#0x1
   \   000102   8033         SJMP      ??ZDO_ParseSimpleDescBuf_9
   3021              }
   3022              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_8:
   \   000104   7A00         MOV       R2,#0x0
   \   000106   8027         SJMP      ??ZDO_ParseSimpleDescBuf_10
   3023              {
   3024                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_11:
   \   000108   8E82         MOV       DPL,R6
   \   00010A   8F83         MOV       DPH,R7
   \   00010C   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   00010F   FC           MOV       R4,A
   \   000110   E4           CLR       A
   \   000111   CC           XCH       A,R4
   \   000112   FD           MOV       R5,A
   \   000113   E5..         MOV       A,?V0
   \   000115   2C           ADD       A,R4
   \   000116   E4           CLR       A
   \   000117   3D           ADDC      A,R5
   \   000118   F5..         MOV       ?V1,A
   \   00011A   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_529:
   \   00011D   E5..         MOV       A,?V6
   \   00011F   2C           ADD       A,R4
   \   000120   F582         MOV       DPL,A
   \   000122   EB           MOV       A,R3
   \   000123   3D           ADDC      A,R5
   \   000124   12....       LCALL     ?Subroutine29 & 0xFFFF
   3025                buf += 2;
   \                     ??CrossCallReturnLabel_288:
   \   000127   EE           MOV       A,R6
   \   000128   2402         ADD       A,#0x2
   \   00012A   FE           MOV       R6,A
   \   00012B   5001         JNC       ??ZDO_ParseSimpleDescBuf_12
   \   00012D   0F           INC       R7
   3026              }
   \                     ??ZDO_ParseSimpleDescBuf_12:
   \   00012E   0A           INC       R2
   \                     ??ZDO_ParseSimpleDescBuf_10:
   \   00012F   EA           MOV       A,R2
   \   000130   C3           CLR       C
   \   000131   95..         SUBB      A,?V4
   \   000133   40D3         JC        ??ZDO_ParseSimpleDescBuf_11
   3027            }
   3028            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   000135   7900         MOV       R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_9:
   \   000137   02....       LJMP      ??Subroutine193_0 & 0xFFFF
   3029          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine157:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine222_0
   \   000001                ; // Fall through to label ??Subroutine222_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000003   8A..         MOV       ?V6,R2
   \   000005   8B..         MOV       ?V7,R3
   \   000007   22           RET
   3030          
   3031          /*********************************************************************
   3032           * @fn          ZDO_ParseDeviceAnnce
   3033           *
   3034           * @brief       Parse a Device Announce message.
   3035           *
   3036           * @param       inMsg - Incoming message
   3037           * @param       pAnnce - place to put the parsed information
   3038           *
   3039           * @return      none
   3040           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3041          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   3042          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV       ?V0,R4
   \   000007   8D..         MOV       ?V1,R5
   3043            uint8 *msg;
   3044          
   3045            // Parse incoming message
   3046            msg = inMsg->asdu;
   \   000009   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   00000C   FF           MOV       R7,A
   3047            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00000D   8882         MOV       DPL,R0
   \   00000F   F583         MOV       DPH,A
   \   000011   12....       LCALL     ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_532:
   \   000014   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   3048            msg += 2;
   \                     ??CrossCallReturnLabel_542:
   \   000017   E8           MOV       A,R0
   \   000018   2402         ADD       A,#0x2
   \   00001A   FE           MOV       R6,A
   \   00001B   5001         JNC       ??ZDO_ParseDeviceAnnce_0
   \   00001D   0F           INC       R7
   3049            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??ZDO_ParseDeviceAnnce_0:
   \   00001E                ; Setup parameters for call to function sAddrExtCpy
   \   00001E   FC           MOV       R4,A
   \   00001F   EF           MOV       A,R7
   \   000020   FD           MOV       R5,A
   \   000021   E5..         MOV       A,?V0
   \   000023   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000026   12....       LCALL     ?Subroutine129 & 0xFFFF
   3050            msg += Z_EXTADDR_LEN;
   3051            pAnnce->capabilities = *msg;
   \                     ??CrossCallReturnLabel_212:
   \   000029   8E82         MOV       DPL,R6
   \   00002B   8F83         MOV       DPH,R7
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   F0           MOVX      @DPTR,A
   3052          }
   \   000038   02....       LJMP      ??Subroutine174_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   85..82       MOV       DPL,?V0
   \   000009   85..83       MOV       DPH,?V1
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   22           RET
   3053          
   3054          /*********************************************************************
   3055           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   3056           *
   3057           * @brief       This function handles parsing of the incoming Management
   3058           *              Network Update notify.
   3059           *
   3060           * @param       inMsg - incoming message (request)
   3061           *
   3062           * @return      a pointer to parsed response structure (NULL if not allocated).
   3063           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3064           *          by the calling function [osal_mem_free()].
   3065           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3066          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   3067          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   3068            uint8 status;
   3069            uint32 scannedChannels = 0;
   \   000005   75..00       MOV       ?V4,#0x0
   \   000008   75..00       MOV       ?V5,#0x0
   \   00000B   75..00       MOV       ?V6,#0x0
   \   00000E   75..00       MOV       ?V7,#0x0
   3070            uint16 totalTransmissions = 0;
   \   000011   75..00       MOV       ?V0,#0x0
   \   000014   75..00       MOV       ?V1,#0x0
   3071            uint16 transmissionFailures = 0;
   \   000017   75..00       MOV       ?V2,#0x0
   \   00001A   75..00       MOV       ?V3,#0x0
   3072            uint8 listCount = 0;
   \   00001D   75..00       MOV       ?V10,#0x0
   3073            uint8 *msg = inMsg->asdu;
   \   000020   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V8,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   3074            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   3075          
   3076            status = *msg++;
   \   000028   85..82       MOV       DPL,?V8
   \   00002B   F583         MOV       DPH,A
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F5..         MOV       ?V11,A
   \   000030   A3           INC       DPTR
   \   000031   8582..       MOV       ?V8,DPL
   \   000034   8583..       MOV       ?V9,DPH
   3077            if ( status == ZSuccess )
   \   000037   7051         JNZ       ??ZDO_ParseMgmtNwkUpdateNotify_0
   3078            {
   3079              scannedChannels = osal_build_uint32( msg, 4 );
   \   000039                ; Setup parameters for call to function osal_build_uint32
   \   000039   7904         MOV       R1,#0x4
   \   00003B   AA..         MOV       R2,?V8
   \   00003D   AB..         MOV       R3,?V9
   \   00003F   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000042   8A..         MOV       ?V4,R2
   \   000044   8B..         MOV       ?V5,R3
   \   000046   8C..         MOV       ?V6,R4
   \   000048   8D..         MOV       ?V7,R5
   3080              msg += 4;
   \   00004A   E5..         MOV       A,?V8
   \   00004C   2404         ADD       A,#0x4
   \   00004E   F5..         MOV       ?V8,A
   \   000050   5002         JNC       ??ZDO_ParseMgmtNwkUpdateNotify_1
   \   000052   05..         INC       ?V9
   3081              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_1:
   \   000054   F582         MOV       DPL,A
   \   000056   85..83       MOV       DPH,?V9
   \   000059   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_493:
   \   00005C   28           ADD       A,R0
   \   00005D   F5..         MOV       ?V0,A
   \   00005F   E4           CLR       A
   \   000060   39           ADDC      A,R1
   \   000061   F5..         MOV       ?V1,A
   3082              msg += 2;
   \   000063   E5..         MOV       A,?V8
   \   000065   2402         ADD       A,#0x2
   \   000067   F5..         MOV       ?V8,A
   \   000069   5002         JNC       ??ZDO_ParseMgmtNwkUpdateNotify_2
   \   00006B   05..         INC       ?V9
   3083              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_2:
   \   00006D   F582         MOV       DPL,A
   \   00006F   85..83       MOV       DPH,?V9
   \   000072   12....       LCALL     ??Subroutine176_0 & 0xFFFF
   3084              msg += 2;
   3085              listCount = *msg++;
   \                     ??CrossCallReturnLabel_282:
   \   000075   85..82       MOV       DPL,?V8
   \   000078   85..83       MOV       DPH,?V9
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   F5..         MOV       ?V10,A
   \   000080   E5..         MOV       A,?V8
   \   000082   2403         ADD       A,#0x3
   \   000084   F5..         MOV       ?V8,A
   \   000086   5002         JNC       ??ZDO_ParseMgmtNwkUpdateNotify_0
   \   000088   05..         INC       ?V9
   3086            }
   3087          
   3088            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   00008A   AE..         MOV       R6,?V10
   \   00008C                ; Setup parameters for call to function osal_mem_alloc
   \   00008C   EE           MOV       A,R6
   \   00008D   240A         ADD       A,#0xa
   \   00008F   FA           MOV       R2,A
   \   000090   E4           CLR       A
   \   000091   3400         ADDC      A,#0x0
   \   000093   FB           MOV       R3,A
   \   000094   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000097   8A..         MOV       ?V14,R2
   \   000099   8B..         MOV       ?V15,R3
   3089          
   3090            if ( pRsp )
   \   00009B   EA           MOV       A,R2
   \   00009C   4B           ORL       A,R3
   \   00009D   6047         JZ        ??ZDO_ParseMgmtNwkUpdateNotify_3
   3091            {
   3092              pRsp->status = status;
   \   00009F   8A82         MOV       DPL,R2
   \   0000A1   8B83         MOV       DPH,R3
   \   0000A3   E5..         MOV       A,?V11
   \   0000A5   F0           MOVX      @DPTR,A
   3093              pRsp->scannedChannels = scannedChannels;
   \   0000A6   A3           INC       DPTR
   \   0000A7   78..         MOV       R0,#?V4
   \   0000A9   12....       LCALL     ?L_MOV_TO_X
   3094              pRsp->totalTransmissions = totalTransmissions;
   \   0000AC   8A82         MOV       DPL,R2
   \   0000AE   8B83         MOV       DPH,R3
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   E5..         MOV       A,?V0
   \   0000B7   F0           MOVX      @DPTR,A
   \   0000B8   A3           INC       DPTR
   \   0000B9   E5..         MOV       A,?V1
   \   0000BB   12....       LCALL     ?Subroutine15 & 0xFFFF
   3095              pRsp->transmissionFailures = transmissionFailures;
   \                     ??CrossCallReturnLabel_11:
   \   0000BE   A3           INC       DPTR
   \   0000BF   E5..         MOV       A,?V3
   \   0000C1   12....       LCALL     ?Subroutine32 & 0xFFFF
   3096              pRsp->listCount = listCount;
   \                     ??CrossCallReturnLabel_39:
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   EE           MOV       A,R6
   \   0000CA   F0           MOVX      @DPTR,A
   3097          
   3098              // Allocate a buffer big enough to handle the list.
   3099              if ( listCount > 0 )
   \   0000CB   6019         JZ        ??ZDO_ParseMgmtNwkUpdateNotify_3
   3100                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   0000CD                ; Setup parameters for call to function osal_memcpy
   \   0000CD   75..00       MOV       ?V10,#0x0
   \   0000D0   78..         MOV       R0,#?V8
   \   0000D2   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000D5   EE           MOV       A,R6
   \   0000D6   FC           MOV       R4,A
   \   0000D7   7D00         MOV       R5,#0x0
   \   0000D9   EA           MOV       A,R2
   \   0000DA   240A         ADD       A,#0xa
   \   0000DC   FA           MOV       R2,A
   \   0000DD   E4           CLR       A
   \   0000DE   35..         ADDC      A,?V15
   \   0000E0   12....       LCALL     ?Subroutine121 & 0xFFFF
   3101            }
   \                     ??CrossCallReturnLabel_488:
   \   0000E3   12....       LCALL     ?DEALLOC_XSTACK8
   3102          
   3103            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_3:
   \   0000E6   AA..         MOV       R2,?V14
   \   0000E8   AB..         MOV       R3,?V15
   \   0000EA   02....       LJMP      ??Subroutine178_0 & 0xFFFF
   3104          }
   3105          
   3106          /*********************************************************************
   3107           * @fn          ZDO_ParseMgmtNwkUpdateReq
   3108           *
   3109           * @brief       This function handles parsing the incoming Management
   3110           *              Network Update request and starts the request (if needed).
   3111           *
   3112           * @param       inMsg - incoming message (request)
   3113           * @param       pReq - pointer to place to parse message to
   3114           *
   3115           * @return      none
   3116           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3117          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   3118          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV       ?V0,R4
   \   000007   8D..         MOV       ?V1,R5
   3119            uint8 *msg = inMsg->asdu;
   \   000009   12....       LCALL     ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   00000C   3B           ADDC      A,R3
   \   00000D   12....       LCALL     ?Subroutine58 & 0xFFFF
   3120          
   3121            pReq->channelMask = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_79:
   \   000010   85..82       MOV       DPL,?V0
   \   000013   85..83       MOV       DPH,?V1
   \   000016   12....       LCALL     ?XSTORE_R0123
   3122            msg += 4;
   3123            pReq->scanDuration = *msg++;
   \   000019   8E82         MOV       DPL,R6
   \   00001B   8F83         MOV       DPH,R7
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   FA           MOV       R2,A
   \   000023   E5..         MOV       A,?V0
   \   000025   2404         ADD       A,#0x4
   \   000027   F8           MOV       R0,A
   \   000028   E4           CLR       A
   \   000029   35..         ADDC      A,?V1
   \   00002B   F9           MOV       R1,A
   \   00002C   EA           MOV       A,R2
   \   00002D   8882         MOV       DPL,R0
   \   00002F   8983         MOV       DPH,R1
   \   000031   F0           MOVX      @DPTR,A
   3124          
   3125            if ( pReq->scanDuration <= 0x05 )
   \   000032   C3           CLR       C
   \   000033   9406         SUBB      A,#0x6
   \   000035   5009         JNC       ??ZDO_ParseMgmtNwkUpdateReq_0
   3126            {
   3127              // Request is to scan over channelMask
   3128              pReq->scanCount = *msg;
   \   000037   8E82         MOV       DPL,R6
   \   000039   8F83         MOV       DPH,R7
   \   00003B   12....       LCALL     ?Subroutine149 & 0xFFFF
   3129            }
   \                     ??CrossCallReturnLabel_243:
   \   00003E   8027         SJMP      ??ZDO_ParseMgmtNwkUpdateReq_1
   3130            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   000040   74FE         MOV       A,#-0x2
   \   000042   6A           XRL       A,R2
   \   000043   6005         JZ        ??ZDO_ParseMgmtNwkUpdateReq_2
   \   000045   74FF         MOV       A,#-0x1
   \   000047   6A           XRL       A,R2
   \   000048   701E         JNZ       ??ZDO_ParseMgmtNwkUpdateReq_3
   3131            {
   3132              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   3133              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   00004A   8E82         MOV       DPL,R6
   \   00004C   8F83         MOV       DPH,R7
   \   00004E   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000051   F0           MOVX      @DPTR,A
   \   000052   EE           MOV       A,R6
   \   000053   2406         ADD       A,#0x6
   \   000055   FE           MOV       R6,A
   \   000056   5001         JNC       ??ZDO_ParseMgmtNwkUpdateReq_4
   \   000058   0F           INC       R7
   3134          
   3135              if ( pReq->scanDuration == 0xFF )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_4:
   \   000059   8882         MOV       DPL,R0
   \   00005B   8983         MOV       DPH,R1
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   F4           CPL       A
   \   00005F   7007         JNZ       ??ZDO_ParseMgmtNwkUpdateReq_3
   3136              {
   3137                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000061   12....       LCALL     ?Subroutine62 & 0xFFFF
   3138              }
   3139            }
   \                     ??CrossCallReturnLabel_85:
   \   000064   F0           MOVX      @DPTR,A
   \   000065   A3           INC       DPTR
   \   000066   E9           MOV       A,R1
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   000067   F0           MOVX      @DPTR,A
   3140          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   000068   02....       LJMP      ??Subroutine174_0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateNwkStatus::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateNwkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_CompareClusterLists::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CompareClusterLists

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AnyClusterMatches::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AnyClusterMatches

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessNodeDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessNodeDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessPowerDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessPowerDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessSimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessSimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessActiveEPReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessActiveEPReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConvertOTAClusters::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConvertOTAClusters

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateAddrManager::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateAddrManager

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLqiReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLqiReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtRtgReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtRtgReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??NLME_PermitJoiningTimeout::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NLME_PermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_BuildSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_BuildSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_MatchEndDeviceBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_MatchEndDeviceBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveMatchMemory::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveMatchMemory

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_CopyMatchInfo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CopyMatchInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDMatchSendState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDMatchSendState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceBindMatchTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceBindMatchTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseAddrRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseNodeDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseNodeDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParsePowerDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParsePowerDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEPListRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEPListRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseUserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseUserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateReq

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "StartDevice ERR">`:
   \   000000   53746172     DB "StartDevice ERR"
   \            74446576
   \            69636520
   \            45525200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MODE unknown">`:
   \   000000   4D4F4445     DB "MODE unknown"
   \            20756E6B
   \            6E6F776E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "End Device Bind">`:
   \   000000   456E6420     DB "End Device Bind"
   \            44657669
   \            63652042
   \            696E6400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Success Sent">`:
   \   000000   53756363     DB "Success Sent"
   \            65737320
   \            53656E74
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Timeout">`:
   \   000000   54696D65     DB "Timeout"
   \            6F757400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Match Desc Req">`:
   \   000000   4D617463     DB "Match Desc Req"
   \            68204465
   \            73632052
   \            657100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Rsp Sent">`:
   \   000000   52737020     DB "Rsp Sent"
   \            53656E74
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Non Matched">`:
   \   000000   4E6F6E20     DB "Non Matched"
   \            4D617463
   \            68656400
   3141          
   3142          /*********************************************************************
   3143          *********************************************************************/
   3144          
   3145          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   NLME_PermitJoiningTimeout
      1     71   ZDMatchSendState
        0     37   -> APS_SetEndDeviceBindTimeout
        0     37   -> ZDO_RemoveMatchMemory
        0     45   -> ZDP_BindUnbindReq
        0     42   -> ZDP_SendData
        0     37   -> sAddrExtCpy
      0     40   ZDO_AnyClusterMatches
      1     14   ZDO_BuildSimpleDescBuf
      0     46   ZDO_CompareClusterLists
      0     36   ZDO_ConvertOTAClusters
      0     47   ZDO_CopyMatchInfo
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     21   -> osal_memcpy
      2      0   ZDO_EndDeviceBindMatchTimeoutCB
        2      0   -> ZDMatchSendState
      1     17   ZDO_EndDeviceTimeoutCB
        0     12   -> HalLcdWriteString
        0     17   -> ZDP_SendData
        0     12   -> osal_mem_free
      2      0   ZDO_Init
        2      0   -> APS_ReflectorInit
        2      0   -> NLME_CoordinatorInit
        2      0   -> sAddrExtCpy
      1     31   ZDO_MatchEndDeviceBind
        0     26   -> APS_SetEndDeviceBindTimeout
        0     26   -> ZDMatchSendState
        0     30   -> ZDO_CompareClusterLists
        0     26   -> ZDO_CopyMatchInfo
        0     26   -> ZDO_RemoveMatchMemory
        0     31   -> ZDP_SendData
        0     26   -> osal_mem_alloc
        0     29   -> osal_memcpy
        0     26   -> osal_memset
      1     14   ZDO_ParseAddrRsp
        0     14   -> osal_mem_alloc
        0     14   -> sAddrExtCpy
      1     10   ZDO_ParseBindUnbindReq
        0     10   -> sAddrExtCpy
      1     42   ZDO_ParseDeviceAnnce
        0     10   -> sAddrExtCpy
      1     19   ZDO_ParseEPListRsp
        0     16   -> osal_mem_alloc
        0     19   -> osal_memcpy
      1     18   ZDO_ParseEndDeviceBindReq
        0     18   -> ZDO_ConvertOTAClusters
        0     18   -> osal_mem_alloc
        0     18   -> sAddrExtCpy
      1     16   ZDO_ParseMgmNwkDiscRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     18   ZDO_ParseMgmtBindRsp
        0     18   -> osal_mem_alloc
        0     18   -> sAddrExtCpy
      1     16   ZDO_ParseMgmtLqiRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     27   ZDO_ParseMgmtNwkUpdateNotify
        0     24   -> osal_build_uint32
        0     24   -> osal_mem_alloc
        0     27   -> osal_memcpy
      1     10   ZDO_ParseMgmtNwkUpdateReq
        0     10   -> osal_build_uint32
      1     14   ZDO_ParseMgmtRtgRsp
        0     14   -> osal_mem_alloc
      1     10   ZDO_ParseNodeDescRsp
      1     12   ZDO_ParsePowerDescRsp
      1      9   ZDO_ParseServerDiscRsp
      1     25   ZDO_ParseSimpleDescBuf
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
      1      9   ZDO_ParseSimpleDescRsp
        0      9   -> ZDO_ParseSimpleDescBuf
      1     19   ZDO_ParseUserDescRsp
        0     16   -> osal_mem_alloc
        0     19   -> osal_memcpy
      0     21   ZDO_ProcessActiveEPReq
        0     14   -> NLME_GetShortAddr
        0     21   -> ZDP_EPRsp
        0     14   -> afEndPoints
        0     14   -> afNumEndPoints
      0     39   ZDO_ProcessBindUnbindReq
        0     35   -> APSME_BindRequest
        0     34   -> APSME_LookupNwkAddr
        0     35   -> APSME_UnBindRequest
        0     34   -> NLME_GetExtAddr
        0     34   -> ZDApp_NVUpdate
        0     34   -> ZDP_NwkAddrReq
        0     39   -> ZDP_SendData
        0     34   -> bindNumOfEntries
        0     34   -> sAddrExtCmp
        0     34   -> sAddrExtCpy
      2     32   ZDO_ProcessDeviceAnnce
        2     32   -> AddrMgrEntryLookupNwk
        2     32   -> AddrMgrEntryUpdate
        2     32   -> AddrMgrExtAddrSet
        2     32   -> ZDO_ParseDeviceAnnce
        2     32   -> osal_memset
        2     32   -> sAddrExtCmp
      1     33   ZDO_ProcessMatchDescReq
        0     26   -> HalLcdWriteScreen
        0     26   -> NLME_IsAddressBroadcast
        0     28   -> ZDO_AnyClusterMatches
        0     26   -> ZDO_ConvertOTAClusters
        0     33   -> ZDP_EPRsp
        0     26   -> osal_mem_alloc
        0     26   -> osal_mem_free
        0     29   -> osal_memcpy
        0     26   -> osal_msg_allocate
        0     26   -> osal_msg_send
      0     25   ZDO_ProcessMgmtBindReq
        0     20   -> APSME_GetRequest
        0     25   -> ZDP_MgmtBindRsp
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
      1     16   ZDO_ProcessMgmtDirectJoinReq
        0     11   -> NLME_DirectJoinRequest
        0     16   -> ZDP_SendData
      1     23   ZDO_ProcessMgmtLeaveReq
        0     18   -> AddrMgrExtAddrValid
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_LeaveReq
        0     23   -> ZDP_SendData
        0     18   -> sAddrExtCmp
      1     66   ZDO_ProcessMgmtLqiReq
        0     61   -> AddrMgrEntryLookupNwk
        0     61   -> AssocCount
        0     61   -> AssocFindDevice
        0     61   -> NLME_GetRequest
        0     66   -> ZDP_MgmtLqiRsp
        0     61   -> osal_mem_alloc
        0     61   -> osal_mem_free
        0     61   -> osal_memset
        0     61   -> sAddrExtCpy
      1     17   ZDO_ProcessMgmtNwkDiscReq
        0     17   -> NLME_NwkDiscReq2
        0     17   -> NLME_NwkDiscTerm
        0     17   -> osal_build_uint32
      1     16   ZDO_ProcessMgmtPermitJoinReq
        0     11   -> NLME_PermitJoiningRequest
        0     16   -> ZDP_SendData
      0     22   ZDO_ProcessMgmtRtgReq
        0     17   -> NLME_GetRequest
        0     22   -> ZDP_MgmtRtgRsp
        0     17   -> osal_mem_alloc
        0     17   -> osal_mem_free
      0     14   ZDO_ProcessNodeDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_NodeDescMsg
      0     14   ZDO_ProcessPowerDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_PowerDescMsg
      0     14   ZDO_ProcessServerDiscReq
        0     14   -> ZDP_ServerDiscRsp
      0     12   ZDO_ProcessSimpleDescReq
        0     12   -> ZDP_SimpleDescMsg
        0     12   -> afFindSimpleDesc
        0     12   -> osal_mem_free
      0     37   ZDO_ProcessUserDescReq
        0     37   -> ZDP_GenericRsp
        0     36   -> ZDP_UserDescRsp
        0     37   -> osal_nv_read
      1     41   ZDO_ProcessUserDescSet
        0     41   -> ZDP_SendData
        0     39   -> osal_memcpy
        0     40   -> osal_nv_write
      2     37   ZDO_RemoveMatchMemory
        2      0   -> osal_mem_free
      0     18   ZDO_StartDevice
        0     11   -> HalLcdWriteScreen
        0     18   -> NLME_NetworkFormationRequest
        0     11   -> NLME_StartRouterRequest
        0     11   -> osal_start_timerEx
      2     13   ZDO_UpdateAddrManager
        2     13   -> AddrMgrEntryUpdate
        2     13   -> AddrMgrExtAddrSet
      1     12   ZDO_UpdateNwkStatus
        0     12   -> NLME_GetExtAddr
        0     12   -> NLME_GetShortAddr
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_find
        0     12   -> osal_msg_send
        0     12   -> osal_set_event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "End Device Bind">
      13  ?<Constant "MODE unknown">
      15  ?<Constant "Match Desc Req">
      12  ?<Constant "Non Matched">
       9  ?<Constant "Rsp Sent">
      16  ?<Constant "StartDevice ERR">
      13  ?<Constant "Success Sent">
       8  ?<Constant "Timeout">
       7  ??Subroutine171_0
       6  ??Subroutine172_0
       3  ??Subroutine173_0
       5  ??Subroutine174_0
       7  ??Subroutine175_0
      16  ??Subroutine176_0
       6  ??Subroutine177_0
       5  ??Subroutine178_0
       4  ??Subroutine179_0
       9  ??Subroutine180_0
       6  ??Subroutine181_0
       5  ??Subroutine182_0
       3  ??Subroutine183_0
       5  ??Subroutine184_0
       2  ??Subroutine185_0
       6  ??Subroutine186_0
       2  ??Subroutine187_0
       6  ??Subroutine188_0
       5  ??Subroutine189_0
       5  ??Subroutine190_0
       4  ??Subroutine191_0
       5  ??Subroutine192_0
       5  ??Subroutine193_0
       4  ??Subroutine194_0
       6  ??Subroutine195_0
       7  ??Subroutine196_0
      10  ??Subroutine197_0
       8  ??Subroutine198_0
       5  ??Subroutine199_0
       5  ??Subroutine200_0
       5  ??Subroutine201_0
       6  ??Subroutine202_0
       5  ??Subroutine203_0
       2  ??Subroutine204_0
       6  ??Subroutine205_0
       5  ??Subroutine206_0
       8  ??Subroutine207_0
      19  ??Subroutine208_0
       5  ??Subroutine209_0
       3  ??Subroutine210_0
       4  ??Subroutine211_0
       5  ??Subroutine212_0
       3  ??Subroutine213_0
       5  ??Subroutine214_0
       6  ??Subroutine215_0
       8  ??Subroutine216_0
       6  ??Subroutine217_0
       5  ??Subroutine218_0
       5  ??Subroutine219_0
       5  ??Subroutine220_0
       6  ??Subroutine221_0
       7  ??Subroutine222_0
       9  ??Subroutine223_0
       1  ??Subroutine224_0
       5  ??Subroutine225_0
       3  ?Subroutine0
       5  ?Subroutine1
      43  ?Subroutine10
       8  ?Subroutine100
       4  ?Subroutine101
       4  ?Subroutine102
      14  ?Subroutine103
       7  ?Subroutine104
      14  ?Subroutine105
      11  ?Subroutine106
       4  ?Subroutine107
       7  ?Subroutine108
       4  ?Subroutine109
      27  ?Subroutine11
      13  ?Subroutine110
       9  ?Subroutine111
       4  ?Subroutine112
       8  ?Subroutine113
       9  ?Subroutine114
       4  ?Subroutine115
       5  ?Subroutine116
       1  ?Subroutine117
      12  ?Subroutine118
       8  ?Subroutine119
      17  ?Subroutine12
       1  ?Subroutine120
       1  ?Subroutine121
      15  ?Subroutine122
      11  ?Subroutine123
      10  ?Subroutine124
      14  ?Subroutine125
       3  ?Subroutine126
       8  ?Subroutine127
      14  ?Subroutine128
       7  ?Subroutine129
      27  ?Subroutine13
      10  ?Subroutine130
       9  ?Subroutine131
       8  ?Subroutine132
       1  ?Subroutine133
      13  ?Subroutine134
       5  ?Subroutine135
       7  ?Subroutine136
       5  ?Subroutine137
       4  ?Subroutine138
       6  ?Subroutine139
      17  ?Subroutine14
       9  ?Subroutine140
       4  ?Subroutine141
      11  ?Subroutine142
       8  ?Subroutine143
       5  ?Subroutine144
       2  ?Subroutine145
       2  ?Subroutine146
      20  ?Subroutine147
      12  ?Subroutine148
      18  ?Subroutine149
      10  ?Subroutine15
       2  ?Subroutine150
       6  ?Subroutine151
       3  ?Subroutine152
       6  ?Subroutine153
       8  ?Subroutine154
       8  ?Subroutine155
      10  ?Subroutine156
       1  ?Subroutine157
       6  ?Subroutine158
       6  ?Subroutine159
       6  ?Subroutine16
       4  ?Subroutine160
       1  ?Subroutine161
       3  ?Subroutine162
       9  ?Subroutine163
       9  ?Subroutine164
       9  ?Subroutine165
       9  ?Subroutine166
       4  ?Subroutine167
       3  ?Subroutine168
      11  ?Subroutine169
      10  ?Subroutine17
       9  ?Subroutine170
       4  ?Subroutine18
       8  ?Subroutine19
       4  ?Subroutine2
       6  ?Subroutine20
       7  ?Subroutine21
      11  ?Subroutine22
       4  ?Subroutine23
       8  ?Subroutine24
      11  ?Subroutine25
       6  ?Subroutine26
       4  ?Subroutine27
      11  ?Subroutine28
       4  ?Subroutine29
       2  ?Subroutine3
       7  ?Subroutine30
       1  ?Subroutine31
       4  ?Subroutine32
       6  ?Subroutine33
       5  ?Subroutine34
       7  ?Subroutine35
       4  ?Subroutine36
       5  ?Subroutine37
      10  ?Subroutine38
       3  ?Subroutine39
       5  ?Subroutine4
       7  ?Subroutine40
       4  ?Subroutine41
       8  ?Subroutine42
       4  ?Subroutine43
       2  ?Subroutine44
       4  ?Subroutine45
       4  ?Subroutine46
       1  ?Subroutine47
      12  ?Subroutine48
       4  ?Subroutine49
       3  ?Subroutine5
       6  ?Subroutine50
       6  ?Subroutine51
       2  ?Subroutine52
      35  ?Subroutine53
      19  ?Subroutine54
      33  ?Subroutine55
      25  ?Subroutine56
       4  ?Subroutine57
      25  ?Subroutine58
      19  ?Subroutine59
       3  ?Subroutine6
       6  ?Subroutine60
      19  ?Subroutine61
      15  ?Subroutine62
       2  ?Subroutine63
      10  ?Subroutine64
      10  ?Subroutine65
       6  ?Subroutine66
       1  ?Subroutine67
      13  ?Subroutine68
      13  ?Subroutine69
       5  ?Subroutine7
       9  ?Subroutine70
      11  ?Subroutine71
       6  ?Subroutine72
       7  ?Subroutine73
      16  ?Subroutine74
       5  ?Subroutine75
       6  ?Subroutine76
       4  ?Subroutine77
       4  ?Subroutine78
       5  ?Subroutine79
       6  ?Subroutine8
      30  ?Subroutine80
       2  ?Subroutine81
      12  ?Subroutine82
      10  ?Subroutine83
      14  ?Subroutine84
      10  ?Subroutine85
      12  ?Subroutine86
       2  ?Subroutine87
      13  ?Subroutine88
      13  ?Subroutine89
       5  ?Subroutine9
      13  ?Subroutine90
      16  ?Subroutine91
       2  ?Subroutine92
       8  ?Subroutine93
      11  ?Subroutine94
      18  ?Subroutine95
      12  ?Subroutine96
       3  ?Subroutine97
      11  ?Subroutine98
      12  ?Subroutine99
       3  NLME_PermitJoiningTimeout
       6  NLME_PermitJoiningTimeout::?relay
     585  ZDMatchSendState
       6  ZDMatchSendState::?relay
      52  ZDOBuildBuf
      77  ZDO_AnyClusterMatches
       6  ZDO_AnyClusterMatches::?relay
     235  ZDO_BuildSimpleDescBuf
       6  ZDO_BuildSimpleDescBuf::?relay
     122  ZDO_CompareClusterLists
       6  ZDO_CompareClusterLists::?relay
      61  ZDO_ConvertOTAClusters
       6  ZDO_ConvertOTAClusters::?relay
     198  ZDO_CopyMatchInfo
       6  ZDO_CopyMatchInfo::?relay
       2  ZDO_EDBind
      16  ZDO_EndDeviceBindMatchTimeoutCB
       6  ZDO_EndDeviceBindMatchTimeoutCB::?relay
     207  ZDO_EndDeviceTimeoutCB
       6  ZDO_EndDeviceTimeoutCB::?relay
      32  ZDO_Init
       6  ZDO_Init::?relay
     538  ZDO_MatchEndDeviceBind
       6  ZDO_MatchEndDeviceBind::?relay
     219  ZDO_ParseAddrRsp
       6  ZDO_ParseAddrRsp::?relay
     113  ZDO_ParseBindUnbindReq
       6  ZDO_ParseBindUnbindReq::?relay
      59  ZDO_ParseDeviceAnnce
       6  ZDO_ParseDeviceAnnce::?relay
     120  ZDO_ParseEPListRsp
       6  ZDO_ParseEPListRsp::?relay
     314  ZDO_ParseEndDeviceBindReq
       6  ZDO_ParseEndDeviceBindReq::?relay
     265  ZDO_ParseMgmNwkDiscRsp
       6  ZDO_ParseMgmNwkDiscRsp::?relay
     175  ZDO_ParseMgmtBindRsp
       6  ZDO_ParseMgmtBindRsp::?relay
     142  ZDO_ParseMgmtLqiRsp
       6  ZDO_ParseMgmtLqiRsp::?relay
     237  ZDO_ParseMgmtNwkUpdateNotify
       6  ZDO_ParseMgmtNwkUpdateNotify::?relay
     107  ZDO_ParseMgmtNwkUpdateReq
       6  ZDO_ParseMgmtNwkUpdateReq::?relay
     166  ZDO_ParseMgmtRtgRsp
       6  ZDO_ParseMgmtRtgRsp::?relay
     283  ZDO_ParseNodeDescRsp
       6  ZDO_ParseNodeDescRsp::?relay
     199  ZDO_ParsePowerDescRsp
       6  ZDO_ParsePowerDescRsp::?relay
      47  ZDO_ParseServerDiscRsp
       6  ZDO_ParseServerDiscRsp::?relay
     314  ZDO_ParseSimpleDescBuf
       6  ZDO_ParseSimpleDescBuf::?relay
      27  ZDO_ParseSimpleDescRsp
       6  ZDO_ParseSimpleDescRsp::?relay
     129  ZDO_ParseUserDescRsp
       6  ZDO_ParseUserDescRsp::?relay
     128  ZDO_ProcessActiveEPReq
       6  ZDO_ProcessActiveEPReq::?relay
     423  ZDO_ProcessBindUnbindReq
       6  ZDO_ProcessBindUnbindReq::?relay
     106  ZDO_ProcessDeviceAnnce
       6  ZDO_ProcessDeviceAnnce::?relay
     844  ZDO_ProcessMatchDescReq
       6  ZDO_ProcessMatchDescReq::?relay
     264  ZDO_ProcessMgmtBindReq
       6  ZDO_ProcessMgmtBindReq::?relay
      87  ZDO_ProcessMgmtDirectJoinReq
       6  ZDO_ProcessMgmtDirectJoinReq::?relay
     185  ZDO_ProcessMgmtLeaveReq
       6  ZDO_ProcessMgmtLeaveReq::?relay
     716  ZDO_ProcessMgmtLqiReq
       6  ZDO_ProcessMgmtLqiReq::?relay
     122  ZDO_ProcessMgmtNwkDiscReq
       6  ZDO_ProcessMgmtNwkDiscReq::?relay
      88  ZDO_ProcessMgmtPermitJoinReq
       6  ZDO_ProcessMgmtPermitJoinReq::?relay
     239  ZDO_ProcessMgmtRtgReq
       6  ZDO_ProcessMgmtRtgReq::?relay
      66  ZDO_ProcessNodeDescReq
       6  ZDO_ProcessNodeDescReq::?relay
      66  ZDO_ProcessPowerDescReq
       6  ZDO_ProcessPowerDescReq::?relay
      70  ZDO_ProcessServerDiscReq
       6  ZDO_ProcessServerDiscReq::?relay
     123  ZDO_ProcessSimpleDescReq
       6  ZDO_ProcessSimpleDescReq::?relay
     193  ZDO_ProcessUserDescReq
       6  ZDO_ProcessUserDescReq::?relay
     297  ZDO_ProcessUserDescSet
       6  ZDO_ProcessUserDescSet::?relay
     108  ZDO_RemoveMatchMemory
       6  ZDO_RemoveMatchMemory::?relay
     132  ZDO_StartDevice
       6  ZDO_StartDevice::?relay
      37  ZDO_UpdateAddrManager
       6  ZDO_UpdateAddrManager::?relay
     127  ZDO_UpdateNwkStatus
       6  ZDO_UpdateNwkStatus::?relay
       4  apsChannelMask
       2  matchED

 
 11 197 bytes in segment BANKED_CODE
    294 bytes in segment BANK_RELAYS
    102 bytes in segment XDATA_ROM_C
     60 bytes in segment XDATA_Z
 
    294 bytes of CODE     memory
    102 bytes of CONST    memory
 11 197 bytes of HUGECODE memory
     60 bytes of XDATA    memory

Errors: none
Warnings: none
