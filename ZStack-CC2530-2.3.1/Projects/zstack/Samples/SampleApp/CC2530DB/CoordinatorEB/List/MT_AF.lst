###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               12/Sep/2018  03:56:54
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.20
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\mt\MT_AF.c
#    Command line       =  
#        -f C:\Users\ANANDA~1\AppData\Local\Temp\EW560C.tmp ("C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\mt\MT_AF.c"
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\MT_AF.lst
#    Object file        =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\MT_AF.r51
#
###############################################################################

C:\Users\Ananda Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\mt\MT_AF.c
      1          /**************************************************************************************************
      2            Filename:       MT_AF.c
      3            Revised:        $Date: 2010-08-13 18:14:16 -0700 (Fri, 13 Aug 2010) $
      4            Revision:       $Revision: 23411 $
      5          
      6          
      7            Description:    MonitorTest functions for the AF layer.
      8          
      9          
     10            Copyright 2007-2010 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          
     40          **************************************************************************************************/
     41          
     42          /***************************************************************************************************
     43           * INCLUDES
     44           ***************************************************************************************************/
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "MT.h"
     48          #include "MT_AF.h"
     49          #include "MT_ZDO.h"
     50          #include "nwk.h"
     51          #include "OnBoard.h"
     52          #include "MT_UART.h"
     53          
     54          #if defined INTER_PAN
     55          #include "stub_aps.h"
     56          #endif
     57          
     58          /* ------------------------------------------------------------------------------------------------
     59           *                                          Constants
     60           * ------------------------------------------------------------------------------------------------
     61           */
     62          
     63          #if !defined MT_AF_EXEC_CNT
     64          #define MT_AF_EXEC_CNT  15
     65          #endif
     66          
     67          #if !defined MT_AF_EXEC_DLY
     68          #define MT_AF_EXEC_DLY  1000
     69          #endif
     70          
     71          /* ------------------------------------------------------------------------------------------------
     72           *                                           Typedefs
     73           * ------------------------------------------------------------------------------------------------
     74           */
     75          
     76          /*
     77          typedef struct
     78          {
     79            union
     80            {
     81              uint16      shortAddr;
     82              ZLongAddr_t extAddr;
     83            } addr;
     84            afAddrMode_t addrMode;
     85            byte endPoint;
     86            uint16 panId;  // used for the INTER_PAN feature
     87          } afAddrType_t;
     88          
     89          typedef struct
     90          {
     91            byte   TransSeqNumber;
     92            uint16 DataLength;               // Number of bytes in TransData
     93            byte  *Data;
     94          } afMSGCommandFormat_t;
     95           */
     96          
     97          typedef struct
     98          {
     99            uint8 *data;
    100            afAddrType_t dstAddr;
    101            endPointDesc_t *epDesc;
    102            uint16 cId;
    103            uint16 dataLen;
    104            uint8 transId;
    105            uint8 txOpts;
    106            uint8 radius;
    107            uint8 tick;
    108          } mtAfDataReq_t;
    109          
    110          struct _mtAfInMsgList_t
    111          {
    112            struct _mtAfInMsgList_t *next;
    113            uint8 *data;
    114            uint32 timestamp;         // Receipt timestamp from MAC.
    115            uint8 tick;
    116          };
    117          typedef struct _mtAfInMsgList_t mtAfInMsgList_t;
    118          
    119          /* ------------------------------------------------------------------------------------------------
    120           *                                        Local Variables
    121           * ------------------------------------------------------------------------------------------------
    122           */
    123          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    124          mtAfInMsgList_t *pMtAfInMsgList = NULL;
   \                     pMtAfInMsgList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          mtAfDataReq_t *pMtAfDataReq = NULL;
   \                     pMtAfDataReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    126          
    127          /* ------------------------------------------------------------------------------------------------
    128           *                                        Global Variables
    129           * ------------------------------------------------------------------------------------------------
    130           */
    131          
    132          #if defined ( MT_AF_CB_FUNC )
    133          uint16 _afCallbackSub;
    134          #endif
    135          
    136          /* ------------------------------------------------------------------------------------------------
    137           *                                        Local Functions
    138           * ------------------------------------------------------------------------------------------------
    139           */
    140          
    141          void MT_AfRegister(uint8 *pBuf);
    142          void MT_AfDataRequest(uint8 *pBuf);
    143          
    144          #if defined ( ZIGBEE_SOURCE_ROUTING )
    145          void MT_AfDataRequestSrcRtg(uint8 *pBuf);
    146          #endif
    147          
    148          #if defined INTER_PAN
    149          static void MT_AfInterPanCtl(uint8 *pBuf);
    150          #endif
    151          
    152          static void MT_AfDataRetrieve(uint8 *pBuf);
    153          static void MT_AfDataStore(uint8 *pBuf);
    154          
    155          /**************************************************************************************************
    156           * @fn          MT_AfExec
    157           *
    158           * @brief       This function is invoked by an MT timer event.
    159           *
    160           * input parameters
    161           *
    162           * None.
    163           *
    164           * output parameters
    165           *
    166           * None.
    167           *
    168           * @return      None.
    169           **************************************************************************************************
    170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    171          void MT_AfExec(void)
   \                     MT_AfExec:
    172          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    173            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \                     ??MT_AfExec_0:
   \   000005   90....       MOV       DPTR,#pMtAfInMsgList
   \   000008   8008         SJMP      ??MT_AfExec_1
    174          
    175            while (pItem != NULL)
    176            {
    177              if (--(pItem->tick) == 0)
    178              {
    179                if (pMtAfInMsgList == pItem)
    180                {
    181                  pMtAfInMsgList = pItem->next;
    182                  (void)osal_mem_free(pItem);
    183                  pItem = pMtAfInMsgList;
    184                }
    185                else
    186                {
    187                  pPrev->next = pItem->next;
    188                  (void)osal_mem_free(pItem);
    189                  pItem = pPrev->next;
    190                }
    191              }
    192              else
    193              {
    194                pPrev = pItem;
   \                     ??MT_AfExec_2:
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    195                pItem = pItem->next;
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
    196              }
   \                     ??MT_AfExec_1:
   \   000012   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000015   EA           MOV       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   6035         JZ        ??MT_AfExec_3
   \   000019   EA           MOV       A,R2
   \   00001A   2408         ADD       A,#0x8
   \   00001C   F582         MOV       DPL,A
   \   00001E   E4           CLR       A
   \   00001F   3B           ADDC      A,R3
   \   000020   F583         MOV       DPH,A
   \   000022   E0           MOVX      A,@DPTR
   \   000023   14           DEC       A
   \   000024   F0           MOVX      @DPTR,A
   \   000025   70E3         JNZ       ??MT_AfExec_2
   \   000027   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00002A   EA           MOV       A,R2
   \   00002B   68           XRL       A,R0
   \   00002C   7002         JNZ       ??MT_AfExec_4
   \   00002E   EB           MOV       A,R3
   \   00002F   69           XRL       A,R1
   \                     ??MT_AfExec_4:
   \   000030   8A82         MOV       DPL,R2
   \   000032   8B83         MOV       DPH,R3
   \   000034   7008         JNZ       ??MT_AfExec_5
   \   000036   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000039   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00003C   80C7         SJMP      ??MT_AfExec_0
   \                     ??MT_AfExec_5:
   \   00003E   12....       LCALL     ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000041   8E82         MOV       DPL,R6
   \   000043   8F83         MOV       DPH,R7
   \   000045   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000048   8E82         MOV       DPL,R6
   \   00004A   8F83         MOV       DPH,R7
   \   00004C   80C4         SJMP      ??MT_AfExec_1
    197            }
    198          
    199            if (pMtAfDataReq != NULL)
   \                     ??MT_AfExec_3:
   \   00004E   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000051   6015         JZ        ??MT_AfExec_6
    200            {
    201              if (--(pMtAfDataReq->tick) == 0)
   \   000053   E8           MOV       A,R0
   \   000054   2417         ADD       A,#0x17
   \   000056   F582         MOV       DPL,A
   \   000058   E4           CLR       A
   \   000059   39           ADDC      A,R1
   \   00005A   F583         MOV       DPH,A
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   14           DEC       A
   \   00005E   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000061   E0           MOVX      A,@DPTR
   \   000062   7004         JNZ       ??MT_AfExec_6
    202              {
    203                (void)osal_mem_free(pMtAfDataReq);
   \   000064                ; Setup parameters for call to function osal_mem_free
   \   000064   12....       LCALL     ?Subroutine3 & 0xFFFF
    204                pMtAfDataReq = NULL;
    205              }
    206            }
   \                     ??CrossCallReturnLabel_0:
   \   000067   F0           MOVX      @DPTR,A
    207          
    208            if ((pMtAfInMsgList != NULL) || (pMtAfDataReq != NULL))
   \                     ??MT_AfExec_6:
   \   000068   90....       MOV       DPTR,#pMtAfInMsgList
   \   00006B   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00006E   7005         JNZ       ??MT_AfExec_7
   \   000070   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000073   6008         JZ        ??CrossCallReturnLabel_21
    209            {
    210              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??MT_AfExec_7:
   \   000075                ; Setup parameters for call to function osal_start_timerEx
   \   000075   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000078   6003         JZ        ??CrossCallReturnLabel_21
    211              {
    212                osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   00007A                ; Setup parameters for call to function osal_set_event
   \   00007A   12....       LCALL     ?Subroutine16 & 0xFFFF
    213              }
    214            }
    215          }
   \                     ??CrossCallReturnLabel_21:
   \   00007D                REQUIRE ?Subroutine0
   \   00007D                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000003                ; Setup parameters for call to function osal_mem_free
   \   000003                ; Setup parameters for call to function osal_mem_free
   \   000003   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   7A08         MOV       R2,#0x8
   \   000002   7B00         MOV       R3,#0x0
   \   000004   90....       MOV       DPTR,#MT_TaskID
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   7CE8         MOV       R4,#-0x18
   \   000002   7D03         MOV       R5,#0x3
   \   000004   7A08         MOV       R2,#0x8
   \   000006   7B00         MOV       R3,#0x0
   \   000008   90....       MOV       DPTR,#MT_TaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000010   E9           MOV       A,R1
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#pMtAfDataReq
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   C8           XCH       A,R0
   \   000009   2417         ADD       A,#0x17
   \   00000B   F582         MOV       DPL,A
   \   00000D   E4           CLR       A
   \   00000E   38           ADDC      A,R0
   \   00000F   F583         MOV       DPH,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003                REQUIRE ??Subroutine31_0
   \   000003                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   12....       LCALL     ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine32_0
   \   000001                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000003   90....       MOV       DPTR,#pMtAfInMsgList
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   90....       MOV       DPTR,#pMtAfInMsgList
   \   000003                REQUIRE ??Subroutine36_0
   \   000003                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000006   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000009   90....       MOV       DPTR,#pMtAfDataReq
   \   00000C   E4           CLR       A
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   A3           INC       DPTR
   \   00000F   22           RET
    216          
    217          /***************************************************************************************************
    218           * @fn      MT_AfCommandProcessing
    219           *
    220           * @brief   Process all the AF commands that are issued by test tool
    221           *
    222           * @param   pBuf - pointer to the received buffer
    223           *
    224           * @return  status
    225           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    226          uint8 MT_AfCommandProcessing(uint8 *pBuf)
   \                     MT_AfCommandProcessing:
    227          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    228            uint8 status = MT_RPC_SUCCESS;
   \   000005   7E00         MOV       R6,#0x0
    229          
    230            switch (pBuf[MT_RPC_POS_CMD1])
   \   000007   8A82         MOV       DPL,R2
   \   000009   8B83         MOV       DPH,R3
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   600F         JZ        ??MT_AfCommandProcessing_0
   \   000010   14           DEC       A
   \   000011   6011         JZ        ??MT_AfCommandProcessing_1
   \   000013   14           DEC       A
   \   000014   600E         JZ        ??MT_AfCommandProcessing_1
   \   000016   24F1         ADD       A,#-0xf
   \   000018   6014         JZ        ??MT_AfCommandProcessing_2
   \   00001A   14           DEC       A
   \   00001B   600C         JZ        ??MT_AfCommandProcessing_3
   \   00001D   8014         SJMP      ??MT_AfCommandProcessing_4
    231            {
    232              case MT_AF_REGISTER:
    233                MT_AfRegister(pBuf);
   \                     ??MT_AfCommandProcessing_0:
   \   00001F                ; Setup parameters for call to function MT_AfRegister
   \   00001F   12....       LCALL     `??MT_AfRegister::?relay`; Banked call to: MT_AfRegister
    234                break;
   \   000022   8011         SJMP      ??MT_AfCommandProcessing_5
    235          
    236              case MT_AF_DATA_REQUEST:
    237              case MT_AF_DATA_REQUEST_EXT:
    238                MT_AfDataRequest(pBuf);
   \                     ??MT_AfCommandProcessing_1:
   \   000024                ; Setup parameters for call to function MT_AfDataRequest
   \   000024   12....       LCALL     `??MT_AfDataRequest::?relay`; Banked call to: MT_AfDataRequest
    239                break;
   \   000027   800C         SJMP      ??MT_AfCommandProcessing_5
    240          
    241              case MT_AF_DATA_RETRIEVE:
    242                MT_AfDataRetrieve(pBuf);
   \                     ??MT_AfCommandProcessing_3:
   \   000029                ; Setup parameters for call to function MT_AfDataRetrieve
   \   000029   12....       LCALL     `??MT_AfDataRetrieve::?relay`; Banked call to: MT_AfDataRetrieve
    243                break;
   \   00002C   8007         SJMP      ??MT_AfCommandProcessing_5
    244                
    245              case MT_AF_DATA_STORE:
    246                MT_AfDataStore(pBuf);
   \                     ??MT_AfCommandProcessing_2:
   \   00002E                ; Setup parameters for call to function MT_AfDataStore
   \   00002E   12....       LCALL     `??MT_AfDataStore::?relay`; Banked call to: MT_AfDataStore
    247                break;
   \   000031   8002         SJMP      ??MT_AfCommandProcessing_5
    248                
    249          #if defined ( ZIGBEE_SOURCE_ROUTING )
    250              case MT_AF_DATA_REQUEST_SRCRTG:
    251                MT_AfDataRequestSrcRtg(pBuf);
    252                break;
    253          #endif
    254                
    255          #if defined INTER_PAN
    256              case MT_AF_INTER_PAN_CTL:
    257                MT_AfInterPanCtl(pBuf);
    258                break; 
    259          #endif
    260                
    261              default:
    262                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_AfCommandProcessing_4:
   \   000033   7E02         MOV       R6,#0x2
    263                break;
    264            }
    265          
    266            return status;
   \                     ??MT_AfCommandProcessing_5:
   \   000035   EE           MOV       A,R6
   \   000036   F9           MOV       R1,A
   \   000037   80..         SJMP      ?Subroutine0
    267          }
    268          
    269          /***************************************************************************************************
    270           * @fn      MT_AfRegister
    271           *
    272           * @brief   Process AF Register command
    273           *
    274           * @param   pBuf - pointer to the received buffer
    275           *
    276           * @return  none
    277           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    278          void MT_AfRegister(uint8 *pBuf)
   \                     MT_AfRegister:
    279          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
    280            uint8 cmdId;
    281            uint8 retValue = ZMemError;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7410         MOV       A,#0x10
   \   000016   12....       LCALL     ?Subroutine21 & 0xFFFF
    282            endPointDesc_t *epDesc;
    283          
    284            /* parse header */
    285            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_30:
   \   000019   F5..         MOV       ?V2,A
    286            pBuf += MT_RPC_FRAME_HDR_SZ;
    287          
    288            epDesc = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
   \   00001B                ; Setup parameters for call to function osal_mem_alloc
   \   00001B   7A06         MOV       R2,#0x6
   \   00001D   7B00         MOV       R3,#0x0
   \   00001F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000022   8A..         MOV       ?V4,R2
   \   000024   8B..         MOV       ?V5,R3
   \   000026   AE..         MOV       R6,?V4
   \   000028   AF..         MOV       R7,?V5
    289            if ( epDesc )
   \   00002A   EA           MOV       A,R2
   \   00002B   4F           ORL       A,R7
   \   00002C   603F         JZ        ??MT_AfRegister_0
    290            {
    291              epDesc->task_id = &MT_TaskID;
   \   00002E   8A82         MOV       DPL,R2
   \   000030   8B83         MOV       DPH,R3
   \   000032   A3           INC       DPTR
   \   000033   74..         MOV       A,#MT_TaskID & 0xff
   \   000035   F0           MOVX      @DPTR,A
   \   000036   A3           INC       DPTR
   \   000037   74..         MOV       A,#(MT_TaskID >> 8) & 0xff
   \   000039   F0           MOVX      @DPTR,A
    292              retValue = MT_BuildEndpointDesc( pBuf, epDesc );
   \   00003A                ; Setup parameters for call to function MT_BuildEndpointDesc
   \   00003A   EA           MOV       A,R2
   \   00003B   FC           MOV       R4,A
   \   00003C   EB           MOV       A,R3
   \   00003D   FD           MOV       R5,A
   \   00003E   E5..         MOV       A,?V0
   \   000040   2403         ADD       A,#0x3
   \   000042   FA           MOV       R2,A
   \   000043   E4           CLR       A
   \   000044   35..         ADDC      A,?V1
   \   000046   FB           MOV       R3,A
   \   000047   12....       LCALL     `??MT_BuildEndpointDesc::?relay`; Banked call to: MT_BuildEndpointDesc
   \   00004A   E9           MOV       A,R1
   \   00004B   85..82       MOV       DPL,?XSP + 0
   \   00004E   85..83       MOV       DPH,?XSP + 1
   \   000051   F0           MOVX      @DPTR,A
    293              if ( retValue == ZSuccess )
   \   000052   700F         JNZ       ??MT_AfRegister_1
    294              {
    295                retValue = afRegister( epDesc );
   \   000054                ; Setup parameters for call to function afRegister
   \   000054   EE           MOV       A,R6
   \   000055   FA           MOV       R2,A
   \   000056   EF           MOV       A,R7
   \   000057   FB           MOV       R3,A
   \   000058   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
   \   00005B   E9           MOV       A,R1
   \   00005C   85..82       MOV       DPL,?XSP + 0
   \   00005F   85..83       MOV       DPH,?XSP + 1
   \   000062   F0           MOVX      @DPTR,A
    296              }
    297          
    298              if ( retValue != ZSuccess )
   \                     ??MT_AfRegister_1:
   \   000063   E0           MOVX      A,@DPTR
   \   000064   6007         JZ        ??MT_AfRegister_0
    299              {
    300                osal_mem_free( epDesc );
   \   000066                ; Setup parameters for call to function osal_mem_free
   \   000066   EE           MOV       A,R6
   \   000067   FA           MOV       R2,A
   \   000068   EF           MOV       A,R7
   \   000069   FB           MOV       R3,A
   \   00006A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    301              }
    302            }
    303          
    304            /* Build and send back the response */
    305            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfRegister_0:
   \   00006D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00006D   AC..         MOV       R4,?XSP + 0
   \   00006F   AD..         MOV       R5,?XSP + 1
   \   000071   7B01         MOV       R3,#0x1
   \   000073   AA..         MOV       R2,?V2
   \   000075                REQUIRE ?Subroutine1
   \   000075                ; // Fall through to label ?Subroutine1
    306          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7964         MOV       R1,#0x64
   \   000002   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000005   7401         MOV       A,#0x1
   \   000007   12....       LCALL     ?DEALLOC_XSTACK8
   \   00000A   7F06         MOV       R7,#0x6
   \   00000C   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET
    307          
    308          /***************************************************************************************************
    309           * @fn      MT_AfDataRequest
    310           *
    311           * @brief   Process AF Register command
    312           *
    313           * @param   pBuf - pointer to the received buffer
    314           *
    315           * @return  none
    316           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    317          void MT_AfDataRequest(uint8 *pBuf)
   \                     MT_AfDataRequest:
    318          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000   74EB         MOV       A,#-0x15
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EB           MOV       A,R3
   \   00000B   FF           MOV       R7,A
    319            #define MT_AF_REQ_MSG_LEN  10
    320            #define MT_AF_REQ_MSG_EXT  10
    321          
    322            endPointDesc_t *epDesc;
    323            afAddrType_t dstAddr;
    324            cId_t cId;
    325            uint8 transId, txOpts, radius;
    326            uint8 cmd0, cmd1;
    327            uint8 retValue = ZFailure;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   7401         MOV       A,#0x1
   \   000014   12....       LCALL     ?Subroutine22 & 0xFFFF
    328            uint16 dataLen, tempLen;
    329          
    330            /* Parse header */
    331            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \                     ??CrossCallReturnLabel_32:
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V12,A
    332            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F5..         MOV       ?V9,A
    333            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000024   EA           MOV       A,R2
   \   000025   2403         ADD       A,#0x3
   \   000027   FE           MOV       R6,A
   \   000028   5001         JNC       ??MT_AfDataRequest_0
   \   00002A   0F           INC       R7
    334          
    335            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_0:
   \   00002B   2402         ADD       A,#0x2
   \   00002D   F8           MOV       R0,A
   \   00002E   E4           CLR       A
   \   00002F   3F           ADDC      A,R7
   \   000030   F9           MOV       R1,A
   \   000031   E8           MOV       A,R0
   \   000032   FA           MOV       R2,A
   \   000033   E9           MOV       A,R1
   \   000034   FB           MOV       R3,A
   \   000035   8E82         MOV       DPL,R6
   \   000037   8F83         MOV       DPH,R7
   \   000039   A3           INC       DPTR
   \   00003A   A882         MOV       R0,DPL
   \   00003C   A983         MOV       R1,DPH
   \   00003E   7402         MOV       A,#0x2
   \   000040   65..         XRL       A,?V9
   \   000042   6003         JZ        $+5
   \   000044   02....       LJMP      ??MT_AfDataRequest_1 & 0xFFFF
    336            {
    337              dstAddr.addrMode = (afAddrMode_t)*pBuf++;
   \   000047   8E82         MOV       DPL,R6
   \   000049   8F83         MOV       DPH,R7
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   FC           MOV       R4,A
   \   00004D   740A         MOV       A,#0xa
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   EC           MOV       A,R4
   \   000053   F0           MOVX      @DPTR,A
   \   000054   E8           MOV       A,R0
   \   000055   FE           MOV       R6,A
   \   000056   E9           MOV       A,R1
   \   000057   FF           MOV       R7,A
    338          
    339              if (dstAddr.addrMode == afAddr64Bit)
   \   000058   7403         MOV       A,#0x3
   \   00005A   6C           XRL       A,R4
   \   00005B   701D         JNZ       ??MT_AfDataRequest_2
    340              {
    341                (void)osal_memcpy(dstAddr.addr.extAddr, pBuf, Z_EXTADDR_LEN);
   \   00005D                ; Setup parameters for call to function osal_memcpy
   \   00005D   88..         MOV       ?V0,R0
   \   00005F   89..         MOV       ?V1,R1
   \   000061   75..00       MOV       ?V2,#0x0
   \   000064   78..         MOV       R0,#?V0
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000069   7C08         MOV       R4,#0x8
   \   00006B   7D00         MOV       R5,#0x0
   \   00006D   7405         MOV       A,#0x5
   \   00006F   12....       LCALL     ?XSTACK_DISP101_8
   \   000072   12....       LCALL     ??Subroutine35_0 & 0xFFFF
    342              }
   \                     ??CrossCallReturnLabel_72:
   \   000075   12....       LCALL     ?DEALLOC_XSTACK8
   \   000078   8015         SJMP      ??CrossCallReturnLabel_58
    343              else
    344              {
    345                dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRequest_2:
   \   00007A   8882         MOV       DPL,R0
   \   00007C   8983         MOV       DPH,R1
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   FC           MOV       R4,A
   \   000080   8A82         MOV       DPL,R2
   \   000082   8B83         MOV       DPH,R3
   \   000084   E0           MOVX      A,@DPTR
   \   000085   F9           MOV       R1,A
   \   000086   7402         MOV       A,#0x2
   \   000088   12....       LCALL     ?XSTACK_DISP0_8
   \   00008B   EC           MOV       A,R4
   \   00008C   12....       LCALL     ??Subroutine32_0 & 0xFFFF
    346              }
    347              pBuf += Z_EXTADDR_LEN;
    348          
    349              dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_58:
   \   00008F   8E82         MOV       DPL,R6
   \   000091   8F83         MOV       DPH,R7
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   C0E0         PUSH      A
   \   00009E   740B         MOV       A,#0xb
   \   0000A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A3   D0E0         POP       A
   \   0000A5   F0           MOVX      @DPTR,A
   \   0000A6   EE           MOV       A,R6
   \   0000A7   2409         ADD       A,#0x9
   \   0000A9   FE           MOV       R6,A
   \   0000AA   5001         JNC       ??MT_AfDataRequest_3
   \   0000AC   0F           INC       R7
    350              dstAddr.panId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRequest_3:
   \   0000AD   F582         MOV       DPL,A
   \   0000AF   8F83         MOV       DPH,R7
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   FA           MOV       R2,A
   \   0000B3   A3           INC       DPTR
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   F9           MOV       R1,A
   \   0000B6   740C         MOV       A,#0xc
   \   0000B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BB   EA           MOV       A,R2
   \   0000BC   12....       LCALL     ??Subroutine32_0 & 0xFFFF
    351              pBuf += 2;
   \                     ??CrossCallReturnLabel_59:
   \   0000BF   EE           MOV       A,R6
   \   0000C0   2402         ADD       A,#0x2
   \   0000C2   FE           MOV       R6,A
   \   0000C3   503E         JNC       ??MT_AfDataRequest_4
   \   0000C5   0F           INC       R7
   \   0000C6   803B         SJMP      ??MT_AfDataRequest_4
    352            }
    353            else
    354            {
    355              /* Destination address */
    356              dstAddr.addrMode = afAddr16Bit;
   \                     ??MT_AfDataRequest_1:
   \   0000C8   740A         MOV       A,#0xa
   \   0000CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CD   7402         MOV       A,#0x2
   \   0000CF   F0           MOVX      @DPTR,A
    357              dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0000D0   8E82         MOV       DPL,R6
   \   0000D2   8F83         MOV       DPH,R7
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   FC           MOV       R4,A
   \   0000D6   8882         MOV       DPL,R0
   \   0000D8   8983         MOV       DPH,R1
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   F9           MOV       R1,A
   \   0000DC   7402         MOV       A,#0x2
   \   0000DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E1   EC           MOV       A,R4
   \   0000E2   F0           MOVX      @DPTR,A
   \   0000E3   A3           INC       DPTR
   \   0000E4   E9           MOV       A,R1
   \   0000E5   12....       LCALL     ?Subroutine22 & 0xFFFF
    358              pBuf += 2;
    359          
    360              /* Destination endpoint */
    361              dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_33:
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   C0E0         PUSH      A
   \   0000EB   740B         MOV       A,#0xb
   \   0000ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F0   D0E0         POP       A
   \   0000F2   F0           MOVX      @DPTR,A
   \   0000F3   EE           MOV       A,R6
   \   0000F4   2403         ADD       A,#0x3
   \   0000F6   FE           MOV       R6,A
   \   0000F7   5001         JNC       ??MT_AfDataRequest_5
   \   0000F9   0F           INC       R7
    362              dstAddr.panId = 0;
   \                     ??MT_AfDataRequest_5:
   \   0000FA   740C         MOV       A,#0xc
   \   0000FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FF   E4           CLR       A
   \   000100   F0           MOVX      @DPTR,A
   \   000101   A3           INC       DPTR
   \   000102   F0           MOVX      @DPTR,A
    363            }
    364          
    365            /* Source endpoint */
    366            epDesc = afFindEndPointDesc(*pBuf++);
   \                     ??MT_AfDataRequest_4:
   \   000103                ; Setup parameters for call to function afFindEndPointDesc
   \   000103   8E82         MOV       DPL,R6
   \   000105   8F83         MOV       DPH,R7
   \   000107   E0           MOVX      A,@DPTR
   \   000108   F9           MOV       R1,A
   \   000109   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00010C   8A..         MOV       ?V10,R2
   \   00010E   8B..         MOV       ?V11,R3
   \   000110   8E82         MOV       DPL,R6
   \   000112   8F83         MOV       DPH,R7
   \   000114   A3           INC       DPTR
   \   000115   AE82         MOV       R6,DPL
   \   000117   AF83         MOV       R7,DPH
    367          
    368            /* ClusterId */
    369            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000119   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00011C   F5..         MOV       ?V2,A
   \   00011E   E4           CLR       A
   \   00011F   39           ADDC      A,R1
   \   000120   F5..         MOV       ?V3,A
    370            pBuf +=2;
    371          
    372            /* TransId */
    373            transId = *pBuf++;
   \   000122   8E82         MOV       DPL,R6
   \   000124   8F83         MOV       DPH,R7
   \   000126   A3           INC       DPTR
   \   000127   A3           INC       DPTR
   \   000128   E0           MOVX      A,@DPTR
   \   000129   C0E0         PUSH      A
   \   00012B   7401         MOV       A,#0x1
   \   00012D   12....       LCALL     ?XSTACK_DISP0_8
   \   000130   D0E0         POP       A
   \   000132   F0           MOVX      @DPTR,A
    374          
    375            /* TxOption */
    376            txOpts = *pBuf++;
   \   000133   8E82         MOV       DPL,R6
   \   000135   8F83         MOV       DPH,R7
   \   000137   A3           INC       DPTR
   \   000138   A3           INC       DPTR
   \   000139   A3           INC       DPTR
   \   00013A   E0           MOVX      A,@DPTR
   \   00013B   F5..         MOV       ?V8,A
    377          
    378            /* Radius */
    379            radius = *pBuf++;
   \   00013D   8E82         MOV       DPL,R6
   \   00013F   8F83         MOV       DPH,R7
   \   000141   A3           INC       DPTR
   \   000142   A3           INC       DPTR
   \   000143   A3           INC       DPTR
   \   000144   A3           INC       DPTR
   \   000145   E0           MOVX      A,@DPTR
   \   000146   F5..         MOV       ?V7,A
   \   000148   EE           MOV       A,R6
   \   000149   2405         ADD       A,#0x5
   \   00014B   FE           MOV       R6,A
   \   00014C   5001         JNC       ??MT_AfDataRequest_6
   \   00014E   0F           INC       R7
    380          
    381            /* Length */
    382            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_6:
   \   00014F   F582         MOV       DPL,A
   \   000151   8F83         MOV       DPH,R7
   \   000153   A3           INC       DPTR
   \   000154   A882         MOV       R0,DPL
   \   000156   A983         MOV       R1,DPH
   \   000158   F582         MOV       DPL,A
   \   00015A   8F83         MOV       DPH,R7
   \   00015C   E0           MOVX      A,@DPTR
   \   00015D   FA           MOV       R2,A
   \   00015E   7402         MOV       A,#0x2
   \   000160   65..         XRL       A,?V9
   \   000162   701E         JNZ       ??MT_AfDataRequest_7
    383            {
    384              dataLen = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000164   8882         MOV       DPL,R0
   \   000166   8983         MOV       DPH,R1
   \   000168   12....       LCALL     ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00016B   F5..         MOV       ?V0,A
   \   00016D   E4           CLR       A
   \   00016E   39           ADDC      A,R1
   \   00016F   F5..         MOV       ?V1,A
    385              tempLen = dataLen + MT_AF_REQ_MSG_LEN + MT_AF_REQ_MSG_EXT;
   \   000171   EA           MOV       A,R2
   \   000172   2414         ADD       A,#0x14
   \   000174   F8           MOV       R0,A
   \   000175   E4           CLR       A
   \   000176   35..         ADDC      A,?V1
   \   000178   F9           MOV       R1,A
    386              pBuf += 2;
   \   000179   EE           MOV       A,R6
   \   00017A   2402         ADD       A,#0x2
   \   00017C   FE           MOV       R6,A
   \   00017D   5014         JNC       ??MT_AfDataRequest_8
   \   00017F   0F           INC       R7
   \   000180   8011         SJMP      ??MT_AfDataRequest_8
    387            }
    388            else
    389            {
    390              dataLen = *pBuf++;
   \                     ??MT_AfDataRequest_7:
   \   000182   EA           MOV       A,R2
   \   000183   F5..         MOV       ?V0,A
   \   000185   75..00       MOV       ?V1,#0x0
   \   000188   0E           INC       R6
   \   000189   E9           MOV       A,R1
   \   00018A   FF           MOV       R7,A
    391              tempLen = dataLen + MT_AF_REQ_MSG_LEN;
   \   00018B   EA           MOV       A,R2
   \   00018C   240A         ADD       A,#0xa
   \   00018E   F8           MOV       R0,A
   \   00018F   E4           CLR       A
   \   000190   3400         ADDC      A,#0x0
   \   000192   F9           MOV       R1,A
    392            }
    393          
    394            if ( epDesc == NULL )
   \                     ??MT_AfDataRequest_8:
   \   000193   E5..         MOV       A,?V10
   \   000195   4B           ORL       A,R3
   \   000196   6011         JZ        ??MT_AfDataRequest_9
    395            {
    396              retValue = afStatus_INVALID_PARAMETER;
    397            }
    398            else if (tempLen > (uint16)MT_RPC_DATA_MAX)
   \   000198   C3           CLR       C
   \   000199   E8           MOV       A,R0
   \   00019A   94FB         SUBB      A,#-0x5
   \   00019C   E9           MOV       A,R1
   \   00019D   9400         SUBB      A,#0x0
   \   00019F   5003         JNC       $+5
   \   0001A1   02....       LJMP      ??MT_AfDataRequest_10 & 0xFFFF
    399            {
    400              if (pMtAfDataReq != NULL)
   \   0001A4   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0001A7   600B         JZ        ??MT_AfDataRequest_11
    401              {
    402                retValue = afStatus_INVALID_PARAMETER;
   \                     ??MT_AfDataRequest_9:
   \   0001A9   85..82       MOV       DPL,?XSP + 0
   \   0001AC   85..83       MOV       DPH,?XSP + 1
   \   0001AF   7402         MOV       A,#0x2
   \   0001B1   02....       LJMP      ??MT_AfDataRequest_12 & 0xFFFF
    403              }
    404              else if ((pMtAfDataReq = osal_mem_alloc(sizeof(mtAfDataReq_t) + dataLen)) == NULL)
   \                     ??MT_AfDataRequest_11:
   \   0001B4                ; Setup parameters for call to function osal_mem_alloc
   \   0001B4   EA           MOV       A,R2
   \   0001B5   2418         ADD       A,#0x18
   \   0001B7   FA           MOV       R2,A
   \   0001B8   E4           CLR       A
   \   0001B9   35..         ADDC      A,?V1
   \   0001BB   FB           MOV       R3,A
   \   0001BC   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0001BF   90....       MOV       DPTR,#pMtAfDataReq
   \   0001C2   EA           MOV       A,R2
   \   0001C3   F0           MOVX      @DPTR,A
   \   0001C4   A3           INC       DPTR
   \   0001C5   EB           MOV       A,R3
   \   0001C6   F0           MOVX      @DPTR,A
   \   0001C7   F9           MOV       R1,A
   \   0001C8   EA           MOV       A,R2
   \   0001C9   49           ORL       A,R1
   \   0001CA   85..82       MOV       DPL,?XSP + 0
   \   0001CD   85..83       MOV       DPH,?XSP + 1
   \   0001D0   7005         JNZ       ??MT_AfDataRequest_13
    405              {
    406                retValue = afStatus_MEM_FAIL;
   \   0001D2   7410         MOV       A,#0x10
   \   0001D4   02....       LJMP      ??MT_AfDataRequest_12 & 0xFFFF
    407              }
    408              else
    409              {
    410                retValue = afStatus_SUCCESS;
   \                     ??MT_AfDataRequest_13:
   \   0001D7   E4           CLR       A
   \   0001D8   F0           MOVX      @DPTR,A
    411          
    412                pMtAfDataReq->data = (uint8 *)(pMtAfDataReq+1);
   \   0001D9   90....       MOV       DPTR,#pMtAfDataReq
   \   0001DC   E0           MOVX      A,@DPTR
   \   0001DD   2418         ADD       A,#0x18
   \   0001DF   FA           MOV       R2,A
   \   0001E0   A3           INC       DPTR
   \   0001E1   E0           MOVX      A,@DPTR
   \   0001E2   3400         ADDC      A,#0x0
   \   0001E4   FB           MOV       R3,A
   \   0001E5   90....       MOV       DPTR,#pMtAfDataReq
   \   0001E8   E0           MOVX      A,@DPTR
   \   0001E9   F8           MOV       R0,A
   \   0001EA   A3           INC       DPTR
   \   0001EB   E0           MOVX      A,@DPTR
   \   0001EC   F583         MOV       DPH,A
   \   0001EE   8882         MOV       DPL,R0
   \   0001F0   EA           MOV       A,R2
   \   0001F1   F0           MOVX      @DPTR,A
   \   0001F2   A3           INC       DPTR
   \   0001F3   EB           MOV       A,R3
   \   0001F4   F0           MOVX      @DPTR,A
    413                (void)osal_memcpy(&(pMtAfDataReq->dstAddr), &dstAddr, sizeof(afAddrType_t));
   \   0001F5                ; Setup parameters for call to function osal_memcpy
   \   0001F5   7402         MOV       A,#0x2
   \   0001F7   12....       LCALL     ?XSTACK_DISP100_8
   \   0001FA   88..         MOV       ?V4,R0
   \   0001FC   89..         MOV       ?V5,R1
   \   0001FE   75..00       MOV       ?V6,#0x0
   \   000201   78..         MOV       R0,#?V4
   \   000203   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000206   7C0C         MOV       R4,#0xc
   \   000208   7D00         MOV       R5,#0x0
   \   00020A   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00020D   12....       LCALL     ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000210   12....       LCALL     ?DEALLOC_XSTACK8
    414                pMtAfDataReq->epDesc = epDesc;
   \   000213   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000216   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000219   E5..         MOV       A,?V10
   \   00021B   F0           MOVX      @DPTR,A
   \   00021C   A3           INC       DPTR
   \   00021D   E5..         MOV       A,?V11
   \   00021F   12....       LCALL     ?Subroutine5 & 0xFFFF
    415                pMtAfDataReq->cId = cId;
   \                     ??CrossCallReturnLabel_47:
   \   000222   2410         ADD       A,#0x10
   \   000224   F582         MOV       DPL,A
   \   000226   E4           CLR       A
   \   000227   38           ADDC      A,R0
   \   000228   F583         MOV       DPH,A
   \   00022A   E5..         MOV       A,?V2
   \   00022C   F0           MOVX      @DPTR,A
   \   00022D   A3           INC       DPTR
   \   00022E   E5..         MOV       A,?V3
   \   000230   12....       LCALL     ?Subroutine5 & 0xFFFF
    416                pMtAfDataReq->dataLen = dataLen;
   \                     ??CrossCallReturnLabel_48:
   \   000233   2412         ADD       A,#0x12
   \   000235   F582         MOV       DPL,A
   \   000237   E4           CLR       A
   \   000238   38           ADDC      A,R0
   \   000239   F583         MOV       DPH,A
   \   00023B   E5..         MOV       A,?V0
   \   00023D   F0           MOVX      @DPTR,A
   \   00023E   A3           INC       DPTR
   \   00023F   E5..         MOV       A,?V1
   \   000241   F0           MOVX      @DPTR,A
    417                pMtAfDataReq->transId = transId;
   \   000242   7401         MOV       A,#0x1
   \   000244   12....       LCALL     ?XSTACK_DISP0_8
   \   000247   E0           MOVX      A,@DPTR
   \   000248   C0E0         PUSH      A
   \   00024A   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00024D   2414         ADD       A,#0x14
   \   00024F   F582         MOV       DPL,A
   \   000251   E4           CLR       A
   \   000252   38           ADDC      A,R0
   \   000253   F583         MOV       DPH,A
   \   000255   D0E0         POP       A
   \   000257   12....       LCALL     ?Subroutine5 & 0xFFFF
    418                pMtAfDataReq->txOpts = txOpts;
   \                     ??CrossCallReturnLabel_49:
   \   00025A   2415         ADD       A,#0x15
   \   00025C   F582         MOV       DPL,A
   \   00025E   E4           CLR       A
   \   00025F   38           ADDC      A,R0
   \   000260   F583         MOV       DPH,A
   \   000262   E5..         MOV       A,?V8
   \   000264   12....       LCALL     ?Subroutine5 & 0xFFFF
    419                pMtAfDataReq->radius = radius;
   \                     ??CrossCallReturnLabel_50:
   \   000267   2416         ADD       A,#0x16
   \   000269   F582         MOV       DPL,A
   \   00026B   E4           CLR       A
   \   00026C   38           ADDC      A,R0
   \   00026D   F583         MOV       DPH,A
   \   00026F   E5..         MOV       A,?V7
   \   000271   12....       LCALL     ?Subroutine4 & 0xFFFF
    420          
    421                // Setup to time-out the huge outgoing item if host does not MT_AF_DATA_STORE it.
    422                pMtAfDataReq->tick = MT_AF_EXEC_CNT;
   \                     ??CrossCallReturnLabel_2:
   \   000274   12....       LCALL     ?Subroutine9 & 0xFFFF
    423                if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??CrossCallReturnLabel_44:
   \   000277   604A         JZ        ??MT_AfDataRequest_14
    424                {
    425                  (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000279                ; Setup parameters for call to function osal_set_event
   \   000279   12....       LCALL     ?Subroutine16 & 0xFFFF
    426                }
    427              }
    428            }
   \                     ??CrossCallReturnLabel_22:
   \   00027C   8045         SJMP      ??MT_AfDataRequest_14
    429            else
    430            {
    431              retValue = AF_DataRequest(&dstAddr, epDesc, cId, dataLen, pBuf, &transId, txOpts, radius);
   \                     ??MT_AfDataRequest_10:
   \   00027E                ; Setup parameters for call to function AF_DataRequest
   \   00027E   E5..         MOV       A,?V7
   \   000280   F5..         MOV       ?V4,A
   \   000282   78..         MOV       R0,#?V4
   \   000284   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000287   7402         MOV       A,#0x2
   \   000289   12....       LCALL     ?XSTACK_DISP100_8
   \   00028C   88..         MOV       ?V4,R0
   \   00028E   89..         MOV       ?V5,R1
   \   000290   78..         MOV       R0,#?V4
   \   000292   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000295   8E..         MOV       ?V4,R6
   \   000297   8F..         MOV       ?V5,R7
   \   000299   78..         MOV       R0,#?V4
   \   00029B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00029E   78..         MOV       R0,#?V0
   \   0002A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002A3   78..         MOV       R0,#?V2
   \   0002A5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002A8   A9..         MOV       R1,?V8
   \   0002AA   AC..         MOV       R4,?V10
   \   0002AC   AD..         MOV       R5,?V11
   \   0002AE   740B         MOV       A,#0xb
   \   0002B0   12....       LCALL     ?XSTACK_DISP101_8
   \   0002B3   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0002B6   7409         MOV       A,#0x9
   \   0002B8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002BB   E9           MOV       A,R1
   \   0002BC   85..82       MOV       DPL,?XSP + 0
   \   0002BF   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_AfDataRequest_12:
   \   0002C2   F0           MOVX      @DPTR,A
    432            }
    433          
    434            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??MT_AfDataRequest_14:
   \   0002C3   74E0         MOV       A,#-0x20
   \   0002C5   55..         ANL       A,?V12
   \   0002C7   6420         XRL       A,#0x20
   \   0002C9   700D         JNZ       ??MT_AfDataRequest_15
    435            {
    436              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_AF), cmd1, 1, &retValue);
   \   0002CB                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0002CB   AC..         MOV       R4,?XSP + 0
   \   0002CD   AD..         MOV       R5,?XSP + 1
   \   0002CF   7B01         MOV       R3,#0x1
   \   0002D1   AA..         MOV       R2,?V9
   \   0002D3   7964         MOV       R1,#0x64
   \   0002D5   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    437            }
    438          }
   \                     ??MT_AfDataRequest_15:
   \   0002D8   740E         MOV       A,#0xe
   \   0002DA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002DD   7F0D         MOV       R7,#0xd
   \   0002DF   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   740F         MOV       A,#0xf
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function osal_start_timerEx
   \   000003                ; Setup parameters for call to function osal_start_timerEx
   \   000003                REQUIRE ??Subroutine29_0
   \   000003                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine30_0
   \   000001                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   C8           XCH       A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine37_0
   \   000003                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   E4           CLR       A
   \   000003   C8           XCH       A,R0
   \   000004   F9           MOV       R1,A
   \   000005   EA           MOV       A,R2
   \   000006   28           ADD       A,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   240E         ADD       A,#0xe
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2402         ADD       A,#0x2
   \   000006   FA           MOV       R2,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   3400         ADDC      A,#0x0
   \   00000B   FB           MOV       R3,A
   \   00000C   22           RET
    439          
    440          #if defined ( ZIGBEE_SOURCE_ROUTING )
    441          
    442          /***************************************************************************************************
    443           * @fn      MT_AfDataRequestSrcRtg
    444           *
    445           * @brief   Process AF Register command
    446           *
    447           * @param   pBuf - pointer to the received buffer
    448           *
    449           * @return  none
    450           ***************************************************************************************************/
    451          void MT_AfDataRequestSrcRtg(uint8 *pBuf)
    452          {
    453            uint8 cmdId, dataLen = 0;
    454            uint8 retValue = ZFailure;
    455            endPointDesc_t *epDesc;
    456            byte transId;
    457            afAddrType_t dstAddr;
    458            cId_t cId;
    459            byte txOpts, radius, srcEP, relayCnt;
    460            uint16 *pRelayList;
    461            uint8 i;
    462          
    463            /* parse header */
    464            cmdId = pBuf[MT_RPC_POS_CMD1];
    465            pBuf += MT_RPC_FRAME_HDR_SZ;
    466          
    467            /* Destination address */
    468            /* Initialize the panID field to zero to avoid inter-pan */
    469            osal_memset( &dstAddr, 0, sizeof(afAddrType_t) ); 
    470            dstAddr.addrMode = afAddr16Bit;
    471            dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
    472            pBuf += 2;
    473          
    474            /* Destination endpoint */
    475            dstAddr.endPoint = *pBuf++;
    476          
    477            /* Source endpoint */
    478            srcEP = *pBuf++;
    479            epDesc = afFindEndPointDesc( srcEP );
    480          
    481            /* ClusterId */
    482            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
    483            pBuf +=2;
    484          
    485            /* TransId */
    486            transId = *pBuf++;
    487          
    488            /* TxOption */
    489            txOpts = *pBuf++;
    490          
    491            /* Radius */
    492            radius = *pBuf++;
    493            
    494            /* Source route relay count */
    495            relayCnt = *pBuf++;
    496            
    497            /* Convert the source route relay list */
    498            if( (pRelayList = osal_mem_alloc( relayCnt * sizeof( uint16 ))) != NULL )
    499            {
    500              for( i = 0; i < relayCnt; i++ )
    501              {
    502                pRelayList[i]  = BUILD_UINT16( pBuf[0], pBuf[1] );
    503                pBuf += 2;
    504              }
    505            
    506              /* Data payload Length */
    507              dataLen = *pBuf++;
    508          
    509              if ( epDesc == NULL )
    510              {
    511                retValue = afStatus_INVALID_PARAMETER;
    512              }
    513              else
    514              {
    515                retValue = AF_DataRequestSrcRtg( &dstAddr, epDesc, cId, dataLen, pBuf, 
    516                                               &transId, txOpts, radius, relayCnt, pRelayList );
    517              }
    518              
    519              /* Free the memory allocated */
    520              osal_mem_free( pRelayList );
    521            }
    522            else
    523            {
    524              retValue = afStatus_MEM_FAIL;
    525            }
    526              
    527          
    528            /* Build and send back the response */
    529            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
    530          }
    531          #endif
    532          
    533          #if defined INTER_PAN
    534          /***************************************************************************************************
    535           * @fn      MT_AfInterPanCtl
    536           *
    537           * @brief   Process the AF Inter Pan control command.
    538           *
    539           * @param   pBuf - pointer to the received buffer
    540           *
    541           * @return  none
    542           ***************************************************************************************************/
    543          static void MT_AfInterPanCtl(uint8 *pBuf)
    544          {
    545            uint8 cmd, rtrn;
    546            uint16 panId;
    547            endPointDesc_t *pEP;
    548            
    549            cmd = pBuf[MT_RPC_POS_CMD1];
    550            pBuf += MT_RPC_FRAME_HDR_SZ;
    551          
    552            switch (*pBuf++)  // Inter-pan request parameter.
    553            {
    554            case InterPanClr:
    555              rtrn = StubAPS_SetIntraPanChannel();           // Switch channel back to the NIB channel.
    556              break;
    557          
    558            case InterPanSet:
    559              rtrn = StubAPS_SetInterPanChannel(*pBuf);      // Set channel for inter-pan communication.
    560              break;
    561          
    562            case InterPanReg:
    563              if ((pEP = afFindEndPointDesc(*pBuf)))
    564              {
    565                StubAPS_RegisterApp(pEP);
    566                rtrn = SUCCESS;
    567              }
    568              else
    569              {
    570                rtrn = FAILURE;
    571              }
    572              break;
    573          
    574            case InterPanChk:
    575              panId = BUILD_UINT16(pBuf[0], pBuf[1]);
    576              rtrn = (StubAPS_InterPan(panId, pBuf[2])) ? ZSuccess : ZFailure;
    577              break;
    578          
    579            default:
    580              rtrn = afStatus_INVALID_PARAMETER;
    581              break;
    582            }
    583          
    584            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmd, 1, &rtrn);
    585          }
    586          #endif
    587          
    588          /***************************************************************************************************
    589           * @fn      MT_AfDataConfirm
    590           *
    591           * @brief   Process
    592           *
    593           * @param   pBuf - pointer to the received buffer
    594           *
    595           * @return  none
    596           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    597          void MT_AfDataConfirm(afDataConfirm_t *pMsg)
   \                     MT_AfDataConfirm:
    598          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV       A,#-0x3
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    599            uint8 retArray[3];
    600          
    601            retArray[0] = pMsg->hdr.status;
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   85..82       MOV       DPL,?XSP + 0
   \   000012   85..83       MOV       DPH,?XSP + 1
   \   000015   12....       LCALL     ?Subroutine21 & 0xFFFF
    602            retArray[1] = pMsg->endpoint;
   \                     ??CrossCallReturnLabel_31:
   \   000018   C0E0         PUSH      A
   \   00001A   7401         MOV       A,#0x1
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   D0E0         POP       A
   \   000021   12....       LCALL     ?Subroutine22 & 0xFFFF
    603            retArray[2] = pMsg->transID;
   \                     ??CrossCallReturnLabel_34:
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   C0E0         PUSH      A
   \   00002A   7402         MOV       A,#0x2
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   D0E0         POP       A
   \   000031   F0           MOVX      @DPTR,A
    604          
    605            /* Build and send back the response */
    606            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_DATA_CONFIRM, 3, retArray);
   \   000032                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000032   AC..         MOV       R4,?XSP + 0
   \   000034   AD..         MOV       R5,?XSP + 1
   \   000036   7B03         MOV       R3,#0x3
   \   000038   7A80         MOV       R2,#-0x80
   \   00003A   7944         MOV       R1,#0x44
   \   00003C   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    607          }
   \   00003F   7403         MOV       A,#0x3
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
   \   000044   D083         POP       DPH
   \   000046   D082         POP       DPL
   \   000048   02....       LJMP      ?BRET
    608          
    609          /***************************************************************************************************
    610           * @fn          MT_AfIncomingMsg
    611           *
    612           * @brief       Process the callback subscription for AF Incoming data.
    613           *
    614           * @param       pkt - Incoming AF data.
    615           *
    616           * @return      none
    617           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    618          void MT_AfIncomingMsg(afIncomingMSGPacket_t *pMsg)
   \                     MT_AfIncomingMsg:
    619          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V8,R2
   \   00000C   8B..         MOV       ?V9,R3
    620            #define MT_AF_INC_MSG_LEN  17
    621            #define MT_AF_INC_MSG_EXT  10
    622          
    623            uint16 dataLen = pMsg->cmd.DataLength;  // Length of the data section in the response packet.
   \   00000E   EA           MOV       A,R2
   \   00000F   241F         ADD       A,#0x1f
   \   000011   F582         MOV       DPL,A
   \   000013   E4           CLR       A
   \   000014   35..         ADDC      A,?V9
   \   000016   F583         MOV       DPH,A
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V0,A
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V1,A
    624            uint16 respLen = MT_AF_INC_MSG_LEN + dataLen;
   \   00001F   E5..         MOV       A,?V0
   \   000021   2411         ADD       A,#0x11
   \   000023   FE           MOV       R6,A
   \   000024   E4           CLR       A
   \   000025   35..         ADDC      A,?V1
   \   000027   FF           MOV       R7,A
    625            uint8 cmd = MT_AF_INCOMING_MSG;
   \   000028   85..82       MOV       DPL,?XSP + 0
   \   00002B   85..83       MOV       DPH,?XSP + 1
   \   00002E   7481         MOV       A,#-0x7f
   \   000030   F0           MOVX      @DPTR,A
    626            uint8 *pRsp, *pTmp;
    627            mtAfInMsgList_t *pItem = NULL;
   \   000031   75..00       MOV       ?V10,#0x0
   \   000034   75..00       MOV       ?V11,#0x0
    628          
    629          #if defined INTER_PAN
    630            if (StubAPS_InterPan(pMsg->srcAddr.panId, pMsg->srcAddr.endPoint))
    631            {
    632              cmd = MT_AF_INCOMING_MSG_EXT;
    633            }
    634            else
    635          #endif
    636            if ((pMsg->srcAddr.addrMode == afAddr64Bit) ||
    637                (respLen > (uint16)(MT_RPC_DATA_MAX - MT_AF_INC_MSG_EXT)))
   \   000037   EA           MOV       A,R2
   \   000038   240E         ADD       A,#0xe
   \   00003A   F5..         MOV       ?V4,A
   \   00003C   E4           CLR       A
   \   00003D   35..         ADDC      A,?V9
   \   00003F   F5..         MOV       ?V5,A
   \   000041   85..82       MOV       DPL,?V4
   \   000044   F583         MOV       DPH,A
   \   000046   E0           MOVX      A,@DPTR
   \   000047   6403         XRL       A,#0x3
   \   000049   6009         JZ        ??MT_AfIncomingMsg_0
   \   00004B   C3           CLR       C
   \   00004C   EE           MOV       A,R6
   \   00004D   94F1         SUBB      A,#-0xf
   \   00004F   EF           MOV       A,R7
   \   000050   9400         SUBB      A,#0x0
   \   000052   4010         JC        ??MT_AfIncomingMsg_1
    638            {
    639              cmd = MT_AF_INCOMING_MSG_EXT;
   \                     ??MT_AfIncomingMsg_0:
   \   000054   85..82       MOV       DPL,?XSP + 0
   \   000057   85..83       MOV       DPH,?XSP + 1
   \   00005A   7482         MOV       A,#-0x7e
   \   00005C   F0           MOVX      @DPTR,A
    640            }
    641          
    642            if (cmd == MT_AF_INCOMING_MSG_EXT)
    643            {
    644              respLen += MT_AF_INC_MSG_EXT;
   \   00005D   EE           MOV       A,R6
   \   00005E   240A         ADD       A,#0xa
   \   000060   FE           MOV       R6,A
   \   000061   E4           CLR       A
   \   000062   3F           ADDC      A,R7
   \   000063   FF           MOV       R7,A
    645            }
    646          
    647            if (respLen > (uint16)MT_RPC_DATA_MAX)
   \                     ??MT_AfIncomingMsg_1:
   \   000064   C3           CLR       C
   \   000065   EE           MOV       A,R6
   \   000066   94FB         SUBB      A,#-0x5
   \   000068   EF           MOV       A,R7
   \   000069   9400         SUBB      A,#0x0
   \   00006B   4031         JC        ??MT_AfIncomingMsg_2
    648            {
    649              if ((pItem = (mtAfInMsgList_t *)osal_mem_alloc(sizeof(mtAfInMsgList_t) + dataLen)) == NULL)
   \   00006D                ; Setup parameters for call to function osal_mem_alloc
   \   00006D   E5..         MOV       A,?V0
   \   00006F   2409         ADD       A,#0x9
   \   000071   FA           MOV       R2,A
   \   000072   E4           CLR       A
   \   000073   35..         ADDC      A,?V1
   \   000075   FB           MOV       R3,A
   \   000076   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000079   8A..         MOV       ?V10,R2
   \   00007B   8B..         MOV       ?V11,R3
   \   00007D   EA           MOV       A,R2
   \   00007E   4B           ORL       A,R3
   \   00007F   7003         JNZ       $+5
   \   000081   02....       LJMP      ??MT_AfIncomingMsg_3 & 0xFFFF
    650              {
    651                return;  // If cannot hold a huge message, cannot give indication at all.
    652              }
    653          
    654              pItem->data = (uint8 *)(pItem+1);
   \   000084   EA           MOV       A,R2
   \   000085   2409         ADD       A,#0x9
   \   000087   F8           MOV       R0,A
   \   000088   E4           CLR       A
   \   000089   35..         ADDC      A,?V11
   \   00008B   F9           MOV       R1,A
   \   00008C   8A82         MOV       DPL,R2
   \   00008E   8B83         MOV       DPH,R3
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   12....       LCALL     ?Subroutine28 & 0xFFFF
    655              respLen -= dataLen;  // Zero data bytes are sent with an over-sized incoming indication.
   \                     ??CrossCallReturnLabel_60:
   \   000095   C3           CLR       C
   \   000096   EE           MOV       A,R6
   \   000097   95..         SUBB      A,?V0
   \   000099   FE           MOV       R6,A
   \   00009A   EF           MOV       A,R7
   \   00009B   95..         SUBB      A,?V1
   \   00009D   FF           MOV       R7,A
    656            }
    657          
    658            // Attempt to allocate memory for the response packet.
    659            if ((pRsp = osal_mem_alloc(respLen)) == NULL)
   \                     ??MT_AfIncomingMsg_2:
   \   00009E                ; Setup parameters for call to function osal_mem_alloc
   \   00009E   EE           MOV       A,R6
   \   00009F   FA           MOV       R2,A
   \   0000A0   EF           MOV       A,R7
   \   0000A1   FB           MOV       R3,A
   \   0000A2   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000A5   8A..         MOV       ?V12,R2
   \   0000A7   8B..         MOV       ?V13,R3
   \   0000A9   EA           MOV       A,R2
   \   0000AA   4B           ORL       A,R3
   \   0000AB   7010         JNZ       ??MT_AfIncomingMsg_4
    660            {
    661              if (pItem != NULL)
   \   0000AD   E5..         MOV       A,?V10
   \   0000AF   45..         ORL       A,?V11
   \   0000B1   6007         JZ        ??MT_AfIncomingMsg_5
    662              {
    663                (void)osal_mem_free(pItem);
   \   0000B3                ; Setup parameters for call to function osal_mem_free
   \   0000B3   AA..         MOV       R2,?V10
   \   0000B5   AB..         MOV       R3,?V11
   \   0000B7   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    664              }
    665              return;
   \                     ??MT_AfIncomingMsg_5:
   \   0000BA   02....       LJMP      ??MT_AfIncomingMsg_3 & 0xFFFF
    666            }
    667            pTmp = pRsp;
    668          
    669            /* Group ID */
    670            *pTmp++ = LO_UINT16(pMsg->groupId);
   \                     ??MT_AfIncomingMsg_4:
   \   0000BD   E5..         MOV       A,?V8
   \   0000BF   2402         ADD       A,#0x2
   \   0000C1   F8           MOV       R0,A
   \   0000C2   E4           CLR       A
   \   0000C3   35..         ADDC      A,?V9
   \   0000C5   F9           MOV       R1,A
   \   0000C6   8882         MOV       DPL,R0
   \   0000C8   F583         MOV       DPH,A
   \   0000CA   12....       LCALL     ?Subroutine11 & 0xFFFF
    671            *pTmp++ = HI_UINT16(pMsg->groupId);
   \                     ??CrossCallReturnLabel_11:
   \   0000CD   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0000D0   F0           MOVX      @DPTR,A
    672          
    673            /* Cluster ID */
    674            *pTmp++ = LO_UINT16(pMsg->clusterId);
   \   0000D1   E5..         MOV       A,?V8
   \   0000D3   2404         ADD       A,#0x4
   \   0000D5   F8           MOV       R0,A
   \   0000D6   E4           CLR       A
   \   0000D7   35..         ADDC      A,?V9
   \   0000D9   F9           MOV       R1,A
   \   0000DA   8882         MOV       DPL,R0
   \   0000DC   F583         MOV       DPH,A
   \   0000DE   12....       LCALL     ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0000E1   A3           INC       DPTR
   \   0000E2   F0           MOVX      @DPTR,A
    675            *pTmp++ = HI_UINT16(pMsg->clusterId);
   \   0000E3   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0000E6   A3           INC       DPTR
   \   0000E7   A3           INC       DPTR
   \   0000E8   F0           MOVX      @DPTR,A
    676          
    677            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   0000E9   EA           MOV       A,R2
   \   0000EA   2406         ADD       A,#0x6
   \   0000EC   FA           MOV       R2,A
   \   0000ED   E4           CLR       A
   \   0000EE   35..         ADDC      A,?V13
   \   0000F0   FB           MOV       R3,A
   \   0000F1   E5..         MOV       A,?V12
   \   0000F3   2405         ADD       A,#0x5
   \   0000F5   F5..         MOV       ?V2,A
   \   0000F7   E4           CLR       A
   \   0000F8   35..         ADDC      A,?V13
   \   0000FA   F5..         MOV       ?V3,A
   \   0000FC   E5..         MOV       A,?V12
   \   0000FE   2404         ADD       A,#0x4
   \   000100   FC           MOV       R4,A
   \   000101   E4           CLR       A
   \   000102   35..         ADDC      A,?V13
   \   000104   FD           MOV       R5,A
   \   000105   E5..         MOV       A,?V8
   \   000107   240F         ADD       A,#0xf
   \   000109   F5..         MOV       ?V14,A
   \   00010B   E4           CLR       A
   \   00010C   35..         ADDC      A,?V9
   \   00010E   F5..         MOV       ?V15,A
   \   000110   E5..         MOV       A,?V8
   \   000112   2406         ADD       A,#0x6
   \   000114   F8           MOV       R0,A
   \   000115   E4           CLR       A
   \   000116   35..         ADDC      A,?V9
   \   000118   F9           MOV       R1,A
   \   000119   85..82       MOV       DPL,?XSP + 0
   \   00011C   85..83       MOV       DPH,?XSP + 1
   \   00011F   E0           MOVX      A,@DPTR
   \   000120   6482         XRL       A,#0x82
   \   000122   7061         JNZ       ??MT_AfIncomingMsg_6
    678            {
    679              *pTmp++ = pMsg->srcAddr.addrMode;
   \   000124   85..82       MOV       DPL,?V4
   \   000127   85..83       MOV       DPH,?V5
   \   00012A   12....       LCALL     ?Subroutine13 & 0xFFFF
    680          
    681              if (pMsg->srcAddr.addrMode == afAddr64Bit)
   \                     ??CrossCallReturnLabel_14:
   \   00012D   85..82       MOV       DPL,?V4
   \   000130   85..83       MOV       DPH,?V5
   \   000133   E0           MOVX      A,@DPTR
   \   000134   6403         XRL       A,#0x3
   \   000136   701B         JNZ       ??MT_AfIncomingMsg_7
    682              {
    683                (void)osal_memcpy(pTmp, pMsg->srcAddr.addr.extAddr, Z_EXTADDR_LEN);
   \   000138                ; Setup parameters for call to function osal_memcpy
   \   000138   88..         MOV       ?V4,R0
   \   00013A   89..         MOV       ?V5,R1
   \   00013C   75..00       MOV       ?V6,#0x0
   \   00013F   78..         MOV       R0,#?V4
   \   000141   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000144   7C08         MOV       R4,#0x8
   \   000146   7D00         MOV       R5,#0x0
   \   000148   1A           DEC       R2
   \   000149   AB..         MOV       R3,?V3
   \   00014B   12....       LCALL     ??Subroutine35_0 & 0xFFFF
    684              }
   \                     ??CrossCallReturnLabel_74:
   \   00014E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000151   800F         SJMP      ??CrossCallReturnLabel_12
    685              else
    686              {
    687                pTmp[0] = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_7:
   \   000153   8882         MOV       DPL,R0
   \   000155   8983         MOV       DPH,R1
   \   000157   12....       LCALL     ?Subroutine6 & 0xFFFF
    688                pTmp[1] = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??CrossCallReturnLabel_4:
   \   00015A   8882         MOV       DPL,R0
   \   00015C   8983         MOV       DPH,R1
   \   00015E   A3           INC       DPTR
   \   00015F   12....       LCALL     ?Subroutine11 & 0xFFFF
    689              }
    690              pTmp += Z_EXTADDR_LEN;
    691          
    692              *pTmp++ = pMsg->srcAddr.endPoint;
   \                     ??CrossCallReturnLabel_12:
   \   000162   85..82       MOV       DPL,?V14
   \   000165   85..83       MOV       DPH,?V15
   \   000168   12....       LCALL     ?Subroutine8 & 0xFFFF
    693          #if defined INTER_PAN
    694              *pTmp++ = LO_UINT16(pMsg->srcAddr.panId);
    695              *pTmp++ = HI_UINT16(pMsg->srcAddr.panId);
    696          #else
    697              *pTmp++ = 0;
    698              *pTmp++ = 0;
    699          #endif
    700            }
   \                     ??CrossCallReturnLabel_7:
   \   00016B   A3           INC       DPTR
   \   00016C   A3           INC       DPTR
   \   00016D   A3           INC       DPTR
   \   00016E   A3           INC       DPTR
   \   00016F   A3           INC       DPTR
   \   000170   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000173   E4           CLR       A
   \   000174   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000177   A3           INC       DPTR
   \   000178   F0           MOVX      @DPTR,A
   \   000179   E5..         MOV       A,?V2
   \   00017B   240B         ADD       A,#0xb
   \   00017D   F5..         MOV       ?V2,A
   \   00017F   5027         JNC       ??MT_AfIncomingMsg_8
   \   000181   05..         INC       ?V3
   \   000183   8023         SJMP      ??MT_AfIncomingMsg_8
    701            else
    702            {
    703              /* Source Address */
    704              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_6:
   \   000185   8882         MOV       DPL,R0
   \   000187   8983         MOV       DPH,R1
   \   000189   12....       LCALL     ?Subroutine13 & 0xFFFF
    705              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??CrossCallReturnLabel_15:
   \   00018C   8882         MOV       DPL,R0
   \   00018E   8983         MOV       DPH,R1
   \   000190   A3           INC       DPTR
   \   000191   12....       LCALL     ?Subroutine6 & 0xFFFF
    706          
    707              /* Source EP */
    708              *pTmp++ = pMsg->srcAddr.endPoint;
   \                     ??CrossCallReturnLabel_5:
   \   000194   85..82       MOV       DPL,?V14
   \   000197   85..83       MOV       DPH,?V15
   \   00019A   12....       LCALL     ?Subroutine11 & 0xFFFF
    709            }
   \                     ??CrossCallReturnLabel_13:
   \   00019D   E5..         MOV       A,?V12
   \   00019F   2407         ADD       A,#0x7
   \   0001A1   F5..         MOV       ?V2,A
   \   0001A3   E4           CLR       A
   \   0001A4   35..         ADDC      A,?V13
   \   0001A6   F5..         MOV       ?V3,A
    710          
    711            /* Destination EP */
    712            *pTmp++ = pMsg->endPoint;
   \                     ??MT_AfIncomingMsg_8:
   \   0001A8   E5..         MOV       A,?V8
   \   0001AA   2414         ADD       A,#0x14
   \   0001AC   F582         MOV       DPL,A
   \   0001AE   E4           CLR       A
   \   0001AF   35..         ADDC      A,?V9
   \   0001B1   F583         MOV       DPH,A
   \   0001B3   12....       LCALL     ?Subroutine6 & 0xFFFF
    713          
    714            /* WasBroadCast */
    715            *pTmp++ = pMsg->wasBroadcast;
   \                     ??CrossCallReturnLabel_6:
   \   0001B6   E5..         MOV       A,?V8
   \   0001B8   2415         ADD       A,#0x15
   \   0001BA   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0001BD   F0           MOVX      @DPTR,A
    716          
    717            /* LinkQuality */
    718            *pTmp++ = pMsg->LinkQuality;
   \   0001BE   E5..         MOV       A,?V8
   \   0001C0   2416         ADD       A,#0x16
   \   0001C2   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0001C5   A3           INC       DPTR
   \   0001C6   F0           MOVX      @DPTR,A
    719          
    720            /* SecurityUse */
    721            *pTmp++ = pMsg->SecurityUse;
   \   0001C7   E5..         MOV       A,?V8
   \   0001C9   2419         ADD       A,#0x19
   \   0001CB   F582         MOV       DPL,A
   \   0001CD   E4           CLR       A
   \   0001CE   35..         ADDC      A,?V9
   \   0001D0   F583         MOV       DPH,A
   \   0001D2   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0001D5   F0           MOVX      @DPTR,A
    722          
    723            /* Timestamp */
    724            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 0);
   \   0001D6   E5..         MOV       A,?V8
   \   0001D8   241A         ADD       A,#0x1a
   \   0001DA   F5..         MOV       ?V14,A
   \   0001DC   E4           CLR       A
   \   0001DD   35..         ADDC      A,?V9
   \   0001DF   F5..         MOV       ?V15,A
   \   0001E1   85..82       MOV       DPL,?V14
   \   0001E4   F583         MOV       DPH,A
   \   0001E6   78..         MOV       R0,#?V4
   \   0001E8   12....       LCALL     ?L_MOV_X
   \   0001EB   85..82       MOV       DPL,?V2
   \   0001EE   85..83       MOV       DPH,?V3
   \   0001F1   12....       LCALL     ?Subroutine19 & 0xFFFF
    725            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 1);
   \                     ??CrossCallReturnLabel_64:
   \   0001F4   12....       LCALL     ?L_MOV_X
   \   0001F7   E5..         MOV       A,?V5
   \   0001F9   85..82       MOV       DPL,?V2
   \   0001FC   85..83       MOV       DPH,?V3
   \   0001FF   A3           INC       DPTR
   \   000200   A3           INC       DPTR
   \   000201   A3           INC       DPTR
   \   000202   A3           INC       DPTR
   \   000203   A3           INC       DPTR
   \   000204   12....       LCALL     ??Subroutine33_0 & 0xFFFF
    726            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 2);
   \                     ??CrossCallReturnLabel_66:
   \   000207   12....       LCALL     ?L_MOV_X
   \   00020A   7410         MOV       A,#0x10
   \   00020C   78..         MOV       R0,#?V4
   \   00020E   12....       LCALL     ?UL_SHR
   \   000211   85..82       MOV       DPL,?V2
   \   000214   85..83       MOV       DPH,?V3
   \   000217   A3           INC       DPTR
   \   000218   A3           INC       DPTR
   \   000219   12....       LCALL     ?Subroutine19 & 0xFFFF
    727            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 3);
   \                     ??CrossCallReturnLabel_65:
   \   00021C   12....       LCALL     ?L_MOV_X
   \   00021F   7418         MOV       A,#0x18
   \   000221   78..         MOV       R0,#?V4
   \   000223   12....       LCALL     ?UL_SHR
   \   000226   85..82       MOV       DPL,?V2
   \   000229   85..83       MOV       DPH,?V3
   \   00022C   A3           INC       DPTR
   \   00022D   A3           INC       DPTR
   \   00022E   A3           INC       DPTR
   \   00022F   A3           INC       DPTR
   \   000230   A3           INC       DPTR
   \   000231   A3           INC       DPTR
   \   000232   A3           INC       DPTR
   \   000233   E5..         MOV       A,?V4
   \   000235   F0           MOVX      @DPTR,A
    728          
    729          
    730            /* Data Length */
    731            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   000236   E5..         MOV       A,?V2
   \   000238   240A         ADD       A,#0xa
   \   00023A   F8           MOV       R0,A
   \   00023B   E4           CLR       A
   \   00023C   35..         ADDC      A,?V3
   \   00023E   F9           MOV       R1,A
   \   00023F   E5..         MOV       A,?V2
   \   000241   2409         ADD       A,#0x9
   \   000243   FA           MOV       R2,A
   \   000244   E4           CLR       A
   \   000245   35..         ADDC      A,?V3
   \   000247   FB           MOV       R3,A
   \   000248   E5..         MOV       A,?V2
   \   00024A   2408         ADD       A,#0x8
   \   00024C   FC           MOV       R4,A
   \   00024D   E4           CLR       A
   \   00024E   35..         ADDC      A,?V3
   \   000250   FD           MOV       R5,A
   \   000251   85..82       MOV       DPL,?XSP + 0
   \   000254   85..83       MOV       DPH,?XSP + 1
   \   000257   E0           MOVX      A,@DPTR
   \   000258   6482         XRL       A,#0x82
   \   00025A   701E         JNZ       ??MT_AfIncomingMsg_9
    732            {
    733              /* Z-Tool apparently takes the last Byte before the data buffer as the dynamic length and
    734               * ignores the bigger UInt16 length of an EXT incoming message. But no data bytes will be sent
    735               * with a huge message, so it's necessary to work-around and fake-out Z-Tool with a zero here.
    736               */
    737              *pTmp++ = 0;  // TODO - workaround Z-Tool shortcoming; should be: = pMsg->cmd.TransSeqNumber;
   \   00025C   8C82         MOV       DPL,R4
   \   00025E   8D83         MOV       DPH,R5
   \   000260   E4           CLR       A
   \   000261   12....       LCALL     ?Subroutine22 & 0xFFFF
    738              *pTmp++ = LO_UINT16(dataLen);
   \                     ??CrossCallReturnLabel_35:
   \   000264   E5..         MOV       A,?V0
   \   000266   F0           MOVX      @DPTR,A
    739              *pTmp++ = HI_UINT16(dataLen);
   \   000267   8882         MOV       DPL,R0
   \   000269   8983         MOV       DPH,R1
   \   00026B   E5..         MOV       A,?V1
   \   00026D   F0           MOVX      @DPTR,A
   \   00026E   E5..         MOV       A,?V2
   \   000270   240B         ADD       A,#0xb
   \   000272   F5..         MOV       ?V2,A
   \   000274   501D         JNC       ??MT_AfIncomingMsg_10
   \   000276   05..         INC       ?V3
   \   000278   8019         SJMP      ??MT_AfIncomingMsg_10
    740            }
    741            else
    742            {
    743              *pTmp++ = pMsg->cmd.TransSeqNumber;
   \                     ??MT_AfIncomingMsg_9:
   \   00027A   E5..         MOV       A,?V8
   \   00027C   241E         ADD       A,#0x1e
   \   00027E   F582         MOV       DPL,A
   \   000280   E4           CLR       A
   \   000281   35..         ADDC      A,?V9
   \   000283   F583         MOV       DPH,A
   \   000285   12....       LCALL     ?Subroutine13 & 0xFFFF
    744              *pTmp++ = dataLen;
   \                     ??CrossCallReturnLabel_16:
   \   000288   8A82         MOV       DPL,R2
   \   00028A   8B83         MOV       DPH,R3
   \   00028C   E5..         MOV       A,?V0
   \   00028E   F0           MOVX      @DPTR,A
   \   00028F   88..         MOV       ?V2,R0
   \   000291   89..         MOV       ?V3,R1
    745            }
    746          
    747            /* Data */
    748            if (pItem != NULL)
   \                     ??MT_AfIncomingMsg_10:
   \   000293   E5..         MOV       A,?V8
   \   000295   2421         ADD       A,#0x21
   \   000297   F5..         MOV       ?V4,A
   \   000299   E4           CLR       A
   \   00029A   35..         ADDC      A,?V9
   \   00029C   F5..         MOV       ?V5,A
   \   00029E   E5..         MOV       A,?V10
   \   0002A0   45..         ORL       A,?V11
   \   0002A2   6058         JZ        ??MT_AfIncomingMsg_11
    749            {
    750              // Enqueue the new huge incoming item.
    751              pItem->next = pMtAfInMsgList;
   \   0002A4   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0002A7   85..82       MOV       DPL,?V10
   \   0002AA   85..83       MOV       DPH,?V11
   \   0002AD   12....       LCALL     ?Subroutine28 & 0xFFFF
    752              pMtAfInMsgList = pItem;
   \                     ??CrossCallReturnLabel_61:
   \   0002B0   90....       MOV       DPTR,#pMtAfInMsgList
   \   0002B3   E5..         MOV       A,?V10
   \   0002B5   F0           MOVX      @DPTR,A
   \   0002B6   A3           INC       DPTR
   \   0002B7   E5..         MOV       A,?V11
   \   0002B9   F0           MOVX      @DPTR,A
    753          
    754              // Setup to time-out the huge incoming item if host does not MT_AF_DATA_RETRIEVE it.
    755              pItem->tick = MT_AF_EXEC_CNT;
   \   0002BA   85..82       MOV       DPL,?V10
   \   0002BD   F583         MOV       DPH,A
   \   0002BF   A3           INC       DPTR
   \   0002C0   A3           INC       DPTR
   \   0002C1   A3           INC       DPTR
   \   0002C2   A3           INC       DPTR
   \   0002C3   A3           INC       DPTR
   \   0002C4   A3           INC       DPTR
   \   0002C5   A3           INC       DPTR
   \   0002C6   A3           INC       DPTR
   \   0002C7   12....       LCALL     ?Subroutine9 & 0xFFFF
    756              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??CrossCallReturnLabel_45:
   \   0002CA   6003         JZ        ??CrossCallReturnLabel_23
    757              {
    758                (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   0002CC                ; Setup parameters for call to function osal_set_event
   \   0002CC   12....       LCALL     ?Subroutine16 & 0xFFFF
    759              }
    760          
    761              pItem->timestamp = pMsg->timestamp;
   \                     ??CrossCallReturnLabel_23:
   \   0002CF   85..82       MOV       DPL,?V14
   \   0002D2   85..83       MOV       DPH,?V15
   \   0002D5   12....       LCALL     ?XLOAD_R0123
   \   0002D8   85..82       MOV       DPL,?V10
   \   0002DB   85..83       MOV       DPH,?V11
   \   0002DE   A3           INC       DPTR
   \   0002DF   A3           INC       DPTR
   \   0002E0   A3           INC       DPTR
   \   0002E1   A3           INC       DPTR
   \   0002E2   12....       LCALL     ?XSTORE_R0123
    762              (void)osal_memcpy(pItem->data, pMsg->cmd.Data, dataLen);
   \   0002E5                ; Setup parameters for call to function osal_memcpy
   \   0002E5   12....       LCALL     ?Subroutine14 & 0xFFFF
    763            }
   \                     ??CrossCallReturnLabel_17:
   \   0002E8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002EB   AC..         MOV       R4,?V0
   \   0002ED   AD..         MOV       R5,?V1
   \   0002EF   85..82       MOV       DPL,?V10
   \   0002F2   85..83       MOV       DPH,?V11
   \   0002F5   A3           INC       DPTR
   \   0002F6   A3           INC       DPTR
   \   0002F7   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0002FA   800E         SJMP      ??MT_AfIncomingMsg_12
    764            else
    765            {
    766              (void)osal_memcpy(pTmp, pMsg->cmd.Data, dataLen);
   \                     ??MT_AfIncomingMsg_11:
   \   0002FC                ; Setup parameters for call to function osal_memcpy
   \   0002FC   12....       LCALL     ?Subroutine14 & 0xFFFF
    767            }
   \                     ??CrossCallReturnLabel_18:
   \   0002FF   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000302   AC..         MOV       R4,?V0
   \   000304   AD..         MOV       R5,?V1
   \   000306   AA..         MOV       R2,?V2
   \   000308   AB..         MOV       R3,?V3
   \                     ??MT_AfIncomingMsg_12:
   \   00030A   12....       LCALL     ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00030D   12....       LCALL     ?DEALLOC_XSTACK8
    768          
    769            /* Build and send back the response */
    770            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_AF), cmd, respLen, pRsp);
   \   000310                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000310   AC..         MOV       R4,?V12
   \   000312   AD..         MOV       R5,?V13
   \   000314   EE           MOV       A,R6
   \   000315   FB           MOV       R3,A
   \   000316   85..82       MOV       DPL,?XSP + 0
   \   000319   85..83       MOV       DPH,?XSP + 1
   \   00031C   E0           MOVX      A,@DPTR
   \   00031D   FA           MOV       R2,A
   \   00031E   7944         MOV       R1,#0x44
   \   000320   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    771          
    772            (void)osal_mem_free(pRsp);
   \   000323                ; Setup parameters for call to function osal_mem_free
   \   000323   AA..         MOV       R2,?V12
   \   000325   AB..         MOV       R3,?V13
   \   000327   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    773          }
   \                     ??MT_AfIncomingMsg_3:
   \   00032A   7401         MOV       A,#0x1
   \   00032C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00032F   7F10         MOV       R7,#0x10
   \   000331   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   E5..         MOV       A,?V4
   \   000006                REQUIRE ??Subroutine33_0
   \   000006                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V14
   \   000004   85..83       MOV       DPH,?V15
   \   000007   78..         MOV       R0,#?V4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V9
   \   000005   F583         MOV       DPH,A
   \   000007   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V4,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F5..         MOV       ?V5,A
   \   00000D   78..         MOV       R0,#?V4
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   F0           MOVX      @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004   A3           INC       DPTR
   \   000005                REQUIRE ??Subroutine34_0
   \   000005                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   F0           MOVX      @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET
    774          
    775          /**************************************************************************************************
    776           * @fn          MT_AfDataRetrieve
    777           *
    778           * @brief   Process AF Data Retrieve command to incrementally read out a very large
    779           *          incoming AF message.
    780           *
    781           * input parameters
    782           *
    783           * @param pBuf - pointer to the received buffer
    784           *
    785           * output parameters
    786           *
    787           * @param rtrn - AF-Status of the operation.
    788           *
    789           * @return      None.
    790           **************************************************************************************************
    791           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    792          void MT_AfDataRetrieve(uint8 *pBuf)
   \                     MT_AfDataRetrieve:
    793          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    794            #define MT_AF_RTV_HDR_SZ  2
    795          
    796            uint32 timestamp;
    797            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \   000009   90....       MOV       DPTR,#pMtAfInMsgList
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F5..         MOV       ?V12,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F5..         MOV       ?V13,A
    798            uint8 rtrn = afStatus_FAILED;
   \   000013   7A01         MOV       R2,#0x1
    799            uint8 len = 0;
   \   000015   75..00       MOV       ?V0,#0x0
    800          
    801            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000018   EE           MOV       A,R6
   \   000019   2403         ADD       A,#0x3
   \   00001B   FE           MOV       R6,A
   \   00001C   5001         JNC       ??MT_AfDataRetrieve_0
   \   00001E   0F           INC       R7
    802            timestamp = BUILD_UINT32(pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
   \                     ??MT_AfDataRetrieve_0:
   \   00001F   F582         MOV       DPL,A
   \   000021   8F83         MOV       DPH,R7
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V4,A
   \   000026   E4           CLR       A
   \   000027   F5..         MOV       ?V5,A
   \   000029   F5..         MOV       ?V6,A
   \   00002B   F5..         MOV       ?V7,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F5..         MOV       ?V8,A
   \   000031   E4           CLR       A
   \   000032   F5..         MOV       ?V9,A
   \   000034   F5..         MOV       ?V10,A
   \   000036   F5..         MOV       ?V11,A
   \   000038   7408         MOV       A,#0x8
   \   00003A   78..         MOV       R0,#?V8
   \   00003C   12....       LCALL     ?L_SHL
   \   00003F   78..         MOV       R0,#?V4
   \   000041   79..         MOV       R1,#?V8
   \   000043   12....       LCALL     ?L_ADD
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   F5..         MOV       ?V8,A
   \   00004F   E4           CLR       A
   \   000050   F5..         MOV       ?V9,A
   \   000052   7410         MOV       A,#0x10
   \   000054   78..         MOV       R0,#?V8
   \   000056   12....       LCALL     ?L_SHL
   \   000059   78..         MOV       R0,#?V4
   \   00005B   79..         MOV       R1,#?V8
   \   00005D   12....       LCALL     ?L_ADD
   \   000060   8E82         MOV       DPL,R6
   \   000062   8F83         MOV       DPH,R7
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   E0           MOVX      A,@DPTR
   \   000068   F5..         MOV       ?V8,A
   \   00006A   E4           CLR       A
   \   00006B   F5..         MOV       ?V10,A
   \   00006D   7418         MOV       A,#0x18
   \   00006F   78..         MOV       R0,#?V8
   \   000071   12....       LCALL     ?L_SHL
   \   000074   78..         MOV       R0,#?V4
   \   000076   79..         MOV       R1,#?V8
   \   000078   12....       LCALL     ?L_ADD
   \   00007B   800B         SJMP      ??MT_AfDataRetrieve_1
    803          
    804            while (pItem != NULL)
    805            {
    806              pPrev = pItem;
    807              if (pItem->timestamp == timestamp)
    808              {
    809                break;
    810              }
    811              pItem = pItem->next;
   \                     ??MT_AfDataRetrieve_2:
   \   00007D   8C82         MOV       DPL,R4
   \   00007F   8D83         MOV       DPH,R5
   \   000081   E0           MOVX      A,@DPTR
   \   000082   F5..         MOV       ?V12,A
   \   000084   A3           INC       DPTR
   \   000085   E0           MOVX      A,@DPTR
   \   000086   F5..         MOV       ?V13,A
   \                     ??MT_AfDataRetrieve_1:
   \   000088   E5..         MOV       A,?V12
   \   00008A   45..         ORL       A,?V13
   \   00008C   6059         JZ        ??MT_AfDataRetrieve_3
   \   00008E   AC..         MOV       R4,?V12
   \   000090   AD..         MOV       R5,?V13
   \   000092   8C82         MOV       DPL,R4
   \   000094   8D83         MOV       DPH,R5
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   78..         MOV       R0,#?V4
   \   00009C   12....       LCALL     ?L_EQ_X
   \   00009F   70DC         JNZ       ??MT_AfDataRetrieve_2
    812            }
    813          
    814            if (pItem != NULL)
    815            {
    816              uint16 idx;
    817              uint8 *pRsp;
    818          
    819              pBuf += 4;
   \   0000A1   EE           MOV       A,R6
   \   0000A2   2404         ADD       A,#0x4
   \   0000A4   FE           MOV       R6,A
   \   0000A5   5001         JNC       ??MT_AfDataRetrieve_4
   \   0000A7   0F           INC       R7
    820              idx = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRetrieve_4:
   \   0000A8   F582         MOV       DPL,A
   \   0000AA   8F83         MOV       DPH,R7
   \   0000AC   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0000AF   F5..         MOV       ?V4,A
   \   0000B1   E4           CLR       A
   \   0000B2   39           ADDC      A,R1
   \   0000B3   F5..         MOV       ?V5,A
    821              len = pBuf[2];
   \   0000B5   8E82         MOV       DPL,R6
   \   0000B7   8F83         MOV       DPH,R7
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   F5..         MOV       ?V0,A
    822          
    823              if (len == 0)  // Indication to delete the afIncomingMSGPacket.
   \   0000BE   7043         JNZ       ??MT_AfDataRetrieve_5
    824              {
    825                if (pMtAfInMsgList == pItem)
   \   0000C0   8C82         MOV       DPL,R4
   \   0000C2   8D83         MOV       DPH,R5
   \   0000C4   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000C7   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0000CA   EC           MOV       A,R4
   \   0000CB   6A           XRL       A,R2
   \   0000CC   7002         JNZ       ??MT_AfDataRetrieve_6
   \   0000CE   ED           MOV       A,R5
   \   0000CF   6B           XRL       A,R3
   \                     ??MT_AfDataRetrieve_6:
   \   0000D0   7005         JNZ       ??MT_AfDataRetrieve_7
    826                {
    827                  pMtAfInMsgList = pItem->next;
   \   0000D2   90....       MOV       DPTR,#pMtAfInMsgList
   \   0000D5   8004         SJMP      ??MT_AfDataRetrieve_8
    828                }
    829                else
    830                {
    831                  pPrev->next = pItem->next;
   \                     ??MT_AfDataRetrieve_7:
   \   0000D7   8C82         MOV       DPL,R4
   \   0000D9   8D83         MOV       DPH,R5
    832                }
   \                     ??MT_AfDataRetrieve_8:
   \   0000DB   12....       LCALL     ?Subroutine28 & 0xFFFF
    833                (void)osal_mem_free(pItem);
   \                     ??CrossCallReturnLabel_62:
   \   0000DE                ; Setup parameters for call to function osal_mem_free
   \   0000DE   AA..         MOV       R2,?V12
   \   0000E0   AB..         MOV       R3,?V13
   \   0000E2   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    834                rtrn = afStatus_SUCCESS;
   \   0000E5   7A00         MOV       R2,#0x0
    835              }
    836              else if ((pRsp = osal_mem_alloc(len + MT_AF_RTV_HDR_SZ)) == NULL)
    837              {
    838                rtrn = afStatus_MEM_FAIL;
    839                len = 0;
    840              }
    841              else
    842              {
    843                pRsp[0] = ZSuccess;
    844                pRsp[1] = len;
    845                (void)osal_memcpy(pRsp + MT_AF_RTV_HDR_SZ, pItem->data+idx, len);
    846                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), 
    847                                                     MT_AF_DATA_RETRIEVE, len + MT_AF_RTV_HDR_SZ, pRsp);
    848                (void)osal_mem_free(pRsp);
    849                return;
    850              }
    851            }
    852          
    853            pBuf[0] = rtrn;
   \                     ??MT_AfDataRetrieve_3:
   \   0000E7   EA           MOV       A,R2
   \   0000E8   8E82         MOV       DPL,R6
   \   0000EA   8F83         MOV       DPH,R7
   \   0000EC   F0           MOVX      @DPTR,A
    854            pBuf[1] = len;
   \   0000ED   A3           INC       DPTR
   \   0000EE   E5..         MOV       A,?V0
   \   0000F0   F0           MOVX      @DPTR,A
    855            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), 
    856                                                 MT_AF_DATA_RETRIEVE, MT_AF_RTV_HDR_SZ, pBuf);
   \   0000F1                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000F1   EE           MOV       A,R6
   \   0000F2   FC           MOV       R4,A
   \   0000F3   EF           MOV       A,R7
   \   0000F4   FD           MOV       R5,A
   \   0000F5   7B02         MOV       R3,#0x2
   \   0000F7   7A12         MOV       R2,#0x12
   \   0000F9   7964         MOV       R1,#0x64
   \   0000FB   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    857          }
   \                     ??MT_AfDataRetrieve_9:
   \   0000FE   7F0E         MOV       R7,#0xe
   \   000100   02....       LJMP      ?BANKED_LEAVE_XDATA
   \                     ??MT_AfDataRetrieve_5:
   \   000103                ; Setup parameters for call to function osal_mem_alloc
   \   000103   2402         ADD       A,#0x2
   \   000105   FA           MOV       R2,A
   \   000106   E4           CLR       A
   \   000107   3400         ADDC      A,#0x0
   \   000109   FB           MOV       R3,A
   \   00010A   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00010D   8A..         MOV       ?V2,R2
   \   00010F   8B..         MOV       ?V3,R3
   \   000111   EA           MOV       A,R2
   \   000112   4B           ORL       A,R3
   \   000113   7007         JNZ       ??MT_AfDataRetrieve_10
   \   000115   7A10         MOV       R2,#0x10
   \   000117   75..00       MOV       ?V0,#0x0
   \   00011A   80CB         SJMP      ??MT_AfDataRetrieve_3
   \                     ??MT_AfDataRetrieve_10:
   \   00011C   8A82         MOV       DPL,R2
   \   00011E   8B83         MOV       DPH,R3
   \   000120   E4           CLR       A
   \   000121   F0           MOVX      @DPTR,A
   \   000122   A3           INC       DPTR
   \   000123   E5..         MOV       A,?V0
   \   000125   F0           MOVX      @DPTR,A
   \   000126                ; Setup parameters for call to function osal_memcpy
   \   000126   85..82       MOV       DPL,?V12
   \   000129   85..83       MOV       DPH,?V13
   \   00012C   A3           INC       DPTR
   \   00012D   A3           INC       DPTR
   \   00012E   E0           MOVX      A,@DPTR
   \   00012F   25..         ADD       A,?V4
   \   000131   F5..         MOV       ?V4,A
   \   000133   A3           INC       DPTR
   \   000134   E0           MOVX      A,@DPTR
   \   000135   35..         ADDC      A,?V5
   \   000137   F5..         MOV       ?V5,A
   \   000139   75..00       MOV       ?V6,#0x0
   \   00013C   78..         MOV       R0,#?V4
   \   00013E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000141   AC..         MOV       R4,?V0
   \   000143   7D00         MOV       R5,#0x0
   \   000145   EA           MOV       A,R2
   \   000146   2402         ADD       A,#0x2
   \   000148   FA           MOV       R2,A
   \   000149   E4           CLR       A
   \   00014A   35..         ADDC      A,?V3
   \   00014C   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00014F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000152                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000152   AC..         MOV       R4,?V2
   \   000154   AD..         MOV       R5,?V3
   \   000156   7402         MOV       A,#0x2
   \   000158   25..         ADD       A,?V0
   \   00015A   FB           MOV       R3,A
   \   00015B   7A12         MOV       R2,#0x12
   \   00015D   7964         MOV       R1,#0x64
   \   00015F   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000162                ; Setup parameters for call to function osal_mem_free
   \   000162   AA..         MOV       R2,?V2
   \   000164   AB..         MOV       R3,?V3
   \   000166   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000169   8093         SJMP      ??MT_AfDataRetrieve_9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine35_0
   \   000001                ; // Fall through to label ??Subroutine35_0
    858          
    859          /**************************************************************************************************
    860           * @fn          MT_AfDataStore
    861           *
    862           * @brief   Process AF Data Store command to incrementally store the data buffer for very large
    863           *          outgoing AF message.
    864           *
    865           * input parameters
    866           *
    867           * @param pBuf - pointer to the received buffer
    868           *
    869           * output parameters
    870           *
    871           * @param rtrn - AF-Status of the operation.
    872           *
    873           * @return      None.
    874           **************************************************************************************************
    875           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    876          void MT_AfDataStore(uint8 *pBuf)
   \                     MT_AfDataStore:
    877          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    878            uint16 idx;
    879            uint8 len, rtrn = afStatus_FAILED;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   7401         MOV       A,#0x1
   \   000012   F0           MOVX      @DPTR,A
    880          
    881            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000013   EA           MOV       A,R2
   \   000014   2403         ADD       A,#0x3
   \   000016   FA           MOV       R2,A
   \   000017   5001         JNC       ??MT_AfDataStore_0
   \   000019   0B           INC       R3
    882            idx = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataStore_0:
   \   00001A   F582         MOV       DPL,A
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   FC           MOV       R4,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F8           MOV       R0,A
   \   000023   E4           CLR       A
   \   000024   C8           XCH       A,R0
   \   000025   F9           MOV       R1,A
   \   000026   EC           MOV       A,R4
   \   000027   28           ADD       A,R0
   \   000028   FE           MOV       R6,A
   \   000029   E4           CLR       A
   \   00002A   39           ADDC      A,R1
   \   00002B   FF           MOV       R7,A
    883            len = pBuf[2];
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   FC           MOV       R4,A
    884            pBuf += 3;
   \   000034   EA           MOV       A,R2
   \   000035   2403         ADD       A,#0x3
   \   000037   FA           MOV       R2,A
   \   000038   5001         JNC       ??MT_AfDataStore_1
   \   00003A   0B           INC       R3
    885          
    886            if (pMtAfDataReq == NULL)
   \                     ??MT_AfDataStore_1:
   \   00003B   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00003E   700B         JNZ       ??MT_AfDataStore_2
    887            {
    888              rtrn = afStatus_MEM_FAIL;
   \   000040   85..82       MOV       DPL,?XSP + 0
   \   000043   85..83       MOV       DPH,?XSP + 1
   \   000046   7410         MOV       A,#0x10
   \   000048   02....       LJMP      ??MT_AfDataStore_3 & 0xFFFF
    889            }
    890            else if (len == 0)  // Indication to send the message.
   \                     ??MT_AfDataStore_2:
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   F583         MOV       DPH,A
   \   00004E   8882         MOV       DPL,R0
   \   000050   E0           MOVX      A,@DPTR
   \   000051   F5..         MOV       ?V4,A
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F5..         MOV       ?V5,A
   \   000057   EC           MOV       A,R4
   \   000058   707B         JNZ       ??MT_AfDataStore_4
    891            {
    892              rtrn = AF_DataRequest(&(pMtAfDataReq->dstAddr), pMtAfDataReq->epDesc, pMtAfDataReq->cId, 
    893                                      pMtAfDataReq->dataLen,  pMtAfDataReq->data, 
    894                                    &(pMtAfDataReq->transId), pMtAfDataReq->txOpts, pMtAfDataReq->radius);
   \   00005A                ; Setup parameters for call to function AF_DataRequest
   \   00005A   E8           MOV       A,R0
   \   00005B   2416         ADD       A,#0x16
   \   00005D   F582         MOV       DPL,A
   \   00005F   E4           CLR       A
   \   000060   39           ADDC      A,R1
   \   000061   F583         MOV       DPH,A
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F5..         MOV       ?V0,A
   \   000066   78..         MOV       R0,#?V0
   \   000068   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006B   90....       MOV       DPTR,#pMtAfDataReq
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   2414         ADD       A,#0x14
   \   000071   F5..         MOV       ?V0,A
   \   000073   A3           INC       DPTR
   \   000074   E0           MOVX      A,@DPTR
   \   000075   3400         ADDC      A,#0x0
   \   000077   F5..         MOV       ?V1,A
   \   000079   78..         MOV       R0,#?V0
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007E   78..         MOV       R0,#?V4
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000083   90....       MOV       DPTR,#pMtAfDataReq
   \   000086   E0           MOVX      A,@DPTR
   \   000087   F8           MOV       R0,A
   \   000088   2412         ADD       A,#0x12
   \   00008A   F582         MOV       DPL,A
   \   00008C   E4           CLR       A
   \   00008D   39           ADDC      A,R1
   \   00008E   F583         MOV       DPH,A
   \   000090   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000093   90....       MOV       DPTR,#pMtAfDataReq
   \   000096   E0           MOVX      A,@DPTR
   \   000097   2410         ADD       A,#0x10
   \   000099   F582         MOV       DPL,A
   \   00009B   E4           CLR       A
   \   00009C   39           ADDC      A,R1
   \   00009D   F583         MOV       DPH,A
   \   00009F   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000A2   90....       MOV       DPTR,#pMtAfDataReq
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   2415         ADD       A,#0x15
   \   0000A8   F582         MOV       DPL,A
   \   0000AA   E4           CLR       A
   \   0000AB   39           ADDC      A,R1
   \   0000AC   F583         MOV       DPH,A
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   F9           MOV       R1,A
   \   0000B0   90....       MOV       DPTR,#pMtAfDataReq + 1
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   C8           XCH       A,R0
   \   0000B5   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   FC           MOV       R4,A
   \   0000BA   A3           INC       DPTR
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   FD           MOV       R5,A
   \   0000BD   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000C0   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000C3   7409         MOV       A,#0x9
   \   0000C5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C8   E9           MOV       A,R1
   \   0000C9   85..82       MOV       DPL,?XSP + 0
   \   0000CC   85..83       MOV       DPH,?XSP + 1
   \   0000CF   F0           MOVX      @DPTR,A
    895              (void)osal_mem_free(pMtAfDataReq);
   \   0000D0                ; Setup parameters for call to function osal_mem_free
   \   0000D0   12....       LCALL     ?Subroutine3 & 0xFFFF
    896              pMtAfDataReq = NULL;
    897            }
   \                     ??CrossCallReturnLabel_1:
   \   0000D3   8022         SJMP      ??MT_AfDataStore_3
    898            else
    899            {
    900              (void)osal_memcpy(pMtAfDataReq->data+idx, pBuf, len);
   \                     ??MT_AfDataStore_4:
   \   0000D5                ; Setup parameters for call to function osal_memcpy
   \   0000D5   8A..         MOV       ?V0,R2
   \   0000D7   8B..         MOV       ?V1,R3
   \   0000D9   75..00       MOV       ?V2,#0x0
   \   0000DC   78..         MOV       R0,#?V0
   \   0000DE   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000E1   7D00         MOV       R5,#0x0
   \   0000E3   E5..         MOV       A,?V4
   \   0000E5   2E           ADD       A,R6
   \   0000E6   FA           MOV       R2,A
   \   0000E7   E5..         MOV       A,?V5
   \   0000E9   3F           ADDC      A,R7
   \   0000EA   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000ED   12....       LCALL     ?DEALLOC_XSTACK8
    901              rtrn = afStatus_SUCCESS;
   \   0000F0   85..82       MOV       DPL,?XSP + 0
   \   0000F3   85..83       MOV       DPH,?XSP + 1
   \   0000F6   E4           CLR       A
   \                     ??MT_AfDataStore_3:
   \   0000F7   F0           MOVX      @DPTR,A
    902            }
    903          
    904            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), 
    905                                                                          MT_AF_DATA_STORE, 1, &rtrn);
   \   0000F8                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000F8   AC..         MOV       R4,?XSP + 0
   \   0000FA   AD..         MOV       R5,?XSP + 1
   \   0000FC   7B01         MOV       R3,#0x1
   \   0000FE   7A11         MOV       R2,#0x11
   \   000100   02....       LJMP      ?Subroutine1 & 0xFFFF
    906          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfExec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfExec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfCommandProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfIncomingMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfIncomingMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataRetrieve::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRetrieve

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataStore::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataStore
    907          
    908          /***************************************************************************************************
    909          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   MT_AfCommandProcessing
        0      9   -> MT_AfDataRequest
        0      9   -> MT_AfDataRetrieve
        0      9   -> MT_AfDataStore
        0      9   -> MT_AfRegister
      3      3   MT_AfDataConfirm
        2      3   -> MT_BuildAndSendZToolResponse
      1     53   MT_AfDataRequest
        0     44   -> AF_DataRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     35   -> afFindEndPointDesc
        0     35   -> osal_mem_alloc
        0     38   -> osal_memcpy
        0     35   -> osal_set_event
        0     35   -> osal_start_timerEx
      1     34   MT_AfDataRetrieve
        0     22   -> MT_BuildAndSendZToolResponse
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     25   -> osal_memcpy
      1     33   MT_AfDataStore
        0     24   -> AF_DataRequest
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> osal_mem_free
        0     18   -> osal_memcpy
      0      9   MT_AfExec
        0      9   -> osal_mem_free
        0      9   -> osal_set_event
        0      9   -> osal_start_timerEx
      1     28   MT_AfIncomingMsg
        0     25   -> MT_BuildAndSendZToolResponse
        0     25   -> osal_mem_alloc
        0     25   -> osal_mem_free
        0     28   -> osal_memcpy
        0     25   -> osal_set_event
        0     25   -> osal_start_timerEx
      1     24   MT_AfRegister
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> MT_BuildEndpointDesc
        0     15   -> afRegister
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      18  ??Subroutine29_0
       9  ??Subroutine30_0
       6  ??Subroutine31_0
       5  ??Subroutine32_0
      10  ??Subroutine33_0
       7  ??Subroutine34_0
       6  ??Subroutine35_0
       6  ??Subroutine36_0
       8  ??Subroutine37_0
       5  ?Subroutine0
      15  ?Subroutine1
      13  ?Subroutine10
       7  ?Subroutine11
       5  ?Subroutine12
       7  ?Subroutine13
      16  ?Subroutine14
       7  ?Subroutine15
      13  ?Subroutine16
      11  ?Subroutine17
      17  ?Subroutine18
       6  ?Subroutine19
       3  ?Subroutine2
       7  ?Subroutine20
       9  ?Subroutine21
       6  ?Subroutine22
       1  ?Subroutine23
       9  ?Subroutine24
       3  ?Subroutine25
       6  ?Subroutine26
       9  ?Subroutine27
       1  ?Subroutine28
      16  ?Subroutine3
      18  ?Subroutine4
       1  ?Subroutine5
       9  ?Subroutine6
       3  ?Subroutine7
       6  ?Subroutine8
       3  ?Subroutine9
      57  MT_AfCommandProcessing
       6  MT_AfCommandProcessing::?relay
      75  MT_AfDataConfirm
       6  MT_AfDataConfirm::?relay
     738  MT_AfDataRequest
       6  MT_AfDataRequest::?relay
     363  MT_AfDataRetrieve
       6  MT_AfDataRetrieve::?relay
     259  MT_AfDataStore
       6  MT_AfDataStore::?relay
     125  MT_AfExec
       6  MT_AfExec::?relay
     820  MT_AfIncomingMsg
       6  MT_AfIncomingMsg::?relay
     117  MT_AfRegister
       6  MT_AfRegister::?relay
       2  pMtAfDataReq
       2  pMtAfInMsgList

 
 2 861 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     4 bytes in segment XDATA_Z
 
    48 bytes of CODE     memory
 2 861 bytes of HUGECODE memory
     4 bytes of XDATA    memory

Errors: none
Warnings: none
