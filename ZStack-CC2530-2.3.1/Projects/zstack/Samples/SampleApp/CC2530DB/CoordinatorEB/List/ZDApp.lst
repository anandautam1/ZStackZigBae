###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               12/Sep/2018  03:56:56
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.20
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\stack\zdo\ZDApp.c
#    Command line       =  
#        -f C:\Users\ANANDA~1\AppData\Local\Temp\EW5CBA.tmp ("C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\stack\zdo\ZDApp.c"
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\ZDApp.lst
#    Object file        =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\ZDApp.r51
#
###############################################################################

C:\Users\Ananda Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2010-08-20 15:30:00 -0700 (Fri, 20 Aug 2010) $
      4            Revision:       $Revision: 23463 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMac.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66          
     67          #include "ssp.h"
     68          
     69          /* HAL */
     70          #include "hal_led.h"
     71          #include "hal_lcd.h"
     72          #include "hal_key.h"
     73          
     74          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     75            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     76          #endif
     77          
     78          /*********************************************************************
     79           * CONSTANTS
     80           */
     81          
     82          #if !defined( NWK_START_DELAY )
     83            #define NWK_START_DELAY             100   // in milliseconds
     84          #endif
     85          
     86          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     87            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     88          #endif
     89          
     90          #if !defined( BEACON_REQUEST_DELAY )
     91            #define BEACON_REQUEST_DELAY        100   // in milliseconds
     92          #endif
     93          
     94          #if !defined( BEACON_REQ_DELAY_MASK )
     95            #define BEACON_REQ_DELAY_MASK       0x007F
     96          #endif
     97          
     98          #define MAX_RESUME_RETRY            3
     99          
    100          #define MAX_DEVICE_UNAUTH_TIMEOUT   5000  // 5 seconds
    101          
    102          // Beacon Order Settings (see NLMEDE.h)
    103          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    104          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    105          
    106          #if !defined( MAX_NWK_FRAMECOUNTER_CHANGES )
    107            // The number of times the frame counter can change before
    108            // saving to NV
    109            #define MAX_NWK_FRAMECOUNTER_CHANGES    1000
    110          #endif
    111          
    112          // Leave control bits
    113          #define ZDAPP_LEAVE_CTRL_INIT 0
    114          #define ZDAPP_LEAVE_CTRL_SET  1
    115          #define ZDAPP_LEAVE_CTRL_RA   2
    116          
    117          // Address Manager Stub Implementation
    118          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    119          
    120          
    121          #if !defined ZDO_NV_SAVE_RFDs
    122          #define ZDO_NV_SAVE_RFDs  TRUE
    123          #endif
    124          
    125          // Delay time before updating NWK NV data to force fewer writes during high activity.
    126          #if ZDO_NV_SAVE_RFDs
    127          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    128          #else
    129          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    130          #endif
    131          
    132          /*********************************************************************
    133           * GLOBAL VARIABLES
    134           */
    135          
    136          #if defined( LCD_SUPPORTED )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137            uint8 MatchRsps = 0;
   \                     MatchRsps:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    138          #endif
    139          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    140          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    141          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          uint16 nwkFrameCounterChanges = 0;
   \                     nwkFrameCounterChanges:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    151          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    152          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    154          
    155          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    157          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    159          
    160          /*********************************************************************
    161           * EXTERNAL VARIABLES
    162           */
    163          
    164          /*********************************************************************
    165           * EXTERNAL FUNCTIONS
    166           */
    167          
    168          /*********************************************************************
    169           * LOCAL FUNCTIONS
    170           */
    171          
    172          void ZDApp_NetworkStartEvt( void );
    173          void ZDApp_DeviceAuthEvt( void );
    174          void ZDApp_SaveNetworkStateEvt( void );
    175          
    176          uint8 ZDApp_ReadNetworkRestoreState( void );
    177          uint8 ZDApp_RestoreNetworkState( void );
    178          void ZDAppDetermineDeviceType( void );
    179          void ZDApp_InitUserDesc( void );
    180          void ZDAppCheckForHoldKey( void );
    181          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    182          void ZDApp_ProcessNetworkJoin( void );
    183          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    184          void ZDApp_SaveNwkKey( void );
    185          uint8 ZDApp_RestoreNwkKey( void );
    186          
    187          void ZDApp_SecInit( uint8 state );
    188          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    189          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    190          
    191          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    192          
    193          void ZDApp_ResetTimerStart( uint16 delay );
    194          void ZDApp_ResetTimerCancel( void );
    195          void ZDApp_LeaveCtrlInit( void );
    196          void ZDApp_LeaveCtrlSet( uint8 ra );
    197          uint8 ZDApp_LeaveCtrlBypass( void );
    198          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    199          void ZDApp_LeaveReset( uint8 ra );
    200          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    201                                  uint8 removeChildren );
    202          void ZDApp_NodeProfileSync( ZDO_NetworkDiscoveryCfm_t* cfm );
    203          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    204          void ZDApp_RegisterCBs( void );
    205          
    206          /*********************************************************************
    207           * LOCAL VARIABLES
    208           */
    209          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    210          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    211          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    212          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    213          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    214          
    215          #if defined( HOLD_AUTO_START )
    216            devStates_t devState = DEV_HOLD;
    217          #else

   \                                 In  segment XDATA_I, align 1, keep-with-next
    218            devStates_t devState = DEV_INIT;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for devState>`
   \   000001                REQUIRE __INIT_XDATA_I
    219          #endif
    220          
    221          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )
    222            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
    223            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    224                                  // to parent. Set to make the device do an Orphan scan.
    225          #else
    226            // Set the default to coodinator

   \                                 In  segment XDATA_I, align 1, keep-with-next
    227            devStartModes_t devStartMode = MODE_HARD;
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for devStartMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    228          #endif
    229          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    230          uint8 retryCnt;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    231          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    232          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    233          {
    234            ZDO_EP,
    235            &ZDAppTaskID,
    236            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    237            (afNetworkLatencyReq_t)0            // No Network Latency req
    238          };
    239          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    240          uint16 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
    241          
    242          /*********************************************************************
    243           * @fn      ZDApp_Init
    244           *
    245           * @brief   ZDApp Initialization function.
    246           *
    247           * @param   task_id - ZDApp Task ID
    248           *
    249           * @return  None
    250           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    251          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    252          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    253            // Save the task ID
    254            ZDAppTaskID = task_id;
   \   000006   90....       MOV       DPTR,#ZDAppTaskID
   \   000009   F0           MOVX      @DPTR,A
    255          
    256            // Initialize the ZDO global device short address storage
    257            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000A   90....       MOV       DPTR,#ZDAppNwkAddr + 8
   \   00000D   7402         MOV       A,#0x2
   \   00000F   F0           MOVX      @DPTR,A
    258            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000010   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000013   74FE         MOV       A,#-0x2
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   04           INC       A
   \   000018   F0           MOVX      @DPTR,A
    259            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    260          
    261            // Check for manual "Hold Auto Start"
    262            ZDAppCheckForHoldKey();
   \   00001C                ; Setup parameters for call to function ZDAppCheckForHoldKey
   \   00001C   12....       LCALL     `??ZDAppCheckForHoldKey::?relay`; Banked call to: ZDAppCheckForHoldKey
    263          
    264            // Initialize ZDO items and setup the device - type of device to create.
    265            ZDO_Init();
   \   00001F                ; Setup parameters for call to function ZDO_Init
   \   00001F   12....       LCALL     `??ZDO_Init::?relay`; Banked call to: ZDO_Init
    266          
    267            // Register the endpoint description with the AF
    268            // This task doesn't have a Simple description, but we still need
    269            // to register the endpoint.
    270            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   000022                ; Setup parameters for call to function afRegister
   \   000022   7A..         MOV       R2,#ZDApp_epDesc & 0xff
   \   000024   7B..         MOV       R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000026   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    271          
    272          #if defined( ZDO_USERDESC_RESPONSE )
    273            ZDApp_InitUserDesc();
   \   000029                ; Setup parameters for call to function ZDApp_InitUserDesc
   \   000029   12....       LCALL     `??ZDApp_InitUserDesc::?relay`; Banked call to: ZDApp_InitUserDesc
    274          #endif // ZDO_USERDESC_RESPONSE
    275          
    276            // Start the device?
    277            if ( devState != DEV_HOLD )
   \   00002C   90....       MOV       DPTR,#devState
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   6009         JZ        ??ZDApp_Init_0
    278            {
    279              ZDOInitDevice( 0 );
   \   000032                ; Setup parameters for call to function ZDOInitDevice
   \   000032   7A00         MOV       R2,#0x0
   \   000034   7B00         MOV       R3,#0x0
   \   000036   12....       LCALL     `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
   \   000039   800D         SJMP      ??ZDApp_Init_1
    280            }
    281            else
    282            {
    283              // Blink LED to indicate HOLD_START
    284              HalLedBlink ( HAL_LED_4, 0, 50, 500 );
   \                     ??ZDApp_Init_0:
   \   00003B                ; Setup parameters for call to function HalLedBlink
   \   00003B   7CF4         MOV       R4,#-0xc
   \   00003D   7D01         MOV       R5,#0x1
   \   00003F   7B32         MOV       R3,#0x32
   \   000041   7A00         MOV       R2,#0x0
   \   000043   7908         MOV       R1,#0x8
   \   000045   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    285            }
    286          
    287            ZDApp_RegisterCBs();
   \                     ??ZDApp_Init_1:
   \   000048                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   000048   12....       LCALL     `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
    288          } /* ZDApp_Init() */
   \   00004B   02....       LJMP      ??Subroutine30_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    289          
    290          /*********************************************************************
    291           * @fn          ZDApp_SecInit
    292           *
    293           * @brief       ZDApp initialize security.
    294           *
    295           * @param       state - device initialization state
    296           *
    297           * @return      none
    298           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    299          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    300          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    301            uint8 zgPreConfigKey[SEC_KEY_LEN];
    302          
    303            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    304            {
    305              // Set the Trust Center bit
    306              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    307            }
    308          
    309            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
    310            {
    311              ZDO_Config_Node_Descriptor.CapabilityFlags |= CAPINFO_SECURITY_CAPABLE;
    312            }
    313          
    314            // Initialize ZigBee Device Security Manager
    315            ZDSecMgrInit(state);
   \   000005                ; Setup parameters for call to function ZDSecMgrInit
   \   000005   12....       LCALL     `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
    316          
    317            if ( ZG_SECURE_ENABLED )
    318            {
    319              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
    320              {
    321                nwkFrameCounter = 0;
    322          
    323                if( _NIB.nwkKeyLoaded == FALSE )
    324                {
    325                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    326                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
    327                  {
    328                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
    329                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
    330                      SSP_SwitchNwkKey( 0 );
    331          
    332                      // clear local copy of key
    333                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
    334                  }
    335                }
    336              }
    337            }
    338          }
   \   000008   02....       LJMP      ??Subroutine30_0 & 0xFFFF
    339          
    340          /*********************************************************************
    341           * @fn      ZDApp_event_loop()
    342           *
    343           * @brief   Main event loop for Zigbee device objects task. This function
    344           *          should be called at periodic intervals.
    345           *
    346           * @param   task_id - Task ID
    347           * @param   events  - Bitmap of events
    348           *
    349           * @return  none
    350           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    351          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    352          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    353            uint8 *msg_ptr;
    354          
    355            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL       A,#0x80
   \   00000B   702D         JNZ       ??ZDApp_event_loop_0
    356            {
    357              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    358              {
    359                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    360          
    361                // Release the memory
    362                osal_msg_deallocate( msg_ptr );
    363              }
    364          
    365              // Return unprocessed events
    366              return (events ^ SYS_EVENT_MSG);
    367            }
    368          
    369            if ( events & ZDO_NETWORK_INIT )
   \   00000D   EA           MOV       A,R2
   \   00000E   A2E0         MOV       C,0xE0 /* A   */.0
   \   000010   503F         JNC       ??ZDApp_event_loop_1
    370            {
    371              // Initialize apps and start the network
    372              devState = DEV_INIT;
   \   000012   90....       MOV       DPTR,#devState
   \   000015   7401         MOV       A,#0x1
   \   000017   F0           MOVX      @DPTR,A
    373          
    374              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    375                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   000018                ; Setup parameters for call to function ZDO_StartDevice
   \   000018   7C0F         MOV       R4,#0xf
   \   00001A   7B0F         MOV       R3,#0xf
   \   00001C   90....       MOV       DPTR,#devStartMode
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   FA           MOV       R2,A
   \   000021   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000024   E0           MOVX      A,@DPTR
   \   000025   5407         ANL       A,#0x7
   \   000027   F9           MOV       R1,A
   \   000028   12....       LCALL     `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
    376          
    377              // Return unprocessed events
    378              return (events ^ ZDO_NETWORK_INIT);
   \   00002B   EE           MOV       A,R6
   \   00002C   6401         XRL       A,#0x1
   \   00002E   8076         SJMP      ??ZDApp_event_loop_2
    379            }
   \                     ??ZDApp_event_loop_3:
   \   000030                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   000030   12....       LCALL     `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
   \   000033                ; Setup parameters for call to function osal_msg_deallocate
   \   000033   AA..         MOV       R2,?V0
   \   000035   AB..         MOV       R3,?V1
   \   000037   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??ZDApp_event_loop_0:
   \   00003A                ; Setup parameters for call to function osal_msg_receive
   \   00003A   90....       MOV       DPTR,#ZDAppTaskID
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F9           MOV       R1,A
   \   00003F   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000042   8A..         MOV       ?V0,R2
   \   000044   8B..         MOV       ?V1,R3
   \   000046   EA           MOV       A,R2
   \   000047   4B           ORL       A,R3
   \   000048   70E6         JNZ       ??ZDApp_event_loop_3
   \   00004A   EE           MOV       A,R6
   \   00004B   FA           MOV       R2,A
   \   00004C   EF           MOV       A,R7
   \   00004D   6480         XRL       A,#0x80
   \   00004F   806C         SJMP      ??ZDApp_event_loop_4
    380          
    381            if ( ZSTACK_ROUTER_BUILD )
    382            {
    383              if ( events & ZDO_NETWORK_START )
   \                     ??ZDApp_event_loop_1:
   \   000051   5402         ANL       A,#0x2
   \   000053   6008         JZ        ??ZDApp_event_loop_5
    384              {
    385                ZDApp_NetworkStartEvt();
   \   000055                ; Setup parameters for call to function ZDApp_NetworkStartEvt
   \   000055   12....       LCALL     `??ZDApp_NetworkStartEvt::?relay`; Banked call to: ZDApp_NetworkStartEvt
    386          
    387                // Return unprocessed events
    388                return (events ^ ZDO_NETWORK_START);
   \   000058   EE           MOV       A,R6
   \   000059   6402         XRL       A,#0x2
   \   00005B   8049         SJMP      ??ZDApp_event_loop_2
    389              }
    390          
    391              if ( events & ZDO_ROUTER_START )
   \                     ??ZDApp_event_loop_5:
   \   00005D   EA           MOV       A,R2
   \   00005E   5420         ANL       A,#0x20
   \   000060   601E         JZ        ??ZDApp_event_loop_6
    392              {
    393                if ( nwkStatus == ZSuccess )
   \   000062   90....       MOV       DPTR,#nwkStatus
   \   000065   E0           MOVX      A,@DPTR
   \   000066   7010         JNZ       ??ZDApp_event_loop_7
    394                {
    395                  if ( devState == DEV_END_DEVICE )
   \   000068   90....       MOV       DPTR,#devState
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   6406         XRL       A,#0x6
   \   00006E   7003         JNZ       ??ZDApp_event_loop_8
    396                    devState = DEV_ROUTER;
   \   000070   7407         MOV       A,#0x7
   \   000072   F0           MOVX      @DPTR,A
    397          
    398                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_event_loop_8:
   \   000073                ; Setup parameters for call to function osal_pwrmgr_device
   \   000073   7900         MOV       R1,#0x0
   \   000075   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    399                }
    400                else
    401                {
    402                  // remain as end device!!
    403                }
    404                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_event_loop_7:
   \   000078                ; Setup parameters for call to function osal_set_event
   \   000078   12....       LCALL     ?Subroutine11 & 0xFFFF
    405          
    406                // Return unprocessed events
    407                return (events ^ ZDO_ROUTER_START);
   \                     ??CrossCallReturnLabel_34:
   \   00007B   EE           MOV       A,R6
   \   00007C   6420         XRL       A,#0x20
   \   00007E   8026         SJMP      ??ZDApp_event_loop_2
    408              }
    409            }
    410          
    411            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_6:
   \   000080   EA           MOV       A,R2
   \   000081   5410         ANL       A,#0x10
   \   000083   6025         JZ        ??ZDApp_event_loop_9
    412            {
    413              ZDO_UpdateNwkStatus( devState );
   \   000085                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   000085   90....       MOV       DPTR,#devState
   \   000088   E0           MOVX      A,@DPTR
   \   000089   F9           MOV       R1,A
   \   00008A   12....       LCALL     `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
    414          
    415              // At start up, do one MTO route discovery if the device is a concentrator
    416              if ( zgConcentratorEnable == TRUE )
   \   00008D   90....       MOV       DPTR,#zgConcentratorEnable
   \   000090   E0           MOVX      A,@DPTR
   \   000091   6401         XRL       A,#0x1
   \   000093   700E         JNZ       ??CrossCallReturnLabel_61
    417              {
    418                // Start next event
    419                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   000095                ; Setup parameters for call to function osal_start_timerEx
   \   000095   7C64         MOV       R4,#0x64
   \   000097   7D00         MOV       R5,#0x0
   \   000099   7A00         MOV       R2,#0x0
   \   00009B   7B08         MOV       R3,#0x8
   \   00009D   90....       MOV       DPTR,#NWK_TaskID
   \   0000A0   12....       LCALL     ??Subroutine29_0 & 0xFFFF
    420              }
    421          
    422              // Return unprocessed events
    423              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??CrossCallReturnLabel_61:
   \   0000A3   EE           MOV       A,R6
   \   0000A4   6410         XRL       A,#0x10
   \                     ??ZDApp_event_loop_2:
   \   0000A6   FA           MOV       R2,A
   \   0000A7   EF           MOV       A,R7
   \   0000A8   8013         SJMP      ??ZDApp_event_loop_4
    424            }
    425          
    426            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_9:
   \   0000AA   EA           MOV       A,R2
   \   0000AB   5408         ANL       A,#0x8
   \   0000AD   6006         JZ        ??ZDApp_event_loop_10
    427            {
    428              // User defined logic
    429          
    430              // Return unprocessed events
    431              return (events ^ ZDO_COMMAND_CNF);
   \   0000AF   EA           MOV       A,R2
   \   0000B0   6408         XRL       A,#0x8
   \   0000B2   FA           MOV       R2,A
   \   0000B3   8017         SJMP      ??ZDApp_event_loop_11
    432            }
    433          
    434            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_10:
   \   0000B5   EB           MOV       A,R3
   \   0000B6   5402         ANL       A,#0x2
   \   0000B8   6006         JZ        ??ZDApp_event_loop_12
    435            {
    436              ZDApp_SaveNetworkStateEvt();
    437          
    438              // Return unprocessed events
    439              return (events ^ ZDO_NWK_UPDATE_NV);
   \   0000BA   EB           MOV       A,R3
   \   0000BB   6402         XRL       A,#0x2
   \                     ??ZDApp_event_loop_4:
   \   0000BD   FB           MOV       R3,A
   \   0000BE   800C         SJMP      ??ZDApp_event_loop_11
    440            }
    441          
    442            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_12:
   \   0000C0   EA           MOV       A,R2
   \   0000C1   5404         ANL       A,#0x4
   \   0000C3   6003         JZ        ??ZDApp_event_loop_13
    443            {
    444              // The device has been in the UNAUTH state, so reset
    445              // Note: there will be no return from this call
    446              SystemResetSoft();
   \   0000C5                ; Setup parameters for call to function Onboard_soft_reset
   \   0000C5   12....       LCALL     Onboard_soft_reset & 0xFFFF
    447            }
    448          
    449            if ( ZG_SECURE_ENABLED )
    450            {
    451              return ( ZDApp_ProcessSecEvent( task_id, events ) );
    452            }
    453            else
    454            {
    455              // Discard or make more handlers
    456              return 0;
   \                     ??ZDApp_event_loop_13:
   \   0000C8   7A00         MOV       R2,#0x0
   \   0000CA   7B00         MOV       R3,#0x0
    457            }
   \                     ??ZDApp_event_loop_11:
   \   0000CC   02....       LJMP      ??Subroutine27_0 & 0xFFFF
    458          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   7A10         MOV       R2,#0x10
   \   000002                REQUIRE ??Subroutine24_0
   \   000002                ; // Fall through to label ??Subroutine24_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   90....       MOV       DPTR,#ZDAppTaskID
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F9           MOV       R1,A
   \   000007   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000005   22           RET
    459          
    460          /*********************************************************************
    461           * @fn      ZDApp_ProcessSecEvent()
    462           *
    463           * @brief   Process incoming security events.
    464           *
    465           * @param   task_id - Task ID
    466           * @param   events  - Bitmap of events
    467           *
    468           * @return  none
    469           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    470          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    471          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    472            (void)task_id;  // Intentionally unreferenced parameter
    473          
    474            if ( ZSTACK_ROUTER_BUILD )
    475            {
    476              if ( events & ZDO_NEW_DEVICE )
   \   000009   EA           MOV       A,R2
   \   00000A   5440         ANL       A,#0x40
   \   00000C   6016         JZ        ??ZDApp_ProcessSecEvent_0
    477              {
    478                // process the new device event
    479                if ( ZDSecMgrNewDeviceEvent() == TRUE )
   \   00000E                ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
   \   00000E   12....       LCALL     `??ZDSecMgrNewDeviceEvent::?relay`; Banked call to: ZDSecMgrNewDeviceEvent
   \   000011   E9           MOV       A,R1
   \   000012   6401         XRL       A,#0x1
   \   000014   7009         JNZ       ??CrossCallReturnLabel_58
    480                {
    481                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 1000 );
   \   000016                ; Setup parameters for call to function osal_start_timerEx
   \   000016   7CE8         MOV       R4,#-0x18
   \   000018   7D03         MOV       R5,#0x3
   \   00001A   7A40         MOV       R2,#0x40
   \   00001C   12....       LCALL     ?Subroutine16 & 0xFFFF
    482                }
    483          
    484                // Return unprocessed events
    485                return (events ^ ZDO_NEW_DEVICE);
   \                     ??CrossCallReturnLabel_58:
   \   00001F   EE           MOV       A,R6
   \   000020   6440         XRL       A,#0x40
   \   000022   800B         SJMP      ??ZDApp_ProcessSecEvent_1
    486              }
    487            }
    488          
    489            if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
    490                || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
    491            {
    492              if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    493              {
    494                if ( events & ZDO_SECMGR_EVENT )
    495                {
    496                  ZDSecMgrEvent();
    497          
    498                  // Return unprocessed events
    499                  return (events ^ ZDO_SECMGR_EVENT);
    500                }
    501              }
    502            }
    503          
    504            if ( events & ZDO_DEVICE_AUTH )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   000024   EA           MOV       A,R2
   \   000025   5480         ANL       A,#0x80
   \   000027   600A         JZ        ??ZDApp_ProcessSecEvent_2
    505            {
    506              ZDApp_DeviceAuthEvt();
   \   000029                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   000029   12....       LCALL     `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
    507          
    508              // Return unprocessed events
    509              return (events ^ ZDO_DEVICE_AUTH);
   \   00002C   EE           MOV       A,R6
   \   00002D   6480         XRL       A,#0x80
   \                     ??ZDApp_ProcessSecEvent_1:
   \   00002F   FA           MOV       R2,A
   \   000030   EF           MOV       A,R7
   \   000031   8042         SJMP      ??ZDApp_ProcessSecEvent_3
    510            }
    511          
    512            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_2:
   \   000033   EB           MOV       A,R3
   \   000034   5404         ANL       A,#0x4
   \   000036   6026         JZ        ??ZDApp_ProcessSecEvent_4
    513            {
    514              if ( nwkFrameCounterChanges++ > MAX_NWK_FRAMECOUNTER_CHANGES )
   \   000038   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   00003B   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00003E   E8           MOV       A,R0
   \   00003F   2401         ADD       A,#0x1
   \   000041   FA           MOV       R2,A
   \   000042   E4           CLR       A
   \   000043   39           ADDC      A,R1
   \   000044   FB           MOV       R3,A
   \   000045   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   000048   12....       LCALL     ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00004B   C3           CLR       C
   \   00004C   E8           MOV       A,R0
   \   00004D   94E9         SUBB      A,#-0x17
   \   00004F   E9           MOV       A,R1
   \   000050   9403         SUBB      A,#0x3
   \   000052   4003         JC        ??ZDApp_ProcessSecEvent_5
    515              {
    516                ZDApp_SaveNwkKey();
   \   000054                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000054   12....       LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    517              }
    518          
    519              // Return unprocessed events
    520              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \                     ??ZDApp_ProcessSecEvent_5:
   \   000057   EE           MOV       A,R6
   \   000058   FA           MOV       R2,A
   \   000059   EF           MOV       A,R7
   \   00005A   6404         XRL       A,#0x4
   \   00005C   8017         SJMP      ??ZDApp_ProcessSecEvent_3
    521            }
    522          
    523            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_4:
   \   00005E   EB           MOV       A,R3
   \   00005F   5410         ANL       A,#0x10
   \   000061   6005         JZ        ??ZDApp_ProcessSecEvent_6
    524            {
    525          #if defined (NV_RESTORE)
    526              ZDSecMgrSaveApsLinkKey();
    527          #endif // (NV_RESTORE)
    528              
    529              // Return unprocessed events
    530              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   000063   EB           MOV       A,R3
   \   000064   6410         XRL       A,#0x10
   \   000066   800D         SJMP      ??ZDApp_ProcessSecEvent_3
    531            }
    532          
    533            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_6:
   \   000068   EB           MOV       A,R3
   \   000069   5408         ANL       A,#0x8
   \   00006B   600B         JZ        ??ZDApp_ProcessSecEvent_7
    534            {
    535              ZDSecMgrSaveTCLinkKey();
   \   00006D                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   00006D   12....       LCALL     `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
    536              
    537              // Return unprocessed events
    538              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   000070   EE           MOV       A,R6
   \   000071   FA           MOV       R2,A
   \   000072   EF           MOV       A,R7
   \   000073   6408         XRL       A,#0x8
   \                     ??ZDApp_ProcessSecEvent_3:
   \   000075   FB           MOV       R3,A
   \   000076   8004         SJMP      ??ZDApp_ProcessSecEvent_8
    539            }
    540            
    541            // Discard or make more handlers
    542            return 0;
   \                     ??ZDApp_ProcessSecEvent_7:
   \   000078   7A00         MOV       R2,#0x0
   \   00007A   7B00         MOV       R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_8:
   \   00007C   02....       LJMP      ??Subroutine30_0 & 0xFFFF
    543          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   90....       MOV       DPTR,#ZDAppTaskID
   \   000005                REQUIRE ??Subroutine29_0
   \   000005                ; // Fall through to label ??Subroutine29_0
    544          
    545          /*********************************************************************
    546           * Application Functions
    547           */
    548          
    549          /*********************************************************************
    550           * @fn      ZDOInitDevice
    551           *
    552           * @brief   Start the device in the network.  This function will read
    553           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    554           *   restore the network state of the device.
    555           *
    556           * @param   startDelay - timeDelay to start device (in milliseconds).
    557           *      There is a jitter added to this delay:
    558           *              ((NWK_START_DELAY + startDelay)
    559           *              + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    560           *
    561           * NOTE:    If the application would like to force a "new" join, the
    562           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    563           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    564           *          this function. "new" join means to not restore the network
    565           *          state of the device. Use zgWriteStartupOptions() to set these
    566           *          options.
    567           *
    568           * @return
    569           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    570           *          restored.
    571           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    572           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    573           *          it could mean that there was no network state to restore.
    574           *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
    575           *          with the rejoin option set to TRUE.  So, the device was not
    576           *          started in the network (one time only).  The next time this
    577           *          function is called it will start.
    578           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    579          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    580          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine9 & 0xFFFF
    581            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    582            uint16 extendedDelay = 0;
    583          
    584            if ( devState == DEV_HOLD )
   \                     ??CrossCallReturnLabel_44:
   \   00000D   90....       MOV       DPTR,#devState
   \   000010   E0           MOVX      A,@DPTR
   \   000011   7005         JNZ       ??ZDOInitDevice_0
    585            {
    586              // Initialize the RAM items table, in case an NV item has been updated.
    587              zgInitItems( FALSE );
   \   000013                ; Setup parameters for call to function zgInitItems
   \   000013   7900         MOV       R1,#0x0
   \   000015   12....       LCALL     `??zgInitItems::?relay`; Banked call to: zgInitItems
    588            }
    589          
    590            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   000018                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   000018   12....       LCALL     `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
    591            //devtag.071807.todo - fix this temporary solution
    592            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00001B   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   90....       MOV       DPTR,#_NIB + 14
   \   000022   F0           MOVX      @DPTR,A
    593          
    594            devState = DEV_INIT;    // Remove the Hold state
   \   000023   90....       MOV       DPTR,#devState
   \   000026   7401         MOV       A,#0x1
   \   000028   F0           MOVX      @DPTR,A
    595          
    596            // Initialize leave control logic
    597            ZDApp_LeaveCtrlInit();
   \   000029                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   000029   12....       LCALL     `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
    598          
    599            // Check leave control reset settings
    600            ZDApp_LeaveCtrlStartup( &devState, &startDelay );
   \   00002C                ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
   \   00002C   AC..         MOV       R4,?XSP + 0
   \   00002E   AD..         MOV       R5,?XSP + 1
   \   000030   7A..         MOV       R2,#devState & 0xff
   \   000032   7B..         MOV       R3,#(devState >> 8) & 0xff
   \   000034   12....       LCALL     `??ZDApp_LeaveCtrlStartup::?relay`; Banked call to: ZDApp_LeaveCtrlStartup
    601          
    602            // Leave may make the hold state come back
    603            if ( devState == DEV_HOLD )
   \   000037   90....       MOV       DPTR,#devState
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   700E         JNZ       ??ZDOInitDevice_1
    604            {
    605              // Set the NV startup option to force a "new" join.
    606              zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   00003D                ; Setup parameters for call to function zgWriteStartupOptions
   \   00003D   7A02         MOV       R2,#0x2
   \   00003F   79FF         MOV       R1,#-0x1
   \   000041   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    607          
    608              // Notify the applications
    609              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000044                ; Setup parameters for call to function osal_set_event
   \   000044   12....       LCALL     ?Subroutine11 & 0xFFFF
    610          
    611              return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
   \                     ??CrossCallReturnLabel_35:
   \   000047   7902         MOV       R1,#0x2
   \   000049   8035         SJMP      ??ZDOInitDevice_2
    612            }
    613          
    614          #if defined ( NV_RESTORE )
    615            // Get Keypad directly to see if a reset nv is needed.
    616            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    617            // while booting to skip past NV Restore.
    618            if ( HalKeyRead() == SW_BYPASS_NV )
    619              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    620            else
    621            {
    622              // Determine if NV should be restored
    623              networkStateNV = ZDApp_ReadNetworkRestoreState();
    624            }
    625          
    626            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    627            {
    628              networkStateNV = ZDApp_RestoreNetworkState();
    629            }
    630            else
    631            {
    632              // Wipe out the network state in NV
    633              NLME_InitNV();
    634              NLME_SetDefaultNV();
    635              // clear NWK key values
    636              ZDSecMgrClearNVKeyValues();
    637            }
    638          #endif
    639          
    640            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
    641            {
    642              ZDAppDetermineDeviceType();
   \                     ??ZDOInitDevice_1:
   \   00004B                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   00004B   12....       LCALL     `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
    643          
    644              // Only delay if joining network - not restoring network state
    645              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    646                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   00004E                ; Setup parameters for call to function osal_rand
   \   00004E   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000051   85..82       MOV       DPL,?XSP + 0
   \   000054   85..83       MOV       DPH,?XSP + 1
   \   000057   EA           MOV       A,R2
   \   000058   547F         ANL       A,#0x7f
   \   00005A   F8           MOV       R0,A
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   28           ADD       A,R0
   \   00005D   F8           MOV       R0,A
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   3400         ADDC      A,#0x0
   \   000062   F9           MOV       R1,A
   \   000063   E8           MOV       A,R0
   \   000064   2464         ADD       A,#0x64
   \   000066   FE           MOV       R6,A
   \   000067   E4           CLR       A
   \   000068   39           ADDC      A,R1
   \   000069   FF           MOV       R7,A
    647            }
    648          
    649            // Initialize the security for type of device
    650            ZDApp_SecInit( networkStateNV );
   \   00006A                ; Setup parameters for call to function ZDSecMgrInit
   \   00006A   7901         MOV       R1,#0x1
   \   00006C   12....       LCALL     `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
    651          
    652            // Trigger the network start
    653            ZDApp_NetworkInit( extendedDelay );
   \   00006F                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00006F   EE           MOV       A,R6
   \   000070   FA           MOV       R2,A
   \   000071   EF           MOV       A,R7
   \   000072   FB           MOV       R3,A
   \   000073   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
    654          
    655            // set broadcast address mask to support broadcast filtering
    656            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000076                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000076   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F9           MOV       R1,A
   \   00007B   12....       LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
    657          
    658            return ( networkStateNV );
   \   00007E   7901         MOV       R1,#0x1
   \                     ??ZDOInitDevice_2:
   \   000080   02....       LJMP      ?Subroutine2 & 0xFFFF
    659          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine25_0
   \   000006                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7402         MOV       A,#0x2
   \   000002                REQUIRE ??Subroutine32_0
   \   000002                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine33_0
   \   000003                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    660          
    661          /*********************************************************************
    662           * @fn      ZDApp_ReadNetworkRestoreState
    663           *
    664           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    665           *          or not to restore the network state.
    666           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    667           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    668           *
    669           * @param   none
    670           *
    671           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    672           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    673           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    674           *          ZCD_NV_STARTUP_OPTION
    675           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    676          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    677          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    678            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV       R6,#0x0
    679          
    680            // Look for the New Network State option.
    681            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL     `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV       A,R1
   \   00000B   F8           MOV       R0,A
   \   00000C   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000E   5002         JNC       ??ZDApp_ReadNetworkRestoreState_0
    682            {
    683              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000010   7E01         MOV       R6,#0x1
    684            }
    685          
    686            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000012   EE           MOV       A,R6
   \   000013   F9           MOV       R1,A
   \   000014   02....       LJMP      ??Subroutine30_0 & 0xFFFF
    687          }
    688          
    689          /*********************************************************************
    690           * @fn      ZDAppDetermineDeviceType()
    691           *
    692           * @brief   Determines the type of device to start.
    693           *
    694           *          Looks at zgDeviceLogicalType and determines what type of
    695           *          device to start.  The types are:
    696           *            ZG_DEVICETYPE_COORDINATOR
    697           *            ZG_DEVICETYPE_ROUTER
    698           *            ZG_DEVICETYPE_ENDDEVICE
    699           *
    700           * @param   none
    701           *
    702           * @return  none
    703           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    704          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    705          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    706            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX      A,@DPTR
   \   000008   700E         JNZ       ??ZDAppDetermineDeviceType_0
    707            {
    708              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV       DPTR,#devStartMode
   \   00000D   7402         MOV       A,#0x2
   \   00000F   F0           MOVX      @DPTR,A
    709              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX      A,@DPTR
   \   000014   54F8         ANL       A,#0xf8
   \   000016   8031         SJMP      ??ZDAppDetermineDeviceType_1
    710            }
    711            else
    712            {
    713              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   54F8         ANL       A,#0xf8
   \   00001E   F8           MOV       R0,A
   \   00001F   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000022   E0           MOVX      A,@DPTR
   \   000023   6401         XRL       A,#0x1
   \   000025   7004         JNZ       ??ZDAppDetermineDeviceType_2
    714                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   000027   7401         MOV       A,#0x1
   \   000029   8007         SJMP      ??ZDAppDetermineDeviceType_3
    715              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   6402         XRL       A,#0x2
   \   00002E   7007         JNZ       ??ZDAppDetermineDeviceType_4
    716                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000030   7402         MOV       A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000032   48           ORL       A,R0
   \   000033   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000036   F0           MOVX      @DPTR,A
    717          
    718              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    719              // The device shall do rejoin the network. Otherwise, do normal join
    720              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000037                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000037   7A..         MOV       R2,#AIB_apsUseExtendedPANID & 0xff
   \   000039   7B..         MOV       R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00003B   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00003E   E9           MOV       A,R1
   \   00003F   90....       MOV       DPTR,#devStartMode
   \   000042   7003         JNZ       ??ZDAppDetermineDeviceType_5
    721              {
    722                devStartMode = MODE_JOIN;     // Assume joining
   \   000044   E4           CLR       A
   \   000045   8002         SJMP      ??ZDAppDetermineDeviceType_1
    723              }
    724              else
    725              {
    726                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_5:
   \   000047   7403         MOV       A,#0x3
   \                     ??ZDAppDetermineDeviceType_1:
   \   000049   F0           MOVX      @DPTR,A
    727              }
    728            }
    729          }
   \   00004A   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    730          
    731          /*********************************************************************
    732           * @fn      ZDApp_NetworkStartEvt()
    733           *
    734           * @brief   Process the Network Start Event
    735           *
    736           * @param   none
    737           *
    738           * @return  none
    739           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    740          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    741          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    742            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV       DPTR,#nwkStatus
   \   000007   E0           MOVX      A,@DPTR
   \   000008   7012         JNZ       ??ZDApp_NetworkStartEvt_0
    743            {
    744              // Successfully started a ZigBee network
    745              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV       DPTR,#devState
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6408         XRL       A,#0x8
   \   000010   7003         JNZ       ??ZDApp_NetworkStartEvt_1
    746              {
    747                devState = DEV_ZB_COORD;
   \   000012   7409         MOV       A,#0x9
   \   000014   F0           MOVX      @DPTR,A
    748              }
    749          
    750              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000015                ; Setup parameters for call to function osal_pwrmgr_device
   \   000015   7900         MOV       R1,#0x0
   \   000017   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    751              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00001A                ; Setup parameters for call to function osal_set_event
   \   00001A   802E         SJMP      ??ZDApp_NetworkStartEvt_2
    752            }
    753            else
    754            {
    755              // Try again with a higher energy threshold !!
    756              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00001C                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00001C   12....       LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   00001F   E9           MOV       A,R1
   \   000020   7900         MOV       R1,#0x0
   \   000022   2410         ADD       A,#0x10
   \   000024   5001         JNC       ??ZDApp_NetworkStartEvt_3
   \   000026   09           INC       R1
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000027   C3           CLR       C
   \   000028   94FF         SUBB      A,#-0x1
   \   00002A   E9           MOV       A,R1
   \   00002B   9400         SUBB      A,#0x0
   \   00002D   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00002F   65D0         XRL       A,PSW
   \   000031   33           RLC       A
   \   000032   5010         JNC       ??ZDApp_NetworkStartEvt_4
    757              {
    758                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000034                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000034   12....       LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   000037   E9           MOV       A,R1
   \   000038   F8           MOV       R0,A
   \   000039                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   000039   7410         MOV       A,#0x10
   \   00003B   29           ADD       A,R1
   \   00003C   F9           MOV       R1,A
   \   00003D   12....       LCALL     `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
    759                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   000040                ; Setup parameters for call to function osal_set_event
   \   000040   7A01         MOV       R2,#0x1
   \   000042   8008         SJMP      ??ZDApp_NetworkStartEvt_5
    760              }
    761              else
    762              {
    763                // Failed to start network. Enter a dormant state (until user intervenes)
    764                devState = DEV_INIT;
   \                     ??ZDApp_NetworkStartEvt_4:
   \   000044   90....       MOV       DPTR,#devState
   \   000047   7401         MOV       A,#0x1
   \   000049   F0           MOVX      @DPTR,A
    765                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00004A                ; Setup parameters for call to function osal_set_event
   \                     ??ZDApp_NetworkStartEvt_2:
   \   00004A   7A10         MOV       R2,#0x10
    766              }
    767            }
   \                     ??ZDApp_NetworkStartEvt_5:
   \   00004C   12....       LCALL     ??Subroutine24_0 & 0xFFFF
    768          }
   \                     ??CrossCallReturnLabel_38:
   \   00004F   02....       LJMP      ?Subroutine3 & 0xFFFF
    769          
    770          /*********************************************************************
    771           * @fn      ZDApp_DeviceAuthEvt()
    772           *
    773           * @brief   Process the Device Authentic Event
    774           *
    775           * @param   none
    776           *
    777           * @return  none
    778           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    779          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    780          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    781            // received authentication from trust center
    782            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6405         XRL       A,#0x5
   \   00000A   702B         JNZ       ??ZDApp_DeviceAuthEvt_0
    783            {
    784              // Stop the reset timer so it doesn't reset
    785              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL     `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
    786          
    787              devState = DEV_END_DEVICE;
   \   00000F   12....       LCALL     ?Subroutine7 & 0xFFFF
    788              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    789          
    790              // Set the Power Manager Device
    791          #if defined ( POWER_SAVING )
    792              osal_pwrmgr_device( PWRMGR_BATTERY );
    793          #endif
    794          
    795              if ( ZSTACK_ROUTER_BUILD )
    796              {
    797                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??CrossCallReturnLabel_0:
   \   000012   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000015   6009         JZ        ??ZDApp_DeviceAuthEvt_1
    798                {
    799                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    800                  NLME_StartRouterRequest( 0, 0, false );
   \   000017                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000017   7B00         MOV       R3,#0x0
   \   000019   7A00         MOV       R2,#0x0
   \   00001B   7900         MOV       R1,#0x0
   \   00001D   12....       LCALL     `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
    801                }
    802              }
    803          
    804              // Notify to save info into NV
    805              ZDApp_NVUpdate();
    806          
    807              // Save off the security
    808              ZDApp_SaveNwkKey();
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   000020                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000020   12....       LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    809          
    810              ZDApp_AnnounceNewAddress();
   \   000023                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000023   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
    811          
    812              if ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   \   000026   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   A2E3         MOV       C,0xE0 /* A   */.3
   \   00002C   4009         JC        ??ZDApp_DeviceAuthEvt_0
    813              {
    814                NLME_SetPollRate( ZDApp_SavedPollRate );
   \   00002E                ; Setup parameters for call to function NLME_SetPollRate
   \   00002E   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   000031   12....       LCALL     ?Subroutine13 & 0xFFFF
    815              }
    816            }
   \                     ??CrossCallReturnLabel_6:
   \   000034   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
    817            else
    818            {
    819              ZDApp_NVUpdate();
    820            }
    821          }
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   000037   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000003   E0           MOVX      A,@DPTR
   \   000004   5407         ANL       A,#0x7
   \   000006   6402         XRL       A,#0x2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV       DPTR,#devState
   \   000003   7406         MOV       A,#0x6
   \   000005   F0           MOVX      @DPTR,A
   \   000006                ; Setup parameters for call to function osal_set_event
   \   000006                ; Setup parameters for call to function osal_set_event
   \   000006   7A10         MOV       R2,#0x10
   \   000008   7B00         MOV       R3,#0x0
   \   00000A   90....       MOV       DPTR,#ZDAppTaskID
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   \   00000F   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    822          
    823          /*********************************************************************
    824           * @fn      ZDApp_SaveNetworkStateEvt()
    825           *
    826           * @brief   Process the Save the Network State Event
    827           *
    828           * @param   none
    829           *
    830           * @return  none
    831           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    832          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    833          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    834          #if defined ( NV_RESTORE )
    835           #if defined ( NV_TURN_OFF_RADIO )
    836            // Turn off the radio's receiver during an NV update
    837            uint8 RxOnIdle;
    838            uint8 x = false;
    839            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    840            ZMacSetReq( ZMacRxOnIdle, &x );
    841           #endif
    842          
    843            // Update the Network State in NV
    844            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    845                           NWK_NV_DEVICELIST_ENABLE |
    846                           NWK_NV_BINDING_ENABLE    |
    847                           NWK_NV_ADDRMGR_ENABLE );
    848          
    849            // Reset the NV startup option to resume from NV by
    850            // clearing the "New" join option.
    851            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
    852          
    853           #if defined ( NV_TURN_OFF_RADIO )
    854            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    855           #endif
    856          #endif  // NV_RESTORE
    857          }
   \   000000   02....       LJMP      ?BRET
    858          
    859          /*********************************************************************
    860           * @fn      ZDApp_RestoreNetworkState()
    861           *
    862           * @brief   This function will restore the network state of the
    863           *          device if the network state is stored in NV.
    864           *
    865           * @param   none
    866           *
    867           * @return
    868           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    869           *          restored.
    870           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
    871           *          This could mean that zgStartupOption said to not restore, or
    872           *          it could mean that there was no network state to restore.
    873           *
    874           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    875          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
    876          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    877            uint8 nvStat;
    878          
    879            // Initialize NWK NV items
    880            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL     `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
   \   000008   E9           MOV       A,R1
   \   000009   FE           MOV       R6,A
    881          
    882            if ( nvStat != NV_OPER_FAILED )
   \   00000A   740A         MOV       A,#0xa
   \   00000C   6E           XRL       A,R6
   \   00000D   6033         JZ        ??ZDApp_RestoreNetworkState_0
    883            {
    884              if ( NLME_RestoreFromNV() )
   \   00000F                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000F   12....       LCALL     `??NLME_RestoreFromNV::?relay`; Banked call to: NLME_RestoreFromNV
   \   000012   E9           MOV       A,R1
   \   000013   602D         JZ        ??ZDApp_RestoreNetworkState_0
    885              {
    886                // Are we a coordinator
    887                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000018   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00001B   12....       LCALL     ??Subroutine25_0 & 0xFFFF
    888                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \                     ??CrossCallReturnLabel_42:
   \   00001E   F9           MOV       R1,A
   \   00001F   EA           MOV       A,R2
   \   000020   49           ORL       A,R1
   \   000021   7007         JNZ       ??ZDApp_RestoreNetworkState_1
    889                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000023   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000026   E0           MOVX      A,@DPTR
   \   000027   54F8         ANL       A,#0xf8
   \   000029   F0           MOVX      @DPTR,A
    890                devStartMode = MODE_RESUME;
   \                     ??ZDApp_RestoreNetworkState_1:
   \   00002A   90....       MOV       DPTR,#devStartMode
   \   00002D   7401         MOV       A,#0x1
   \   00002F   F0           MOVX      @DPTR,A
    891                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \   000030                ; Setup parameters for call to function sAddrExtCpy
   \   000030   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   000032   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   000034   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000036   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000038   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    892              }
    893              else
    894                nvStat = NV_ITEM_UNINIT;
    895          
    896              if ( ZG_SECURE_ENABLED )
    897              {
    898                nwkFrameCounterChanges = 0;
    899          
    900                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    901                {
    902                  ZDApp_RestoreNwkKey();
    903                }
    904              }
    905          
    906              // The default for RxOnWhenIdle is true for Routers and false for end devices
    907              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
    908              // other than default.
    909            }
    910          
    911            if ( nvStat == ZSUCCESS )
   \   00003B   EE           MOV       A,R6
   \   00003C   7004         JNZ       ??ZDApp_RestoreNetworkState_0
    912              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   00003E   7900         MOV       R1,#0x0
   \   000040   8002         SJMP      ??ZDApp_RestoreNetworkState_2
    913            else
    914              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_0:
   \   000042   7901         MOV       R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_2:
   \   000044   02....       LJMP      ??Subroutine30_0 & 0xFFFF
    915          }
    916          
    917          /*********************************************************************
    918           * @fn      ZDApp_InitUserDesc()
    919           *
    920           * @brief   Initialize the User Descriptor, the descriptor is read from NV
    921           *          when needed.  If you want to initialize the User descriptor to
    922           *          something other than all zero, do it here.
    923           *
    924           * @param   none
    925           *
    926           * @return  none
    927           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    928          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
    929          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    930            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
    931          
    932            // Initialize the User Descriptor, the descriptor is read from NV
    933            // when needed.  If you want to initialize the User descriptor to something
    934            // other than all zero, do it here.
    935            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV       R4,#0x11
   \   00000C   12....       LCALL     ?Subroutine19 & 0xFFFF
    936            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
    937                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \                     ??CrossCallReturnLabel_25:
   \   00000F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000012   7C11         MOV       R4,#0x11
   \   000014   7D00         MOV       R5,#0x0
   \   000016   7A81         MOV       R2,#-0x7f
   \   000018   7B00         MOV       R3,#0x0
   \   00001A   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00001D   7402         MOV       A,#0x2
   \   00001F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000022   E9           MOV       A,R1
   \   000023   7033         JNZ       ??ZDApp_InitUserDesc_0
    938            {
    939              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
    940                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   75..11       MOV       ?V0,#0x11
   \   00002D   75..00       MOV       ?V1,#0x0
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV       R4,#0x0
   \   000037   7D00         MOV       R5,#0x0
   \   000039   7A81         MOV       R2,#-0x7f
   \   00003B   7B00         MOV       R3,#0x0
   \   00003D   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000040   7404         MOV       A,#0x4
   \   000042   12....       LCALL     ?DEALLOC_XSTACK8
   \   000045   E9           MOV       A,R1
   \   000046   7010         JNZ       ??ZDApp_InitUserDesc_0
    941              {
    942                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   000048   85..82       MOV       DPL,?XSP + 0
   \   00004B   85..83       MOV       DPH,?XSP + 1
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   6007         JZ        ??ZDApp_InitUserDesc_0
    943                {
    944                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   000051   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000054   E0           MOVX      A,@DPTR
   \   000055   D2E4         SETB      0xE0 /* A   */.4
   \   000057   F0           MOVX      @DPTR,A
    945                }
    946              }
    947            }
    948          }
   \                     ??ZDApp_InitUserDesc_0:
   \   000058   7411         MOV       A,#0x11
   \   00005A   02....       LJMP      ??Subroutine32_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   7D00         MOV       R5,#0x0
   \   000002   7900         MOV       R1,#0x0
   \   000004   AA..         MOV       R2,?XSP + 0
   \   000006   AB..         MOV       R3,?XSP + 1
   \   000008   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   00000B                ; Setup parameters for call to function osal_nv_item_init
   \   00000B                ; Setup parameters for call to function osal_nv_write
   \   00000B   A8..         MOV       R0,?XSP + 0
   \   00000D   A9..         MOV       R1,?XSP + 1
   \   00000F   88..         MOV       ?V0,R0
   \   000011   89..         MOV       ?V1,R1
   \   000013   78..         MOV       R0,#?V0
   \   000015   22           RET
    949          
    950          /*********************************************************************
    951           * @fn      ZDAppCheckForHoldKey()
    952           *
    953           * @brief   Check for key to set the device into Hold Auto Start
    954           *
    955           * @param   none
    956           *
    957           * @return  none
    958           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    959          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
    960          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    961          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    962            // Get Keypad directly to see if a HOLD_START is needed.
    963            // Hold down the SW_BYPASS_START key (see OnBoard.h)
    964            // while booting to avoid starting up the device.
    965            if ( HalKeyRead () == SW_BYPASS_START)
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL     `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   000007   E9           MOV       A,R1
   \   000008   6401         XRL       A,#0x1
   \   00000A   7005         JNZ       ??ZDAppCheckForHoldKey_0
    966            {
    967              // Change the device state to HOLD on start up
    968              devState = DEV_HOLD;
   \   00000C   90....       MOV       DPTR,#devState
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
    969            }
    970          #endif // HAL_KEY
    971          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   000011   02....       LJMP      ?Subroutine3 & 0xFFFF
    972          
    973          /*********************************************************************
    974           * @fn      ZDApp_ProcessOSALMsg()
    975           *
    976           * @brief   Process the incoming task message.
    977           *
    978           * @param   msgPtr - message to process
    979           *
    980           * @return  none
    981           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    982          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
    983          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    984            // Data Confirmation message fields
    985            uint8 sentEP;       // This should always be 0
    986            uint8 sentStatus;
    987            afDataConfirm_t *afDataConfirm;
    988            uint8 tmp;
    989          
    990            switch ( msgPtr->event )
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   E0           MOVX      A,@DPTR
   \   000009   24E6         ADD       A,#-0x1a
   \   00000B   600A         JZ        ??ZDApp_ProcessOSALMsg_0
   \   00000D   2447         ADD       A,#0x47
   \   00000F   600B         JZ        ??ZDApp_ProcessOSALMsg_1
   \   000011   24D6         ADD       A,#-0x2a
   \   000013   600C         JZ        ??ZDApp_ProcessOSALMsg_2
   \   000015   801A         SJMP      ??ZDApp_ProcessOSALMsg_3
    991            {
    992              // Incoming ZDO Message
    993              case AF_INCOMING_MSG_CMD:
    994                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   000017                ; Setup parameters for call to function ZDP_IncomingData
   \   000017   12....       LCALL     `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
    995                break;
   \   00001A   8015         SJMP      ??ZDApp_ProcessOSALMsg_3
    996          
    997              case ZDO_CB_MSG:
    998                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   00001C                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   00001C   12....       LCALL     `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
    999                break;
   \   00001F   8010         SJMP      ??ZDApp_ProcessOSALMsg_3
   1000          
   1001              case AF_DATA_CONFIRM_CMD:
   1002                // This message is received as a confirmation of a data packet sent.
   1003                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1004                // The message fields are defined in AF.h
   1005                afDataConfirm = (afDataConfirm_t *)msgPtr;
   1006                sentEP = afDataConfirm->endpoint;
   1007                sentStatus = afDataConfirm->hdr.status;
   1008          
   1009                // Action taken when confirmation is received.
   1010          #if defined ( ZIGBEE_FREQ_AGILITY )
   1011                if ( pZDNwkMgr_ProcessDataConfirm )
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   000021   90....       MOV       DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   000024   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000027   6008         JZ        ??ZDApp_ProcessOSALMsg_3
   1012                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   \   000029                ; Setup parameters for indirect call
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F583         MOV       DPH,A
   \   00002C   8882         MOV       DPL,R0
   \   00002E   12....       LCALL     ?CALL_IND
   1013          #endif
   1014                (void)sentEP;
   1015                (void)sentStatus;
   1016                break;
   1017          
   1018              case ZDO_NWK_DISC_CNF:
   1019                if (devState != DEV_NWK_DISC)
   1020                  break;
   1021          
   1022                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1023                {
   1024                  if ( (((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->hdr.status == ZDO_SUCCESS) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   1025                  {
   1026                    if ( devStartMode == MODE_JOIN )
   1027                    {
   1028                      devState = DEV_NWK_JOINING;
   1029          
   1030                      ZDApp_NodeProfileSync((ZDO_NetworkDiscoveryCfm_t *)msgPtr);
   1031          
   1032                      if ( NLME_JoinRequest( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->extendedPANID,
   1033                           BUILD_UINT16( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdLSB, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdMSB ),
   1034                           ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->logicalChannel,
   1035                           ZDO_Config_Node_Descriptor.CapabilityFlags ) != ZSuccess )
   1036                      {
   1037                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1038                            + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1039                      }
   1040                    }
   1041                    else if ( devStartMode == MODE_REJOIN )
   1042                    {
   1043                      devState = DEV_NWK_REJOIN;
   1044          
   1045                      // Before trying to do rejoin, check if the device has a valid short address
   1046                      // If not, generate a random short address for itself
   1047                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   1048                      {
   1049                        _NIB.nwkDevAddress = osal_rand();
   1050                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   1051                      }
   1052          
   1053                      if ( ZG_SECURE_ENABLED )
   1054                      {
   1055                        ZDApp_RestoreNwkKey();
   1056                      }
   1057          
   1058                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1059                      if ( _NIB.nwkPanId == INVALID_PAN_ID )
   1060                      {
   1061                        _NIB.nwkPanId = BUILD_UINT16( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdLSB, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdMSB );
   1062                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   1063                      }
   1064          
   1065                      tmp = true;
   1066                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   1067                      if ( NLME_ReJoinRequest( ZDO_UseExtendedPANID, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->logicalChannel) != ZSuccess )
   1068                      {
   1069                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1070                            + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1071                      }
   1072                    }
   1073          
   1074                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   1075                    {
   1076                      // The receiver is on, turn network layer polling off.
   1077                      NLME_SetPollRate( 0 );
   1078                      NLME_SetQueuedPollRate( 0 );
   1079                      NLME_SetResponseRate( 0 );
   1080                    }
   1081                    else
   1082                    {
   1083                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   1084                      {
   1085                        ZDApp_SavedPollRate = zgPollRate;
   1086                        NLME_SetPollRate( zgRejoinPollRate );
   1087                      }
   1088                    }
   1089                  }
   1090                  else
   1091                  {
   1092                    if ( continueJoining )
   1093                    {
   1094              #if defined ( MANAGED_SCAN )
   1095                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1096              #else
   1097                      zdoDiscCounter++;
   1098                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1099                            + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   1100              #endif
   1101                    }
   1102                  }
   1103                }
   1104                break;
   1105          
   1106              case ZDO_NWK_JOIN_IND:
   1107                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1108                {
   1109                  ZDApp_ProcessNetworkJoin();
   1110                }
   1111                break;
   1112          
   1113              case ZDO_NWK_JOIN_REQ:
   1114                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1115                {
   1116                  retryCnt = 0;
   1117                  devStartMode = MODE_RESUME;
   1118                  _tmpRejoinState = true;
   1119                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   1120                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   1121                  ZDApp_NetworkInit( 0 );
   1122                }
   1123                break;
   1124          
   1125              default:
   1126                if ( ZG_SECURE_ENABLED )
   1127                  ZDApp_ProcessSecMsg( msgPtr );
   1128                break;
   1129            }
   1130          
   1131          }
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   000031   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET
   1132          
   1133          /*********************************************************************
   1134           * @fn      ZDApp_ProcessMsgCBs()
   1135           *
   1136           * @brief   Process response messages
   1137           *
   1138           * @param   none
   1139           *
   1140           * @return  none
   1141           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1142          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1143          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 44
   \   000005   74D4         MOV       A,#-0x2c
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1144            switch ( inMsg->clusterID )
   \   00000E   EA           MOV       A,R2
   \   00000F   240C         ADD       A,#0xc
   \   000011   F582         MOV       DPL,A
   \   000013   E4           CLR       A
   \   000014   3F           ADDC      A,R7
   \   000015   F583         MOV       DPH,A
   \   000017   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00001A   8A..         MOV       ?V0,R2
   \   00001C   F5..         MOV       ?V1,A
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000023   0300         DW        3
   \   000025   2100         DW        33
   \   000027   2200         DW        34
   \   000029   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   00002B   0080         DW        32768
   \   00002D   0180         DW        32769
   \   00002F   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000031   2180         DW        32801
   \   000033   2280         DW        32802
   \   000035   ....         DW        ??ZDApp_ProcessMsgCBs_2
   \   000037   0100         DW        1
   \   000039   2000         DW        32
   \   00003B   ....         DW        ??ZDApp_ProcessMsgCBs_3
   \   00003D   ....         DW        ??ZDApp_ProcessMsgCBs_4
   1145            {
   1146          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1147              case NWK_addr_rsp:
   1148              case IEEE_addr_rsp:
   1149                {
   1150                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1151                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00003F                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00003F   EE           MOV       A,R6
   \   000040   FA           MOV       R2,A
   \   000041   EF           MOV       A,R7
   \   000042   FB           MOV       R3,A
   \   000043   12....       LCALL     `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   000046   8A..         MOV       ?V0,R2
   \   000048   8B..         MOV       ?V1,R3
   \   00004A   AF..         MOV       R7,?V1
   1152                  if ( pAddrRsp )
   \   00004C   EA           MOV       A,R2
   \   00004D   4F           ORL       A,R7
   \   00004E   7003         JNZ       $+5
   \   000050   02....       LJMP      ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
   1153                  {
   1154                    if ( pAddrRsp->status == ZSuccess )
   \   000053   8A82         MOV       DPL,R2
   \   000055   8B83         MOV       DPH,R3
   \   000057   E0           MOVX      A,@DPTR
   \   000058   700E         JNZ       ??ZDApp_ProcessMsgCBs_5
   1155                    {
   1156                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   00005A                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   00005A   EA           MOV       A,R2
   \   00005B   2403         ADD       A,#0x3
   \   00005D   FC           MOV       R4,A
   \   00005E   E4           CLR       A
   \   00005F   3F           ADDC      A,R7
   \   000060   FD           MOV       R5,A
   \   000061   A3           INC       DPTR
   \   000062   12....       LCALL     ?Subroutine13 & 0xFFFF
   1157                    }
   \                     ??CrossCallReturnLabel_8:
   \   000065   12....       LCALL     `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
   1158                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_5:
   \   000068                ; Setup parameters for call to function osal_mem_free
   \   000068   AA..         MOV       R2,?V0
   \   00006A   EF           MOV       A,R7
   \   00006B   02....       LJMP      ??ZDApp_ProcessMsgCBs_6 & 0xFFFF
   1159                  }
   1160                }
   1161                break;
   1162          #endif
   1163          
   1164          #if defined ( REFLECTOR )
   1165              case Bind_req:
   1166              case Unbind_req:
   1167                {
   1168                  ZDO_BindUnbindReq_t bindReq;
   1169                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   00006E                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   00006E   7417         MOV       A,#0x17
   \   000070   12....       LCALL     ?XSTACK_DISP102_8
   \   000073   EE           MOV       A,R6
   \   000074   FA           MOV       R2,A
   \   000075   EF           MOV       A,R7
   \   000076   FB           MOV       R3,A
   \   000077   12....       LCALL     `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
   1170                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   00007A                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   00007A   7417         MOV       A,#0x17
   \   00007C   12....       LCALL     ?XSTACK_DISP102_8
   \   00007F   EE           MOV       A,R6
   \   000080   FA           MOV       R2,A
   \   000081   EF           MOV       A,R7
   \   000082   FB           MOV       R3,A
   \   000083   12....       LCALL     `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
   1171                }
   1172                break;
   \   000086   806A         SJMP      ??ZDApp_ProcessMsgCBs_4
   1173          #endif
   1174          
   1175          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1176              case Bind_rsp:
   1177              case Unbind_rsp:
   1178                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   000088   90....       MOV       DPTR,#matchED
   \   00008B   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00008E   6062         JZ        ??ZDApp_ProcessMsgCBs_4
   1179                {
   1180                  ZDMatchSendState(
   1181                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1182                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   \   000090   7421         MOV       A,#0x21
   \   000092   6A           XRL       A,R2
   \   000093   7003         JNZ       ??ZDApp_ProcessMsgCBs_7
   \   000095   7480         MOV       A,#-0x80
   \   000097   6B           XRL       A,R3
   \                     ??ZDApp_ProcessMsgCBs_7:
   \   000098   7004         JNZ       ??ZDApp_ProcessMsgCBs_8
   \   00009A   7903         MOV       R1,#0x3
   \   00009C   8002         SJMP      ??ZDApp_ProcessMsgCBs_9
   \                     ??ZDApp_ProcessMsgCBs_8:
   \   00009E   7902         MOV       R1,#0x2
   \                     ??ZDApp_ProcessMsgCBs_9:
   \   0000A0                ; Setup parameters for call to function ZDMatchSendState
   \   0000A0   12....       LCALL     ?Subroutine20 & 0xFFFF
   1183                }
   \                     ??CrossCallReturnLabel_67:
   \   0000A3   FB           MOV       R3,A
   \   0000A4   EE           MOV       A,R6
   \   0000A5   2413         ADD       A,#0x13
   \   0000A7   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0000AA   F8           MOV       R0,A
   \   0000AB   A3           INC       DPTR
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   F583         MOV       DPH,A
   \   0000AF   8882         MOV       DPL,R0
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   FA           MOV       R2,A
   \   0000B3   12....       LCALL     `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   \   0000B6   803A         SJMP      ??ZDApp_ProcessMsgCBs_4
   1184                break;
   1185          
   1186              case End_Device_Bind_req:
   1187                if (ZG_DEVICE_COORDINATOR_TYPE)
   1188                {
   1189                  ZDEndDeviceBind_t bindReq;
   1190                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   0000B8                ; Setup parameters for call to function ZDO_ParseEndDeviceBindReq
   \   0000B8   AC..         MOV       R4,?XSP + 0
   \   0000BA   AD..         MOV       R5,?XSP + 1
   \   0000BC   EE           MOV       A,R6
   \   0000BD   FA           MOV       R2,A
   \   0000BE   EF           MOV       A,R7
   \   0000BF   FB           MOV       R3,A
   \   0000C0   12....       LCALL     `??ZDO_ParseEndDeviceBindReq::?relay`; Banked call to: ZDO_ParseEndDeviceBindReq
   1191                  ZDO_MatchEndDeviceBind( &bindReq );
   \   0000C3                ; Setup parameters for call to function ZDO_MatchEndDeviceBind
   \   0000C3   AA..         MOV       R2,?XSP + 0
   \   0000C5   AB..         MOV       R3,?XSP + 1
   \   0000C7   12....       LCALL     `??ZDO_MatchEndDeviceBind::?relay`; Banked call to: ZDO_MatchEndDeviceBind
   1192          
   1193                  // Freeing the cluster lists - if allocated.
   1194                  if ( bindReq.numInClusters )
   \   0000CA   7411         MOV       A,#0x11
   \   0000CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CF   E0           MOVX      A,@DPTR
   \   0000D0   600B         JZ        ??ZDApp_ProcessMsgCBs_10
   1195                    osal_mem_free( bindReq.inClusters );
   \   0000D2                ; Setup parameters for call to function osal_mem_free
   \   0000D2   7412         MOV       A,#0x12
   \   0000D4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D7   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000DA   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1196                  if ( bindReq.numOutClusters )
   \                     ??ZDApp_ProcessMsgCBs_10:
   \   0000DD   7414         MOV       A,#0x14
   \   0000DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   600D         JZ        ??ZDApp_ProcessMsgCBs_4
   1197                    osal_mem_free( bindReq.outClusters );
   \   0000E5                ; Setup parameters for call to function osal_mem_free
   \   0000E5   7415         MOV       A,#0x15
   \   0000E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   FA           MOV       R2,A
   \   0000EC   A3           INC       DPTR
   \   0000ED   E0           MOVX      A,@DPTR
   \                     ??ZDApp_ProcessMsgCBs_6:
   \   0000EE   FB           MOV       R3,A
   \   0000EF   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1198                }
   1199                break;
   1200          #endif
   1201            }
   1202          }
   \                     ??ZDApp_ProcessMsgCBs_4:
   \   0000F2   742C         MOV       A,#0x2c
   \   0000F4   02....       LJMP      ??Subroutine32_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   EE           MOV       A,R6
   \   000001   240F         ADD       A,#0xf
   \   000003                REQUIRE ??Subroutine31_0
   \   000003                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET
   1203          
   1204          /*********************************************************************
   1205           * @fn      ZDApp_RegisterCBs()
   1206           *
   1207           * @brief   Process response messages
   1208           *
   1209           * @param   none
   1210           *
   1211           * @return  none
   1212           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1213          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1214          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1215          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1216            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV       R2,#0x1
   \   000006   12....       LCALL     ?Subroutine12 & 0xFFFF
   1217          #endif
   1218          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1219            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \                     ??CrossCallReturnLabel_47:
   \   000009                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000009   7A00         MOV       R2,#0x0
   \   00000B   12....       LCALL     ?Subroutine12 & 0xFFFF
   1220          #endif
   1221          #if ZG_BUILD_COORDINATOR_TYPE
   1222            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   \                     ??CrossCallReturnLabel_48:
   \   00000E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00000E   7A21         MOV       R2,#0x21
   \   000010   12....       LCALL     ?Subroutine12 & 0xFFFF
   1223            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   \                     ??CrossCallReturnLabel_49:
   \   000013                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000013   7A22         MOV       R2,#0x22
   \   000015   12....       LCALL     ?Subroutine12 & 0xFFFF
   1224            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   \                     ??CrossCallReturnLabel_50:
   \   000018                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000018   7A20         MOV       R2,#0x20
   \   00001A   7B00         MOV       R3,#0x0
   \   00001C   12....       LCALL     ??Subroutine26_0 & 0xFFFF
   1225          #endif
   1226          #if defined ( REFLECTOR )
   1227            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \                     ??CrossCallReturnLabel_51:
   \   00001F                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001F   7A21         MOV       R2,#0x21
   \   000021   7B00         MOV       R3,#0x0
   \   000023   12....       LCALL     ??Subroutine26_0 & 0xFFFF
   1228            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \                     ??CrossCallReturnLabel_52:
   \   000026                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000026   7A22         MOV       R2,#0x22
   \   000028   7B00         MOV       R3,#0x0
   \   00002A   12....       LCALL     ??Subroutine26_0 & 0xFFFF
   1229          #endif
   1230          }
   \                     ??CrossCallReturnLabel_53:
   \   00002D   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   7B80         MOV       R3,#-0x80
   \   000002                REQUIRE ??Subroutine26_0
   \   000002                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000008   22           RET
   1231          
   1232          /*********************************************************************
   1233           * @fn      ZDApp_ProcessSecMsg()
   1234           *
   1235           * @brief   Process the incoming security message.
   1236           *
   1237           * @param   msgPtr - message to process
   1238           *
   1239           * @return  none
   1240           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1241          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1242          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1243            switch ( msgPtr->event )
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   E0           MOVX      A,@DPTR
   \   000009   6407         XRL       A,#0x7
   \   00000B   7003         JNZ       ??ZDApp_ProcessSecMsg_0
   1244            {
   1245              case ZDO_ESTABLISH_KEY_CFM:
   1246                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1247                {
   1248                  ZDSecMgrEstablishKeyCfm( (ZDO_EstablishKeyCfm_t*)msgPtr );
   1249                }
   1250                break;
   1251          
   1252              case ZDO_ESTABLISH_KEY_IND:
   1253                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1254                {
   1255                  if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1256                  {
   1257                    ZDSecMgrEstablishKeyInd( (ZDO_EstablishKeyInd_t*)msgPtr );
   1258                  }
   1259                }
   1260                break;
   1261          
   1262              case ZDO_TRANSPORT_KEY_IND:
   1263                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1264                {
   1265                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   1266                }
   1267                break;
   1268          
   1269              case ZDO_UPDATE_DEVICE_IND:
   1270                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1271                {
   1272                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   \   00000D                ; Setup parameters for call to function ZDSecMgrUpdateDeviceInd
   \   00000D   12....       LCALL     `??ZDSecMgrUpdateDeviceInd::?relay`; Banked call to: ZDSecMgrUpdateDeviceInd
   1273                }
   1274                break;
   1275          
   1276              case ZDO_REMOVE_DEVICE_IND:
   1277                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1278                {
   1279                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1280                }
   1281                break;
   1282          
   1283              case ZDO_REQUEST_KEY_IND:
   1284                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1285                {
   1286                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1287                  {
   1288                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1289                  }
   1290                }
   1291                break;
   1292          
   1293              case ZDO_SWITCH_KEY_IND:
   1294                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1295                {
   1296                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   1297                }
   1298                break;
   1299          
   1300              case ZDO_AUTHENTICATE_IND:
   1301                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1302                {
   1303                  ZDSecMgrAuthenticateInd( (ZDO_AuthenticateInd_t*)msgPtr );
   1304                }
   1305                break;
   1306          
   1307              case ZDO_AUTHENTICATE_CFM:
   1308                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1309                {
   1310                  ZDSecMgrAuthenticateCfm( (ZDO_AuthenticateCfm_t*)msgPtr );
   1311                }
   1312                break;
   1313          
   1314              default:
   1315                // Unsupported messages
   1316                break;
   1317            }
   1318          }
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000010   02....       LJMP      ?Subroutine3 & 0xFFFF
   1319          
   1320          /*********************************************************************
   1321           * @fn      ZDApp_ProcessNetworkJoin()
   1322           *
   1323           * @brief
   1324           *
   1325           *   Save off the Network key information.
   1326           *
   1327           * @param   none
   1328           *
   1329           * @return  none
   1330           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1331          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1332          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1333            if ( (devState == DEV_NWK_JOINING) ||
   1334                ((devState == DEV_NWK_ORPHAN)  &&
   1335                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV       DPTR,#devState
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6403         XRL       A,#0x3
   \   000010   6015         JZ        ??ZDApp_ProcessNetworkJoin_0
   \   000012   E0           MOVX      A,@DPTR
   \   000013   640A         XRL       A,#0xa
   \   000015   6003         JZ        $+5
   \   000017   02....       LJMP      ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001A   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   5407         ANL       A,#0x7
   \   000020   6401         XRL       A,#0x1
   \   000022   6003         JZ        $+5
   \   000024   02....       LJMP      ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
   1336            {
   1337              // Result of a Join attempt by this device.
   1338              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   000027   90....       MOV       DPTR,#nwkStatus
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   703A         JNZ       ??ZDApp_ProcessNetworkJoin_3
   1339              {
   1340                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   12....       LCALL     ?Subroutine11 & 0xFFFF
   1341          
   1342          #if defined ( POWER_SAVING )
   1343                osal_pwrmgr_device( PWRMGR_BATTERY );
   1344          #endif
   1345          
   1346                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   1347                {
   1348                  // wait for auth from trust center!!
   1349                  devState = DEV_END_DEVICE_UNAUTH;
   1350          
   1351                  // Start the reset timer for MAX UNAUTH time
   1352                  ZDApp_ResetTimerStart( 10000 );//MAX_DEVICE_UNAUTH_TIMEOUT );
   1353                }
   1354                else
   1355                {
   1356                  if ( ZSTACK_ROUTER_BUILD )
   1357                  {
   1358                    if ( devState == DEV_NWK_ORPHAN
   1359                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??CrossCallReturnLabel_36:
   \   000030   90....       MOV       DPTR,#devState
   \   000033   E0           MOVX      A,@DPTR
   \   000034   640A         XRL       A,#0xa
   \   000036   700D         JNZ       ??ZDApp_ProcessNetworkJoin_4
   \   000038   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00003B   6010         JZ        ??ZDApp_ProcessNetworkJoin_5
   1360                    {
   1361                      // Change NIB state to router for restore
   1362                      _NIB.nwkState = NWK_ROUTER;
   \   00003D   90....       MOV       DPTR,#_NIB + 35
   \   000040   7408         MOV       A,#0x8
   \   000042   F0           MOVX      @DPTR,A
   \   000043   8008         SJMP      ??ZDApp_ProcessNetworkJoin_5
   1363                    }
   1364                  }
   1365          
   1366                  if ( devState == DEV_NWK_JOINING )
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   000045   E0           MOVX      A,@DPTR
   \   000046   6403         XRL       A,#0x3
   \   000048   7003         JNZ       ??ZDApp_ProcessNetworkJoin_5
   1367                  {
   1368                    ZDApp_AnnounceNewAddress();
   \   00004A                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00004A   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1369                  }
   1370          
   1371                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   00004D   90....       MOV       DPTR,#devState
   \   000050   7406         MOV       A,#0x6
   \   000052   F0           MOVX      @DPTR,A
   1372                  if ( ZSTACK_ROUTER_BUILD )
   1373                  {
   1374                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1375                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \   000053   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000056   7003         JNZ       $+5
   \   000058   02....       LJMP      ??ZDApp_ProcessNetworkJoin_6 & 0xFFFF
   1376                    {
   1377                      NLME_StartRouterRequest( 0, 0, false );
   \   00005B                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00005B   7B00         MOV       R3,#0x0
   \   00005D   7A00         MOV       R2,#0x0
   \   00005F   7900         MOV       R1,#0x0
   \   000061   12....       LCALL     `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   \   000064   02....       LJMP      ??ZDApp_ProcessNetworkJoin_6 & 0xFFFF
   1378                    }
   1379                  }
   1380                }
   1381              }
   1382              else
   1383              {
   1384                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   000067   90....       MOV       DPTR,#devStartMode
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   6401         XRL       A,#0x1
   \   00006D   7031         JNZ       ??ZDApp_ProcessNetworkJoin_7
   \   00006F   90....       MOV       DPTR,#retryCnt
   \   000072   E0           MOVX      A,@DPTR
   \   000073   04           INC       A
   \   000074   F0           MOVX      @DPTR,A
   \   000075   C3           CLR       C
   \   000076   9403         SUBB      A,#0x3
   \   000078   4026         JC        ??ZDApp_ProcessNetworkJoin_7
   1385                {
   1386                  if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   00007A   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00007D   7003         JNZ       ??ZDApp_ProcessNetworkJoin_8
   \   00007F   74FF         MOV       A,#-0x1
   \   000081   69           XRL       A,R1
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   000082   600A         JZ        ??ZDApp_ProcessNetworkJoin_9
   \   000084   74FE         MOV       A,#-0x2
   \   000086   68           XRL       A,R0
   \   000087   7003         JNZ       ??ZDApp_ProcessNetworkJoin_10
   \   000089   74FF         MOV       A,#-0x1
   \   00008B   69           XRL       A,R1
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   00008C   7006         JNZ       ??ZDApp_ProcessNetworkJoin_11
   1387                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   00008E   90....       MOV       DPTR,#devStartMode
   \   000091   E4           CLR       A
   \   000092   800B         SJMP      ??ZDApp_ProcessNetworkJoin_12
   1388                  else
   1389                  {
   1390                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   000094   90....       MOV       DPTR,#devStartMode
   \   000097   7403         MOV       A,#0x3
   \   000099   F0           MOVX      @DPTR,A
   1391                    _tmpRejoinState = true;
   \   00009A   90....       MOV       DPTR,#_tmpRejoinState
   \   00009D   7401         MOV       A,#0x1
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   00009F   F0           MOVX      @DPTR,A
   1392                  }
   1393                }
   1394          
   1395                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1396                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   0000A0                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000A0   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000A3   74FE         MOV       A,#-0x2
   \   0000A5   6A           XRL       A,R2
   \   0000A6   7003         JNZ       ??ZDApp_ProcessNetworkJoin_13
   \   0000A8   74FF         MOV       A,#-0x1
   \   0000AA   6B           XRL       A,R3
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000AB   700D         JNZ       ??ZDApp_ProcessNetworkJoin_14
   \   0000AD   90....       MOV       DPTR,#_NIB + 20
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   64FE         XRL       A,#0xfe
   \   0000B3   7003         JNZ       ??ZDApp_ProcessNetworkJoin_15
   \   0000B5   A3           INC       DPTR
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   F4           CPL       A
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   0000B8   601D         JZ        ??ZDApp_ProcessNetworkJoin_16
   1397                {
   1398                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   0000BA   85..82       MOV       DPL,?XSP + 0
   \   0000BD   85..83       MOV       DPH,?XSP + 1
   \   0000C0   74FE         MOV       A,#-0x2
   \   0000C2   F0           MOVX      @DPTR,A
   \   0000C3   A3           INC       DPTR
   \   0000C4   04           INC       A
   \   0000C5   F0           MOVX      @DPTR,A
   1399                  // Invalidate nwk addr so end device does not use in its data reqs.
   1400                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   0000C6   90....       MOV       DPTR,#_NIB + 20
   \   0000C9   14           DEC       A
   \   0000CA   F0           MOVX      @DPTR,A
   \   0000CB   A3           INC       DPTR
   \   0000CC   04           INC       A
   \   0000CD   F0           MOVX      @DPTR,A
   1401                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   \   0000CE                ; Setup parameters for call to function ZMacSetReq
   \   0000CE   AA..         MOV       R2,?XSP + 0
   \   0000D0   AB..         MOV       R3,?XSP + 1
   \   0000D2   7953         MOV       R1,#0x53
   \   0000D4   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1402                }
   1403          
   1404                // Clear the neighbor Table and network discovery tables.
   1405                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   0000D7                ; Setup parameters for call to function nwkNeighborInitTable
   \   0000D7   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1406                NLME_NwkDiscTerm();
   \   0000DA                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0000DA   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1407          
   1408                zdoDiscCounter = 1;
   \   0000DD   90....       MOV       DPTR,#zdoDiscCounter
   \   0000E0   7401         MOV       A,#0x1
   \   0000E2   F0           MOVX      @DPTR,A
   1409          
   1410          //      ZDApp_NetworkInit( (uint16)
   1411          //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
   1412          //                          (NWK_START_DELAY * 5)) );
   1413                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1414                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0000E3                ; Setup parameters for call to function osal_rand
   \   0000E3   02....       LJMP      ??ZDApp_ProcessNetworkJoin_17 & 0xFFFF
   1415              }
   1416            }
   1417            else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   6404         XRL       A,#0x4
   \   0000E9   6003         JZ        $+5
   \   0000EB   02....       LJMP      ??ZDApp_ProcessNetworkJoin_6 & 0xFFFF
   1418            {
   1419              // results of an orphaning attempt by this device
   1420              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   0000EE   90....       MOV       DPTR,#nwkStatus
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   7033         JNZ       ??ZDApp_ProcessNetworkJoin_18
   1421              {
   1422                if ( ZG_SECURE_ENABLED )
   1423                {
   1424                  ZDApp_RestoreNwkKey();
   1425                }
   1426          
   1427                devState = DEV_END_DEVICE;
   \   0000F4   12....       LCALL     ?Subroutine7 & 0xFFFF
   1428                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   1429                // setup Power Manager Device
   1430          #if defined ( POWER_SAVING )
   1431                osal_pwrmgr_device( PWRMGR_BATTERY );
   1432          #endif
   1433          
   1434                if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??CrossCallReturnLabel_1:
   \   0000F7   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   A2E3         MOV       C,0xE0 /* A   */.3
   \   0000FD   5015         JNC       ??ZDApp_ProcessNetworkJoin_19
   1435                {
   1436                  // The receiver is on, turn network layer polling off.
   1437                  NLME_SetPollRate( 0 );
   \   0000FF                ; Setup parameters for call to function NLME_SetPollRate
   \   0000FF   7A00         MOV       R2,#0x0
   \   000101   7B00         MOV       R3,#0x0
   \   000103   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1438                  NLME_SetQueuedPollRate( 0 );
   \   000106                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000106   7A00         MOV       R2,#0x0
   \   000108   7B00         MOV       R3,#0x0
   \   00010A   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1439                  NLME_SetResponseRate( 0 );
   \   00010D                ; Setup parameters for call to function NLME_SetResponseRate
   \   00010D   7A00         MOV       R2,#0x0
   \   00010F   7B00         MOV       R3,#0x0
   \   000111   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   1440                }
   1441          
   1442                if ( ZSTACK_ROUTER_BUILD )
   1443                {
   1444                  // NOTE: first two parameters are not used, see NLMEDE.h for details
   1445                  if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   000114   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000117   6009         JZ        ??ZDApp_ProcessNetworkJoin_20
   1446                  {
   1447                    NLME_StartRouterRequest( 0, 0, false );
   \   000119                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000119   7B00         MOV       R3,#0x0
   \   00011B   7A00         MOV       R2,#0x0
   \   00011D   7900         MOV       R1,#0x0
   \   00011F   12....       LCALL     `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   1448                  }
   1449                }
   1450          
   1451                ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   000122                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000122   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   \   000125   8055         SJMP      ??ZDApp_ProcessNetworkJoin_6
   1452              }
   1453              else
   1454              {
   1455                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   000127   90....       MOV       DPTR,#devStartMode
   \   00012A   E0           MOVX      A,@DPTR
   \   00012B   6401         XRL       A,#0x1
   \   00012D   7039         JNZ       ??ZDApp_ProcessNetworkJoin_21
   1456                {
   1457                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   00012F   90....       MOV       DPTR,#retryCnt
   \   000132   E0           MOVX      A,@DPTR
   \   000133   04           INC       A
   \   000134   F0           MOVX      @DPTR,A
   \   000135   C3           CLR       C
   \   000136   9404         SUBB      A,#0x4
   \   000138   5021         JNC       ??ZDApp_ProcessNetworkJoin_22
   1458                  {
   1459                    if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   00013A   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00013D   7003         JNZ       ??ZDApp_ProcessNetworkJoin_23
   \   00013F   74FF         MOV       A,#-0x1
   \   000141   69           XRL       A,R1
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   000142   601F         JZ        ??ZDApp_ProcessNetworkJoin_24
   \   000144   74FE         MOV       A,#-0x2
   \   000146   68           XRL       A,R0
   \   000147   7003         JNZ       ??ZDApp_ProcessNetworkJoin_25
   \   000149   74FF         MOV       A,#-0x1
   \   00014B   69           XRL       A,R1
   \                     ??ZDApp_ProcessNetworkJoin_25:
   \   00014C   6015         JZ        ??ZDApp_ProcessNetworkJoin_24
   1460                      devStartMode = MODE_JOIN;
   1461                    else
   1462                    {
   1463                      devStartMode = MODE_REJOIN;
   \   00014E   90....       MOV       DPTR,#devStartMode
   \   000151   7403         MOV       A,#0x3
   \   000153   F0           MOVX      @DPTR,A
   1464                      _tmpRejoinState = true;
   \   000154   90....       MOV       DPTR,#_tmpRejoinState
   \   000157   7401         MOV       A,#0x1
   \   000159   800C         SJMP      ??ZDApp_ProcessNetworkJoin_26
   1465                    }
   1466                  }
   1467                  // Do a normal join to the network after certain times of rejoin retries
   1468                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   00015B   90....       MOV       DPTR,#AIB_apsUseInsecureJoin
   \   00015E   E0           MOVX      A,@DPTR
   \   00015F   6401         XRL       A,#0x1
   \   000161   7005         JNZ       ??ZDApp_ProcessNetworkJoin_21
   1469                  {
   1470                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   000163   90....       MOV       DPTR,#devStartMode
   \   000166   E4           CLR       A
   \                     ??ZDApp_ProcessNetworkJoin_26:
   \   000167   F0           MOVX      @DPTR,A
   1471                  }
   1472                }
   1473          
   1474                // Clear the neighbor Table and network discovery tables.
   1475                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   000168                ; Setup parameters for call to function nwkNeighborInitTable
   \   000168   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1476                NLME_NwkDiscTerm();
   \   00016B                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   00016B   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1477          
   1478                // setup a retry for later...
   1479                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1480                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   00016E                ; Setup parameters for call to function osal_rand
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   00016E   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000171                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000171   EA           MOV       A,R2
   \   000172   547F         ANL       A,#0x7f
   \   000174   2464         ADD       A,#0x64
   \   000176   FA           MOV       R2,A
   \   000177   7B00         MOV       R3,#0x0
   \   000179   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   1481              }
   1482            }
   1483          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1484            else
   1485            {
   1486              // Assume from address conflict
   1487              if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   1488              {
   1489                // Notify the network
   1490                ZDApp_AnnounceNewAddress();
   1491          
   1492                // Notify apps
   1493                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   1494              }
   1495            }
   1496          #endif
   1497          }
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   00017C   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV       DPTR,#_NIB + 33
   \   000003   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000006   74FF         MOV       A,#-0x1
   \   000008   68           XRL       A,R0
   \   000009   22           RET
   1498          
   1499          /*********************************************************************
   1500           * @fn      ZDApp_SaveNwkKey()
   1501           *
   1502           * @brief   Save off the Network key information.
   1503           *
   1504           * @param   none
   1505           *
   1506           * @return  none
   1507           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1508          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1509          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1510            nwkActiveKeyItems keyItems;
   1511          
   1512            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   AA..         MOV       R2,?XSP + 0
   \   00000C   AB..         MOV       R3,?XSP + 1
   \   00000E   12....       LCALL     `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
   1513            keyItems.frameCounter++;
   \   000011   90....       MOV       DPTR,#__Constant_1
   \   000014   78..         MOV       R0,#?V0
   \   000016   12....       LCALL     ?L_MOV_X
   \   000019   7411         MOV       A,#0x11
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?L_ADD_TO_X
   1514          
   1515            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1516                          (void *)&keyItems );
   \   000023                ; Setup parameters for call to function osal_nv_write
   \   000023   A8..         MOV       R0,?XSP + 0
   \   000025   A9..         MOV       R1,?XSP + 1
   \   000027   88..         MOV       ?V0,R0
   \   000029   89..         MOV       ?V1,R1
   \   00002B   78..         MOV       R0,#?V0
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   75..15       MOV       ?V0,#0x15
   \   000033   75..00       MOV       ?V1,#0x0
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   1517          
   1518            nwkFrameCounterChanges = 0;
   \   000041   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   000044   E4           CLR       A
   \   000045   F0           MOVX      @DPTR,A
   \   000046   A3           INC       DPTR
   \   000047   F0           MOVX      @DPTR,A
   1519          
   1520            // Clear copy in RAM before return.
   1521            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000048                ; Setup parameters for call to function osal_memset
   \   000048   7C15         MOV       R4,#0x15
   \   00004A   FD           MOV       R5,A
   \   00004B   F9           MOV       R1,A
   \   00004C   AA..         MOV       R2,?XSP + 0
   \   00004E   AB..         MOV       R3,?XSP + 1
   \   000050   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1522          
   1523          }
   \   000053                REQUIRE ?Subroutine1
   \   000053                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7415         MOV       A,#0x15
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine27_0
   \   000005                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   7C00         MOV       R4,#0x0
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A82         MOV       R2,#-0x7e
   \   000006                REQUIRE ??Subroutine28_0
   \   000006                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000005   7404         MOV       A,#0x4
   \   000007   22           RET
   1524          
   1525          /*********************************************************************
   1526           * @fn      ZDApp_ResetNwkKey()
   1527           *
   1528           * @brief   Reset the Network key information in NV.
   1529           *
   1530           * @param   none
   1531           *
   1532           * @return  none
   1533           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1534          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1535          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1536            nwkActiveKeyItems keyItems;
   1537          
   1538            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV       R4,#0x15
   \   00000C   12....       LCALL     ?Subroutine19 & 0xFFFF
   1539            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1540                          (void *)&keyItems );
   \                     ??CrossCallReturnLabel_26:
   \   00000F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000012   75..15       MOV       ?V0,#0x15
   \   000015   75..00       MOV       ?V1,#0x0
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000020   12....       LCALL     ?DEALLOC_XSTACK8
   1541          }
   \   000023   7415         MOV       A,#0x15
   \   000025   02....       LJMP      ??Subroutine32_0 & 0xFFFF
   1542          
   1543          /*********************************************************************
   1544           * @fn      ZDApp_RestoreNwkKey()
   1545           *
   1546           * @brief
   1547           *
   1548           *   Save off the Network key information.
   1549           *
   1550           * @param   none
   1551           *
   1552           * @return  true if restored from NV, false if not
   1553           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1554          uint8 ZDApp_RestoreNwkKey( void )
   \                     ZDApp_RestoreNwkKey:
   1555          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1556            nwkActiveKeyItems keyItems;
   1557            uint8 ret = false;
   \   00000A   7E00         MOV       R6,#0x0
   1558          
   1559            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1560                == ZSUCCESS )
   \   00000C                ; Setup parameters for call to function osal_nv_read
   \   00000C   A8..         MOV       R0,?XSP + 0
   \   00000E   A9..         MOV       R1,?XSP + 1
   \   000010   88..         MOV       ?V0,R0
   \   000012   89..         MOV       ?V1,R1
   \   000014   78..         MOV       R0,#?V0
   \   000016   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000019   75..15       MOV       ?V0,#0x15
   \   00001C   8E..         MOV       ?V1,R6
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   7C00         MOV       R4,#0x0
   \   000025   7D00         MOV       R5,#0x0
   \   000027   7A82         MOV       R2,#-0x7e
   \   000029   7B00         MOV       R3,#0x0
   \   00002B   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00002E   7404         MOV       A,#0x4
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
   \   000033   E9           MOV       A,R1
   \   000034   703A         JNZ       ??ZDApp_RestoreNwkKey_0
   1561            {
   1562              if ( keyItems.frameCounter > 0 )
   \   000036   7411         MOV       A,#0x11
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?XLOAD_R0123
   \   00003E   E8           MOV       A,R0
   \   00003F   49           ORL       A,R1
   \   000040   4A           ORL       A,R2
   \   000041   4B           ORL       A,R3
   \   000042   6022         JZ        ??ZDApp_RestoreNwkKey_1
   1563              {
   1564                // Restore the key information
   1565                keyItems.frameCounter += MAX_NWK_FRAMECOUNTER_CHANGES;
   \   000044   90....       MOV       DPTR,#__Constant_3e8
   \   000047   78..         MOV       R0,#?V0
   \   000049   12....       LCALL     ?L_MOV_X
   \   00004C   7411         MOV       A,#0x11
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   78..         MOV       R0,#?V0
   \   000053   12....       LCALL     ?L_ADD_TO_X
   1566                nwkFrameCounter = keyItems.frameCounter;
   \   000056   7411         MOV       A,#0x11
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ?XLOAD_R0123
   \   00005E   90....       MOV       DPTR,#nwkFrameCounter
   \   000061   12....       LCALL     ?XSTORE_R0123
   1567                ret = true;
   \   000064   7E01         MOV       R6,#0x1
   1568              }
   1569          
   1570              // Force a save for the first frame counter increment
   1571              nwkFrameCounterChanges = MAX_NWK_FRAMECOUNTER_CHANGES + 1;
   \                     ??ZDApp_RestoreNwkKey_1:
   \   000066   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   000069   74E9         MOV       A,#-0x17
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   A3           INC       DPTR
   \   00006D   7403         MOV       A,#0x3
   \   00006F   F0           MOVX      @DPTR,A
   1572            }
   1573            // Clear copy in RAM before return.
   1574            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   000070                ; Setup parameters for call to function osal_memset
   \   000070   7C15         MOV       R4,#0x15
   \   000072   7D00         MOV       R5,#0x0
   \   000074   7900         MOV       R1,#0x0
   \   000076   AA..         MOV       R2,?XSP + 0
   \   000078   AB..         MOV       R3,?XSP + 1
   \   00007A   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1575          
   1576            return ( ret );
   \   00007D   EE           MOV       A,R6
   \   00007E   F9           MOV       R1,A
   \   00007F   02....       LJMP      ?Subroutine1 & 0xFFFF
   1577          }
   1578          
   1579          /*********************************************************************
   1580           * @fn      ZDApp_ResetTimerStart
   1581           *
   1582           * @brief   Start the reset timer.
   1583           *
   1584           * @param   delay - delay time(ms) before reset
   1585           *
   1586           * @return  none
   1587           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1588          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1589          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1590            // Start the rest timer
   1591            osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   000004                ; Setup parameters for call to function osal_start_timerEx
   \   000004   EA           MOV       A,R2
   \   000005   FC           MOV       R4,A
   \   000006   EB           MOV       A,R3
   \   000007   FD           MOV       R5,A
   \   000008   7A04         MOV       R2,#0x4
   \   00000A   12....       LCALL     ?Subroutine16 & 0xFFFF
   1592          }
   \                     ??CrossCallReturnLabel_59:
   \   00000D   80..         SJMP      ?Subroutine3
   1593          
   1594          /*********************************************************************
   1595           * @fn      ZDApp_ResetTimerCancel
   1596           *
   1597           * @brief   Cancel the reset timer.
   1598           *
   1599           * @param   none
   1600           *
   1601           * @return  none
   1602           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1603          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1604          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1605            // Cancel the reset timer
   1606            osal_stop_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET );
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV       R2,#0x4
   \   000006   7B00         MOV       R3,#0x0
   \   000008   90....       MOV       DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1607          }
   \   000010                REQUIRE ?Subroutine3
   \   000010                ; // Fall through to label ?Subroutine3
   1608          
   1609          /*********************************************************************
   1610           * @fn      ZDApp_LeaveCtrlInit
   1611           *
   1612           * @brief   Initialize the leave control logic.
   1613           *
   1614           * @param   none
   1615           *
   1616           * @return  none
   1617           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1618          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1619          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1620            uint8 status;
   1621          
   1622          
   1623            // Initialize control state
   1624            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   12....       LCALL     ?Subroutine8 & 0xFFFF
   1625          
   1626            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1627                                        sizeof(ZDApp_LeaveCtrl),
   1628                                        &ZDApp_LeaveCtrl );
   1629          
   1630            if ( status == ZSUCCESS )
   \                     ??CrossCallReturnLabel_2:
   \   000008   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00000B   7C01         MOV       R4,#0x1
   \   00000D   7D00         MOV       R5,#0x0
   \   00000F   7A85         MOV       R2,#-0x7b
   \   000011   7B00         MOV       R3,#0x0
   \   000013   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000016   7402         MOV       A,#0x2
   \   000018   12....       LCALL     ?DEALLOC_XSTACK8
   \   00001B   E9           MOV       A,R1
   \   00001C   7020         JNZ       ??ZDApp_LeaveCtrlInit_0
   1631            {
   1632              // Read saved control
   1633              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1634                            0,
   1635                            sizeof( uint8 ),
   1636                            &ZDApp_LeaveCtrl);
   \   00001E                ; Setup parameters for call to function osal_nv_read
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV       ?V0,#0x1
   \   000026   75..00       MOV       ?V1,#0x0
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   7C00         MOV       R4,#0x0
   \   000030   7D00         MOV       R5,#0x0
   \   000032   7A85         MOV       R2,#-0x7b
   \   000034   7B00         MOV       R3,#0x0
   \   000036   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000039   7404         MOV       A,#0x4
   \   00003B   12....       LCALL     ?DEALLOC_XSTACK8
   1637            }
   1638          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   00003E   02....       LJMP      ??Subroutine33_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005                ; Setup parameters for call to function osal_nv_write
   \   000005   75....       MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000008   75....       MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   22           RET
   1639          
   1640          /*********************************************************************
   1641           * @fn      ZDApp_LeaveCtrlSet
   1642           *
   1643           * @brief   Set the leave control logic.
   1644           *
   1645           * @param   ra - reassociate flag
   1646           *
   1647           * @return  none
   1648           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1649          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1650          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1651            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV       A,#0x1
   \   00000C   F0           MOVX      @DPTR,A
   1652          
   1653            if ( ra == TRUE )
   \   00000D   6E           XRL       A,R6
   \   00000E   7003         JNZ       ??ZDApp_LeaveCtrlSet_0
   1654            {
   1655              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000010   7403         MOV       A,#0x3
   \   000012   F0           MOVX      @DPTR,A
   1656            }
   1657          
   1658            // Write the leave control
   1659            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1660                           0,
   1661                           sizeof( uint8 ),
   1662                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   75....       MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000016   75....       MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000019   78..         MOV       R0,#?V0
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001E   75..01       MOV       ?V0,#0x1
   \   000021   75..00       MOV       ?V1,#0x0
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   7C00         MOV       R4,#0x0
   \   00002B   7D00         MOV       R5,#0x0
   \   00002D   7A85         MOV       R2,#-0x7b
   \   00002F   12....       LCALL     ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000032   02....       LJMP      ??Subroutine32_0 & 0xFFFF
   1663          }
   1664          
   1665          /*********************************************************************
   1666           * @fn      ZDApp_LeaveCtrlBypass
   1667           *
   1668           * @brief   Check if NV restore should be skipped during a leave reset.
   1669           *
   1670           * @param   none
   1671           *
   1672           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1673           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1674          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1675          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1676            uint8 bypass;
   1677          
   1678            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   1679            {
   1680              bypass = TRUE;
   1681            }
   1682            else
   1683            {
   1684              bypass = FALSE;
   1685            }
   1686          
   1687            return bypass;
   \   000004   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX      A,@DPTR
   \   000008   A2E0         MOV       C,0xE0 /* A   */.0
   \   00000A   E4           CLR       A
   \   00000B   33           RLC       A
   \   00000C   F9           MOV       R1,A
   \   00000D   02....       LJMP      ?Subroutine3 & 0xFFFF
   1688          }
   1689          
   1690          /*********************************************************************
   1691           * @fn      ZDApp_LeaveCtrlStartup
   1692           *
   1693           * @brief   Check for startup conditions during a leave reset.
   1694           *
   1695           * @param   state      - devState_t determined by leave control logic
   1696           * @param   startDelay - startup delay
   1697           *
   1698           * @return  none
   1699           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1700          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   1701          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1702            *startDelay = 0;
   \   000005   8C82         MOV       DPL,R4
   \   000007   8D83         MOV       DPH,R5
   \   000009   E4           CLR       A
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   F0           MOVX      @DPTR,A
   1703          
   1704            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000D   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000010   E0           MOVX      A,@DPTR
   \   000011   A2E0         MOV       C,0xE0 /* A   */.0
   \   000013   5033         JNC       ??ZDApp_LeaveCtrlStartup_0
   1705            {
   1706              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000015   A2E1         MOV       C,0xE0 /* A   */.1
   \   000017   500C         JNC       ??ZDApp_LeaveCtrlStartup_1
   1707              {
   1708                *startDelay = 5000;
   \   000019   8C82         MOV       DPL,R4
   \   00001B   8D83         MOV       DPH,R5
   \   00001D   7488         MOV       A,#-0x78
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   A3           INC       DPTR
   \   000021   7413         MOV       A,#0x13
   \   000023   8005         SJMP      ??ZDApp_LeaveCtrlStartup_2
   1709              }
   1710              else
   1711              {
   1712                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000025   8A82         MOV       DPL,R2
   \   000027   8B83         MOV       DPH,R3
   \   000029   E4           CLR       A
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   00002A   F0           MOVX      @DPTR,A
   1713              }
   1714          
   1715              // Set leave control to initialized state
   1716              ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   00002B   12....       LCALL     ?Subroutine8 & 0xFFFF
   1717          
   1718              // Write initialized control
   1719              osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1720                            0,
   1721                            sizeof( uint8 ),
   1722                            &ZDApp_LeaveCtrl);
   1723            }
   \                     ??CrossCallReturnLabel_3:
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   75..01       MOV       ?V0,#0x1
   \   000034   75..00       MOV       ?V1,#0x0
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7C00         MOV       R4,#0x0
   \   00003E   7D00         MOV       R5,#0x0
   \   000040   7A85         MOV       R2,#-0x7b
   \   000042   12....       LCALL     ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000045   12....       LCALL     ?DEALLOC_XSTACK8
   1724          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   000048   02....       LJMP      ??Subroutine33_0 & 0xFFFF
   1725          
   1726          /*********************************************************************
   1727           * @fn      ZDApp_LeaveReset
   1728           *
   1729           * @brief   Setup a device reset due to a leave indication/confirm.
   1730           *
   1731           * @param   ra - reassociate flag
   1732           *
   1733           * @return  none
   1734           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1735          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   1736          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1737            ZDApp_LeaveCtrlSet( ra );
   \   000005                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000005   12....       LCALL     `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
   1738          
   1739            ZDApp_ResetTimerStart( 5000 );
   \   000008                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000008   7A88         MOV       R2,#-0x78
   \   00000A   7B13         MOV       R3,#0x13
   \   00000C   12....       LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   1740          }
   \   00000F   80..         SJMP      ??Subroutine30_0
   1741          
   1742          /*********************************************************************
   1743           * @fn      ZDApp_LeaveUpdate
   1744           *
   1745           * @brief   Update local device data related to leaving device.
   1746           *
   1747           * @param   nwkAddr        - NWK address of leaving device
   1748           * @param   extAddr        - EXT address of leaving device
   1749           * @param   removeChildren - remove children of leaving device
   1750           *
   1751           * @return  none
   1752           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1753          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   1754                                  uint8 removeChildren )
   1755          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FA           MOV       R2,A
   \   000007   ED           MOV       A,R5
   \   000008   FB           MOV       R3,A
   1756            /*
   1757            AddrMgrEntry_t entry;
   1758            */
   1759            (void)nwkAddr;  // Intentionally unreferenced parameter
   1760          
   1761            // Remove if child
   1762            if ( ZSTACK_ROUTER_BUILD )
   1763            {
   1764              NLME_RemoveChild( extAddr, removeChildren );
   \   000009                ; Setup parameters for call to function NLME_RemoveChild
   \   000009   12....       LCALL     `??NLME_RemoveChild::?relay`; Banked call to: NLME_RemoveChild
   1765            }
   1766          
   1767            /*
   1768            // Set NWK address to invalid
   1769            entry.user    = ADDRMGR_USER_DEFAULT;
   1770            entry.nwkAddr = INVALID_NODE_ADDR;
   1771            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   1772            AddrMgrEntryUpdate( &entry );
   1773          
   1774            // Check
   1775            if ( removeChildren == TRUE )
   1776            {
   1777              // Set index to INVALID_NODE_ADDR to start search
   1778              entry.index = INVALID_NODE_ADDR;
   1779          
   1780              // Get first entry
   1781              AddrMgrEntryGetNext( &entry );
   1782          
   1783              // Remove all descendents
   1784              while ( entry.index != INVALID_NODE_ADDR )
   1785              {
   1786                // Check NWK address allocation algorithm
   1787                if ( RTG_ANCESTOR( entry.nwkAddr, thisAddr ) != 0 )
   1788                {
   1789                  // Set NWK address to invalid
   1790                  entry.nwkAddr = INVALID_NODE_ADDR;
   1791                  AddrMgrEntryUpdate( &entry );
   1792                }
   1793          
   1794                // Get next entry
   1795                AddrMgrEntryGetNext( &entry );
   1796              }
   1797            }
   1798            */
   1799          }
   \   00000C   80..         SJMP      ??Subroutine30_0
   1800          
   1801          /*********************************************************************
   1802           * CALLBACK FUNCTIONS
   1803           */
   1804          
   1805          
   1806          /*********************************************************************
   1807           * @fn      ZDApp_SendEventMsg()
   1808           *
   1809           * @brief
   1810           *
   1811           *   Sends a Network Join message
   1812           *
   1813           * @param  cmd - command ID
   1814           * @param  len - length (in bytes) of the buf field
   1815           * @param  buf - buffer for the rest of the message.
   1816           *
   1817           * @return  none
   1818           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1819          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   1820          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   1821            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000006                ; Setup parameters for call to function ZDApp_SendMsg
   \   000006   FB           MOV       R3,A
   \   000007   E9           MOV       A,R1
   \   000008   FA           MOV       R2,A
   \   000009                REQUIRE ?Subroutine5
   \   000009                ; // Fall through to label ?Subroutine5
   1822          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000003   80..         SJMP      ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   \   000008   22           RET
   1823          
   1824          /*********************************************************************
   1825           * @fn      ZDApp_SendMsg()
   1826           *
   1827           * @brief   Sends a OSAL message
   1828           *
   1829           * @param  taskID - Where to send the message
   1830           * @param  cmd - command ID
   1831           * @param  len - length (in bytes) of the buf field
   1832           * @param  buf - buffer for the rest of the message.
   1833           *
   1834           * @return  none
   1835           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1836          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   1837          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V4,R1
   \   000007   8A..         MOV       ?V6,R2
   \   000009   8B..         MOV       ?V5,R3
   \   00000B   8C..         MOV       ?V2,R4
   \   00000D   8D..         MOV       ?V3,R5
   1838            osal_event_hdr_t *msgPtr;
   1839          
   1840            // Send the address to the task
   1841            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F   AE..         MOV       R6,?V5
   \   000011                ; Setup parameters for call to function osal_msg_allocate
   \   000011   EB           MOV       A,R3
   \   000012   FA           MOV       R2,A
   \   000013   7B00         MOV       R3,#0x0
   \   000015   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000018   8A..         MOV       ?V0,R2
   \   00001A   8B..         MOV       ?V1,R3
   1842            if ( msgPtr )
   \   00001C   EA           MOV       A,R2
   \   00001D   4B           ORL       A,R3
   \   00001E   6035         JZ        ??ZDApp_SendMsg_0
   1843            {
   1844              if ( (len > 0) && (buf != NULL) )
   \   000020   EE           MOV       A,R6
   \   000021   6020         JZ        ??ZDApp_SendMsg_1
   \   000023   E5..         MOV       A,?V2
   \   000025   45..         ORL       A,?V3
   \   000027   601A         JZ        ??ZDApp_SendMsg_1
   1845                osal_memcpy( msgPtr, buf, len );
   \   000029                ; Setup parameters for call to function osal_memcpy
   \   000029   85....       MOV       ?V8,?V2
   \   00002C   85....       MOV       ?V9,?V3
   \   00002F   75..00       MOV       ?V10,#0x0
   \   000032   78..         MOV       R0,#?V8
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000037   EE           MOV       A,R6
   \   000038   FC           MOV       R4,A
   \   000039   7D00         MOV       R5,#0x0
   \   00003B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003E   7403         MOV       A,#0x3
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
   1846          
   1847              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   000043   85..82       MOV       DPL,?V0
   \   000046   85..83       MOV       DPH,?V1
   \   000049   E5..         MOV       A,?V6
   \   00004B   F0           MOVX      @DPTR,A
   1848              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   00004C                ; Setup parameters for call to function osal_msg_send
   \   00004C   AA..         MOV       R2,?V0
   \   00004E   AB..         MOV       R3,?V1
   \   000050   A9..         MOV       R1,?V4
   \   000052   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   1849            }
   1850          }
   \                     ??ZDApp_SendMsg_0:
   \   000055   7F0B         MOV       R7,#0xb
   \   000057   02....       LJMP      ?BANKED_LEAVE_XDATA
   1851          
   1852          /*********************************************************************
   1853           * Call Back Functions from NWK  - API
   1854           */
   1855          
   1856          /*********************************************************************
   1857           * @fn          ZDO_NetworkDiscoveryConfirmCB
   1858           *
   1859           * @brief       This function returns a choice of PAN to join.
   1860           *
   1861           * @param       ResultCount - Number of routers discovered
   1862           * @param               NetworkList - Pointer to list of network descriptors
   1863           *
   1864           * @return      ZStatus_t
   1865           */
   1866          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1867          ZStatus_t ZDO_NetworkDiscoveryConfirmCB( uint8 ResultCount,
   \                     ZDO_NetworkDiscoveryConfirmCB:
   1868                                                   networkDesc_t *NetworkList )
   1869          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V4,R1
   \   00000C   8A..         MOV       ?V6,R2
   \   00000E   8B..         MOV       ?V7,R3
   1870            networkDesc_t *pNwkDesc = NetworkList;
   1871            ZDO_NetworkDiscoveryCfm_t msg;
   1872            uint8 i = ResultCount;
   1873            uint8 stackProfile;
   1874            uint8 stackProfilePro;
   1875            uint8 selected;
   1876          
   1877          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1878            if ( zdappMgmtNwkDiscReqInProgress )
   1879            {
   1880              zdappMgmtNwkDiscReqInProgress = false;
   1881              ZDO_FinishProcessingMgmtNwkDiscReq( ResultCount, NetworkList );
   1882              return ( ZSuccess );
   1883            }
   1884          #endif
   1885          
   1886            // process discovery results
   1887            stackProfilePro = FALSE;
   \   000010   75..00       MOV       ?V5,#0x0
   1888            selected = FALSE;
   1889          
   1890            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000013   75..00       MOV       ?V8,#0x0
   1891            {
   1892              pNwkDesc = NetworkList;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   000016   AE..         MOV       R6,?V6
   \   000018   AF..         MOV       R7,?V7
   1893              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00001A   75..00       MOV       ?V9,#0x0
   \   00001D   8020         SJMP      ??ZDO_NetworkDiscoveryConfirmCB_1
   1894              {
   1895                if ( zgConfigPANID != 0xFFFF )
   1896                {
   1897                  // PAN Id is preconfigured. check if it matches
   1898                  if ( pNwkDesc->panId != zgConfigPANID )
   1899                    continue;
   1900                }
   1901          
   1902          
   1903                if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID) == true )
   1904                {
   1905                  // If the extended Pan ID is commissioned to a non zero value
   1906                  // Only join the Pan that has match EPID
   1907                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   1908                    continue;
   1909          
   1910                }
   1911          
   1912          
   1913                  // check that network is allowing joining
   1914                  if ( ZSTACK_ROUTER_BUILD )
   1915                  {
   1916                    if ( stackProfilePro == FALSE )
   1917                    {
   1918                      if ( !pNwkDesc->routerCapacity )
   1919                      {
   1920                        continue;
   1921                      }
   1922                    }
   1923                    else
   1924                    {
   1925                      if ( !pNwkDesc->deviceCapacity )
   1926                      {
   1927                        continue;
   1928                      }
   1929                    }
   1930                  }
   1931                  else if ( ZSTACK_END_DEVICE_BUILD )
   1932                  {
   1933                    if ( !pNwkDesc->deviceCapacity )
   1934                    {
   1935                      continue;
   1936                    }
   1937                  }
   1938          
   1939                  // check version of zigbee protocol
   1940                  if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   1941                    continue;
   1942          
   1943                  // check version of stack profile
   1944                  if ( pNwkDesc->stackProfile != zgStackProfile  )
   1945                  {
   1946                    if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   1947                        || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_2:
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6402         XRL       A,#0x2
   \   000022   7008         JNZ       ??ZDO_NetworkDiscoveryConfirmCB_3
   \   000024   7401         MOV       A,#0x1
   \   000026   68           XRL       A,R0
   \   000027   7003         JNZ       ??ZDO_NetworkDiscoveryConfirmCB_3
   1948                      stackProfilePro = TRUE;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_4:
   \   000029   75..01       MOV       ?V5,#0x1
   1949          
   1950                    if ( stackProfile == 0 )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_3:
   \   00002C   E5..         MOV       A,?V8
   \   00002E   6003         JZ        $+5
   \   000030   02....       LJMP      ??ZDO_NetworkDiscoveryConfirmCB_5 & 0xFFFF
   \                     ??ZDO_NetworkDiscoveryConfirmCB_6:
   \   000033   05..         INC       ?V9
   \   000035   EE           MOV       A,R6
   \   000036   2416         ADD       A,#0x16
   \   000038   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00003B   FE           MOV       R6,A
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   FF           MOV       R7,A
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   00003F   EE           MOV       A,R6
   \   000040   2407         ADD       A,#0x7
   \   000042   F5..         MOV       ?V0,A
   \   000044   E4           CLR       A
   \   000045   3F           ADDC      A,R7
   \   000046   F5..         MOV       ?V1,A
   \   000048   EE           MOV       A,R6
   \   000049   240D         ADD       A,#0xd
   \   00004B   F5..         MOV       ?V2,A
   \   00004D   E4           CLR       A
   \   00004E   3F           ADDC      A,R7
   \   00004F   F5..         MOV       ?V3,A
   \   000051   E5..         MOV       A,?V9
   \   000053   C3           CLR       C
   \   000054   95..         SUBB      A,?V4
   \   000056   4003         JC        $+5
   \   000058   02....       LJMP      ??ZDO_NetworkDiscoveryConfirmCB_7 & 0xFFFF
   \   00005B   90....       MOV       DPTR,#zgConfigPANID
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F4           CPL       A
   \   000060   7003         JNZ       ??ZDO_NetworkDiscoveryConfirmCB_8
   \   000062   A3           INC       DPTR
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F4           CPL       A
   \                     ??ZDO_NetworkDiscoveryConfirmCB_8:
   \   000065   6013         JZ        ??ZDO_NetworkDiscoveryConfirmCB_9
   \   000067   8E82         MOV       DPL,R6
   \   000069   8F83         MOV       DPH,R7
   \   00006B   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00006E   90....       MOV       DPTR,#zgConfigPANID
   \   000071   E0           MOVX      A,@DPTR
   \   000072   68           XRL       A,R0
   \   000073   7003         JNZ       ??ZDO_NetworkDiscoveryConfirmCB_10
   \   000075   A3           INC       DPTR
   \   000076   E0           MOVX      A,@DPTR
   \   000077   69           XRL       A,R1
   \                     ??ZDO_NetworkDiscoveryConfirmCB_10:
   \   000078   70B9         JNZ       ??ZDO_NetworkDiscoveryConfirmCB_6
   \                     ??ZDO_NetworkDiscoveryConfirmCB_9:
   \   00007A                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   00007A   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   00007C   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00007E   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   000081   E9           MOV       A,R1
   \   000082   6401         XRL       A,#0x1
   \   000084   700E         JNZ       ??ZDO_NetworkDiscoveryConfirmCB_11
   \   000086                ; Setup parameters for call to function sAddrExtCmp
   \   000086   AC..         MOV       R4,?V2
   \   000088   AD..         MOV       R5,?V3
   \   00008A   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   00008C   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00008E   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000091   E9           MOV       A,R1
   \   000092   609F         JZ        ??ZDO_NetworkDiscoveryConfirmCB_6
   \                     ??ZDO_NetworkDiscoveryConfirmCB_11:
   \   000094   E5..         MOV       A,?V5
   \   000096   8E82         MOV       DPL,R6
   \   000098   8F83         MOV       DPH,R7
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   7005         JNZ       ??ZDO_NetworkDiscoveryConfirmCB_12
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   7006         JNZ       ??ZDO_NetworkDiscoveryConfirmCB_13
   \   0000A4   808D         SJMP      ??ZDO_NetworkDiscoveryConfirmCB_6
   \                     ??ZDO_NetworkDiscoveryConfirmCB_12:
   \   0000A6   A3           INC       DPTR
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   6089         JZ        ??ZDO_NetworkDiscoveryConfirmCB_6
   \                     ??ZDO_NetworkDiscoveryConfirmCB_13:
   \   0000AA   85..82       MOV       DPL,?V0
   \   0000AD   85..83       MOV       DPH,?V1
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   F8           MOV       R0,A
   \   0000B2   90....       MOV       DPTR,#_NIB + 17
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   68           XRL       A,R0
   \   0000B7   6003         JZ        $+5
   \   0000B9   02....       LJMP      ??ZDO_NetworkDiscoveryConfirmCB_6 & 0xFFFF
   \   0000BC   8E82         MOV       DPL,R6
   \   0000BE   8F83         MOV       DPH,R7
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   A3           INC       DPTR
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   F8           MOV       R0,A
   \   0000CA   90....       MOV       DPTR,#zgStackProfile
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   68           XRL       A,R0
   \   0000CF   6033         JZ        ??ZDO_NetworkDiscoveryConfirmCB_5
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   6401         XRL       A,#0x1
   \   0000D4   6003         JZ        $+5
   \   0000D6   02....       LJMP      ??ZDO_NetworkDiscoveryConfirmCB_2 & 0xFFFF
   \   0000D9   7402         MOV       A,#0x2
   \   0000DB   68           XRL       A,R0
   \   0000DC   6003         JZ        $+5
   \   0000DE   02....       LJMP      ??ZDO_NetworkDiscoveryConfirmCB_3 & 0xFFFF
   \   0000E1   02....       LJMP      ??ZDO_NetworkDiscoveryConfirmCB_4 & 0xFFFF
   1951                    {
   1952                      continue;
   1953                    }
   1954                  }
   1955          
   1956                // check if beacon order is the right value..
   1957                //  if ( pNwkDesc->beaconOrder < ZDO_CONFIG_MAX_BO )
   1958                //    continue;
   1959          
   1960                // choose this pan for joining
   1961                break;
   1962              }
   1963              if (i < ResultCount)
   1964              {
   1965               selected = TRUE;
   1966                break;
   1967              }
   1968          
   1969              // break if selected or stack profile pro wasn't found
   1970              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_7:
   \   0000E4   E5..         MOV       A,?V5
   \   0000E6   600C         JZ        ??ZDO_NetworkDiscoveryConfirmCB_14
   1971              {
   1972                break;
   1973              }
   1974            }
   \   0000E8   05..         INC       ?V8
   \   0000EA   E5..         MOV       A,?V8
   \   0000EC   C3           CLR       C
   \   0000ED   9402         SUBB      A,#0x2
   \   0000EF   5003         JNC       $+5
   \   0000F1   02....       LJMP      ??ZDO_NetworkDiscoveryConfirmCB_0 & 0xFFFF
   1975          
   1976            if ( i == ResultCount )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_14:
   \   0000F4   E5..         MOV       A,?V4
   \   0000F6   65..         XRL       A,?V9
   \   0000F8   700A         JNZ       ??ZDO_NetworkDiscoveryConfirmCB_5
   1977            {
   1978              msg.hdr.status = ZDO_FAIL;   // couldn't find appropriate PAN to join !
   \   0000FA   7401         MOV       A,#0x1
   \   0000FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FF   7401         MOV       A,#0x1
   \   000101   F0           MOVX      @DPTR,A
   \   000102   8053         SJMP      ??ZDO_NetworkDiscoveryConfirmCB_15
   1979            }
   1980            else
   1981            {
   1982              msg.hdr.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_5:
   \   000104   7401         MOV       A,#0x1
   \   000106   12....       LCALL     ?XSTACK_DISP0_8
   \   000109   E4           CLR       A
   \   00010A   F0           MOVX      @DPTR,A
   1983              msg.panIdLSB = LO_UINT16( pNwkDesc->panId );
   \   00010B   8E82         MOV       DPL,R6
   \   00010D   8F83         MOV       DPH,R7
   \   00010F   E0           MOVX      A,@DPTR
   \   000110   C0E0         PUSH      A
   \   000112   7402         MOV       A,#0x2
   \   000114   12....       LCALL     ?XSTACK_DISP0_8
   \   000117   D0E0         POP       A
   \   000119   F0           MOVX      @DPTR,A
   1984              msg.panIdMSB = HI_UINT16( pNwkDesc->panId );
   \   00011A   8E82         MOV       DPL,R6
   \   00011C   8F83         MOV       DPH,R7
   \   00011E   A3           INC       DPTR
   \   00011F   E0           MOVX      A,@DPTR
   \   000120   C0E0         PUSH      A
   \   000122   7403         MOV       A,#0x3
   \   000124   12....       LCALL     ?XSTACK_DISP0_8
   \   000127   D0E0         POP       A
   \   000129   F0           MOVX      @DPTR,A
   1985              msg.logicalChannel = pNwkDesc->logicalChannel;
   \   00012A   8E82         MOV       DPL,R6
   \   00012C   8F83         MOV       DPH,R7
   \   00012E   A3           INC       DPTR
   \   00012F   A3           INC       DPTR
   \   000130   E0           MOVX      A,@DPTR
   \   000131   C0E0         PUSH      A
   \   000133   7404         MOV       A,#0x4
   \   000135   12....       LCALL     ?XSTACK_DISP0_8
   \   000138   D0E0         POP       A
   \   00013A   12....       LCALL     ?Subroutine10 & 0xFFFF
   1986              msg.version = pNwkDesc->version;
   \                     ??CrossCallReturnLabel_4:
   \   00013D   C0E0         PUSH      A
   \   00013F   7405         MOV       A,#0x5
   \   000141   12....       LCALL     ?XSTACK_DISP0_8
   \   000144   D0E0         POP       A
   \   000146   F0           MOVX      @DPTR,A
   1987              osal_cpyExtAddr( msg.extendedPANID, pNwkDesc->extendedPANID );
   \   000147                ; Setup parameters for call to function sAddrExtCpy
   \   000147   AC..         MOV       R4,?V2
   \   000149   AD..         MOV       R5,?V3
   \   00014B   7406         MOV       A,#0x6
   \   00014D   12....       LCALL     ?XSTACK_DISP0_8
   \   000150   AA82         MOV       R2,DPL
   \   000152   AB83         MOV       R3,DPH
   \   000154   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1988            }
   1989          
   1990            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(ZDO_NetworkDiscoveryCfm_t), (uint8 *)&msg );
   \                     ??ZDO_NetworkDiscoveryConfirmCB_15:
   \   000157                ; Setup parameters for call to function ZDApp_SendMsg
   \   000157   AC..         MOV       R4,?XSP + 0
   \   000159   AD..         MOV       R5,?XSP + 1
   \   00015B   7B0E         MOV       R3,#0xe
   \   00015D   7A01         MOV       R2,#0x1
   \   00015F   12....       LCALL     ?Subroutine17 & 0xFFFF
   1991          
   1992            return (ZSuccess);
   \                     ??CrossCallReturnLabel_21:
   \   000162   7900         MOV       R1,#0x0
   \   000164   740E         MOV       A,#0xe
   \   000166   12....       LCALL     ?DEALLOC_XSTACK8
   \   000169   7F0A         MOV       R7,#0xa
   \   00016B   02....       LJMP      ?BANKED_LEAVE_XDATA
   1993          }  // ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET
   1994          
   1995          /*********************************************************************
   1996           * @fn          ZDO_NetworkFormationConfirmCB
   1997           *
   1998           * @brief       This function reports the results of the request to
   1999           *              initialize a coordinator in a network.
   2000           *
   2001           * @param       Status - Result of NLME_NetworkFormationRequest()
   2002           *
   2003           * @return      none
   2004           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000003                REQUIRE ??Subroutine30_0
   \   000003                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2005          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2006          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   2007            nwkStatus = (byte)Status;
   \   000006   90....       MOV       DPTR,#nwkStatus
   \   000009   F0           MOVX      @DPTR,A
   2008          
   2009            if ( Status == ZSUCCESS )
   \   00000A   700A         JNZ       ??ZDO_NetworkFormationConfirmCB_0
   2010            {
   2011              // LED on shows Coordinator started
   2012              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   12....       LCALL     ?Subroutine21 & 0xFFFF
   2013          
   2014              // LED off forgets HOLD_AUTO_START
   2015              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   2016          
   2017          #if defined ( ZBIT )
   2018              SIM_SetColor(0xd0ffd0);
   2019          #endif
   2020          
   2021              if ( devState == DEV_HOLD )
   \                     ??CrossCallReturnLabel_27:
   \   00000F   700C         JNZ       ??ZDO_NetworkFormationConfirmCB_1
   2022              {
   2023                // Began with HOLD_AUTO_START
   2024                devState = DEV_COORD_STARTING;
   \   000011   7408         MOV       A,#0x8
   \   000013   F0           MOVX      @DPTR,A
   \   000014   8007         SJMP      ??ZDO_NetworkFormationConfirmCB_1
   2025              }
   2026            }
   2027          #if defined(BLINK_LEDS)
   2028            else
   2029            {
   2030              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   000016                ; Setup parameters for call to function HalLedSet
   \   000016   7A04         MOV       R2,#0x4
   \   000018   7904         MOV       R1,#0x4
   \   00001A   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   2031            }
   2032          #endif
   2033          
   2034            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   00001D                ; Setup parameters for call to function osal_set_event
   \   00001D   7A02         MOV       R2,#0x2
   \   00001F   02....       LJMP      ?Subroutine0 & 0xFFFF
   2035          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   7A01         MOV       R2,#0x1
   \   000002   7904         MOV       R1,#0x4
   \   000004   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007   7A00         MOV       R2,#0x0
   \   000009   7908         MOV       R1,#0x8
   \   00000B   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00000E   90....       MOV       DPTR,#devState
   \   000011   E0           MOVX      A,@DPTR
   \   000012   22           RET
   2036          
   2037          /*********************************************************************
   2038           * @fn          ZDO_StartRouterConfirmCB
   2039           *
   2040           * @brief       This function reports the results of the request to
   2041           *              start functioning as a router in a network.
   2042           *
   2043           * @param       Status - Result of NLME_StartRouterRequest()
   2044           *
   2045           * @return      none
   2046           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2047          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2048          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   2049            nwkStatus = (byte)Status;
   \   000006   90....       MOV       DPTR,#nwkStatus
   \   000009   F0           MOVX      @DPTR,A
   2050          
   2051            if ( Status == ZSUCCESS )
   \   00000A   700A         JNZ       ??ZDO_StartRouterConfirmCB_0
   2052            {
   2053              // LED on shows Router started
   2054              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   12....       LCALL     ?Subroutine21 & 0xFFFF
   2055              // LED off forgets HOLD_AUTO_START
   2056              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2057              if ( devState == DEV_HOLD )
   \                     ??CrossCallReturnLabel_28:
   \   00000F   700C         JNZ       ??ZDO_StartRouterConfirmCB_1
   2058              {
   2059                // Began with HOLD_AUTO_START
   2060                devState = DEV_END_DEVICE;
   \   000011   7406         MOV       A,#0x6
   \   000013   F0           MOVX      @DPTR,A
   \   000014   8007         SJMP      ??ZDO_StartRouterConfirmCB_1
   2061              }
   2062            }
   2063          #if defined(BLINK_LEDS)
   2064            else
   2065            {
   2066              HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000016                ; Setup parameters for call to function HalLedSet
   \   000016   7A04         MOV       R2,#0x4
   \   000018   7904         MOV       R1,#0x4
   \   00001A   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   2067            }
   2068          #endif
   2069          
   2070            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_1:
   \   00001D                ; Setup parameters for call to function osal_set_event
   \   00001D   7A20         MOV       R2,#0x20
   \   00001F   02....       LJMP      ?Subroutine0 & 0xFFFF
   2071          }
   2072          
   2073          /*********************************************************************
   2074           * @fn          ZDO_JoinConfirmCB
   2075           *
   2076           * @brief       This function allows the next hight layer to be notified
   2077           *              of the results of its request to join itself or another
   2078           *              device to a network.
   2079           *
   2080           * @param       Status - Result of NLME_JoinRequest()
   2081           *
   2082           * @return      none
   2083           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2084          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2085          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   2086            (void)PanId;  // remove if this parameter is used.
   2087          
   2088            nwkStatus = (byte)Status;
   \   000006   90....       MOV       DPTR,#nwkStatus
   \   000009   F0           MOVX      @DPTR,A
   2089          
   2090            if ( Status == ZSUCCESS )
   \   00000A   700A         JNZ       ??ZDO_JoinConfirmCB_0
   2091            {
   2092              // LED on shows device joined
   2093              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   12....       LCALL     ?Subroutine21 & 0xFFFF
   2094              // LED off forgets HOLD_AUTO_START
   2095              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2096              if ( (devState == DEV_HOLD) )
   \                     ??CrossCallReturnLabel_29:
   \   00000F   700C         JNZ       ??ZDO_JoinConfirmCB_1
   2097              {
   2098                // Began with HOLD_AUTO_START
   2099                devState = DEV_NWK_JOINING;
   \   000011   7403         MOV       A,#0x3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   8007         SJMP      ??ZDO_JoinConfirmCB_1
   2100              }
   2101          
   2102              if ( !ZG_SECURE_ENABLED )
   2103              {
   2104                // Notify to save info into NV
   2105                ZDApp_NVUpdate();
   2106              }
   2107            }
   2108            else
   2109            {
   2110          #if defined(BLINK_LEDS)
   2111              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_JoinConfirmCB_0:
   \   000016                ; Setup parameters for call to function HalLedSet
   \   000016   7A04         MOV       R2,#0x4
   \   000018   7904         MOV       R1,#0x4
   \   00001A   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   2112          #endif
   2113            }
   2114          
   2115            // Notify ZDApp
   2116            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_1:
   \   00001D                ; Setup parameters for call to function ZDApp_SendMsg
   \   00001D   7C00         MOV       R4,#0x0
   \   00001F   7D00         MOV       R5,#0x0
   \   000021   7B02         MOV       R3,#0x2
   \   000023   7A02         MOV       R2,#0x2
   \   000025   02....       LJMP      ?Subroutine5 & 0xFFFF
   2117          }
   2118          
   2119          /*********************************************************************
   2120           * @fn          ZDO_AddrChangeIndicationCB
   2121           *
   2122           * @brief       This function notifies the application that this
   2123           *              device's address has changed.  Could happen in
   2124           *              a network with stochastic addressing (PRO).
   2125           *
   2126           * @param       newAddr - the new address
   2127           *
   2128           * @return      none
   2129           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2130          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2131          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2132            (void)newAddr;  // remove if this parameter is used
   2133          
   2134            // Notify to save info into NV
   2135            ZDApp_NVUpdate();
   2136          
   2137            // Notify the applications
   2138            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000004                ; Setup parameters for call to function osal_set_event
   \   000004   12....       LCALL     ?Subroutine11 & 0xFFFF
   2139          
   2140            // Send out a device announce
   2141            ZDApp_AnnounceNewAddress();
   \                     ??CrossCallReturnLabel_37:
   \   000007                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000007   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   2142          }
   \   00000A   02....       LJMP      ?Subroutine3 & 0xFFFF
   2143          
   2144          /*********************************************************************
   2145           * @fn          ZDO_JoinIndicationCB
   2146           *
   2147           * @brief       This function allows the next higher layer of a
   2148           *              coordinator to be notified of a remote join request.
   2149           *
   2150           * @param       ShortAddress - 16-bit address
   2151           * @param       ExtendedAddress - IEEE (64-bit) address
   2152           * @param       CapabilityFlags - Association Capability Flags
   2153           * @param       type - of joining -
   2154           *                          NWK_ASSOC_JOIN
   2155           *                          NWK_ASSOC_REJOIN_UNSECURE
   2156           *                          NWK_ASSOC_REJOIN_SECURE
   2157           *
   2158           * @return      ZStatus_t
   2159           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2160          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2161                                          uint8 CapabilityFlags, uint8 type)
   2162          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2163            (void)ShortAddress;
   2164            (void)ExtendedAddress;
   2165          #if ZDO_NV_SAVE_RFDs
   2166            (void)CapabilityFlags;
   2167          
   2168          #else  // if !ZDO_NV_SAVE_RFDs
   2169            if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   2170          #endif
   2171            {
   2172              ZDApp_NVUpdate();  // Notify to save info into NV.
   2173            }
   2174          
   2175            if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   2176            {
   2177              if (type == NWK_ASSOC_JOIN || type == NWK_ASSOC_REJOIN_UNSECURE)
   2178              {
   2179                osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 600 );
   2180              }
   2181            }
   2182          
   2183            return ZSuccess;
   \   000000                REQUIRE ?Subroutine4
   \   000000                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
   2184          }
   2185          
   2186          /*********************************************************************
   2187           * @fn          ZDO_ConcentratorIndicationCB
   2188           *
   2189           * @brief       This function allows the next higher layer of a
   2190           *              device to be notified of existence of the concentrator.
   2191           *
   2192           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2193           * @param       extAddr - pointer to extended Address
   2194           *                        NULL if not available
   2195           * @param       pktCost - PktCost from RREQ
   2196           *
   2197           * @return      void
   2198           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2199          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   2200          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2201            zdoConcentratorInd_t conInd;
   2202          
   2203            conInd.nwkAddr = nwkAddr;
   \   00000A   12....       LCALL     ?Subroutine9 & 0xFFFF
   2204            conInd.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_45:
   \   00000D   7402         MOV       A,#0x2
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   EC           MOV       A,R4
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   ED           MOV       A,R5
   \   000016   F0           MOVX      @DPTR,A
   2205            conInd.pktCost = pktCost;
   \   000017   7404         MOV       A,#0x4
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E9           MOV       A,R1
   \   00001D   F0           MOVX      @DPTR,A
   2206          
   2207            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   00001E   90....       MOV       DPTR,#zdoCBFunc + 2
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F8           MOV       R0,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   8882         MOV       DPL,R0
   \   000027   F583         MOV       DPH,A
   \   000029   E582         MOV       A,DPL
   \   00002B   4583         ORL       A,DPH
   \   00002D   6007         JZ        ??ZDO_ConcentratorIndicationCB_0
   2208          {
   2209              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   00002F                ; Setup parameters for indirect call
   \   00002F   AA..         MOV       R2,?XSP + 0
   \   000031   AB..         MOV       R3,?XSP + 1
   \   000033   12....       LCALL     ?CALL_IND
   2210            }
   2211          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   000036                REQUIRE ?Subroutine6
   \   000036                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7405         MOV       A,#0x5
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005   02....       LJMP      ??Subroutine30_0 & 0xFFFF
   2212          
   2213          /*********************************************************************
   2214           * @fn          ZDO_LeaveCnf
   2215           *
   2216           * @brief       This function allows the next higher layer to be
   2217           *              notified of the results of its request for this or
   2218           *              a child device to leave the network.
   2219           *
   2220           * @param       cnf - NLME_LeaveCnf_t
   2221           *
   2222           * @return      none
   2223           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2224          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2225          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   2226            // Check for this device
   2227            if ( osal_ExtAddrEqual( cnf->extAddr,
   2228                                    NLME_GetExtAddr() ) == TRUE )
   \   000009   EA           MOV       A,R2
   \   00000A   2402         ADD       A,#0x2
   \   00000C   FE           MOV       R6,A
   \   00000D   E4           CLR       A
   \   00000E   35..         ADDC      A,?V1
   \   000010   FF           MOV       R7,A
   \   000011                ; Setup parameters for call to function sAddrExtCmp
   \   000011                ; Setup parameters for call to function NLME_GetExtAddr
   \   000011   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000014   EA           MOV       A,R2
   \   000015   FC           MOV       R4,A
   \   000016   EB           MOV       A,R3
   \   000017   FD           MOV       R5,A
   \   000018   EE           MOV       A,R6
   \   000019   FA           MOV       R2,A
   \   00001A   EF           MOV       A,R7
   \   00001B   FB           MOV       R3,A
   \   00001C   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00001F   E9           MOV       A,R1
   \   000020   6401         XRL       A,#0x1
   \   000022   7012         JNZ       ??ZDO_LeaveCnf_0
   2229            {
   2230              // Prepare to leave with reset
   2231              ZDApp_LeaveReset( cnf->rejoin );
   \   000024                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000024   E5..         MOV       A,?V0
   \   000026   240B         ADD       A,#0xb
   \   000028   F582         MOV       DPL,A
   \   00002A   E4           CLR       A
   \   00002B   35..         ADDC      A,?V1
   \   00002D   F583         MOV       DPH,A
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F9           MOV       R1,A
   \   000031   12....       LCALL     `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   000034   8022         SJMP      ??ZDO_LeaveCnf_1
   2232            }
   2233            else if ( ZSTACK_ROUTER_BUILD )
   2234            {
   2235              // Remove device address(optionally descendents) from data
   2236              ZDApp_LeaveUpdate( cnf->dstAddr,
   2237                                 cnf->extAddr,
   2238                                 cnf->removeChildren );
   \                     ??ZDO_LeaveCnf_0:
   \   000036                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   000036   85..82       MOV       DPL,?V0
   \   000039   85..83       MOV       DPH,?V1
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F9           MOV       R1,A
   \   000048   EE           MOV       A,R6
   \   000049   FC           MOV       R4,A
   \   00004A   EF           MOV       A,R7
   \   00004B   FD           MOV       R5,A
   \   00004C   85..82       MOV       DPL,?V0
   \   00004F   85..83       MOV       DPH,?V1
   \   000052   12....       LCALL     ?Subroutine13 & 0xFFFF
   2239            }
   \                     ??CrossCallReturnLabel_10:
   \   000055   12....       LCALL     `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   2240          }
   \                     ??ZDO_LeaveCnf_1:
   \   000058   02....       LJMP      ??Subroutine33_0 & 0xFFFF
   2241          
   2242          /*********************************************************************
   2243           * @fn          ZDO_LeaveInd
   2244           *
   2245           * @brief       This function allows the next higher layer of a
   2246           *              device to be notified of a remote leave request or
   2247           *              indication.
   2248           *
   2249           * @param       ind - NLME_LeaveInd_t
   2250           *
   2251           * @return      none
   2252           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2253          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2254          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2255            uint8 leave;
   2256          
   2257          
   2258            // Parent is requesting the leave - NWK layer filters out illegal
   2259            // requests
   2260            if ( ind->request == TRUE )
   \   00000E   EA           MOV       A,R2
   \   00000F   240B         ADD       A,#0xb
   \   000011   F8           MOV       R0,A
   \   000012   E4           CLR       A
   \   000013   3F           ADDC      A,R7
   \   000014   88..         MOV       ?V0,R0
   \   000016   F5..         MOV       ?V1,A
   \   000018   EA           MOV       A,R2
   \   000019   240C         ADD       A,#0xc
   \   00001B   08           INC       R0
   \   00001C   E4           CLR       A
   \   00001D   3F           ADDC      A,R7
   \   00001E   88..         MOV       ?V2,R0
   \   000020   F5..         MOV       ?V3,A
   \   000022   8A82         MOV       DPL,R2
   \   000024   8B83         MOV       DPH,R3
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   6401         XRL       A,#0x1
   \   000033   7022         JNZ       ??ZDO_LeaveInd_0
   2261            {
   2262              // Notify network of leave
   2263              if ( ZSTACK_ROUTER_BUILD )
   2264              {
   2265                NLME_LeaveRsp_t rsp;
   2266                rsp.rejoin         = ind->rejoin;
   \   000035   8882         MOV       DPL,R0
   \   000037   85..83       MOV       DPH,?V3
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   C0E0         PUSH      A
   \   00003D   7401         MOV       A,#0x1
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   D0E0         POP       A
   \   000044   12....       LCALL     ?Subroutine10 & 0xFFFF
   2267                rsp.removeChildren = ind->removeChildren;
   \                     ??CrossCallReturnLabel_5:
   \   000047   85..82       MOV       DPL,?XSP + 0
   \   00004A   85..83       MOV       DPH,?XSP + 1
   \   00004D   F0           MOVX      @DPTR,A
   2268                NLME_LeaveRsp( &rsp );
   \   00004E                ; Setup parameters for call to function NLME_LeaveRsp
   \   00004E   AA..         MOV       R2,?XSP + 0
   \   000050   AB..         MOV       R3,?XSP + 1
   \   000052   12....       LCALL     `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
   2269              }
   2270          
   2271              // Prepare to leave with reset
   2272              ZDApp_LeaveReset( ind->rejoin );
   \   000055                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000055   802A         SJMP      ??ZDO_LeaveInd_1
   2273            }
   2274            else
   2275            {
   2276              leave = FALSE;
   2277          
   2278              // Check if this device needs to leave as a child or descendent
   2279              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   000057                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000057   12....       LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   00005A   8A..         MOV       ?V4,R2
   \   00005C   8B..         MOV       ?V5,R3
   \   00005E   85..82       MOV       DPL,?V0
   \   000061   85..83       MOV       DPH,?V1
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F9           MOV       R1,A
   \   000066   8E82         MOV       DPL,R6
   \   000068   8F83         MOV       DPH,R7
   \   00006A   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00006D   E5..         MOV       A,?V4
   \   00006F   6A           XRL       A,R2
   \   000070   7003         JNZ       ??ZDO_LeaveInd_2
   \   000072   E5..         MOV       A,?V5
   \   000074   6B           XRL       A,R3
   \                     ??ZDO_LeaveInd_2:
   \   000075   7017         JNZ       ??ZDO_LeaveInd_3
   2280              {
   2281                if ( ( ind->removeChildren == TRUE               ) ||
   2282                     ( ZDO_Config_Node_Descriptor.LogicalType ==
   2283                       NODETYPE_DEVICE                           )    )
   \   000077   7401         MOV       A,#0x1
   \   000079   69           XRL       A,R1
   \   00007A   6005         JZ        ??ZDO_LeaveInd_1
   \   00007C   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00007F   700D         JNZ       ??ZDO_LeaveInd_3
   2284                {
   2285                  leave = TRUE;
   2286                }
   2287              }
   2288              else if ( ind->removeChildren == TRUE )
   2289              {
   2290                // Check NWK address allocation algorithm
   2291                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   2292              }
   2293          
   2294              if ( leave == TRUE )
   2295              {
   2296                // Prepare to leave with reset
   2297                ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_1:
   \   000081                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000081   85..82       MOV       DPL,?V2
   \   000084   85..83       MOV       DPH,?V3
   \   000087   E0           MOVX      A,@DPTR
   \   000088   F9           MOV       R1,A
   \   000089   12....       LCALL     `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   00008C   800A         SJMP      ??ZDO_LeaveInd_4
   2298              }
   2299              else
   2300              {
   2301                // Remove device address(optionally descendents) from data
   2302                ZDApp_LeaveUpdate( ind->srcAddr,
   2303                                   ind->extAddr,
   2304                                   ind->removeChildren );
   \                     ??ZDO_LeaveInd_3:
   \   00008E                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   00008E   EE           MOV       A,R6
   \   00008F   2402         ADD       A,#0x2
   \   000091   FC           MOV       R4,A
   \   000092   E4           CLR       A
   \   000093   3F           ADDC      A,R7
   \   000094   FD           MOV       R5,A
   \   000095   12....       LCALL     `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   2305              }
   2306            }
   2307          }
   \                     ??ZDO_LeaveInd_4:
   \   000098   7402         MOV       A,#0x2
   \   00009A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009D   7F06         MOV       R7,#0x6
   \   00009F   02....       LJMP      ?BANKED_LEAVE_XDATA
   2308          
   2309          /*********************************************************************
   2310           * @fn          ZDO_SyncIndicationCB
   2311           *
   2312           * @brief       This function allows the next higher layer of a
   2313           *              coordinator to be notified of a loss of synchronization
   2314           *                          with the parent/child device.
   2315           *
   2316           * @param       type: 0 - child; 1 - parent
   2317           *
   2318           *
   2319           * @return      none
   2320           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2321          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   2322          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2323            (void)shortAddr;  // Remove this line if this parameter is used.
   2324          
   2325            if ( ZSTACK_END_DEVICE_BUILD
   2326              || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   \   000007   90....       MOV       DPTR,#_NIB + 14
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000D   4013         JC        ??CrossCallReturnLabel_22
   2327            {
   2328              if ( type == 1 )
   \   00000F   7401         MOV       A,#0x1
   \   000011   6E           XRL       A,R6
   \   000012   700E         JNZ       ??CrossCallReturnLabel_22
   2329              {
   2330                // We lost contact with our parent.  Clear the neighbor Table.
   2331                nwkNeighborInitTable();
   \   000014                ; Setup parameters for call to function nwkNeighborInitTable
   \   000014   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   2332          
   2333                // Start the rejoin process.
   2334                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   000017                ; Setup parameters for call to function ZDApp_SendMsg
   \   000017   7C00         MOV       R4,#0x0
   \   000019   7D00         MOV       R5,#0x0
   \   00001B   7B02         MOV       R3,#0x2
   \   00001D   7A03         MOV       R2,#0x3
   \   00001F   12....       LCALL     ?Subroutine17 & 0xFFFF
   2335              }
   2336            }
   2337          }
   \                     ??CrossCallReturnLabel_22:
   \   000022   02....       LJMP      ??Subroutine30_0 & 0xFFFF
   2338          
   2339          /*********************************************************************
   2340           * @fn          ZDO_ManytoOneFailureIndicationCB
   2341           *
   2342           * @brief       This function allows the next higher layer of a
   2343           *              concentrator to be notified of a many-to-one route
   2344           *              failure.
   2345           *
   2346           * @param       none
   2347           *
   2348           *
   2349           * @return      none
   2350           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2351          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   2352          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2353            // By default, the concentrator automatically redo many-to-one route
   2354            // discovery to update all many-to-one routes in the network
   2355            // If you want anything processing other than the default,
   2356            // please replace the following code.
   2357          
   2358            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL     `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
   2359          }
   \   000007   02....       LJMP      ?Subroutine3 & 0xFFFF
   2360          
   2361          /*********************************************************************
   2362           * @fn          ZDO_PollConfirmCB
   2363           *
   2364           * @brief       This function allows the next higher layer to be
   2365           *              notified of a Poll Confirm.
   2366           *
   2367           * @param       none
   2368           *
   2369           * @return      none
   2370           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2371          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   2372          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2373            (void)status;  // Remove this line if this parameter is used.
   2374            return;
   \   000000   02....       LJMP      ?BRET
   2375          }
   2376          
   2377          /******************************************************************************
   2378           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   2379           *
   2380           * @brief       Stub routine implemented by NHLE. NHLE should call
   2381           *              <AddrMgrWriteNV> when appropriate.
   2382           *
   2383           * @param       none
   2384           *
   2385           * @return      none
   2386           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2387          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   2388          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2389          #if defined ( NV_RESTORE )
   2390            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   2391            {
   2392              // Trigger to save info into NV
   2393              ZDApp_NVUpdate();
   2394            }
   2395          #endif
   2396          }
   \   000000   02....       LJMP      ?BRET
   2397          
   2398          /*********************************************************************
   2399           * Call Back Functions from Security  - API
   2400           */
   2401          
   2402           /*********************************************************************
   2403           * @fn          ZDO_UpdateDeviceIndication
   2404           *
   2405           * @brief       This function notifies the "Trust Center" of a
   2406           *              network when a device joins or leaves the network.
   2407           *
   2408           * @param       extAddr - pointer to 64 bit address of new device
   2409           * @param       status  - 0 if a new device joined securely
   2410           *                      - 1 if a new device joined un-securely
   2411           *                      - 2 if a device left the network
   2412           *
   2413           * @return      true if newly joined device should be allowed to
   2414           *                                              remain on network
   2415           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2416          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   2417          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2418            // can implement a network access policy based on the
   2419            // IEEE address of newly joining devices...
   2420            (void)extAddr;
   2421            (void)status;
   2422          
   2423            return ZSuccess;
   \   000000   02....       LJMP      ?Subroutine4 & 0xFFFF
   2424          }
   2425          
   2426          /*********************************************************************
   2427           * @fn          ZDApp_InMsgCB
   2428           *
   2429           * @brief       This function is called to pass up any message that is
   2430           *              not yet supported.  This allows for the developer to
   2431           *              support features themselves..
   2432           *
   2433           * @return      none
   2434           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2435          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   2436          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2437            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   EA           MOV       A,R2
   \   00000A   240C         ADD       A,#0xc
   \   00000C   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00000F   F8           MOV       R0,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F9           MOV       R1,A
   \   000013   5480         ANL       A,#0x80
   \   000015   7043         JNZ       ??ZDApp_InMsgCB_0
   2438            {
   2439              // Handle the response message
   2440            }
   2441            else
   2442            {
   2443              // Handle the request message by sending a generic "not supported".
   2444              // Device Announce doesn't have a response.
   2445              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   000017   EA           MOV       A,R2
   \   000018   240B         ADD       A,#0xb
   \   00001A   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00001D   703B         JNZ       ??ZDApp_InMsgCB_0
   \   00001F   7413         MOV       A,#0x13
   \   000021   68           XRL       A,R0
   \   000022   7001         JNZ       ??ZDApp_InMsgCB_1
   \   000024   E9           MOV       A,R1
   \                     ??ZDApp_InMsgCB_1:
   \   000025   6033         JZ        ??ZDApp_InMsgCB_0
   2446              {
   2447                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   2448                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   000027                ; Setup parameters for call to function ZDP_GenericRsp
   \   000027   E8           MOV       A,R0
   \   000028   F5..         MOV       ?V0,A
   \   00002A   E9           MOV       A,R1
   \   00002B   4480         ORL       A,#0x80
   \   00002D   F5..         MOV       ?V1,A
   \   00002F   78..         MOV       R0,#?V0
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000034   E4           CLR       A
   \   000035   F5..         MOV       ?V0,A
   \   000037   F5..         MOV       ?V1,A
   \   000039   78..         MOV       R0,#?V0
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   EA           MOV       A,R2
   \   00003F   240E         ADD       A,#0xe
   \   000041   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   2449              }
   2450            }
   \                     ??CrossCallReturnLabel_66:
   \   000044   FD           MOV       R5,A
   \   000045   7C84         MOV       R4,#-0x7c
   \   000047   EA           MOV       A,R2
   \   000048   2402         ADD       A,#0x2
   \   00004A   FA           MOV       R2,A
   \   00004B   E4           CLR       A
   \   00004C   3F           ADDC      A,R7
   \   00004D   FB           MOV       R3,A
   \   00004E   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000051   F9           MOV       R1,A
   \   000052   12....       LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000055   7404         MOV       A,#0x4
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
   2451          }
   \                     ??ZDApp_InMsgCB_0:
   \   00005A   02....       LJMP      ??Subroutine33_0 & 0xFFFF
   2452          
   2453          
   2454          /*********************************************************************
   2455           * @fn      ZDApp_ChangeMatchDescRespPermission()
   2456           *
   2457           * @brief   Changes the Match Descriptor Response permission.
   2458           *
   2459           * @param   endpoint - endpoint to allow responses
   2460           * @param   action - true to allow responses, false to not
   2461           *
   2462           * @return  none
   2463           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2464          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   2465          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2466            // Store the action
   2467            afSetMatch( endpoint, action );
   \   000005                ; Setup parameters for call to function afSetMatch
   \   000005   12....       LCALL     `??afSetMatch::?relay`; Banked call to: afSetMatch
   2468          }
   \   000008   02....       LJMP      ??Subroutine30_0 & 0xFFFF
   2469          
   2470          /*********************************************************************
   2471           * @fn      ZDApp_NetworkInit()
   2472           *
   2473           * @brief   Used to start the network joining process
   2474           *
   2475           * @param   delay - mSec delay to wait before starting
   2476           *
   2477           * @return  none
   2478           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2479          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   2480          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2481            if ( delay )
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   600B         JZ        ??ZDApp_NetworkInit_0
   2482            {
   2483              // Wait awhile before starting the device
   2484              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   000008                ; Setup parameters for call to function osal_start_timerEx
   \   000008   EA           MOV       A,R2
   \   000009   FC           MOV       R4,A
   \   00000A   EB           MOV       A,R3
   \   00000B   FD           MOV       R5,A
   \   00000C   7A01         MOV       R2,#0x1
   \   00000E   12....       LCALL     ?Subroutine16 & 0xFFFF
   2485            }
   \                     ??CrossCallReturnLabel_60:
   \   000011   8005         SJMP      ??CrossCallReturnLabel_40
   2486            else
   2487            {
   2488              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   000013                ; Setup parameters for call to function osal_set_event
   \   000013   7A01         MOV       R2,#0x1
   \   000015   12....       LCALL     ??Subroutine24_0 & 0xFFFF
   2489            }
   2490          }
   \                     ??CrossCallReturnLabel_40:
   \   000018   02....       LJMP      ?Subroutine3 & 0xFFFF
   2491          
   2492          /*********************************************************************
   2493           * @fn      ZDApp_NwkStateUpdateCB()
   2494           *
   2495           * @brief   This function notifies that this device's network
   2496           *          state info has been changed.
   2497           *
   2498           * @param   none
   2499           *
   2500           * @return  none
   2501           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2502          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   2503          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2504            // Notify to save info into NV
   2505            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV       R2,#0x0
   \   000006   7B02         MOV       R3,#0x2
   \   000008   90....       MOV       DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   2506            {
   2507              // Trigger to save info into NV
   2508              ZDApp_NVUpdate();
   2509            }
   2510          }
   \   000010   02....       LJMP      ?Subroutine3 & 0xFFFF
   2511          
   2512          /*********************************************************************
   2513           * @fn      ZDApp_NodeProfileSync()
   2514           *
   2515           * @brief   Sync node with stack profile.
   2516           *
   2517           * @param   cfm - ZDO_NetworkDiscoveryCfm_t
   2518           *
   2519           * @return  none
   2520           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2521          void ZDApp_NodeProfileSync( ZDO_NetworkDiscoveryCfm_t* cfm )
   \                     ZDApp_NodeProfileSync:
   2522          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2523            networkDesc_t* desc;
   2524            uint16         panID;
   2525          
   2526            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000005   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000008   E0           MOVX      A,@DPTR
   \   000009   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000B   5055         JNC       ??ZDApp_NodeProfileSync_0
   2527            {
   2528              panID = BUILD_UINT16( cfm->panIdLSB, cfm->panIdMSB );
   2529          
   2530              desc = nwk_getNetworkDesc( cfm->extendedPANID, panID, cfm->logicalChannel );
   \   00000D                ; Setup parameters for call to function nwk_getNetworkDesc
   \   00000D   8A82         MOV       DPL,R2
   \   00000F   8B83         MOV       DPH,R3
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F9           MOV       R1,A
   \   000017   8A82         MOV       DPL,R2
   \   000019   8B83         MOV       DPH,R3
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   FE           MOV       R6,A
   \   00001F   8A82         MOV       DPL,R2
   \   000021   8B83         MOV       DPH,R3
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   FD           MOV       R5,A
   \   000028   EE           MOV       A,R6
   \   000029   FC           MOV       R4,A
   \   00002A   EA           MOV       A,R2
   \   00002B   2406         ADD       A,#0x6
   \   00002D   FA           MOV       R2,A
   \   00002E   5001         JNC       ??ZDApp_NodeProfileSync_1
   \   000030   0B           INC       R3
   \                     ??ZDApp_NodeProfileSync_1:
   \   000031   12....       LCALL     `??nwk_getNetworkDesc::?relay`; Banked call to: nwk_getNetworkDesc
   \   000034   8A82         MOV       DPL,R2
   \   000036   8B83         MOV       DPH,R3
   2531          
   2532              if (desc != NULL)
   \   000038   E582         MOV       A,DPL
   \   00003A   4583         ORL       A,DPH
   \   00003C   6024         JZ        ??ZDApp_NodeProfileSync_0
   2533              {
   2534                if ( desc->stackProfile != zgStackProfile )
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F8           MOV       R0,A
   \   000048   90....       MOV       DPTR,#zgStackProfile
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   68           XRL       A,R0
   \   00004D   6013         JZ        ??ZDApp_NodeProfileSync_0
   2535                {
   2536                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   00004F   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000052   E0           MOVX      A,@DPTR
   \   000053   54F8         ANL       A,#0xf8
   \   000055   4402         ORL       A,#0x2
   \   000057   F0           MOVX      @DPTR,A
   2537                  ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   000058   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00005B   740C         MOV       A,#0xc
   \   00005D   F0           MOVX      @DPTR,A
   2538                  NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   00005E                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   00005E   F9           MOV       R1,A
   \   00005F   12....       LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
   2539                }
   2540              }
   2541            }
   2542          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000062   80..         SJMP      ??Subroutine33_0
   2543          
   2544          /*********************************************************************
   2545           * @fn      ZDApp_StartJoiningCycle()
   2546           *
   2547           * @brief   Starts the joining cycle of a device.  This will only
   2548           *          continue an already started (or stopped) joining cycle.
   2549           *
   2550           * @param   none
   2551           *
   2552           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   2553           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2554          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   2555          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2556            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   6005         JZ        ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6402         XRL       A,#0x2
   \   00000F   7011         JNZ       ??ZDApp_StartJoiningCycle_1
   2557            {
   2558              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   90....       MOV       DPTR,#continueJoining
   \   000014   7401         MOV       A,#0x1
   \   000016   F0           MOVX      @DPTR,A
   2559              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV       R2,#0x0
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   2560          
   2561              return ( TRUE );
   \   00001E   7901         MOV       R1,#0x1
   \   000020   8002         SJMP      ??ZDApp_StartJoiningCycle_2
   2562            }
   2563            else
   2564              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV       R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP      ?Subroutine3 & 0xFFFF
   2565          }
   2566          
   2567          /*********************************************************************
   2568           * @fn      ZDApp_StopJoiningCycle()
   2569           *
   2570           * @brief   Stops the joining or rejoining process of a device.
   2571           *
   2572           * @param   none
   2573           *
   2574           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   2575           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2576          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   2577          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2578            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   6005         JZ        ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6402         XRL       A,#0x2
   \   00000F   7009         JNZ       ??ZDApp_StopJoiningCycle_1
   2579            {
   2580              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000011   90....       MOV       DPTR,#continueJoining
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
   2581              return ( TRUE );
   \   000016   7901         MOV       R1,#0x1
   \   000018   8002         SJMP      ??ZDApp_StopJoiningCycle_2
   2582            }
   2583            else
   2584              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001A   7900         MOV       R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   00001C   02....       LJMP      ?Subroutine3 & 0xFFFF
   2585          }
   2586          
   2587          /*********************************************************************
   2588           * @fn      ZDApp_AnnounceNewAddress()
   2589           *
   2590           * @brief   Send Device Announce and hold all transmissions for
   2591           *          new address timeout.
   2592           *
   2593           * @param   none
   2594           *
   2595           * @return  none
   2596           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2597          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   2598          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2599          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   2600            // Turn off data request hold
   2601            APSME_HoldDataRequests( 0 );
   2602          #endif
   2603          
   2604            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   2605                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   000005                ; Setup parameters for call to function NLME_GetExtAddr
   \   000005   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000008   8A..         MOV       ?V0,R2
   \   00000A   8B..         MOV       ?V1,R3
   \   00000C   AE..         MOV       R6,?V0
   \   00000E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000E   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000011                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000011   75..00       MOV       ?V0,#0x0
   \   000014   78..         MOV       R0,#?V0
   \   000016   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000019   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F9           MOV       R1,A
   \   00001E   EE           MOV       A,R6
   \   00001F   FC           MOV       R4,A
   \   000020   AD..         MOV       R5,?V1
   \   000022   12....       LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   000025   7401         MOV       A,#0x1
   \   000027   80..         SJMP      ??Subroutine32_0
   2606          
   2607          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   2608            // Setup the timeout
   2609            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   2610          #endif
   2611          }
   2612          
   2613          /*********************************************************************
   2614           * @fn          ZDApp_NVUpdate
   2615           *
   2616           * @brief       Set the NV Update Timer.
   2617           *
   2618           * @param       none
   2619           *
   2620           * @return      none
   2621           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2622          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   2623          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2624          #if defined ( NV_RESTORE )
   2625            osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   2626          #endif
   2627          }
   \   000000   02....       LJMP      ?BRET
   2628          
   2629          /*********************************************************************
   2630           * @fn      ZDApp_CoordStartPANIDConflictCB()
   2631           *
   2632           * @brief   Returns a PAN ID for the network layer to use during
   2633           *          a coordinator start and there is another network with
   2634           *          the intended PANID.
   2635           *
   2636           * @param   panid - the intended PAN ID
   2637           *
   2638           * @return  PANID to try
   2639           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2640          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   2641          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2642            return ( panid + 1 );
   \   000000   EA           MOV       A,R2
   \   000001   2401         ADD       A,#0x1
   \   000003   0A           INC       R2
   \   000004   5001         JNC       ??ZDApp_CoordStartPANIDConflictCB_0
   \   000006   0B           INC       R3
   \                     ??ZDApp_CoordStartPANIDConflictCB_0:
   \   000007   02....       LJMP      ?BRET
   2643          }
   2644          
   2645          /*********************************************************************
   2646           * @fn          ZDO_SrcRtgIndCB
   2647           *
   2648           * @brief       This function notifies the ZDO available src route record received.
   2649           *
   2650           * @param       srcAddr - source address of the source route
   2651           * @param       relayCnt - number of devices in the relay list
   2652           * @param       relayList - relay list of the source route
   2653           *
   2654           * @return      none
   2655           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2656          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   2657          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2658            zdoSrcRtg_t srcRtg;
   2659          
   2660            srcRtg.srcAddr = srcAddr;
   \   00000A   12....       LCALL     ?Subroutine9 & 0xFFFF
   2661            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_46:
   \   00000D   7402         MOV       A,#0x2
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E9           MOV       A,R1
   \   000013   F0           MOVX      @DPTR,A
   2662            srcRtg.pRelayList = pRelayList;
   \   000014   7403         MOV       A,#0x3
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   EC           MOV       A,R4
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   ED           MOV       A,R5
   \   00001D   F0           MOVX      @DPTR,A
   2663          
   2664            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001E   90....       MOV       DPTR,#zdoCBFunc
   \   000021   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000024   600C         JZ        ??ZDO_SrcRtgIndCB_0
   2665            {
   2666              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV       R2,?XSP + 0
   \   000028   AB..         MOV       R3,?XSP + 1
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F583         MOV       DPH,A
   \   00002D   8882         MOV       DPL,R0
   \   00002F   12....       LCALL     ?CALL_IND
   2667            }
   2668          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000032   02....       LJMP      ?Subroutine6 & 0xFFFF
   2669          
   2670          
   2671          /*********************************************************************
   2672           * @fn          ZDO_RegisterForZdoCB
   2673           *
   2674           * @brief       Call this function to register the higher layer (for
   2675           *              example, the Application layer or MT layer) with ZDO
   2676           *              callbacks to get notified of some ZDO indication like
   2677           *              existence of a concentrator or receipt of a source
   2678           *              route record.
   2679           *
   2680           * @param       indID - ZDO Indication ID
   2681           * @param       pFn   - Callback function pointer
   2682           *
   2683           * @return      ZSuccess - successful, ZInvalidParameter if not
   2684           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2685          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   2686          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   2687            // Check the range of the indication ID
   2688            if ( indID < MAX_ZDO_CB_FUNC )
   \   000005   C3           CLR       C
   \   000006   9402         SUBB      A,#0x2
   \   000008   5017         JNC       ??ZDO_RegisterForZdoCB_0
   2689            {
   2690              zdoCBFunc[indID] = pFn;
   \   00000A   E9           MOV       A,R1
   \   00000B   29           ADD       A,R1
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   33           RLC       A
   \   00000F   F9           MOV       R1,A
   \   000010   74..         MOV       A,#zdoCBFunc & 0xff
   \   000012   28           ADD       A,R0
   \   000013   F582         MOV       DPL,A
   \   000015   74..         MOV       A,#(zdoCBFunc >> 8) & 0xff
   \   000017   39           ADDC      A,R1
   \   000018   F583         MOV       DPH,A
   \   00001A   12....       LCALL     ??Subroutine25_0 & 0xFFFF
   2691              return ZSuccess;
   \                     ??CrossCallReturnLabel_43:
   \   00001D   7900         MOV       R1,#0x0
   \   00001F   8002         SJMP      ??ZDO_RegisterForZdoCB_1
   2692            }
   2693          
   2694            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000021   7902         MOV       R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000023   02....       LJMP      ?Subroutine3 & 0xFFFF
   2695          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devStartMode>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....         DW ZDAppTaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SecInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDOInitDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ReadNetworkRestoreState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppDetermineDeviceType::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkStartEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceAuthEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNetworkStateEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNetworkState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNetworkState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitUserDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppCheckForHoldKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessOSALMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RegisterCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessNetworkJoin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerStart::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerCancel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlBypass::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlStartup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendEventMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkDiscoveryConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkFormationConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartRouterConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AddrChangeIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConcentratorIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveCnf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SyncIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ManytoOneFailureIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PollConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AddrMgrWriteNVRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateDeviceIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InMsgCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ChangeMatchDescRespPermission::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkStateUpdateCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NodeProfileSync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StartJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StopJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_AnnounceNewAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NVUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_CoordStartPANIDConflictCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SrcRtgIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB
   2696          
   2697          /*********************************************************************
   2698          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   AddrMgrWriteNVRequest
      2      9   ZDAppCheckForHoldKey
        2      0   -> HalKeyRead
      2     12   ZDAppDetermineDeviceType
        2      0   -> nwk_ExtPANIDValid
      0     23   ZDApp_AnnounceNewAddress
        0     10   -> NLME_GetExtAddr
        0     10   -> NLME_GetShortAddr
        0     11   -> ZDP_DeviceAnnce
      0      9   ZDApp_ChangeMatchDescRespPermission
        0      9   -> afSetMatch
      0      0   ZDApp_CoordStartPANIDConflictCB
      2      9   ZDApp_DeviceAuthEvt
        2      0   -> NLME_SetPollRate
        2      0   -> NLME_StartRouterRequest
        2      0   -> ZDApp_AnnounceNewAddress
        2      0   -> ZDApp_ResetTimerCancel
        2      0   -> ZDApp_SaveNwkKey
        2      0   -> osal_set_event
      0     14   ZDApp_InMsgCB
        0     14   -> ZDP_GenericRsp
      0      9   ZDApp_Init
        0      9   -> HalLedBlink
        0      9   -> NLME_GetExtAddr
        0      9   -> ZDAppCheckForHoldKey
        0      9   -> ZDApp_InitUserDesc
        0      9   -> ZDApp_RegisterCBs
        0      9   -> ZDOInitDevice
        0      9   -> ZDO_Init
        0      9   -> afRegister
      0     40   ZDApp_InitUserDesc
        0     27   -> osal_memset
        0     29   -> osal_nv_item_init
        0     31   -> osal_nv_read
      2      0   ZDApp_LeaveCtrlBypass
      0     26   ZDApp_LeaveCtrlInit
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
      0     23   ZDApp_LeaveCtrlSet
        0     14   -> osal_nv_write
      0     26   ZDApp_LeaveCtrlStartup
        0     14   -> osal_nv_write
      0     25   ZDApp_LeaveReset
        0      9   -> ZDApp_LeaveCtrlSet
        0      9   -> ZDApp_ResetTimerStart
      0     25   ZDApp_LeaveUpdate
        0      9   -> NLME_RemoveChild
      0      0   ZDApp_NVUpdate
      2     12   ZDApp_NetworkInit
        2      0   -> osal_set_event
        2      0   -> osal_start_timerEx
      2     12   ZDApp_NetworkStartEvt
        2      0   -> NLME_GetEnergyThreshold
        2      0   -> NLME_SetEnergyThreshold
        2      0   -> osal_pwrmgr_device
        2      0   -> osal_set_event
      0     10   ZDApp_NodeProfileSync
        0     10   -> NLME_SetBroadcastFilter
        0     10   -> nwk_getNetworkDesc
      2      0   ZDApp_NwkStateUpdateCB
        2      0   -> osal_get_timeoutEx
      0     54   ZDApp_ProcessMsgCBs
        0     54   -> ZDMatchSendState
        0     54   -> ZDO_MatchEndDeviceBind
        0     54   -> ZDO_ParseAddrRsp
        0     54   -> ZDO_ParseBindUnbindReq
        0     54   -> ZDO_ParseEndDeviceBindReq
        0     54   -> ZDO_ProcessBindUnbindReq
        0     54   -> ZDO_UpdateAddrManager
        0     54   -> osal_mem_free
      0     12   ZDApp_ProcessNetworkJoin
        0     12   -> NLME_GetShortAddr
        0     12   -> NLME_NwkDiscTerm
        0     12   -> NLME_SetPollRate
        0     12   -> NLME_SetQueuedPollRate
        0     12   -> NLME_SetResponseRate
        0     12   -> NLME_StartRouterRequest
        0     12   -> ZDApp_AnnounceNewAddress
        0     12   -> ZDApp_NetworkInit
        0     12   -> ZMacSetReq
        0     12   -> nwkNeighborInitTable
        0     12   -> osal_rand
        0     12   -> osal_set_event
      2     12   ZDApp_ProcessOSALMsg
        2      0   -> ZDApp_ProcessMsgCBs
        2      0   -> ZDP_IncomingData
      0      9   ZDApp_ProcessSecEvent
        0      9   -> ZDApp_DeviceAuthEvt
        0      9   -> ZDApp_SaveNwkKey
        0      9   -> ZDSecMgrNewDeviceEvent
        0      9   -> ZDSecMgrSaveTCLinkKey
        0      9   -> osal_start_timerEx
      2      0   ZDApp_ProcessSecMsg
        2      0   -> ZDSecMgrUpdateDeviceInd
      0      9   ZDApp_ReadNetworkRestoreState
        0      9   -> zgReadStartupOptions
      2      9   ZDApp_RegisterCBs
        2      0   -> ZDO_RegisterForZDOMsg
      0     35   ZDApp_ResetNwkKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      2      0   ZDApp_ResetTimerCancel
        2      0   -> osal_stop_timerEx
      2      9   ZDApp_ResetTimerStart
        2      0   -> osal_start_timerEx
      0      9   ZDApp_RestoreNetworkState
        0      9   -> NLME_GetShortAddr
        0      9   -> NLME_InitNV
        0      9   -> NLME_RestoreFromNV
        0      9   -> sAddrExtCpy
      0     37   ZDApp_RestoreNwkKey
        0     33   -> osal_memset
        0     37   -> osal_nv_read
      0      0   ZDApp_SaveNetworkStateEvt
      0     46   ZDApp_SaveNwkKey
        0     33   -> SSP_ReadNwkActiveKey
        0     33   -> osal_memset
        0     37   -> osal_nv_write
      0      9   ZDApp_SecInit
        0      9   -> ZDSecMgrInit
      0      9   ZDApp_SendEventMsg
        0      9   -> ZDApp_SendMsg
      1     54   ZDApp_SendMsg
        0     22   -> osal_memcpy
        0     19   -> osal_msg_allocate
        0     19   -> osal_msg_send
      2      0   ZDApp_StartJoiningCycle
        2      0   -> ZDApp_NetworkInit
      2      0   ZDApp_StopJoiningCycle
      0     12   ZDApp_event_loop
        0     12   -> Onboard_soft_reset
        0     12   -> ZDApp_NetworkStartEvt
        0     12   -> ZDApp_ProcessOSALMsg
        0     12   -> ZDO_StartDevice
        0     12   -> ZDO_UpdateNwkStatus
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> osal_pwrmgr_device
        0     12   -> osal_set_event
        0     12   -> osal_start_timerEx
      0     21   ZDOInitDevice
        0     12   -> NLME_SetBroadcastFilter
        0     12   -> ZDAppDetermineDeviceType
        0     12   -> ZDApp_LeaveCtrlInit
        0     12   -> ZDApp_LeaveCtrlStartup
        0     12   -> ZDApp_NetworkInit
        0     12   -> ZDConfig_InitDescriptors
        0     12   -> ZDSecMgrInit
        0     12   -> osal_rand
        0     12   -> osal_set_event
        0     12   -> zgInitItems
        0     12   -> zgWriteStartupOptions
      2      0   ZDO_AddrChangeIndicationCB
        2      0   -> ZDApp_AnnounceNewAddress
        2      0   -> osal_set_event
      1     14   ZDO_ConcentratorIndicationCB
      0      9   ZDO_JoinConfirmCB
        0      9   -> HalLedSet
        0      9   -> ZDApp_SendMsg
      0      1   ZDO_JoinIndicationCB
      0     10   ZDO_LeaveCnf
        0     10   -> NLME_GetExtAddr
        0     10   -> ZDApp_LeaveReset
        0     10   -> ZDApp_LeaveUpdate
        0     10   -> sAddrExtCmp
      1     16   ZDO_LeaveInd
        0     16   -> NLME_GetCoordShortAddr
        0     16   -> NLME_LeaveRsp
        0     16   -> ZDApp_LeaveReset
        0     16   -> ZDApp_LeaveUpdate
      2      0   ZDO_ManytoOneFailureIndicationCB
        2      0   -> RTG_MTORouteReq
      1     32   ZDO_NetworkDiscoveryConfirmCB
        0     32   -> ZDApp_SendMsg
        0     32   -> nwk_ExtPANIDValid
        0     32   -> sAddrExtCmp
        0     32   -> sAddrExtCpy
      0      9   ZDO_NetworkFormationConfirmCB
        0      9   -> HalLedSet
        0      9   -> osal_set_event
      0      0   ZDO_PollConfirmCB
      2      0   ZDO_RegisterForZdoCB
      1     14   ZDO_SrcRtgIndCB
      0      9   ZDO_StartRouterConfirmCB
        0      9   -> HalLedSet
        0      9   -> osal_set_event
      0      9   ZDO_SyncIndicationCB
        0      9   -> ZDApp_SendMsg
        0      9   -> nwkNeighborInitTable
      0      0   ZDO_UpdateDeviceIndication


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDApp_SavedPollRate>
       6  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for devStartMode>
       1  ?<Initializer for devState>
       1  ?<Initializer for zdoDiscCounter>
      11  ??Subroutine24_0
       6  ??Subroutine25_0
       9  ??Subroutine26_0
       5  ??Subroutine27_0
       8  ??Subroutine28_0
       6  ??Subroutine29_0
       5  ??Subroutine30_0
       8  ??Subroutine31_0
       3  ??Subroutine32_0
       5  ??Subroutine33_0
       3  ?Subroutine0
       5  ?Subroutine1
       9  ?Subroutine10
       2  ?Subroutine11
       2  ?Subroutine12
       6  ?Subroutine13
       9  ?Subroutine14
       6  ?Subroutine15
       5  ?Subroutine16
       9  ?Subroutine17
      10  ?Subroutine18
      22  ?Subroutine19
       2  ?Subroutine2
       3  ?Subroutine20
      19  ?Subroutine21
       6  ?Subroutine22
       6  ?Subroutine23
       7  ?Subroutine3
       5  ?Subroutine4
       5  ?Subroutine5
       8  ?Subroutine6
      19  ?Subroutine7
      14  ?Subroutine8
       6  ?Subroutine9
       3  AddrMgrWriteNVRequest
       6  AddrMgrWriteNVRequest::?relay
       1  MatchRsps
      20  ZDAppCheckForHoldKey
       6  ZDAppCheckForHoldKey::?relay
      77  ZDAppDetermineDeviceType
       6  ZDAppDetermineDeviceType::?relay
       9  ZDAppNwkAddr
       1  ZDAppTaskID
      41  ZDApp_AnnounceNewAddress
       6  ZDApp_AnnounceNewAddress::?relay
       2  ZDApp_AutoFindMode_epDesc
      11  ZDApp_ChangeMatchDescRespPermission
       6  ZDApp_ChangeMatchDescRespPermission::?relay
      10  ZDApp_CoordStartPANIDConflictCB
       6  ZDApp_CoordStartPANIDConflictCB::?relay
      58  ZDApp_DeviceAuthEvt
       6  ZDApp_DeviceAuthEvt::?relay
      93  ZDApp_InMsgCB
       6  ZDApp_InMsgCB::?relay
      78  ZDApp_Init
       6  ZDApp_Init::?relay
      93  ZDApp_InitUserDesc
       6  ZDApp_InitUserDesc::?relay
       1  ZDApp_LeaveCtrl
      16  ZDApp_LeaveCtrlBypass
       6  ZDApp_LeaveCtrlBypass::?relay
      65  ZDApp_LeaveCtrlInit
       6  ZDApp_LeaveCtrlInit::?relay
      53  ZDApp_LeaveCtrlSet
       6  ZDApp_LeaveCtrlSet::?relay
      75  ZDApp_LeaveCtrlStartup
       6  ZDApp_LeaveCtrlStartup::?relay
      17  ZDApp_LeaveReset
       6  ZDApp_LeaveReset::?relay
      14  ZDApp_LeaveUpdate
       6  ZDApp_LeaveUpdate::?relay
       3  ZDApp_NVUpdate
       6  ZDApp_NVUpdate::?relay
      27  ZDApp_NetworkInit
       6  ZDApp_NetworkInit::?relay
      82  ZDApp_NetworkStartEvt
       6  ZDApp_NetworkStartEvt::?relay
     100  ZDApp_NodeProfileSync
       6  ZDApp_NodeProfileSync::?relay
      19  ZDApp_NwkStateUpdateCB
       6  ZDApp_NwkStateUpdateCB::?relay
     247  ZDApp_ProcessMsgCBs
       6  ZDApp_ProcessMsgCBs::?relay
     383  ZDApp_ProcessNetworkJoin
       6  ZDApp_ProcessNetworkJoin::?relay
      52  ZDApp_ProcessOSALMsg
       6  ZDApp_ProcessOSALMsg::?relay
     127  ZDApp_ProcessSecEvent
       6  ZDApp_ProcessSecEvent::?relay
      19  ZDApp_ProcessSecMsg
       6  ZDApp_ProcessSecMsg::?relay
      23  ZDApp_ReadNetworkRestoreState
       6  ZDApp_ReadNetworkRestoreState::?relay
      48  ZDApp_RegisterCBs
       6  ZDApp_RegisterCBs::?relay
      40  ZDApp_ResetNwkKey
       6  ZDApp_ResetNwkKey::?relay
      16  ZDApp_ResetTimerCancel
       6  ZDApp_ResetTimerCancel::?relay
      15  ZDApp_ResetTimerStart
       6  ZDApp_ResetTimerStart::?relay
      71  ZDApp_RestoreNetworkState
       6  ZDApp_RestoreNetworkState::?relay
     130  ZDApp_RestoreNwkKey
       6  ZDApp_RestoreNwkKey::?relay
       3  ZDApp_SaveNetworkStateEvt
       6  ZDApp_SaveNetworkStateEvt::?relay
      83  ZDApp_SaveNwkKey
       6  ZDApp_SaveNwkKey::?relay
       2  ZDApp_SavedPollRate
      11  ZDApp_SecInit
       6  ZDApp_SecInit::?relay
       9  ZDApp_SendEventMsg
       6  ZDApp_SendEventMsg::?relay
      90  ZDApp_SendMsg
       6  ZDApp_SendMsg::?relay
      39  ZDApp_StartJoiningCycle
       6  ZDApp_StartJoiningCycle::?relay
      31  ZDApp_StopJoiningCycle
       6  ZDApp_StopJoiningCycle::?relay
       6  ZDApp_epDesc
     207  ZDApp_event_loop
       6  ZDApp_event_loop::?relay
     131  ZDOInitDevice
       6  ZDOInitDevice::?relay
      13  ZDO_AddrChangeIndicationCB
       6  ZDO_AddrChangeIndicationCB::?relay
      54  ZDO_ConcentratorIndicationCB
       6  ZDO_ConcentratorIndicationCB::?relay
      40  ZDO_JoinConfirmCB
       6  ZDO_JoinConfirmCB::?relay
       0  ZDO_JoinIndicationCB
       6  ZDO_JoinIndicationCB::?relay
      91  ZDO_LeaveCnf
       6  ZDO_LeaveCnf::?relay
     162  ZDO_LeaveInd
       6  ZDO_LeaveInd::?relay
      10  ZDO_ManytoOneFailureIndicationCB
       6  ZDO_ManytoOneFailureIndicationCB::?relay
     366  ZDO_NetworkDiscoveryConfirmCB
       6  ZDO_NetworkDiscoveryConfirmCB::?relay
      34  ZDO_NetworkFormationConfirmCB
       6  ZDO_NetworkFormationConfirmCB::?relay
       3  ZDO_PollConfirmCB
       6  ZDO_PollConfirmCB::?relay
      38  ZDO_RegisterForZdoCB
       6  ZDO_RegisterForZdoCB::?relay
      53  ZDO_SrcRtgIndCB
       6  ZDO_SrcRtgIndCB::?relay
      34  ZDO_StartRouterConfirmCB
       6  ZDO_StartRouterConfirmCB::?relay
      37  ZDO_SyncIndicationCB
       6  ZDO_SyncIndicationCB::?relay
       3  ZDO_UpdateDeviceIndication
       6  ZDO_UpdateDeviceIndication::?relay
       8  ZDO_UseExtendedPANID
       4  __Constant_1
       4  __Constant_3e8
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       2  nwkFrameCounterChanges
       1  nwkStatus
       1  retryCnt
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
       4  zdoCBFunc
       1  zdoDiscCounter

 
 3 922 bytes in segment BANKED_CODE
   342 bytes in segment BANK_RELAYS
    12 bytes in segment XDATA_I
    12 bytes in segment XDATA_ID
     8 bytes in segment XDATA_ROM_C
    44 bytes in segment XDATA_Z
 
   354 bytes of CODE     memory
     0 bytes of CONST    memory (+ 8 bytes shared)
 3 922 bytes of HUGECODE memory
    56 bytes of XDATA    memory

Errors: none
Warnings: none
