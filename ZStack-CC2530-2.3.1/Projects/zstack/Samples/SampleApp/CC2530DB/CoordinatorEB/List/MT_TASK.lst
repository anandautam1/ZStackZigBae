###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               12/Sep/2018  03:56:54
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.20
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\mt\MT_TASK.c
#    Command line       =  
#        -f C:\Users\ANANDA~1\AppData\Local\Temp\EW5834.tmp ("C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\mt\MT_TASK.c"
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\MT_TASK.lst
#    Object file        =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\MT_TASK.r51
#
###############################################################################

C:\Users\Ananda Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\mt\MT_TASK.c
      1          /***************************************************************************************************
      2            Filename:       MT_TASK.c
      3            Revised:        $Date: 2010-04-20 16:45:06 -0700 (Tue, 20 Apr 2010) $
      4            Revision:       $Revision: 22262 $
      5          
      6            Description:    MonitorTest Task handling routines
      7          
      8            Copyright 2007-2010 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT_TASK.h"
     45          #include "MT.h"
     46          #include "MT_DEBUG.h"
     47          #include "MT_UART.h"
     48          #include "MT_UTIL.h"
     49          #include "MT_SYS.h"
     50          #include "MT_ZDO.h"
     51          
     52          #if !defined( NONWK )
     53          #include "MT_AF.h"
     54          #endif  /* NONWK */
     55          
     56          #include "hal_uart.h"
     57          #include "OSAL_Memory.h"
     58          
     59          /***************************************************************************************************
     60           * LOCAL FUNCTIONS
     61           ***************************************************************************************************/
     62          void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg );
     63          
     64          /***************************************************************************************************
     65           * GLOBALS
     66           ***************************************************************************************************/
     67          
     68          /***************************************************************************************************
     69           * @fn      MT_TaskInit
     70           *
     71           * @brief  MonitorTest Task Initialization.  This function is put into the
     72           *         task table.
     73           *
     74           * @param   byte task_id - task ID of the MT Task
     75           *
     76           * @return  void
     77           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     78          void MT_TaskInit(uint8 task_id)
   \                     MT_TaskInit:
     79          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
     80            /* Initialize the Serial port */
     81            MT_UartInit();
   \   000007                ; Setup parameters for call to function MT_UartInit
   \   000007   12....       LCALL     `??MT_UartInit::?relay`; Banked call to: MT_UartInit
     82          
     83            /* Register taskID - Do this after UartInit() because it will reset the taskID */
     84            MT_UartRegisterTaskID(task_id);
   \   00000A                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00000A   EE           MOV       A,R6
   \   00000B   F9           MOV       R1,A
   \   00000C   12....       LCALL     `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
     85          
     86            /* Initialize MT */
     87            MT_Init(task_id);
   \   00000F                ; Setup parameters for call to function MT_Init
   \   00000F   EE           MOV       A,R6
   \   000010   F9           MOV       R1,A
   \   000011   12....       LCALL     `??MT_Init::?relay`; Banked call to: MT_Init
     88          }
   \   000014   7F01         MOV       R7,#0x1
   \   000016   02....       LJMP      ?BANKED_LEAVE_XDATA
     89          
     90          /***************************************************************************************************
     91           * @fn      MT_ProcessEvent
     92           *
     93           * @brief MonitorTest Task Event Processor.  This task is put into the task table.
     94           *
     95           * @param   byte task_id - task ID of the MT Task
     96           * @param   UINT16 events - event(s) for the MT Task
     97           *
     98           * @return  void
     99           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    100          UINT16 MT_ProcessEvent(uint8 task_id, uint16 events)
   \                     MT_ProcessEvent:
    101          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    102            uint8 *msg_ptr;
    103          
    104            (void)task_id;  // Intentionally unreferenced parameter
    105          
    106            /* Could be multiple events, so switch won't work */
    107            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL       A,#0x80
   \   00000B   700E         JNZ       ??MT_ProcessEvent_0
    108            {
    109              while ( (msg_ptr = osal_msg_receive( MT_TaskID )) )
    110              {
    111                MT_ProcessIncomingCommand((mtOSALSerialData_t *)msg_ptr);
    112              }
    113          
    114              /* Return unproccessed events */
    115              return (events ^ SYS_EVENT_MSG);
    116            }
    117          
    118            if ( events & MT_ZTOOL_SERIAL_RCV_BUFFER_FULL )
   \   00000D   EA           MOV       A,R2
   \   00000E   5402         ANL       A,#0x2
   \   000010   601C         JZ        ??MT_ProcessEvent_1
    119            {
    120              /* Return unproccessed events */
    121              return (events ^ MT_ZTOOL_SERIAL_RCV_BUFFER_FULL);
   \   000012   EA           MOV       A,R2
   \   000013   6402         XRL       A,#0x2
   \   000015   FA           MOV       R2,A
   \   000016   806A         SJMP      ??MT_ProcessEvent_2
    122            }
   \                     ??MT_ProcessEvent_3:
   \   000018                ; Setup parameters for call to function MT_ProcessIncomingCommand
   \   000018   12....       LCALL     `??MT_ProcessIncomingCommand::?relay`; Banked call to: MT_ProcessIncomingCommand
   \                     ??MT_ProcessEvent_0:
   \   00001B                ; Setup parameters for call to function osal_msg_receive
   \   00001B   90....       MOV       DPTR,#MT_TaskID
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F9           MOV       R1,A
   \   000020   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000023   EA           MOV       A,R2
   \   000024   4B           ORL       A,R3
   \   000025   70F1         JNZ       ??MT_ProcessEvent_3
   \   000027   EE           MOV       A,R6
   \   000028   FA           MOV       R2,A
   \   000029   EF           MOV       A,R7
   \   00002A   6480         XRL       A,#0x80
   \   00002C   804D         SJMP      ??MT_ProcessEvent_4
    123          
    124          #if !defined( NONWK )
    125            if ( events & MT_AF_EXEC_EVT )
   \                     ??MT_ProcessEvent_1:
   \   00002E   EA           MOV       A,R2
   \   00002F   5408         ANL       A,#0x8
   \   000031   6008         JZ        ??MT_ProcessEvent_5
    126            {
    127              MT_AfExec();
   \   000033                ; Setup parameters for call to function MT_AfExec
   \   000033   12....       LCALL     `??MT_AfExec::?relay`; Banked call to: MT_AfExec
    128              return (events ^ MT_AF_EXEC_EVT);
   \   000036   EE           MOV       A,R6
   \   000037   6408         XRL       A,#0x8
   \   000039   803E         SJMP      ??MT_ProcessEvent_6
    129            }
    130          #endif  /* NONWK */
    131          
    132            /* Handle MT_SYS_OSAL_START_TIMER callbacks */
    133          #if defined MT_SYS_FUNC
    134            if ( events & (MT_SYS_OSAL_EVENT_MASK))
   \                     ??MT_ProcessEvent_5:
   \   00003B   EB           MOV       A,R3
   \   00003C   540F         ANL       A,#0xf
   \   00003E   603E         JZ        ??MT_ProcessEvent_7
    135            {
    136              if (events & MT_SYS_OSAL_EVENT_0)
   \   000040   EB           MOV       A,R3
   \   000041   5408         ANL       A,#0x8
   \   000043   6009         JZ        ??MT_ProcessEvent_8
    137              {
    138                MT_SysOsalTimerExpired(0x00);
   \   000045                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   000045   7900         MOV       R1,#0x0
   \   000047   12....       LCALL     `??MT_SysOsalTimerExpired::?relay`; Banked call to: MT_SysOsalTimerExpired
    139                events ^= MT_SYS_OSAL_EVENT_0;
   \   00004A   7408         MOV       A,#0x8
   \   00004C   6F           XRL       A,R7
   \   00004D   FF           MOV       R7,A
    140              }
    141          
    142              if (events & MT_SYS_OSAL_EVENT_1)
   \                     ??MT_ProcessEvent_8:
   \   00004E   EF           MOV       A,R7
   \   00004F   5404         ANL       A,#0x4
   \   000051   6009         JZ        ??MT_ProcessEvent_9
    143              {
    144                MT_SysOsalTimerExpired(0x01);
   \   000053                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   000053   7901         MOV       R1,#0x1
   \   000055   12....       LCALL     `??MT_SysOsalTimerExpired::?relay`; Banked call to: MT_SysOsalTimerExpired
    145                events ^= MT_SYS_OSAL_EVENT_1;
   \   000058   7404         MOV       A,#0x4
   \   00005A   6F           XRL       A,R7
   \   00005B   FF           MOV       R7,A
    146              }
    147          
    148              if (events & MT_SYS_OSAL_EVENT_2)
   \                     ??MT_ProcessEvent_9:
   \   00005C   EF           MOV       A,R7
   \   00005D   5402         ANL       A,#0x2
   \   00005F   6009         JZ        ??MT_ProcessEvent_10
    149              {
    150                MT_SysOsalTimerExpired(0x02);
   \   000061                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   000061   7902         MOV       R1,#0x2
   \   000063   12....       LCALL     `??MT_SysOsalTimerExpired::?relay`; Banked call to: MT_SysOsalTimerExpired
    151                events ^= MT_SYS_OSAL_EVENT_2;
   \   000066   7402         MOV       A,#0x2
   \   000068   6F           XRL       A,R7
   \   000069   FF           MOV       R7,A
    152              }
    153          
    154              if (events & MT_SYS_OSAL_EVENT_3)
   \                     ??MT_ProcessEvent_10:
   \   00006A   EF           MOV       A,R7
   \   00006B   5401         ANL       A,#0x1
   \   00006D   6009         JZ        ??MT_ProcessEvent_11
    155              {
    156                MT_SysOsalTimerExpired(0x03);
   \   00006F                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   00006F   7903         MOV       R1,#0x3
   \   000071   12....       LCALL     `??MT_SysOsalTimerExpired::?relay`; Banked call to: MT_SysOsalTimerExpired
    157                events ^= MT_SYS_OSAL_EVENT_3;
   \   000074   7401         MOV       A,#0x1
   \   000076   6F           XRL       A,R7
   \   000077   FF           MOV       R7,A
    158              }
    159          
    160              return events;
   \                     ??MT_ProcessEvent_11:
   \   000078   EE           MOV       A,R6
   \                     ??MT_ProcessEvent_6:
   \   000079   FA           MOV       R2,A
   \   00007A   EF           MOV       A,R7
   \                     ??MT_ProcessEvent_4:
   \   00007B   FB           MOV       R3,A
   \   00007C   8004         SJMP      ??MT_ProcessEvent_2
    161            }
    162          #endif
    163          
    164            /* Discard or make more handlers */
    165            return 0;
   \                     ??MT_ProcessEvent_7:
   \   00007E   7A00         MOV       R2,#0x0
   \   000080   7B00         MOV       R3,#0x0
   \                     ??MT_ProcessEvent_2:
   \   000082                REQUIRE ?Subroutine0
   \   000082                ; // Fall through to label ?Subroutine0
    166          
    167          } /* MT_ProcessEvent() */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    168          
    169          /***************************************************************************************************
    170           * @fn      MT_ProcessIncomingCommand
    171           *
    172           * @brief
    173           *
    174           *   Process Event Messages.
    175           *
    176           * @param   byte *msg - pointer to event message
    177           *
    178           * @return
    179           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    180          void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg )
   \                     MT_ProcessIncomingCommand:
    181          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    182            byte deallocate;
    183            byte *msg_ptr;
    184            byte len;
    185          
    186            /* A little setup for AF, CB_FUNC and MT_SYS_APP_RSP_MSG */
    187            msg_ptr = msg->msg;
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   FA           MOV       R2,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   FB           MOV       R3,A
   \   000014   8A..         MOV       ?V0,R2
   \   000016   F5..         MOV       ?V1,A
    188          
    189            deallocate = true;
    190          
    191            /* Use the first byte of the message as the command ID */
    192            switch ( msg->hdr.event )
   \   000018   8E82         MOV       DPL,R6
   \   00001A   8F83         MOV       DPH,R7
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   14           DEC       A
   \   00001E   6011         JZ        ??MT_ProcessIncomingCommand_0
   \   000020   14           DEC       A
   \   000021   6013         JZ        ??MT_ProcessIncomingCommand_1
   \   000023   24FE         ADD       A,#-0x2
   \   000025   6018         JZ        ??MT_ProcessIncomingCommand_2
   \   000027   24FE         ADD       A,#-0x2
   \   000029   605A         JZ        ??MT_ProcessIncomingCommand_3
   \   00002B   24E2         ADD       A,#-0x1e
   \   00002D   605F         JZ        ??MT_ProcessIncomingCommand_4
   \   00002F   806B         SJMP      ??MT_ProcessIncomingCommand_5
    193            {
    194              case CMD_SERIAL_MSG:
    195                MT_ProcessIncoming(msg->msg);
   \                     ??MT_ProcessIncomingCommand_0:
   \   000031                ; Setup parameters for call to function MT_ProcessIncoming
   \   000031   12....       LCALL     `??MT_ProcessIncoming::?relay`; Banked call to: MT_ProcessIncoming
    196                break;
   \   000034   8066         SJMP      ??MT_ProcessIncomingCommand_5
    197          
    198              case CMD_DEBUG_MSG:
    199                MT_ProcessDebugMsg( (mtDebugMsg_t *)msg );
   \                     ??MT_ProcessIncomingCommand_1:
   \   000036                ; Setup parameters for call to function MT_ProcessDebugMsg
   \   000036   EE           MOV       A,R6
   \   000037   FA           MOV       R2,A
   \   000038   EF           MOV       A,R7
   \   000039   FB           MOV       R3,A
   \   00003A   12....       LCALL     `??MT_ProcessDebugMsg::?relay`; Banked call to: MT_ProcessDebugMsg
    200                break;
   \   00003D   805D         SJMP      ??MT_ProcessIncomingCommand_5
    201          
    202              case CB_FUNC:
    203                /*
    204                  Build SPI message here instead of redundantly calling MT_BuildSPIMsg
    205                  because we have copied data already in the allocated message
    206                */
    207          
    208                /* msg_ptr is the beginning of the intended SPI message */
    209                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
   \                     ??MT_ProcessIncomingCommand_2:
   \   00003F   8A82         MOV       DPL,R2
   \   000041   8B83         MOV       DPH,R3
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   2405         ADD       A,#0x5
   \   000049   F5..         MOV       ?V2,A
    210          
    211                /*
    212                  FCS goes to the last byte in the message and is calculated over all
    213                  the bytes except FCS and SOP
    214                */
    215                msg_ptr[len-1] = MT_UartCalcFCS(msg_ptr + 1, (byte)(len-2));
   \   00004B                ; Setup parameters for call to function MT_UartCalcFCS
   \   00004B   74FE         MOV       A,#-0x2
   \   00004D   25..         ADD       A,?V2
   \   00004F   F9           MOV       R1,A
   \   000050   8A82         MOV       DPL,R2
   \   000052   8B83         MOV       DPH,R3
   \   000054   A3           INC       DPTR
   \   000055   AA82         MOV       R2,DPL
   \   000057   AB83         MOV       R3,DPH
   \   000059   12....       LCALL     `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
   \   00005C   E9           MOV       A,R1
   \   00005D   C0E0         PUSH      A
   \   00005F   A8..         MOV       R0,?V2
   \   000061   E5..         MOV       A,?V0
   \   000063   28           ADD       A,R0
   \   000064   F8           MOV       R0,A
   \   000065   E4           CLR       A
   \   000066   35..         ADDC      A,?V1
   \   000068   F9           MOV       R1,A
   \   000069   E8           MOV       A,R0
   \   00006A   24FF         ADD       A,#-0x1
   \   00006C   F582         MOV       DPL,A
   \   00006E   E9           MOV       A,R1
   \   00006F   34FF         ADDC      A,#-0x1
   \   000071   F583         MOV       DPH,A
   \   000073   D0E0         POP       A
   \   000075   F0           MOVX      @DPTR,A
    216          
    217          #ifdef MT_UART_DEFAULT_PORT
    218                HalUARTWrite ( MT_UART_DEFAULT_PORT, msg_ptr, len );
   \   000076                ; Setup parameters for call to function HalUARTWrite
   \   000076   AC..         MOV       R4,?V2
   \   000078   7D00         MOV       R5,#0x0
   \   00007A   AA..         MOV       R2,?V0
   \   00007C   AB..         MOV       R3,?V1
   \   00007E   7900         MOV       R1,#0x0
   \   000080   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    219          #endif
    220                break;
   \   000083   8017         SJMP      ??MT_ProcessIncomingCommand_5
    221          
    222              case CMD_DEBUG_STR:
    223                MT_ProcessDebugStr( (mtDebugStr_t *)msg );
   \                     ??MT_ProcessIncomingCommand_3:
   \   000085                ; Setup parameters for call to function MT_ProcessDebugStr
   \   000085   EE           MOV       A,R6
   \   000086   FA           MOV       R2,A
   \   000087   EF           MOV       A,R7
   \   000088   FB           MOV       R3,A
   \   000089   12....       LCALL     `??MT_ProcessDebugStr::?relay`; Banked call to: MT_ProcessDebugStr
    224                break;
   \   00008C   800E         SJMP      ??MT_ProcessIncomingCommand_5
    225          
    226          #if !defined ( NONWK )
    227              case MT_SYS_APP_RSP_MSG:
    228                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
    229                MTProcessAppRspMsg( msg_ptr, len );
   \                     ??MT_ProcessIncomingCommand_4:
   \   00008E                ; Setup parameters for call to function MTProcessAppRspMsg
   \   00008E   8A82         MOV       DPL,R2
   \   000090   8B83         MOV       DPH,R3
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   E0           MOVX      A,@DPTR
   \   000096   2405         ADD       A,#0x5
   \   000098   F9           MOV       R1,A
   \   000099   12....       LCALL     `??MTProcessAppRspMsg::?relay`; Banked call to: MTProcessAppRspMsg
    230                break;
    231          #endif  // NONWK
    232          
    233          #if defined (MT_UTIL_FUNC)
    234          #if defined ZCL_KEY_ESTABLISH
    235              case ZCL_KEY_ESTABLISH_IND:
    236                MT_UtilKeyEstablishInd((keyEstablishmentInd_t *)msg);
    237                break;
    238          #endif
    239          #endif
    240          #ifdef MT_ZDO_CB_FUNC
    241              case ZDO_STATE_CHANGE:
    242                MT_ZdoStateChangeCB((osal_event_hdr_t *)msg);
    243                break;
    244          #endif
    245          
    246              default:
    247                break;
    248            }
    249          
    250            if ( deallocate )
    251            {
    252              osal_msg_deallocate( (uint8 *)msg );
   \                     ??MT_ProcessIncomingCommand_5:
   \   00009C                ; Setup parameters for call to function osal_msg_deallocate
   \   00009C   EE           MOV       A,R6
   \   00009D   FA           MOV       R2,A
   \   00009E   EF           MOV       A,R7
   \   00009F   FB           MOV       R3,A
   \   0000A0   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    253            }
    254          }
   \   0000A3   7F03         MOV       R7,#0x3
   \   0000A5   02....       LJMP      ?BANKED_LEAVE_XDATA
    255          
    256          #ifdef MT_TASK
    257          /***************************************************************************************************
    258           * @fn      MT_TransportAlloc
    259           *
    260           * @brief   Allocate memory for transport msg
    261           *
    262           * @param   uint8 cmd0 - The first byte of the MT command id containing the command type and subsystem.
    263           *          uint8 len - length
    264           *
    265           * @return  pointer the allocated memory or NULL if fail to allocate the memory
    266           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    267          uint8 *MT_TransportAlloc(uint8 cmd0, uint8 len)
   \                     MT_TransportAlloc:
    268          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
    269            uint8 *p;
    270          
    271            (void)cmd0;  // Intentionally unreferenced parameter
    272          
    273            /* Allocate a buffer of data length + SOP+CMD+FCS (5bytes) */
    274            p = osal_msg_allocate(len + SPI_0DATA_MSG_LEN);
   \   000006                ; Setup parameters for call to function osal_msg_allocate
   \   000006   2405         ADD       A,#0x5
   \   000008   FA           MOV       R2,A
   \   000009   E4           CLR       A
   \   00000A   3400         ADDC      A,#0x0
   \   00000C   FB           MOV       R3,A
   \   00000D   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
    275          
    276            if (p)
   \   000014   E582         MOV       A,DPL
   \   000016   4583         ORL       A,DPH
   \   000018   6007         JZ        ??MT_TransportAlloc_0
    277            {
    278              p++; /* Save space for SOP_VALUE, msg structure */
    279              return p;
   \   00001A   A3           INC       DPTR
   \   00001B   AA82         MOV       R2,DPL
   \   00001D   AB83         MOV       R3,DPH
   \   00001F   8004         SJMP      ??MT_TransportAlloc_1
    280            }
    281            else
    282            {
    283              return NULL;
   \                     ??MT_TransportAlloc_0:
   \   000021   7A00         MOV       R2,#0x0
   \   000023   7B00         MOV       R3,#0x0
    284            }
   \                     ??MT_TransportAlloc_1:
   \   000025   02....       LJMP      ?Subroutine0 & 0xFFFF
    285          }
    286          
    287          /***************************************************************************************************
    288           * @fn      MT_TransportSend
    289           *
    290           * @brief   Fill in SOP and FCS then send out the msg
    291           *
    292           * @param   uint8 *pBuf - pointer to the message that contains CMD, length, data and FCS
    293           *
    294           * @return  None
    295           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    296          void MT_TransportSend(uint8 *pBuf)
   \                     MT_TransportSend:
    297          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    298            uint8 *msgPtr;
    299            uint8 dataLen = pBuf[0]; /* Data length is on byte #1 from the pointer */
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F8           MOV       R0,A
    300          
    301            /* Move back to the SOP */
    302            msgPtr = pBuf-1;
   \   00000B   EA           MOV       A,R2
   \   00000C   24FF         ADD       A,#-0x1
   \   00000E   FE           MOV       R6,A
   \   00000F   EB           MOV       A,R3
   \   000010   34FF         ADDC      A,#-0x1
   \   000012   FF           MOV       R7,A
    303          
    304            /* Insert SOP */
    305            msgPtr[0] = MT_UART_SOF;
   \   000013   8E82         MOV       DPL,R6
   \   000015   F583         MOV       DPH,A
   \   000017   74FE         MOV       A,#-0x2
   \   000019   F0           MOVX      @DPTR,A
    306          
    307            /* Insert FCS */
    308            msgPtr[SPI_0DATA_MSG_LEN - 1 + dataLen] = MT_UartCalcFCS (pBuf, (3 + dataLen));
   \   00001A   E8           MOV       A,R0
   \   00001B   F5..         MOV       ?V0,A
   \   00001D                ; Setup parameters for call to function MT_UartCalcFCS
   \   00001D   7403         MOV       A,#0x3
   \   00001F   28           ADD       A,R0
   \   000020   F9           MOV       R1,A
   \   000021   12....       LCALL     `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
   \   000024   EE           MOV       A,R6
   \   000025   25..         ADD       A,?V0
   \   000027   F582         MOV       DPL,A
   \   000029   E4           CLR       A
   \   00002A   3F           ADDC      A,R7
   \   00002B   F583         MOV       DPH,A
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   E9           MOV       A,R1
   \   000032   F0           MOVX      @DPTR,A
    309          
    310            /* Send to UART */
    311          #ifdef MT_UART_DEFAULT_PORT
    312            HalUARTWrite(MT_UART_DEFAULT_PORT, msgPtr, dataLen + SPI_0DATA_MSG_LEN);
   \   000033                ; Setup parameters for call to function HalUARTWrite
   \   000033   E5..         MOV       A,?V0
   \   000035   2405         ADD       A,#0x5
   \   000037   FC           MOV       R4,A
   \   000038   E4           CLR       A
   \   000039   3400         ADDC      A,#0x0
   \   00003B   FD           MOV       R5,A
   \   00003C   EE           MOV       A,R6
   \   00003D   FA           MOV       R2,A
   \   00003E   EF           MOV       A,R7
   \   00003F   FB           MOV       R3,A
   \   000040   7900         MOV       R1,#0x0
   \   000042   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    313          #endif
    314          
    315            /* Deallocate */
    316            osal_msg_deallocate(msgPtr);
   \   000045                ; Setup parameters for call to function osal_msg_deallocate
   \   000045   EE           MOV       A,R6
   \   000046   FA           MOV       R2,A
   \   000047   EF           MOV       A,R7
   \   000048   FB           MOV       R3,A
   \   000049   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    317          }
   \   00004C   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_TaskInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TaskInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessIncomingCommand::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessIncomingCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_TransportAlloc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TransportAlloc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_TransportSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TransportSend
    318          #endif /* MT_TASK */
    319          /***************************************************************************************************
    320           ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     10   MT_ProcessEvent
        0     10   -> MT_AfExec
        0     10   -> MT_ProcessIncomingCommand
        0     10   -> MT_SysOsalTimerExpired
        0     10   -> osal_msg_receive
      1     21   MT_ProcessIncomingCommand
        0     11   -> HalUARTWrite
        0     11   -> MTProcessAppRspMsg
        0     11   -> MT_ProcessDebugMsg
        0     11   -> MT_ProcessDebugStr
        0     11   -> MT_ProcessIncoming
        0     11   -> MT_UartCalcFCS
        0     11   -> osal_msg_deallocate
      0      9   MT_TaskInit
        0      9   -> MT_Init
        0      9   -> MT_UartInit
        0      9   -> MT_UartRegisterTaskID
      0     10   MT_TransportAlloc
        0     10   -> osal_msg_allocate
      1     10   MT_TransportSend
        0     10   -> HalUARTWrite
        0     10   -> MT_UartCalcFCS
        0     10   -> osal_msg_deallocate


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ?Subroutine0
     130  MT_ProcessEvent
       6  MT_ProcessEvent::?relay
     168  MT_ProcessIncomingCommand
       6  MT_ProcessIncomingCommand::?relay
      25  MT_TaskInit
       6  MT_TaskInit::?relay
      40  MT_TransportAlloc
       6  MT_TransportAlloc::?relay
      79  MT_TransportSend
       6  MT_TransportSend::?relay

 
 447 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
 
  30 bytes of CODE     memory
 447 bytes of HUGECODE memory

Errors: none
Warnings: none
