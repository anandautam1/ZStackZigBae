###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               13/Sep/2018  22:05:03
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.20
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Components\mt\MT_DEBUG.c
#    Command line       =  
#        -f C:\Users\ANANDA~1\AppData\Local\Temp\EW9584.tmp
#        (C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Components\mt\MT_DEBUG.c
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List
#        -lA
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List\MT_DEBUG.lst
#    Object file        =  
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj\MT_DEBUG.r51
#
###############################################################################

C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Components\mt\MT_DEBUG.c
      1          /***************************************************************************************************
      2            Filename:       MT.c
      3            Revised:        $Date: 2008-02-12 16:28:45 -0800 (Tue, 12 Feb 2008) $
      4            Revision:       $Revision: 16392 $
      5          
      6            Description:
      7          
      8            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT.h"
     45          #include "MT_DEBUG.h"
     46          #include "MT_UART.h"
     47          
     48          /***************************************************************************************************
     49           * LOCAL FUNCTIONs
     50           ***************************************************************************************************/
     51          #if defined (MT_DEBUG_FUNC)
     52          void MT_DebugSetThreshold(uint8 *pBuf);
     53          #endif
     54          
     55          #if defined (MT_DEBUG_FUNC)
     56          /***************************************************************************************************
     57           * @fn      MT_DebugProcessing
     58           *
     59           * @brief   Process all the DEBUG commands that are issued by test tool
     60           *
     61           * @param   pBuf - pointer to received buffer
     62           *
     63           * @return  status
     64           ***************************************************************************************************/
     65          uint8 MT_DebugCommandProcessing(uint8 *pBuf)
     66          {
     67            uint8 status = MT_RPC_SUCCESS;
     68          
     69            switch (pBuf[MT_RPC_POS_CMD1])
     70            {
     71              case MT_DEBUG_SET_THRESHOLD:
     72                MT_DebugSetThreshold(pBuf);
     73                break;
     74          
     75              default:
     76                status = MT_RPC_ERR_COMMAND_ID;
     77                break;
     78            }
     79          
     80            return status;
     81          }
     82          
     83          /***************************************************************************************************
     84           * @fn      MT_DebugSetThreshold
     85           *
     86           * @brief   Process Debug Set Threshold
     87           *
     88           * @param   pBuf - pointer to received buffer
     89           *
     90           * @return  void
     91           ***************************************************************************************************/
     92          void MT_DebugSetThreshold(uint8 *pBuf)
     93          {
     94            uint8 retValue = ZSuccess;
     95            uint8 cmdId;
     96          
     97            /* parse header */
     98            cmdId = pBuf[MT_RPC_POS_CMD1];
     99            pBuf += MT_RPC_FRAME_HDR_SZ;
    100          
    101            /* Populate info */
    102            debugCompId = *pBuf++;
    103            debugThreshold = *pBuf++;
    104          
    105            /* Build and send back the response */
    106            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_DBG), cmdId, 1, &retValue);
    107          }
    108          #endif /* MT_DEBUG_FUNC */
    109          
    110          /***************************************************************************************************
    111           * @fn      MT_ProcessDebugMsg
    112           *
    113           * @brief   Build and send a debug message.
    114           *
    115           * @param   byte *data - pointer to the data portion of the debug message
    116           *
    117           * @return  void
    118           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    119          void MT_ProcessDebugMsg( mtDebugMsg_t *msg )
   \                     MT_ProcessDebugMsg:
    120          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    121            byte *msg_ptr;
    122            byte dataLen;
    123            uint8 buf[11];
    124            uint8 *pBuf;
    125          
    126            /* Calculate the data length based */
    127            dataLen = 5 + (msg->numParams * sizeof ( uint16 ));
   \   00000E   EA           MOV       A,R2
   \   00000F   2404         ADD       A,#0x4
   \   000011   F5..         MOV       ?V0,A
   \   000013   E4           CLR       A
   \   000014   3F           ADDC      A,R7
   \   000015   F5..         MOV       ?V1,A
   \   000017   85..82       MOV       DPL,?V0
   \   00001A   F583         MOV       DPH,A
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   C3           CLR       C
   \   00001E   33           RLC       A
   \   00001F   2405         ADD       A,#0x5
   \   000021   F5..         MOV       ?V6,A
    128          
    129            /* Get a message buffer to build the debug message */
    130            msg_ptr = osal_msg_allocate( (byte)(SPI_0DATA_MSG_LEN + dataLen + 1) );
   \   000023                ; Setup parameters for call to function osal_msg_allocate
   \   000023   7406         MOV       A,#0x6
   \   000025   25..         ADD       A,?V6
   \   000027   FA           MOV       R2,A
   \   000028   7B00         MOV       R3,#0x0
   \   00002A   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00002D   8A..         MOV       ?V2,R2
   \   00002F   8B..         MOV       ?V3,R3
    131            if ( msg_ptr )
   \   000031   EA           MOV       A,R2
   \   000032   4B           ORL       A,R3
   \   000033   7003         JNZ       $+5
   \   000035   02....       LJMP      ??MT_ProcessDebugMsg_0 & 0xFFFF
    132            {
    133              /* Build the message */
    134              pBuf = buf;
    135              *pBuf++ = msg->compID;
   \   000038   8E82         MOV       DPL,R6
   \   00003A   8F83         MOV       DPH,R7
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   85..82       MOV       DPL,?XSP + 0
   \   000042   85..83       MOV       DPH,?XSP + 1
   \   000045   F0           MOVX      @DPTR,A
    136              *pBuf++ = msg->severity;
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   C0E0         PUSH      A
   \   000050   7401         MOV       A,#0x1
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   D0E0         POP       A
   \   000057   F0           MOVX      @DPTR,A
    137              *pBuf++ = msg->numParams;
   \   000058   85..82       MOV       DPL,?V0
   \   00005B   85..83       MOV       DPH,?V1
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   C0E0         PUSH      A
   \   000061   7402         MOV       A,#0x2
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   D0E0         POP       A
   \   000068   F0           MOVX      @DPTR,A
   \   000069   7403         MOV       A,#0x3
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   A882         MOV       R0,DPL
   \   000070   A983         MOV       R1,DPH
    138          
    139              if ( msg->numParams >= 1 )
   \   000072   85..82       MOV       DPL,?V0
   \   000075   85..83       MOV       DPH,?V1
   \   000078   E0           MOVX      A,@DPTR
   \   000079   7003         JNZ       $+5
   \   00007B   02....       LJMP      ??MT_ProcessDebugMsg_1 & 0xFFFF
    140              {
    141                *pBuf++ = LO_UINT16( msg->param1 );
   \   00007E   EE           MOV       A,R6
   \   00007F   2405         ADD       A,#0x5
   \   000081   F8           MOV       R0,A
   \   000082   E4           CLR       A
   \   000083   3F           ADDC      A,R7
   \   000084   F9           MOV       R1,A
   \   000085   8882         MOV       DPL,R0
   \   000087   F583         MOV       DPH,A
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   C0E0         PUSH      A
   \   00008C   7403         MOV       A,#0x3
   \   00008E   12....       LCALL     ?XSTACK_DISP0_8
   \   000091   D0E0         POP       A
   \   000093   F0           MOVX      @DPTR,A
    142                *pBuf++ = HI_UINT16( msg->param1 );
   \   000094   8882         MOV       DPL,R0
   \   000096   8983         MOV       DPH,R1
   \   000098   A3           INC       DPTR
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   C0E0         PUSH      A
   \   00009C   7404         MOV       A,#0x4
   \   00009E   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A1   D0E0         POP       A
   \   0000A3   F0           MOVX      @DPTR,A
   \   0000A4   7405         MOV       A,#0x5
   \   0000A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A9   A882         MOV       R0,DPL
   \   0000AB   A983         MOV       R1,DPH
    143              }
    144          
    145              if ( msg->numParams >= 2 )
   \   0000AD   85..82       MOV       DPL,?V0
   \   0000B0   85..83       MOV       DPH,?V1
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   C3           CLR       C
   \   0000B5   9402         SUBB      A,#0x2
   \   0000B7   402F         JC        ??MT_ProcessDebugMsg_2
    146              {
    147                *pBuf++ = LO_UINT16( msg->param2 );
   \   0000B9   EE           MOV       A,R6
   \   0000BA   2407         ADD       A,#0x7
   \   0000BC   F8           MOV       R0,A
   \   0000BD   E4           CLR       A
   \   0000BE   3F           ADDC      A,R7
   \   0000BF   F9           MOV       R1,A
   \   0000C0   8882         MOV       DPL,R0
   \   0000C2   F583         MOV       DPH,A
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   C0E0         PUSH      A
   \   0000C7   7405         MOV       A,#0x5
   \   0000C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CC   D0E0         POP       A
   \   0000CE   F0           MOVX      @DPTR,A
    148                *pBuf++ = HI_UINT16( msg->param2 );
   \   0000CF   8882         MOV       DPL,R0
   \   0000D1   8983         MOV       DPH,R1
   \   0000D3   A3           INC       DPTR
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   C0E0         PUSH      A
   \   0000D7   7406         MOV       A,#0x6
   \   0000D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DC   D0E0         POP       A
   \   0000DE   F0           MOVX      @DPTR,A
   \   0000DF   7407         MOV       A,#0x7
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   A882         MOV       R0,DPL
   \   0000E6   A983         MOV       R1,DPH
    149              }
    150          
    151              if ( msg->numParams == 3 )
   \                     ??MT_ProcessDebugMsg_2:
   \   0000E8   85..82       MOV       DPL,?V0
   \   0000EB   85..83       MOV       DPH,?V1
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   6403         XRL       A,#0x3
   \   0000F1   700D         JNZ       ??MT_ProcessDebugMsg_1
    152              {
    153                *pBuf++ = LO_UINT16( msg->param3 );
   \   0000F3   EE           MOV       A,R6
   \   0000F4   2409         ADD       A,#0x9
   \   0000F6   12....       LCALL     ?Subroutine0 & 0xFFFF
    154                *pBuf++ = HI_UINT16( msg->param3 );
    155              }
   \                     ??CrossCallReturnLabel_0:
   \   0000F9   E8           MOV       A,R0
   \   0000FA   2402         ADD       A,#0x2
   \   0000FC   F8           MOV       R0,A
   \   0000FD   5001         JNC       ??MT_ProcessDebugMsg_1
   \   0000FF   09           INC       R1
    156          
    157              *pBuf++ = LO_UINT16( msg->timestamp );
   \                     ??MT_ProcessDebugMsg_1:
   \   000100   EE           MOV       A,R6
   \   000101   240B         ADD       A,#0xb
   \   000103   12....       LCALL     ?Subroutine0 & 0xFFFF
    158              *pBuf++ = HI_UINT16( msg->timestamp );
    159          
    160          #ifdef MT_UART_DEFAULT_PORT
    161              /* Debug message is set to AREQ CMD 0x80 for now */
    162              /* Build and send back the response */
    163              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_DBG), 0x80, dataLen, buf);
   \                     ??CrossCallReturnLabel_1:
   \   000106                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000106   AC..         MOV       R4,?XSP + 0
   \   000108   AD..         MOV       R5,?XSP + 1
   \   00010A   AB..         MOV       R3,?V6
   \   00010C   7A80         MOV       R2,#-0x80
   \   00010E   7948         MOV       R1,#0x48
   \   000110   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    164          #endif
    165              osal_msg_deallocate( msg_ptr );
   \   000113                ; Setup parameters for call to function osal_msg_deallocate
   \   000113   AA..         MOV       R2,?V2
   \   000115   AB..         MOV       R3,?V3
   \   000117   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    166            }
    167          }
   \                     ??MT_ProcessDebugMsg_0:
   \   00011A   740B         MOV       A,#0xb
   \   00011C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011F   7F07         MOV       R7,#0x7
   \   000121   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   3F           ADDC      A,R7
   \   000003   FB           MOV       R3,A
   \   000004   8A82         MOV       DPL,R2
   \   000006   F583         MOV       DPH,A
   \   000008   E0           MOVX      A,@DPTR
   \   000009   8882         MOV       DPL,R0
   \   00000B   8983         MOV       DPH,R1
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   8882         MOV       DPL,R0
   \   000016   8983         MOV       DPH,R1
   \   000018   A3           INC       DPTR
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   22           RET
    168          
    169          /***************************************************************************************************
    170           * @fn      MT_ProcessDebugStr
    171           *
    172           * @brief   Build and send a debug string.
    173           *
    174           * @param   byte *dstr - pointer to the data portion of the debug message
    175           *
    176           * @return  void
    177           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    178          void MT_ProcessDebugStr(mtDebugStr_t *dstr)
   \                     MT_ProcessDebugStr:
    179          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    180            byte *msg_ptr;
    181          
    182            /* Get a message buffer to build the debug message */
    183            msg_ptr = osal_mem_alloc( (byte)(SPI_0DATA_MSG_LEN + dstr->strLen) );
   \   000009   EA           MOV       A,R2
   \   00000A   2402         ADD       A,#0x2
   \   00000C   F5..         MOV       ?V2,A
   \   00000E   E4           CLR       A
   \   00000F   35..         ADDC      A,?V1
   \   000011   F5..         MOV       ?V3,A
   \   000013                ; Setup parameters for call to function osal_mem_alloc
   \   000013   85..82       MOV       DPL,?V2
   \   000016   F583         MOV       DPH,A
   \   000018   E0           MOVX      A,@DPTR
   \   000019   2405         ADD       A,#0x5
   \   00001B   FA           MOV       R2,A
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000021   8A..         MOV       ?V4,R2
   \   000023   8B..         MOV       ?V5,R3
   \   000025   AF..         MOV       R7,?V5
    184            if ( msg_ptr )
   \   000027   EA           MOV       A,R2
   \   000028   4F           ORL       A,R7
   \   000029   6024         JZ        ??MT_ProcessDebugStr_0
    185            {
    186          #ifdef MT_UART_DEFAULT_PORT
    187              /* Debug message is set to AREQ CMD 0x80 for now */
    188              /* Build and send back the response */
    189              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_DBG), MT_DEBUG_MSG, dstr->strLen, dstr->pString);
   \   00002B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00002B   85..82       MOV       DPL,?V0
   \   00002E   85..83       MOV       DPH,?V1
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   FC           MOV       R4,A
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   FD           MOV       R5,A
   \   000039   85..82       MOV       DPL,?V2
   \   00003C   85..83       MOV       DPH,?V3
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   FB           MOV       R3,A
   \   000041   7A80         MOV       R2,#-0x80
   \   000043   7948         MOV       R1,#0x48
   \   000045   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    190          #endif
    191              osal_mem_free( msg_ptr );
   \   000048                ; Setup parameters for call to function osal_mem_free
   \   000048   AA..         MOV       R2,?V4
   \   00004A   EF           MOV       A,R7
   \   00004B   FB           MOV       R3,A
   \   00004C   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    192            }
    193          }
   \                     ??MT_ProcessDebugStr_0:
   \   00004F   7F06         MOV       R7,#0x6
   \   000051   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessDebugMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessDebugMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessDebugStr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessDebugStr
    194          /***************************************************************************************************
    195           ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     26   MT_ProcessDebugMsg
        0     26   -> MT_BuildAndSendZToolResponse
        0     26   -> osal_msg_allocate
        0     26   -> osal_msg_deallocate
      0     14   MT_ProcessDebugStr
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      27  ?Subroutine0
     292  MT_ProcessDebugMsg
       6  MT_ProcessDebugMsg::?relay
      84  MT_ProcessDebugStr
       6  MT_ProcessDebugStr::?relay

 
 403 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
 
  12 bytes of CODE     memory
 403 bytes of HUGECODE memory

Errors: none
Warnings: none
