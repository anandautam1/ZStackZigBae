###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               13/Sep/2018  22:05:01
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.20
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Components\stack\af\AF.c
#    Command line       =  
#        -f C:\Users\ANANDA~1\AppData\Local\Temp\EW8913.tmp
#        (C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Components\stack\af\AF.c
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List
#        -lA
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List\AF.lst
#    Object file        =  
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj\AF.r51
#
###############################################################################

C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2010-08-09 12:12:10 -0700 (Mon, 09 Aug 2010) $
      4            Revision:       $Revision: 23350 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          #include "rtg.h"
     52          
     53          #if defined ( MT_AF_CB_FUNC )
     54            #include "MT_AF.h"
     55          #endif
     56          
     57          #if defined ( INTER_PAN )
     58            #include "stub_aps.h"
     59          #endif
     60          
     61          /*********************************************************************
     62           * MACROS
     63           */
     64          
     65          /*********************************************************************
     66           * @fn      afSend
     67           *
     68           * @brief   Helper macro for V1 API to invoke V2 API.
     69           *
     70           * input parameters
     71           *
     72           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     73           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     74           * @param   cID - A valid cluster ID as specified by the Profile.
     75           * @param   len - Number of bytes of data pointed to by next param.
     76           * @param  *buf - A pointer to the data bytes to send.
     77           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     78           * @param  *transID - A pointer to a byte which can be modified and which will
     79           *                    be used as the transaction sequence number of the msg.
     80           *
     81           * output parameters
     82           *
     83           * @param  *transID - Incremented by one if the return value is success.
     84           *
     85           * @return  afStatus_t - See previous definition of afStatus_... types.
     86           */
     87          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     88                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     89                                    (cID), (len), (buf), (transID), (options), (radius) )
     90          
     91          /*********************************************************************
     92           * CONSTANTS
     93           */
     94          
     95          /*********************************************************************
     96           * TYPEDEFS
     97           */
     98          
     99          /*********************************************************************
    100           * GLOBAL VARIABLES
    101           */
    102          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    104          
    105          /*********************************************************************
    106           * EXTERNAL VARIABLES
    107           */
    108          
    109          /*********************************************************************
    110           * EXTERNAL FUNCTIONS
    111           */
    112          
    113          /*********************************************************************
    114           * LOCAL VARIABLES
    115           */
    116          
    117          /*********************************************************************
    118           * LOCAL FUNCTIONS
    119           */
    120          
    121          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    122                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    123                          byte SecurityUse, uint32 timestamp );
    124          
    125          static epList_t *afFindEndPointDescList( byte EndPoint );
    126          
    127          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    128          
    129          /*********************************************************************
    130           * NETWORK LAYER CALLBACKS
    131           */
    132          
    133          /*********************************************************************
    134           * PUBLIC FUNCTIONS
    135           */
    136          
    137          /*********************************************************************
    138           * @fn      afInit
    139           *
    140           * @brief   Initialization function for the AF.
    141           *
    142           * @param   none
    143           *
    144           * @return  none
    145           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    146          void afInit( void )
   \                     afInit:
    147          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    148            // Start with no endpoint defined
    149            epList = NULL;
   \   000004   90....       MOV       DPTR,#epList
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   F0           MOVX      @DPTR,A
    150          }
   \   00000B   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    151          
    152          /*********************************************************************
    153           * @fn      afRegisterExtended
    154           *
    155           * @brief   Register an Application's EndPoint description.
    156           *
    157           * @param   epDesc - pointer to the Application's endpoint descriptor.
    158           * @param   descFn - pointer to descriptor callback function
    159           *
    160           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    161           *
    162           * @return  Pointer to epList_t on success, NULL otherwise.
    163           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    164          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn )
   \                     afRegisterExtended:
    165          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    166            epList_t *ep;
    167            epList_t *epSearch;
    168          
    169            ep = osal_mem_alloc( sizeof ( epList_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A07         MOV       R2,#0x7
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    170            if ( ep )
   \   000014   EA           MOV       A,R2
   \   000015   4B           ORL       A,R3
   \   000016   6049         JZ        ??CrossCallReturnLabel_4
    171            {
    172              // Fill in the new list entry
    173              ep->epDesc = epDesc;
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   E5..         MOV       A,?V0
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   A3           INC       DPTR
   \   000020   E5..         MOV       A,?V1
   \   000022   F0           MOVX      @DPTR,A
    174          
    175              // Default to allow Match Descriptor.
    176              ep->flags = eEP_AllowMatch;
   \   000023   8A82         MOV       DPL,R2
   \   000025   8B83         MOV       DPH,R3
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   7401         MOV       A,#0x1
   \   00002B   12....       LCALL     ?Subroutine9 & 0xFFFF
    177              ep->pfnDescCB = descFn;
   \                     ??CrossCallReturnLabel_10:
   \   00002E   EE           MOV       A,R6
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   A3           INC       DPTR
   \   000031   EF           MOV       A,R7
   \   000032   12....       LCALL     ?Subroutine9 & 0xFFFF
    178              ep->nextDesc = NULL;
   \                     ??CrossCallReturnLabel_11:
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   E4           CLR       A
   \   000038   F0           MOVX      @DPTR,A
   \   000039   A3           INC       DPTR
   \   00003A   12....       LCALL     ?Subroutine7 & 0xFFFF
    179          
    180              // Does a list exist?
    181              if ( epList == NULL )
   \                     ??CrossCallReturnLabel_2:
   \   00003D   E8           MOV       A,R0
   \   00003E   49           ORL       A,R1
   \   00003F   7005         JNZ       ??afRegisterExtended_0
    182                epList = ep;  // Make this the first entry
   \   000041   90....       MOV       DPTR,#epList
   \   000044   8018         SJMP      ??afRegisterExtended_1
    183              else
    184              {
    185                // Look for the end of the list
    186                epSearch = epList;
   \                     ??afRegisterExtended_0:
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F9           MOV       R1,A
    187                while( epSearch->nextDesc != NULL )
    188                  epSearch = epSearch->nextDesc;
   \                     ??afRegisterExtended_2:
   \   000048   E8           MOV       A,R0
   \   000049   2405         ADD       A,#0x5
   \   00004B   5001         JNC       ??afRegisterExtended_3
   \   00004D   09           INC       R1
   \                     ??afRegisterExtended_3:
   \   00004E   FC           MOV       R4,A
   \   00004F   E9           MOV       A,R1
   \   000050   FD           MOV       R5,A
   \   000051   8C82         MOV       DPL,R4
   \   000053   F583         MOV       DPH,A
   \   000055   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000058   70EE         JNZ       ??afRegisterExtended_2
    189          
    190                // Add new entry to end of list
    191                epSearch->nextDesc = ep;
   \   00005A   8C82         MOV       DPL,R4
   \   00005C   8D83         MOV       DPH,R5
    192              }
    193            }
   \                     ??afRegisterExtended_1:
   \   00005E   12....       LCALL     ?Subroutine8 & 0xFFFF
    194          
    195            return ep;
   \                     ??CrossCallReturnLabel_4:
   \   000061                REQUIRE ?Subroutine1
   \   000061                ; // Fall through to label ?Subroutine1
    196          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#epList
   \   000004   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET
    197          
    198          /*********************************************************************
    199           * @fn      afRegister
    200           *
    201           * @brief   Register an Application's EndPoint description.
    202           *
    203           * @param   epDesc - pointer to the Application's endpoint descriptor.
    204           *
    205           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    206           *
    207           * @return  afStatus_SUCCESS - Registered
    208           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    209           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    210           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    211          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    212          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    213            epList_t *ep;
    214            
    215            // Look for duplicate endpoint
    216            if ( afFindEndPointDescList( epDesc->endPoint ) )
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   6004         JZ        ??afRegister_0
    217              return ( afStatus_INVALID_PARAMETER );
   \   000014   7902         MOV       R1,#0x2
   \   000016   8015         SJMP      ??afRegister_1
    218            
    219            ep = afRegisterExtended( epDesc, NULL );
    220          
    221            return ((ep == NULL) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_0:
   \   000018                ; Setup parameters for call to function afRegisterExtended
   \   000018   7C00         MOV       R4,#0x0
   \   00001A   7D00         MOV       R5,#0x0
   \   00001C   EE           MOV       A,R6
   \   00001D   FA           MOV       R2,A
   \   00001E   EF           MOV       A,R7
   \   00001F   FB           MOV       R3,A
   \   000020   12....       LCALL     `??afRegisterExtended::?relay`; Banked call to: afRegisterExtended
   \   000023   EA           MOV       A,R2
   \   000024   4B           ORL       A,R3
   \   000025   7004         JNZ       ??afRegister_2
   \   000027   7910         MOV       R1,#0x10
   \   000029   8002         SJMP      ??afRegister_1
   \                     ??afRegister_2:
   \   00002B   7900         MOV       R1,#0x0
   \                     ??afRegister_1:
   \   00002D   02....       LJMP      ?Subroutine2 & 0xFFFF
    222          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    223          
    224          
    225          /*********************************************************************
    226           * @fn          afDataConfirm
    227           *
    228           * @brief       This function will generate the Data Confirm back to
    229           *              the application.
    230           *
    231           * @param       endPoint - confirm end point
    232           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    233           * @param       status - status of APSDE_DATA_REQUEST
    234           *
    235           * @return      none
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    238          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
   \   000009   8B..         MOV       ?V0,R3
    239            endPointDesc_t *epDesc;
    240            afDataConfirm_t *msgPtr;
    241          
    242            // Find the endpoint description
    243            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00000E   8A..         MOV       ?V4,R2
   \   000010   8B..         MOV       ?V5,R3
    244            if ( epDesc == NULL )
   \   000012   EA           MOV       A,R2
   \   000013   4B           ORL       A,R3
   \   000014   6030         JZ        ??CrossCallReturnLabel_26
    245              return;
    246          
    247            // Determine the incoming command type
    248            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   000016                ; Setup parameters for call to function osal_msg_allocate
   \   000016   7A04         MOV       R2,#0x4
   \   000018   7B00         MOV       R3,#0x0
   \   00001A   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    249            if ( msgPtr )
   \   00001D   EA           MOV       A,R2
   \   00001E   4B           ORL       A,R3
   \   00001F   6025         JZ        ??CrossCallReturnLabel_26
    250            {
    251              // Build the Data Confirm message
    252              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   000021   8A82         MOV       DPL,R2
   \   000023   8B83         MOV       DPH,R3
   \   000025   74FD         MOV       A,#-0x3
   \   000027   F0           MOVX      @DPTR,A
    253              msgPtr->hdr.status = status;
   \   000028   A3           INC       DPTR
   \   000029   E5..         MOV       A,?V0
   \   00002B   F0           MOVX      @DPTR,A
    254              msgPtr->endpoint = endPoint;
   \   00002C   EE           MOV       A,R6
   \   00002D   8A82         MOV       DPL,R2
   \   00002F   8B83         MOV       DPH,R3
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   F0           MOVX      @DPTR,A
    255              msgPtr->transID = transID;
   \   000034   EF           MOV       A,R7
   \   000035   8A82         MOV       DPL,R2
   \   000037   8B83         MOV       DPH,R3
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   F0           MOVX      @DPTR,A
    256          
    257          #if defined ( MT_AF_CB_FUNC )
    258              /* If MT has subscribed for this callback, don't send as a message. */
    259              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    260              {
    261                /* Send callback if it's subscribed */
    262                MT_AfDataConfirm ((void *)msgPtr);
    263                /* Release the memory. */
    264                osal_msg_deallocate( (void *)msgPtr );
    265              }
    266              else
    267          #endif
    268              {
    269                /* send message through task message */
    270                osal_msg_send( *(epDesc->task_id), (byte *)msgPtr );
   \   00003D                ; Setup parameters for call to function osal_msg_send
   \   00003D   85..82       MOV       DPL,?V4
   \   000040   85..83       MOV       DPH,?V5
   \   000043   12....       LCALL     ?Subroutine15 & 0xFFFF
    271              }
    272            }
    273          }
   \                     ??CrossCallReturnLabel_26:
   \   000046   7F06         MOV       R7,#0x6
   \   000048   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002                REQUIRE ??Subroutine36_0
   \   000002                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine37_0
   \   000001                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET
    274          
    275          /*********************************************************************
    276           * @fn          afIncomingData
    277           *
    278           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    279           *
    280           * @param       aff  - pointer to APS frame format
    281           * @param       SrcAddress  - Source address
    282           * @param       sig - incoming message's link quality
    283           * @param       SecurityUse - Security enable/disable
    284           *
    285           * @return      none
    286           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    288                               NLDE_Signal_t *sig, byte SecurityUse, uint32 timestamp )
    289          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7403         MOV       A,#0x3
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000012   740A         MOV       A,#0xa
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   EC           MOV       A,R4
   \   000018   F0           MOVX      @DPTR,A
   \   000019   A3           INC       DPTR
   \   00001A   ED           MOV       A,R5
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   7407         MOV       A,#0x7
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   E9           MOV       A,R1
   \   000022   12....       LCALL     ?Subroutine7 & 0xFFFF
    290            endPointDesc_t *epDesc = NULL;
    291            epList_t *pList = epList;
   \                     ??CrossCallReturnLabel_3:
   \   000025   7401         MOV       A,#0x1
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   12....       LCALL     ??Subroutine34_0 & 0xFFFF
    292          #if !defined ( APS_NO_GROUPS )    
    293            uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
   \                     ??CrossCallReturnLabel_71:
   \   00002D   85..82       MOV       DPL,?XSP + 0
   \   000030   85..83       MOV       DPH,?XSP + 1
   \   000033   74FE         MOV       A,#-0x2
   \   000035   F0           MOVX      @DPTR,A
    294          #endif  
    295          
    296            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
   \   000036   7403         MOV       A,#0x3
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   2402         ADD       A,#0x2
   \   00003E   F8           MOV       R0,A
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   3400         ADDC      A,#0x0
   \   000043   F9           MOV       R1,A
   \   000044   7405         MOV       A,#0x5
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   12....       LCALL     ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   00004C   7403         MOV       A,#0x3
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   E0           MOVX      A,@DPTR
   \   000052   2404         ADD       A,#0x4
   \   000054   F8           MOV       R0,A
   \   000055   A3           INC       DPTR
   \   000056   E0           MOVX      A,@DPTR
   \   000057   3400         ADDC      A,#0x0
   \   000059   F9           MOV       R1,A
   \   00005A   7408         MOV       A,#0x8
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   12....       LCALL     ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000062   7403         MOV       A,#0x3
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00006A   7021         JNZ       ??afIncomingData_0
    297            {
    298          #if !defined ( APS_NO_GROUPS )    
    299              // Find the first endpoint for this group
    300              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   00006C                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   00006C   79FE         MOV       R1,#-0x2
   \   00006E   7408         MOV       A,#0x8
   \   000070   12....       LCALL     ?XSTACK_DISP0_8
   \   000073   12....       LCALL     ?Subroutine11 & 0xFFFF
    301              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \                     ??CrossCallReturnLabel_14:
   \   000076   7003         JNZ       $+5
   \   000078   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    302                return;   // No endpoint found
    303          
    304              epDesc = afFindEndPointDesc( grpEp );
   \   00007B                ; Setup parameters for call to function afFindEndPointDesc
   \   00007B   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00007E   8A..         MOV       ?V0,R2
   \   000080   8B..         MOV       ?V1,R3
   \   000082   AE..         MOV       R6,?V0
   \   000084   AF..         MOV       R7,?V1
    305              if ( epDesc == NULL )
   \   000086   EA           MOV       A,R2
   \   000087   4F           ORL       A,R7
   \   000088   7041         JNZ       ??afIncomingData_2
    306                return;   // Endpoint descriptor not found
   \   00008A   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    307          
    308              pList = afFindEndPointDescList( epDesc->endPoint );
    309          #else
    310              return; // Not supported
    311          #endif    
    312            }
    313            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   00008D   7405         MOV       A,#0x5
   \   00008F   12....       LCALL     ?XSTACK_DISP0_8
   \   000092   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000095   F9           MOV       R1,A
   \   000096   74FF         MOV       A,#-0x1
   \   000098   69           XRL       A,R1
   \   000099   7021         JNZ       ??afIncomingData_3
    314            {
    315              // Set the list
    316              if ( pList != NULL )
   \   00009B   7401         MOV       A,#0x1
   \   00009D   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A0   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000A3   7003         JNZ       $+5
   \   0000A5   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    317              {
    318                epDesc = pList->epDesc;
   \   0000A8   7401         MOV       A,#0x1
   \   0000AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AD   12....       LCALL     ?Subroutine21 & 0xFFFF
    319              }
    320            }
   \                     ??CrossCallReturnLabel_36:
   \   0000B0   7420         MOV       A,#0x20
   \   0000B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B5   78..         MOV       R0,#?V0
   \   0000B7   12....       LCALL     ?L_MOV_X
   \   0000BA   8023         SJMP      ??CrossCallReturnLabel_37
    321            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_3:
   \   0000BC                ; Setup parameters for call to function afFindEndPointDesc
   \   0000BC   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000BF   8B..         MOV       ?V1,R3
   \   0000C1   A9..         MOV       R1,?V1
   \   0000C3   EA           MOV       A,R2
   \   0000C4   FE           MOV       R6,A
   \   0000C5   EB           MOV       A,R3
   \   0000C6   FF           MOV       R7,A
   \   0000C7   EA           MOV       A,R2
   \   0000C8   49           ORL       A,R1
   \   0000C9   60E5         JZ        ??CrossCallReturnLabel_36
    322            {
    323              pList = afFindEndPointDescList( epDesc->endPoint );
   \                     ??afIncomingData_2:
   \   0000CB                ; Setup parameters for call to function afFindEndPointDescList
   \   0000CB   8E82         MOV       DPL,R6
   \   0000CD   8F83         MOV       DPH,R7
   \   0000CF   12....       LCALL     ?Subroutine23 & 0xFFFF
    324            }
   \                     ??CrossCallReturnLabel_39:
   \   0000D2   7401         MOV       A,#0x1
   \   0000D4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D7   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000DA   80D4         SJMP      ??CrossCallReturnLabel_36
    325          
    326            while ( epDesc )
    327            {
    328              uint16 epProfileID = 0xFFFF;  // Invalid Profile ID
    329              
    330              if ( pList->pfnDescCB )
    331              {
    332                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    333                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
    334                if ( pID )
    335                {
    336                  epProfileID = *pID;
    337                  osal_mem_free( pID );
    338                }
    339              }
    340              else if ( epDesc->simpleDesc )
    341              {
    342                epProfileID = epDesc->simpleDesc->AppProfId;
    343              }
    344          
    345              if ( (aff->ProfileID == epProfileID) ||
    346                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) )
    347              {
    348                {
    349                  // Save original endpoint
    350                  uint8 endpoint = aff->DstEndPoint;
    351                  
    352                  // overwrite with descriptor's endpoint
    353                  aff->DstEndPoint = epDesc->endPoint;   
    354                  
    355                  afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig, SecurityUse, timestamp );
    356                  
    357                  // Restore with original endpoint
    358                  aff->DstEndPoint = endpoint;
    359                }
    360              }
    361          
    362              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    363              {
    364          #if !defined ( APS_NO_GROUPS )      
    365                // Find the next endpoint for this group
    366                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
    367                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
    368                  return;   // No endpoint found
    369          
    370                epDesc = afFindEndPointDesc( grpEp );
    371                if ( epDesc == NULL )
    372                  return;   // Endpoint descriptor not found
    373          
    374                pList = afFindEndPointDescList( epDesc->endPoint );
    375          #else
    376                return;
    377          #endif      
    378              }
    379              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
    380              {
    381                pList = pList->nextDesc;
    382                if ( pList )
    383                  epDesc = pList->epDesc;
   \                     ??afIncomingData_4:
   \   0000DC   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000DF   EE           MOV       A,R6
   \   0000E0   4F           ORL       A,R7
   \   0000E1   7003         JNZ       $+5
   \   0000E3   02....       LJMP      ??afIncomingData_1 & 0xFFFF
   \   0000E6   800F         SJMP      ??CrossCallReturnLabel_7
   \                     ??afIncomingData_5:
   \   0000E8                ; Setup parameters for call to function afFindEndPointDescList
   \   0000E8   8A82         MOV       DPL,R2
   \   0000EA   8B83         MOV       DPH,R3
   \   0000EC   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0000EF   7401         MOV       A,#0x1
   \   0000F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F4   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000F7   75..FF       MOV       ?V6,#-0x1
   \   0000FA   75..FF       MOV       ?V7,#-0x1
   \   0000FD   7401         MOV       A,#0x1
   \   0000FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000102   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000105   FD           MOV       R5,A
   \   000106   E8           MOV       A,R0
   \   000107   4D           ORL       A,R5
   \   000108   8E82         MOV       DPL,R6
   \   00010A   8F83         MOV       DPH,R7
   \   00010C   601A         JZ        ??afIncomingData_6
   \   00010E                ; Setup parameters for indirect call
   \   00010E   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000111   12....       LCALL     ?CALL_IND
   \   000114   EA           MOV       A,R2
   \   000115   4B           ORL       A,R3
   \   000116   601D         JZ        ??afIncomingData_7
   \   000118   8A82         MOV       DPL,R2
   \   00011A   8B83         MOV       DPH,R3
   \   00011C   E0           MOVX      A,@DPTR
   \   00011D   F5..         MOV       ?V6,A
   \   00011F   A3           INC       DPTR
   \   000120   E0           MOVX      A,@DPTR
   \   000121   F5..         MOV       ?V7,A
   \   000123                ; Setup parameters for call to function osal_mem_free
   \   000123   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000126   800D         SJMP      ??afIncomingData_7
   \                     ??afIncomingData_6:
   \   000128   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00012B   6008         JZ        ??afIncomingData_7
   \   00012D   A3           INC       DPTR
   \   00012E   E0           MOVX      A,@DPTR
   \   00012F   F5..         MOV       ?V6,A
   \   000131   A3           INC       DPTR
   \   000132   E0           MOVX      A,@DPTR
   \   000133   F5..         MOV       ?V7,A
   \                     ??afIncomingData_7:
   \   000135   7403         MOV       A,#0x3
   \   000137   12....       LCALL     ?XSTACK_DISP0_8
   \   00013A   E0           MOVX      A,@DPTR
   \   00013B   F8           MOV       R0,A
   \   00013C   A3           INC       DPTR
   \   00013D   E0           MOVX      A,@DPTR
   \   00013E   C8           XCH       A,R0
   \   00013F   2408         ADD       A,#0x8
   \   000141   F582         MOV       DPL,A
   \   000143   E4           CLR       A
   \   000144   38           ADDC      A,R0
   \   000145   F583         MOV       DPH,A
   \   000147   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00014A   8E82         MOV       DPL,R6
   \   00014C   8F83         MOV       DPH,R7
   \   00014E   E0           MOVX      A,@DPTR
   \   00014F   FA           MOV       R2,A
   \   000150   E5..         MOV       A,?V6
   \   000152   68           XRL       A,R0
   \   000153   7003         JNZ       ??afIncomingData_8
   \   000155   E5..         MOV       A,?V7
   \   000157   69           XRL       A,R1
   \                     ??afIncomingData_8:
   \   000158   6007         JZ        ??afIncomingData_9
   \   00015A   EA           MOV       A,R2
   \   00015B   705B         JNZ       ??afIncomingData_10
   \   00015D   E8           MOV       A,R0
   \   00015E   49           ORL       A,R1
   \   00015F   7057         JNZ       ??afIncomingData_10
   \                     ??afIncomingData_9:
   \   000161   7405         MOV       A,#0x5
   \   000163   12....       LCALL     ?XSTACK_DISP0_8
   \   000166   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000169   F5..         MOV       ?V4,A
   \   00016B   7405         MOV       A,#0x5
   \   00016D   12....       LCALL     ?XSTACK_DISP0_8
   \   000170   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000173   EA           MOV       A,R2
   \   000174   F0           MOVX      @DPTR,A
   \   000175                ; Setup parameters for call to function afBuildMSGIncoming
   \   000175   78..         MOV       R0,#?V0
   \   000177   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00017A   7422         MOV       A,#0x22
   \   00017C   12....       LCALL     ?XSTACK_DISP0_8
   \   00017F   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000182   7422         MOV       A,#0x22
   \   000184   12....       LCALL     ?XSTACK_DISP0_8
   \   000187   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00018A   7412         MOV       A,#0x12
   \   00018C   12....       LCALL     ?XSTACK_DISP0_8
   \   00018F   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000192   7411         MOV       A,#0x11
   \   000194   12....       LCALL     ?XSTACK_DISP0_8
   \   000197   E0           MOVX      A,@DPTR
   \   000198   F9           MOV       R1,A
   \   000199   EE           MOV       A,R6
   \   00019A   FC           MOV       R4,A
   \   00019B   EF           MOV       A,R7
   \   00019C   FD           MOV       R5,A
   \   00019D   740D         MOV       A,#0xd
   \   00019F   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A2   12....       LCALL     ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0001A5   12....       LCALL     `??afBuildMSGIncoming::?relay`; Banked call to: afBuildMSGIncoming
   \   0001A8   740A         MOV       A,#0xa
   \   0001AA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001AD   7405         MOV       A,#0x5
   \   0001AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B2   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0001B5   E5..         MOV       A,?V4
   \   0001B7   F0           MOVX      @DPTR,A
   \                     ??afIncomingData_10:
   \   0001B8   7403         MOV       A,#0x3
   \   0001BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BD   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0001C0   7026         JNZ       ??afIncomingData_11
   \   0001C2                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   0001C2   85..82       MOV       DPL,?XSP + 0
   \   0001C5   85..83       MOV       DPH,?XSP + 1
   \   0001C8   E0           MOVX      A,@DPTR
   \   0001C9   F9           MOV       R1,A
   \   0001CA   7408         MOV       A,#0x8
   \   0001CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CF   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0001D2   603F         JZ        ??afIncomingData_1
   \   0001D4                ; Setup parameters for call to function afFindEndPointDesc
   \   0001D4   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0001D7   8A..         MOV       ?V4,R2
   \   0001D9   8B..         MOV       ?V5,R3
   \   0001DB   AE..         MOV       R6,?V4
   \   0001DD   AF..         MOV       R7,?V5
   \   0001DF   EA           MOV       A,R2
   \   0001E0   4F           ORL       A,R7
   \   0001E1   6003         JZ        $+5
   \   0001E3   02....       LJMP      ??afIncomingData_5 & 0xFFFF
   \   0001E6   802B         SJMP      ??afIncomingData_1
   \                     ??afIncomingData_11:
   \   0001E8   7405         MOV       A,#0x5
   \   0001EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001ED   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0001F0   F4           CPL       A
   \   0001F1   7020         JNZ       ??afIncomingData_1
   \   0001F3   7401         MOV       A,#0x1
   \   0001F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F8   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0001FB   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0001FE   7401         MOV       A,#0x1
   \   000200   12....       LCALL     ?XSTACK_DISP0_8
   \   000203   12....       LCALL     ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000206   7401         MOV       A,#0x1
   \   000208   12....       LCALL     ?XSTACK_DISP0_8
   \   00020B   E0           MOVX      A,@DPTR
   \   00020C   F8           MOV       R0,A
   \   00020D   49           ORL       A,R1
   \   00020E   6003         JZ        $+5
   \   000210   02....       LJMP      ??afIncomingData_4 & 0xFFFF
    384                else
    385                  epDesc = NULL;
    386              }
    387              else
    388                epDesc = NULL;
    389            }
    390          }
   \                     ??afIncomingData_1:
   \   000213   740C         MOV       A,#0xc
   \   000215                REQUIRE ?Subroutine3
   \   000215                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002                REQUIRE ??Subroutine30_0
   \   000002                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine31_0
   \   000001                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   12....       LCALL     ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FE           MOV       R6,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FF           MOV       R7,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000003   540C         ANL       A,#0xc
   \   000005   640C         XRL       A,#0xc
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   FB           MOV       R3,A
   \   000007   12....       LCALL     `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   64FE         XRL       A,#0xfe
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   7902         MOV       R1,#0x2
   \   000004   8882         MOV       DPL,R0
   \   000006   8D83         MOV       DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine32_0
   \   000004                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine33_0
   \   000001                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000006   E582         MOV       A,DPL
   \   000008   4583         ORL       A,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F8           MOV       R0,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET
    391          
    392          /*********************************************************************
    393           * @fn          afBuildMSGIncoming
    394           *
    395           * @brief       Build the message for the app
    396           *
    397           * @param
    398           *
    399           * @return      pointer to next in data buffer
    400           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    401          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    402                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig, 
    403                           byte SecurityUse, uint32 timestamp )
    404          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V0,R2
   \   000014   8B..         MOV       ?V1,R3
   \   000016   8C..         MOV       ?V6,R4
   \   000018   8D..         MOV       ?V7,R5
    405            afIncomingMSGPacket_t *MSGpkt;
    406            const byte len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
    407            byte *asdu = aff->asdu;
   \   00001A   EA           MOV       A,R2
   \   00001B   240E         ADD       A,#0xe
   \   00001D   F582         MOV       DPL,A
   \   00001F   E4           CLR       A
   \   000020   35..         ADDC      A,?V1
   \   000022   F583         MOV       DPH,A
   \   000024   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000027   7401         MOV       A,#0x1
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   12....       LCALL     ??Subroutine34_0 & 0xFFFF
    408            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \                     ??CrossCallReturnLabel_75:
   \   00002F   EA           MOV       A,R2
   \   000030   2410         ADD       A,#0x10
   \   000032   F5..         MOV       ?V2,A
   \   000034   E4           CLR       A
   \   000035   35..         ADDC      A,?V1
   \   000037   F5..         MOV       ?V3,A
   \   000039                ; Setup parameters for call to function osal_msg_allocate
   \   000039   85..82       MOV       DPL,?V2
   \   00003C   F583         MOV       DPH,A
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   2423         ADD       A,#0x23
   \   000041   FA           MOV       R2,A
   \   000042   7B00         MOV       R3,#0x0
   \   000044   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000047   8A..         MOV       ?V4,R2
   \   000049   8B..         MOV       ?V5,R3
   \   00004B   AE..         MOV       R6,?V4
   \   00004D   AF..         MOV       R7,?V5
    409          
    410            if ( MSGpkt == NULL )
   \   00004F   EA           MOV       A,R2
   \   000050   4F           ORL       A,R7
   \   000051   7003         JNZ       $+5
   \   000053   02....       LJMP      ??CrossCallReturnLabel_27 & 0xFFFF
    411            {
    412              return;
    413            }
    414          
    415            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   000056   8A82         MOV       DPL,R2
   \   000058   8B83         MOV       DPH,R3
   \   00005A   741A         MOV       A,#0x1a
   \   00005C   12....       LCALL     ?Subroutine6 & 0xFFFF
    416            MSGpkt->groupId = aff->GroupID;
   \                     ??CrossCallReturnLabel_0:
   \   00005F   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000062   12....       LCALL     ??Subroutine34_0 & 0xFFFF
    417            MSGpkt->clusterId = aff->ClusterID;
   \                     ??CrossCallReturnLabel_76:
   \   000065   85..82       MOV       DPL,?V0
   \   000068   85..83       MOV       DPH,?V1
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   12....       LCALL     ??Subroutine34_0 & 0xFFFF
    418            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \                     ??CrossCallReturnLabel_77:
   \   000079                ; Setup parameters for call to function afCopyAddress
   \   000079   7413         MOV       A,#0x13
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   FC           MOV       R4,A
   \   000080   A3           INC       DPTR
   \   000081   E0           MOVX      A,@DPTR
   \   000082   FD           MOV       R5,A
   \   000083   EA           MOV       A,R2
   \   000084   2406         ADD       A,#0x6
   \   000086   FA           MOV       R2,A
   \   000087   E4           CLR       A
   \   000088   3F           ADDC      A,R7
   \   000089   FB           MOV       R3,A
   \   00008A   12....       LCALL     `??afCopyAddress::?relay`; Banked call to: afCopyAddress
    419            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   00008D   85..82       MOV       DPL,?V0
   \   000090   85..83       MOV       DPH,?V1
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   E0           MOVX      A,@DPTR
   \   000097   C0E0         PUSH      A
   \   000099   EE           MOV       A,R6
   \   00009A   240F         ADD       A,#0xf
   \   00009C   F582         MOV       DPL,A
   \   00009E   E4           CLR       A
   \   00009F   3F           ADDC      A,R7
   \   0000A0   F583         MOV       DPH,A
   \   0000A2   D0E0         POP       A
   \   0000A4   F0           MOVX      @DPTR,A
    420            MSGpkt->endPoint = epDesc->endPoint;
   \   0000A5   85..82       MOV       DPL,?V6
   \   0000A8   85..83       MOV       DPH,?V7
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   C0E0         PUSH      A
   \   0000AE   EE           MOV       A,R6
   \   0000AF   2414         ADD       A,#0x14
   \   0000B1   F582         MOV       DPL,A
   \   0000B3   E4           CLR       A
   \   0000B4   3F           ADDC      A,R7
   \   0000B5   F583         MOV       DPH,A
   \   0000B7   D0E0         POP       A
   \   0000B9   F0           MOVX      @DPTR,A
    421            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   0000BA   E5..         MOV       A,?V0
   \   0000BC   240C         ADD       A,#0xc
   \   0000BE   F582         MOV       DPL,A
   \   0000C0   E4           CLR       A
   \   0000C1   35..         ADDC      A,?V1
   \   0000C3   F583         MOV       DPH,A
   \   0000C5   E0           MOVX      A,@DPTR
   \   0000C6   C0E0         PUSH      A
   \   0000C8   EE           MOV       A,R6
   \   0000C9   2415         ADD       A,#0x15
   \   0000CB   F582         MOV       DPL,A
   \   0000CD   E4           CLR       A
   \   0000CE   3F           ADDC      A,R7
   \   0000CF   F583         MOV       DPH,A
   \   0000D1   D0E0         POP       A
   \   0000D3   F0           MOVX      @DPTR,A
   \   0000D4   7417         MOV       A,#0x17
   \   0000D6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D9   12....       LCALL     ??Subroutine33_0 & 0xFFFF
    422            MSGpkt->LinkQuality = sig->LinkQuality;
   \                     ??CrossCallReturnLabel_57:
   \   0000DC   8882         MOV       DPL,R0
   \   0000DE   F583         MOV       DPH,A
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   C0E0         PUSH      A
   \   0000E3   EE           MOV       A,R6
   \   0000E4   2416         ADD       A,#0x16
   \   0000E6   F582         MOV       DPL,A
   \   0000E8   E4           CLR       A
   \   0000E9   3F           ADDC      A,R7
   \   0000EA   F583         MOV       DPH,A
   \   0000EC   D0E0         POP       A
   \   0000EE   F0           MOVX      @DPTR,A
    423            MSGpkt->correlation = sig->correlation;
   \   0000EF   8882         MOV       DPL,R0
   \   0000F1   8983         MOV       DPH,R1
   \   0000F3   A3           INC       DPTR
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   C0E0         PUSH      A
   \   0000F7   EE           MOV       A,R6
   \   0000F8   2417         ADD       A,#0x17
   \   0000FA   F582         MOV       DPL,A
   \   0000FC   E4           CLR       A
   \   0000FD   3F           ADDC      A,R7
   \   0000FE   F583         MOV       DPH,A
   \   000100   D0E0         POP       A
   \   000102   F0           MOVX      @DPTR,A
    424            MSGpkt->rssi = sig->rssi;
   \   000103   8882         MOV       DPL,R0
   \   000105   8983         MOV       DPH,R1
   \   000107   A3           INC       DPTR
   \   000108   A3           INC       DPTR
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   C0E0         PUSH      A
   \   00010C   EE           MOV       A,R6
   \   00010D   2418         ADD       A,#0x18
   \   00010F   F582         MOV       DPL,A
   \   000111   E4           CLR       A
   \   000112   3F           ADDC      A,R7
   \   000113   F583         MOV       DPH,A
   \   000115   D0E0         POP       A
   \   000117   F0           MOVX      @DPTR,A
    425            MSGpkt->SecurityUse = SecurityUse;
   \   000118   85..82       MOV       DPL,?XSP + 0
   \   00011B   85..83       MOV       DPH,?XSP + 1
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   C0E0         PUSH      A
   \   000121   EE           MOV       A,R6
   \   000122   2419         ADD       A,#0x19
   \   000124   F582         MOV       DPL,A
   \   000126   E4           CLR       A
   \   000127   3F           ADDC      A,R7
   \   000128   F583         MOV       DPH,A
   \   00012A   D0E0         POP       A
   \   00012C   F0           MOVX      @DPTR,A
    426            MSGpkt->timestamp = timestamp;
   \   00012D   7419         MOV       A,#0x19
   \   00012F   12....       LCALL     ?XSTACK_DISP0_8
   \   000132   12....       LCALL     ?XLOAD_R0123
   \   000135   EE           MOV       A,R6
   \   000136   241A         ADD       A,#0x1a
   \   000138   F582         MOV       DPL,A
   \   00013A   E4           CLR       A
   \   00013B   3F           ADDC      A,R7
   \   00013C   F583         MOV       DPH,A
   \   00013E   12....       LCALL     ?XSTORE_R0123
    427            MSGpkt->macDestAddr = aff->macDestAddr;
   \   000141   85..82       MOV       DPL,?V0
   \   000144   85..83       MOV       DPH,?V1
   \   000147   A3           INC       DPTR
   \   000148   A3           INC       DPTR
   \   000149   A3           INC       DPTR
   \   00014A   A3           INC       DPTR
   \   00014B   A3           INC       DPTR
   \   00014C   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00014F   EE           MOV       A,R6
   \   000150   2412         ADD       A,#0x12
   \   000152   12....       LCALL     ?Subroutine5 & 0xFFFF
    428            MSGpkt->srcAddr.panId = SrcPanId;
   \                     ??CrossCallReturnLabel_84:
   \   000155   7415         MOV       A,#0x15
   \   000157   12....       LCALL     ?XSTACK_DISP0_8
   \   00015A   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00015D   EE           MOV       A,R6
   \   00015E   2410         ADD       A,#0x10
   \   000160   12....       LCALL     ?Subroutine5 & 0xFFFF
    429            MSGpkt->cmd.TransSeqNumber = 0;
   \                     ??CrossCallReturnLabel_85:
   \   000163   EE           MOV       A,R6
   \   000164   241E         ADD       A,#0x1e
   \   000166   F582         MOV       DPL,A
   \   000168   E4           CLR       A
   \   000169   3F           ADDC      A,R7
   \   00016A   F583         MOV       DPH,A
   \   00016C   E4           CLR       A
   \   00016D   12....       LCALL     ?Subroutine10 & 0xFFFF
    430            MSGpkt->cmd.DataLength = aff->asduLength;
   \                     ??CrossCallReturnLabel_12:
   \   000170   F8           MOV       R0,A
   \   000171   EE           MOV       A,R6
   \   000172   241F         ADD       A,#0x1f
   \   000174   FC           MOV       R4,A
   \   000175   E4           CLR       A
   \   000176   3F           ADDC      A,R7
   \   000177   FD           MOV       R5,A
   \   000178   8C82         MOV       DPL,R4
   \   00017A   F583         MOV       DPH,A
   \   00017C   E8           MOV       A,R0
   \   00017D   F0           MOVX      @DPTR,A
   \   00017E   A3           INC       DPTR
   \   00017F   E4           CLR       A
   \   000180   F0           MOVX      @DPTR,A
    431          
    432            if ( MSGpkt->cmd.DataLength )
   \   000181   EE           MOV       A,R6
   \   000182   2421         ADD       A,#0x21
   \   000184   F582         MOV       DPL,A
   \   000186   E4           CLR       A
   \   000187   3F           ADDC      A,R7
   \   000188   F583         MOV       DPH,A
   \   00018A   E8           MOV       A,R0
   \   00018B   6031         JZ        ??afBuildMSGIncoming_0
    433            {
    434              MSGpkt->cmd.Data = (byte *)(MSGpkt + 1);
   \   00018D   EE           MOV       A,R6
   \   00018E   2423         ADD       A,#0x23
   \   000190   FA           MOV       R2,A
   \   000191   E4           CLR       A
   \   000192   3F           ADDC      A,R7
   \   000193   FB           MOV       R3,A
   \   000194   12....       LCALL     ?Subroutine8 & 0xFFFF
    435              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \                     ??CrossCallReturnLabel_8:
   \   000197                ; Setup parameters for call to function osal_memcpy
   \   000197   7401         MOV       A,#0x1
   \   000199   12....       LCALL     ?XSTACK_DISP0_8
   \   00019C   E0           MOVX      A,@DPTR
   \   00019D   F5..         MOV       ?V0,A
   \   00019F   A3           INC       DPTR
   \   0001A0   E0           MOVX      A,@DPTR
   \   0001A1   F5..         MOV       ?V1,A
   \   0001A3   75..00       MOV       ?V2,#0x0
   \   0001A6   78..         MOV       R0,#?V0
   \   0001A8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001AB   8C82         MOV       DPL,R4
   \   0001AD   8D83         MOV       DPH,R5
   \   0001AF   E0           MOVX      A,@DPTR
   \   0001B0   FC           MOV       R4,A
   \   0001B1   A3           INC       DPTR
   \   0001B2   E0           MOVX      A,@DPTR
   \   0001B3   FD           MOV       R5,A
   \   0001B4   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001B7   7403         MOV       A,#0x3
   \   0001B9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001BC   8004         SJMP      ??afBuildMSGIncoming_1
    436            }
    437            else
    438            {
    439              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_0:
   \   0001BE   E4           CLR       A
   \   0001BF   F0           MOVX      @DPTR,A
   \   0001C0   A3           INC       DPTR
   \   0001C1   F0           MOVX      @DPTR,A
    440            }
    441          
    442          #if defined ( MT_AF_CB_FUNC )
    443            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    444            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    445            {
    446              MT_AfIncomingMsg( (void *)MSGpkt );
    447              // Release the memory.
    448              osal_msg_deallocate( (void *)MSGpkt );
    449            }
    450            else
    451          #endif
    452            {
    453              // Send message through task message.
    454              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_1:
   \   0001C2                ; Setup parameters for call to function osal_msg_send
   \   0001C2   EE           MOV       A,R6
   \   0001C3   FA           MOV       R2,A
   \   0001C4   EF           MOV       A,R7
   \   0001C5   FB           MOV       R3,A
   \   0001C6   85..82       MOV       DPL,?V6
   \   0001C9   85..83       MOV       DPH,?V7
   \   0001CC   12....       LCALL     ?Subroutine15 & 0xFFFF
    455            }
    456          }
   \                     ??CrossCallReturnLabel_27:
   \   0001CF   7403         MOV       A,#0x3
   \   0001D1   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine34_0
   \   000006                ; // Fall through to label ??Subroutine34_0
    457          
    458          /*********************************************************************
    459           * @fn      AF_DataRequest
    460           *
    461           * @brief   Common functionality for invoking APSDE_DataReq() for both
    462           *          SendMulti and MSG-Send.
    463           *
    464           * input parameters
    465           *
    466           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    467           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    468           * @param   cID - A valid cluster ID as specified by the Profile.
    469           * @param   len - Number of bytes of data pointed to by next param.
    470           * @param  *buf - A pointer to the data bytes to send.
    471           * @param  *transID - A pointer to a byte which can be modified and which will
    472           *                    be used as the transaction sequence number of the msg.
    473           * @param   options - Valid bit mask of Tx options.
    474           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    475           *
    476           * output parameters
    477           *
    478           * @param  *transID - Incremented by one if the return value is success.
    479           *
    480           * @return  afStatus_t - See previous definition of afStatus_... types.
    481           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    482          uint8 AF_DataRequestDiscoverRoute = TRUE;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    483          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    484                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    485                                     uint8 options, uint8 radius )
    486          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV       A,#-0x1e
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   8C..         MOV       ?V2,R4
   \   000010   8D..         MOV       ?V3,R5
   \   000012   89..         MOV       ?V6,R1
    487            pDescCB pfnDescCB;
    488            ZStatus_t stat;
    489            APSDE_DataReq_t req;
    490            afDataReqMTU_t mtu;
    491          
    492            // Verify source end point
    493            if ( srcEP == NULL )
   \   000014   EC           MOV       A,R4
   \   000015   4D           ORL       A,R5
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??AF_DataRequest_0 & 0xFFFF
    494            {
    495              return afStatus_INVALID_PARAMETER;
    496            }
    497          
    498          #if !defined( REFLECTOR )
    499            if ( dstAddr->addrMode == afAddrNotPresent )
    500            {
    501              return afStatus_INVALID_PARAMETER;
    502            }
    503          #endif
    504            
    505            // Check if route is available before sending data 
    506            if ( options & AF_LIMIT_CONCENTRATOR  )
   \   00001B   EA           MOV       A,R2
   \   00001C   2408         ADD       A,#0x8
   \   00001E   FE           MOV       R6,A
   \   00001F   E4           CLR       A
   \   000020   35..         ADDC      A,?V1
   \   000022   FF           MOV       R7,A
   \   000023   E9           MOV       A,R1
   \   000024   A2E3         MOV       C,0xE0 /* A   */.3
   \   000026   502C         JNC       ??AF_DataRequest_1
    507            {
    508              if ( dstAddr->addrMode != afAddr16Bit )
   \   000028   8E82         MOV       DPL,R6
   \   00002A   8F83         MOV       DPH,R7
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   6402         XRL       A,#0x2
   \   00002F   7079         JNZ       ??AF_DataRequest_0
    509              {
    510                return ( afStatus_INVALID_PARAMETER );
    511              }
    512               
    513              // First, make sure the destination is not its self, then check for an existing route.
    514              if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
    515                  && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
   \   000031                ; Setup parameters for call to function NLME_GetShortAddr
   \   000031   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000034   8A..         MOV       ?V4,R2
   \   000036   8B..         MOV       ?V5,R3
   \   000038   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00003B   E5..         MOV       A,?V4
   \   00003D   6A           XRL       A,R2
   \   00003E   7003         JNZ       ??AF_DataRequest_2
   \   000040   E5..         MOV       A,?V5
   \   000042   6B           XRL       A,R3
   \                     ??AF_DataRequest_2:
   \   000043   600F         JZ        ??AF_DataRequest_1
   \   000045                ; Setup parameters for call to function RTG_CheckRtStatus
   \   000045   7C03         MOV       R4,#0x3
   \   000047   7901         MOV       R1,#0x1
   \   000049   12....       LCALL     `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
   \   00004C   E9           MOV       A,R1
   \   00004D   6005         JZ        ??AF_DataRequest_1
    516              {
    517                // A valid route to a concentrator wasn't found
    518                return ( afStatus_NO_ROUTE );
   \   00004F   79CD         MOV       R1,#-0x33
   \   000051   02....       LJMP      ??AF_DataRequest_3 & 0xFFFF
    519              }
    520            } 
    521            
    522            // Validate broadcasting
    523            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    524                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_1:
   \   000054   8E82         MOV       DPL,R6
   \   000056   8F83         MOV       DPH,R7
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F8           MOV       R0,A
   \   00005A   7402         MOV       A,#0x2
   \   00005C   68           XRL       A,R0
   \   00005D   6005         JZ        ??AF_DataRequest_4
   \   00005F   740F         MOV       A,#0xf
   \   000061   68           XRL       A,R0
   \   000062   7039         JNZ       ??AF_DataRequest_5
    525            {
    526              // Check for valid broadcast values
    527              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_4:
   \   000064                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000064   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000067   12....       LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   00006A   E9           MOV       A,R1
   \   00006B   8E82         MOV       DPL,R6
   \   00006D   8F83         MOV       DPH,R7
   \   00006F   6025         JZ        ??AF_DataRequest_6
    528              {
    529                // Force mode to broadcast
    530                dstAddr->addrMode = afAddrBroadcast;
   \   000071   740F         MOV       A,#0xf
   \   000073   F0           MOVX      @DPTR,A
    531              }
    532              else
    533              {
    534                // Address is not a valid broadcast type
    535                if ( dstAddr->addrMode == afAddrBroadcast )
    536                {
    537                  return afStatus_INVALID_PARAMETER;
    538                }
    539              }
    540            }
    541            else if ( dstAddr->addrMode != afAddr64Bit &&
    542                      dstAddr->addrMode != afAddrGroup &&
    543                      dstAddr->addrMode != afAddrNotPresent )
    544            {
    545              return afStatus_INVALID_PARAMETER;
    546            }
    547            
    548            // Set destination address
    549            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_7:
   \   000074   E0           MOVX      A,@DPTR
   \   000075   C0E0         PUSH      A
   \   000077   740A         MOV       A,#0xa
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   D0E0         POP       A
   \   00007E   F0           MOVX      @DPTR,A
    550            if ( dstAddr->addrMode == afAddr64Bit )
   \   00007F   8E82         MOV       DPL,R6
   \   000081   8F83         MOV       DPH,R7
   \   000083   E0           MOVX      A,@DPTR
   \   000084   6403         XRL       A,#0x3
   \   000086   7027         JNZ       ??AF_DataRequest_8
    551              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   000088                ; Setup parameters for call to function sAddrExtCpy
   \   000088   AC..         MOV       R4,?V0
   \   00008A   AD..         MOV       R5,?V1
   \   00008C   7402         MOV       A,#0x2
   \   00008E   12....       LCALL     ?XSTACK_DISP101_8
   \   000091   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000094   802A         SJMP      ??CrossCallReturnLabel_78
   \                     ??AF_DataRequest_6:
   \   000096   E0           MOVX      A,@DPTR
   \   000097   640F         XRL       A,#0xf
   \   000099   70D9         JNZ       ??AF_DataRequest_7
   \   00009B   800D         SJMP      ??AF_DataRequest_0
   \                     ??AF_DataRequest_5:
   \   00009D   7403         MOV       A,#0x3
   \   00009F   68           XRL       A,R0
   \   0000A0   60D2         JZ        ??AF_DataRequest_7
   \   0000A2   7401         MOV       A,#0x1
   \   0000A4   68           XRL       A,R0
   \   0000A5   60CD         JZ        ??AF_DataRequest_7
   \   0000A7   E8           MOV       A,R0
   \   0000A8   60CA         JZ        ??AF_DataRequest_7
   \                     ??AF_DataRequest_0:
   \   0000AA   7902         MOV       R1,#0x2
   \   0000AC   02....       LJMP      ??AF_DataRequest_3 & 0xFFFF
    552            else
    553              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_8:
   \   0000AF   85..82       MOV       DPL,?V0
   \   0000B2   85..83       MOV       DPH,?V1
   \   0000B5   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0000B8   7402         MOV       A,#0x2
   \   0000BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BD   12....       LCALL     ??Subroutine34_0 & 0xFFFF
    554            
    555            req.profileID = ZDO_PROFILE_ID;
   \                     ??CrossCallReturnLabel_78:
   \   0000C0   7411         MOV       A,#0x11
   \   0000C2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C5   E4           CLR       A
   \   0000C6   F0           MOVX      @DPTR,A
   \   0000C7   A3           INC       DPTR
   \   0000C8   F0           MOVX      @DPTR,A
    556          
    557            if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   0000C9   90....       MOV       DPTR,#epList
   \   0000CC   8002         SJMP      ??AF_DataRequest_9
   \                     ??AF_DataRequest_10:
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \                     ??AF_DataRequest_9:
   \   0000D0   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000D3   6045         JZ        ??AF_DataRequest_11
   \   0000D5   8882         MOV       DPL,R0
   \   0000D7   8983         MOV       DPH,R1
   \   0000D9   12....       LCALL     ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0000DC   E5..         MOV       A,?V2
   \   0000DE   6A           XRL       A,R2
   \   0000DF   7003         JNZ       ??AF_DataRequest_12
   \   0000E1   E5..         MOV       A,?V3
   \   0000E3   6B           XRL       A,R3
   \                     ??AF_DataRequest_12:
   \   0000E4   8882         MOV       DPL,R0
   \   0000E6   8983         MOV       DPH,R1
   \   0000E8   A3           INC       DPTR
   \   0000E9   A3           INC       DPTR
   \   0000EA   A3           INC       DPTR
   \   0000EB   70E1         JNZ       ??AF_DataRequest_10
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   F8           MOV       R0,A
   \   0000EF   A3           INC       DPTR
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   FD           MOV       R5,A
   \   0000F2   E8           MOV       A,R0
   \   0000F3   4D           ORL       A,R5
   \   0000F4   6024         JZ        ??AF_DataRequest_11
    558            {
    559              uint16 *pID = (uint16 *)(pfnDescCB(
    560                                           AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   0000F6                ; Setup parameters for indirect call
   \   0000F6   85..82       MOV       DPL,?V2
   \   0000F9   85..83       MOV       DPH,?V3
   \   0000FC   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0000FF   12....       LCALL     ?CALL_IND
    561              if ( pID )
   \   000102   EA           MOV       A,R2
   \   000103   4B           ORL       A,R3
   \   000104   602A         JZ        ??CrossCallReturnLabel_80
    562              {
    563                req.profileID = *pID;
   \   000106   8A82         MOV       DPL,R2
   \   000108   8B83         MOV       DPH,R3
   \   00010A   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00010D   7411         MOV       A,#0x11
   \   00010F   12....       LCALL     ?XSTACK_DISP0_8
   \   000112   12....       LCALL     ??Subroutine34_0 & 0xFFFF
    564                osal_mem_free( pID );
   \                     ??CrossCallReturnLabel_79:
   \   000115                ; Setup parameters for call to function osal_mem_free
   \   000115   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000118   8016         SJMP      ??CrossCallReturnLabel_80
    565              }
    566            }
    567            else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_11:
   \   00011A   85..82       MOV       DPL,?V2
   \   00011D   85..83       MOV       DPH,?V3
   \   000120   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000123   600B         JZ        ??CrossCallReturnLabel_80
    568            {
    569              req.profileID = srcEP->simpleDesc->AppProfId;
   \   000125   12....       LCALL     ??Subroutine32_0 & 0xFFFF
    570            }
   \                     ??CrossCallReturnLabel_64:
   \   000128   7411         MOV       A,#0x11
   \   00012A   12....       LCALL     ?XSTACK_DISP0_8
   \   00012D   12....       LCALL     ??Subroutine34_0 & 0xFFFF
    571          
    572            req.txOptions = 0;
   \                     ??CrossCallReturnLabel_80:
   \   000130   7417         MOV       A,#0x17
   \   000132   12....       LCALL     ?XSTACK_DISP0_8
   \   000135   E4           CLR       A
   \   000136   F0           MOVX      @DPTR,A
   \   000137   A3           INC       DPTR
   \   000138   F0           MOVX      @DPTR,A
    573          
    574            if ( ( options & AF_ACK_REQUEST              ) &&
    575                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    576                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   000139   E5..         MOV       A,?V6
   \   00013B   A2E4         MOV       C,0xE0 /* A   */.4
   \   00013D   501C         JNC       ??AF_DataRequest_13
   \   00013F   740A         MOV       A,#0xa
   \   000141   12....       LCALL     ?XSTACK_DISP0_8
   \   000144   E0           MOVX      A,@DPTR
   \   000145   F8           MOV       R0,A
   \   000146   740F         MOV       A,#0xf
   \   000148   68           XRL       A,R0
   \   000149   6010         JZ        ??AF_DataRequest_13
   \   00014B   7401         MOV       A,#0x1
   \   00014D   68           XRL       A,R0
   \   00014E   600B         JZ        ??AF_DataRequest_13
    577            {
    578              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   000150   7417         MOV       A,#0x17
   \   000152   12....       LCALL     ?XSTACK_DISP0_8
   \   000155   7404         MOV       A,#0x4
   \   000157   F0           MOVX      @DPTR,A
   \   000158   A3           INC       DPTR
   \   000159   E4           CLR       A
   \   00015A   F0           MOVX      @DPTR,A
    579            }
    580          
    581            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_13:
   \   00015B   E5..         MOV       A,?V6
   \   00015D   A2E7         MOV       C,0xE0 /* A   */.7
   \   00015F   5009         JNC       ??AF_DataRequest_14
    582            {
    583              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   000161   7417         MOV       A,#0x17
   \   000163   12....       LCALL     ?XSTACK_DISP0_8
   \   000166   E0           MOVX      A,@DPTR
   \   000167   4410         ORL       A,#0x10
   \   000169   F0           MOVX      @DPTR,A
    584            }
    585          
    586            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_14:
   \   00016A   E5..         MOV       A,?V6
   \   00016C   A2E6         MOV       C,0xE0 /* A   */.6
   \   00016E   5012         JNC       ??AF_DataRequest_15
    587            {
    588              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   000170   7417         MOV       A,#0x17
   \   000172   12....       LCALL     ?XSTACK_DISP0_8
   \   000175   E0           MOVX      A,@DPTR
   \   000176   4401         ORL       A,#0x1
   \   000178   F0           MOVX      @DPTR,A
    589              mtu.aps.secure = TRUE;
   \   000179   7401         MOV       A,#0x1
   \   00017B   12....       LCALL     ?XSTACK_DISP0_8
   \   00017E   7401         MOV       A,#0x1
   \   000180   8006         SJMP      ??AF_DataRequest_16
    590            }
    591            else
    592            {
    593              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_15:
   \   000182   7401         MOV       A,#0x1
   \   000184   12....       LCALL     ?XSTACK_DISP0_8
   \   000187   E4           CLR       A
   \                     ??AF_DataRequest_16:
   \   000188   F0           MOVX      @DPTR,A
    594            }
    595          
    596            mtu.kvp = FALSE;
   \   000189   85..82       MOV       DPL,?XSP + 0
   \   00018C   85..83       MOV       DPH,?XSP + 1
   \   00018F   E4           CLR       A
   \   000190   F0           MOVX      @DPTR,A
   \   000191   7433         MOV       A,#0x33
   \   000193   12....       LCALL     ?XSTACK_DISP0_8
   \   000196   E0           MOVX      A,@DPTR
   \   000197   F5..         MOV       ?V4,A
   \   000199   A3           INC       DPTR
   \   00019A   E0           MOVX      A,@DPTR
   \   00019B   F5..         MOV       ?V5,A
    597          
    598            req.transID       = *transID;
   \   00019D   85..82       MOV       DPL,?V4
   \   0001A0   F583         MOV       DPH,A
   \   0001A2   E0           MOVX      A,@DPTR
   \   0001A3   C0E0         PUSH      A
   \   0001A5   7419         MOV       A,#0x19
   \   0001A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AA   D0E0         POP       A
   \   0001AC   12....       LCALL     ?Subroutine10 & 0xFFFF
    599            req.srcEP         = srcEP->endPoint;
   \                     ??CrossCallReturnLabel_13:
   \   0001AF   C0E0         PUSH      A
   \   0001B1   740B         MOV       A,#0xb
   \   0001B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B6   D0E0         POP       A
   \   0001B8   12....       LCALL     ?Subroutine6 & 0xFFFF
    600            req.dstEP         = dstAddr->endPoint;
   \                     ??CrossCallReturnLabel_1:
   \   0001BB   A3           INC       DPTR
   \   0001BC   A3           INC       DPTR
   \   0001BD   A3           INC       DPTR
   \   0001BE   A3           INC       DPTR
   \   0001BF   A3           INC       DPTR
   \   0001C0   E0           MOVX      A,@DPTR
   \   0001C1   C0E0         PUSH      A
   \   0001C3   740C         MOV       A,#0xc
   \   0001C5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C8   D0E0         POP       A
   \   0001CA   F0           MOVX      @DPTR,A
    601            req.clusterID     = cID;
   \   0001CB   742D         MOV       A,#0x2d
   \   0001CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D0   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0001D3   740F         MOV       A,#0xf
   \   0001D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D8   12....       LCALL     ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0001DB   742F         MOV       A,#0x2f
   \   0001DD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E0   E0           MOVX      A,@DPTR
   \   0001E1   FE           MOV       R6,A
   \   0001E2   A3           INC       DPTR
   \   0001E3   E0           MOVX      A,@DPTR
   \   0001E4   FF           MOV       R7,A
    602            req.asduLen       = len;
   \   0001E5   7413         MOV       A,#0x13
   \   0001E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EA   EE           MOV       A,R6
   \   0001EB   F0           MOVX      @DPTR,A
   \   0001EC   A3           INC       DPTR
   \   0001ED   EF           MOV       A,R7
   \   0001EE   F0           MOVX      @DPTR,A
    603            req.asdu          = buf;
   \   0001EF   7431         MOV       A,#0x31
   \   0001F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F4   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0001F7   7415         MOV       A,#0x15
   \   0001F9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FC   12....       LCALL     ??Subroutine34_0 & 0xFFFF
    604            req.discoverRoute = AF_DataRequestDiscoverRoute;//(uint8)((options & AF_DISCV_ROUTE) ? 1 : 0);
   \                     ??CrossCallReturnLabel_82:
   \   0001FF   90....       MOV       DPTR,#AF_DataRequestDiscoverRoute
   \   000202   E0           MOVX      A,@DPTR
   \   000203   C0E0         PUSH      A
   \   000205   741A         MOV       A,#0x1a
   \   000207   12....       LCALL     ?XSTACK_DISP0_8
   \   00020A   D0E0         POP       A
   \   00020C   F0           MOVX      @DPTR,A
    605            req.radiusCounter = radius;
   \   00020D   7435         MOV       A,#0x35
   \   00020F   12....       LCALL     ?XSTACK_DISP0_8
   \   000212   E0           MOVX      A,@DPTR
   \   000213   C0E0         PUSH      A
   \   000215   741B         MOV       A,#0x1b
   \   000217   12....       LCALL     ?XSTACK_DISP0_8
   \   00021A   D0E0         POP       A
   \   00021C   F0           MOVX      @DPTR,A
    606          #if defined ( INTER_PAN )
    607            req.dstPanId      = dstAddr->panId;
    608          
    609            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    610            {
    611              if ( len > INTERP_DataReqMTU() )
    612              {
    613                stat = afStatus_INVALID_PARAMETER;
    614              }
    615              else
    616              {
    617                stat = INTERP_DataReq( &req );
    618              }
    619            }
    620            else
    621          #endif // INTER_PAN
    622            {
    623              if (len > afDataReqMTU( &mtu ) )
   \   00021D                ; Setup parameters for call to function afDataReqMTU
   \   00021D   AA..         MOV       R2,?XSP + 0
   \   00021F   AB..         MOV       R3,?XSP + 1
   \   000221   12....       LCALL     `??afDataReqMTU::?relay`; Banked call to: afDataReqMTU
   \   000224   E9           MOV       A,R1
   \   000225   C3           CLR       C
   \   000226   9E           SUBB      A,R6
   \   000227   E4           CLR       A
   \   000228   9F           SUBB      A,R7
   \   000229   5019         JNC       ??AF_DataRequest_17
    624              {
    625                if (apsfSendFragmented)
   \   00022B   90....       MOV       DPTR,#apsfSendFragmented
   \   00022E   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000231   600D         JZ        ??AF_DataRequest_18
    626                {
    627                  stat = (*apsfSendFragmented)( &req );
   \   000233                ; Setup parameters for indirect call
   \   000233   7402         MOV       A,#0x2
   \   000235   12....       LCALL     ?XSTACK_DISP101_8
   \   000238   12....       LCALL     ??Subroutine31_0 & 0xFFFF
    628                }
   \                     ??CrossCallReturnLabel_51:
   \   00023B   12....       LCALL     ?CALL_IND
   \   00023E   800C         SJMP      ??AF_DataRequest_19
    629                else
    630                {
    631                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_18:
   \   000240   7E02         MOV       R6,#0x2
   \   000242   800A         SJMP      ??AF_DataRequest_20
    632                }
    633              }
    634              else
    635              {
    636                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_17:
   \   000244                ; Setup parameters for call to function APSDE_DataReq
   \   000244   7402         MOV       A,#0x2
   \   000246   12....       LCALL     ?XSTACK_DISP101_8
   \   000249   12....       LCALL     `??APSDE_DataReq::?relay`; Banked call to: APSDE_DataReq
   \                     ??AF_DataRequest_19:
   \   00024C   E9           MOV       A,R1
   \   00024D   FE           MOV       R6,A
    637              }
    638            }
    639          
    640            /*
    641             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    642             * get added to the NWK databufs. So it will not go OTA and it will not get
    643             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    644             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    645             * message with the first in line TransSeqNumber, even on a multi message.
    646             * Also note that a reflected msg will not have its confirmation generated
    647             * here.
    648             */
    649            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    650                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_20:
   \   00024E   740A         MOV       A,#0xa
   \   000250   12....       LCALL     ?XSTACK_DISP0_8
   \   000253   E0           MOVX      A,@DPTR
   \   000254   6402         XRL       A,#0x2
   \   000256   702E         JNZ       ??AF_DataRequest_21
   \   000258                ; Setup parameters for call to function NLME_GetShortAddr
   \   000258   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00025B   8A..         MOV       ?V0,R2
   \   00025D   8B..         MOV       ?V1,R3
   \   00025F   A8..         MOV       R0,?V0
   \   000261   A9..         MOV       R1,?V1
   \   000263   7402         MOV       A,#0x2
   \   000265   12....       LCALL     ?XSTACK_DISP0_8
   \   000268   E0           MOVX      A,@DPTR
   \   000269   68           XRL       A,R0
   \   00026A   7003         JNZ       ??AF_DataRequest_22
   \   00026C   A3           INC       DPTR
   \   00026D   E0           MOVX      A,@DPTR
   \   00026E   69           XRL       A,R1
   \                     ??AF_DataRequest_22:
   \   00026F   7015         JNZ       ??AF_DataRequest_21
    651            {
    652              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   000271                ; Setup parameters for call to function afDataConfirm
   \   000271   EE           MOV       A,R6
   \   000272   FB           MOV       R3,A
   \   000273   85..82       MOV       DPL,?V4
   \   000276   85..83       MOV       DPH,?V5
   \   000279   E0           MOVX      A,@DPTR
   \   00027A   FA           MOV       R2,A
   \   00027B   85..82       MOV       DPL,?V2
   \   00027E   85..83       MOV       DPH,?V3
   \   000281   E0           MOVX      A,@DPTR
   \   000282   F9           MOV       R1,A
   \   000283   12....       LCALL     `??afDataConfirm::?relay`; Banked call to: afDataConfirm
    653            }
    654          
    655            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_21:
   \   000286   EE           MOV       A,R6
   \   000287   7009         JNZ       ??AF_DataRequest_23
    656            {
    657              (*transID)++;
   \   000289   85..82       MOV       DPL,?V4
   \   00028C   85..83       MOV       DPH,?V5
   \   00028F   E0           MOVX      A,@DPTR
   \   000290   04           INC       A
   \   000291   F0           MOVX      @DPTR,A
    658            }
    659          
    660            return (afStatus_t)stat;
   \                     ??AF_DataRequest_23:
   \   000292   EE           MOV       A,R6
   \   000293   F9           MOV       R1,A
   \                     ??AF_DataRequest_3:
   \   000294   741E         MOV       A,#0x1e
   \   000296   12....       LCALL     ?DEALLOC_XSTACK8
   \   000299   7F07         MOV       R7,#0x7
   \   00029B   02....       LJMP      ?BANKED_LEAVE_XDATA
    661          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine35_0
   \   000006                ; // Fall through to label ??Subroutine35_0
    662          
    663          #if defined ( ZIGBEE_SOURCE_ROUTING )
    664          /*********************************************************************
    665           * @fn      AF_DataRequestSrcRtg
    666           *
    667           * @brief   Common functionality for invoking APSDE_DataReq() for both
    668           *          SendMulti and MSG-Send.
    669           *
    670           * input parameters
    671           *
    672           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    673           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    674           * @param   cID - A valid cluster ID as specified by the Profile.
    675           * @param   len - Number of bytes of data pointed to by next param.
    676           * @param  *buf - A pointer to the data bytes to send.
    677           * @param  *transID - A pointer to a byte which can be modified and which will
    678           *                    be used as the transaction sequence number of the msg.
    679           * @param   options - Valid bit mask of Tx options.
    680           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    681           * @param   relayCnt - Number of devices in the relay list
    682           * @param   pRelayList - Pointer to the relay list
    683           *
    684           * output parameters
    685           *
    686           * @param  *transID - Incremented by one if the return value is success.
    687           *
    688           * @return  afStatus_t - See previous definition of afStatus_... types.
    689           */
    690          
    691          afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
    692                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    693                                     uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
    694          {
    695            uint8 status;
    696            
    697            /* Add the source route to the source routing table */
    698            status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt, 
    699                                                   pRelayList );
    700          
    701            if( status == RTG_SUCCESS)
    702            {
    703              /* Call AF_DataRequest to send the data */
    704              status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
    705            }
    706            else if( status == RTG_INVALID_PATH )
    707            {
    708              /* The source route relay count is exceeding the network limit */
    709              status = afStatus_INVALID_PARAMETER;
    710            }
    711            else
    712            {
    713              /* The guaranteed adding entry fails due to memory failure */
    714              status = afStatus_MEM_FAIL;
    715            }
    716            return status;
    717          }
    718          
    719          #endif
    720          
    721          /*********************************************************************
    722           * @fn      afFindEndPointDescList
    723           *
    724           * @brief   Find the endpoint description entry from the endpoint
    725           *          number.
    726           *
    727           * @param   EndPoint - Application Endpoint to look for
    728           *
    729           * @return  the address to the endpoint/interface description entry
    730           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    731          static epList_t *afFindEndPointDescList( byte EndPoint )
   \                     afFindEndPointDescList:
    732          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    733            epList_t *epSearch;
    734          
    735            // Start at the beginning
    736            epSearch = epList;
   \   000004   90....       MOV       DPTR,#epList
   \   000007   8009         SJMP      ??afFindEndPointDescList_0
    737          
    738            // Look through the list until the end
    739            while ( epSearch )
    740            {
    741              // Is there a match?
    742              if ( epSearch->epDesc->endPoint == EndPoint )
    743              {
    744                return ( epSearch );
    745              }
    746              else
    747                epSearch = epSearch->nextDesc;  // Next entry
   \                     ??afFindEndPointDescList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \                     ??afFindEndPointDescList_0:
   \   000012   12....       LCALL     ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000015   EA           MOV       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   600C         JZ        ??afFindEndPointDescList_2
   \   000019   8A82         MOV       DPL,R2
   \   00001B   8B83         MOV       DPH,R3
   \   00001D   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000020   69           XRL       A,R1
   \   000021   70E6         JNZ       ??afFindEndPointDescList_1
   \   000023   8004         SJMP      ??afFindEndPointDescList_3
    748            }
    749          
    750            return ( (epList_t *)NULL );
   \                     ??afFindEndPointDescList_2:
   \   000025   7A00         MOV       R2,#0x0
   \   000027   7B00         MOV       R3,#0x0
   \                     ??afFindEndPointDescList_3:
   \   000029   02....       LJMP      ?Subroutine0 & 0xFFFF
    751          }
    752          
    753          /*********************************************************************
    754           * @fn      afFindEndPointDesc
    755           *
    756           * @brief   Find the endpoint description entry from the endpoint
    757           *          number.
    758           *
    759           * @param   EndPoint - Application Endpoint to look for
    760           *
    761           * @return  the address to the endpoint/interface description entry
    762           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    763          endPointDesc_t *afFindEndPointDesc( byte EndPoint )
   \                     afFindEndPointDesc:
    764          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    765            epList_t *epSearch;
    766          
    767            // Look for the endpoint
    768            epSearch = afFindEndPointDescList( EndPoint );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL     ?Subroutine25 & 0xFFFF
    769          
    770            if ( epSearch )
   \                     ??CrossCallReturnLabel_43:
   \   000008   6005         JZ        ??afFindEndPointDesc_0
    771              return ( epSearch->epDesc );
   \   00000A   12....       LCALL     ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00000D   8004         SJMP      ??afFindEndPointDesc_1
    772            else
    773              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_0:
   \   00000F   7A00         MOV       R2,#0x0
   \   000011   7B00         MOV       R3,#0x0
   \                     ??afFindEndPointDesc_1:
   \   000013   02....       LJMP      ?Subroutine2 & 0xFFFF
    774          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   E582         MOV       A,DPL
   \   000009   4583         ORL       A,DPH
   \   00000B   22           RET
    775          
    776          /*********************************************************************
    777           * @fn      afFindSimpleDesc
    778           *
    779           * @brief   Find the Simple Descriptor from the endpoint number.
    780           *
    781           * @param   EP - Application Endpoint to look for.
    782           *
    783           * @return  Non-zero to indicate that the descriptor memory must be freed.
    784           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    785          byte afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, byte EP )
   \                     afFindSimpleDesc:
    786          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V0,R1
    787            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000E   8A..         MOV       ?V2,R2
   \   000010   8B..         MOV       ?V3,R3
   \   000012   AC..         MOV       R4,?V2
   \   000014   AD..         MOV       R5,?V3
    788            byte rtrn = FALSE;
   \   000016   7A00         MOV       R2,#0x0
    789          
    790            if ( epItem )
   \   000018   EC           MOV       A,R4
   \   000019   4D           ORL       A,R5
   \   00001A   602D         JZ        ??afFindSimpleDesc_0
    791            {
    792              if ( epItem->pfnDescCB )
   \   00001C   8C82         MOV       DPL,R4
   \   00001E   8B83         MOV       DPH,R3
   \   000020   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000023   6012         JZ        ??afFindSimpleDesc_1
    793              {
    794                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   000025                ; Setup parameters for indirect call
   \   000025   AA..         MOV       R2,?V0
   \   000027   7901         MOV       R1,#0x1
   \   000029   12....       LCALL     ?CALL_IND
   \   00002C   8E82         MOV       DPL,R6
   \   00002E   8F83         MOV       DPH,R7
   \   000030   12....       LCALL     ?Subroutine8 & 0xFFFF
    795                rtrn = TRUE;
   \                     ??CrossCallReturnLabel_9:
   \   000033   7A01         MOV       R2,#0x1
   \   000035   801A         SJMP      ??afFindSimpleDesc_2
    796              }
    797              else
    798              {
    799                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_1:
   \   000037   8C82         MOV       DPL,R4
   \   000039   8B83         MOV       DPH,R3
   \   00003B   12....       LCALL     ?Subroutine14 & 0xFFFF
    800              }
    801            }
   \                     ??CrossCallReturnLabel_25:
   \   00003E   F9           MOV       R1,A
   \   00003F   8E82         MOV       DPL,R6
   \   000041   8F83         MOV       DPH,R7
   \   000043   E8           MOV       A,R0
   \   000044   F0           MOVX      @DPTR,A
   \   000045   A3           INC       DPTR
   \   000046   E9           MOV       A,R1
   \   000047   8007         SJMP      ??afFindSimpleDesc_3
    802            else
    803            {
    804              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_0:
   \   000049   8E82         MOV       DPL,R6
   \   00004B   8F83         MOV       DPH,R7
   \   00004D   E4           CLR       A
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \                     ??afFindSimpleDesc_3:
   \   000050   F0           MOVX      @DPTR,A
    805            }
    806          
    807            return rtrn;
   \                     ??afFindSimpleDesc_2:
   \   000051   EA           MOV       A,R2
   \   000052   F9           MOV       R1,A
   \   000053   02....       LJMP      ?Subroutine1 & 0xFFFF
    808          }
    809          
    810          /*********************************************************************
    811           * @fn      afGetDescCB
    812           *
    813           * @brief   Get the Descriptor callback function.
    814           *
    815           * @param   epDesc - pointer to the endpoint descriptor
    816           *
    817           * @return  function pointer or NULL
    818           */
    819          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
    820          {
    821            epList_t *epSearch;
    822          
    823            // Start at the beginning
    824            epSearch = epList;
    825          
    826            // Look through the list until the end
    827            while ( epSearch )
    828            {
    829              // Is there a match?
    830              if ( epSearch->epDesc == epDesc )
    831              {
    832                return ( epSearch->pfnDescCB );
    833              }
    834              else
    835                epSearch = epSearch->nextDesc;  // Next entry
    836            }
    837          
    838            return ( (pDescCB)NULL );
    839          }
    840          
    841          /*********************************************************************
    842           * @fn      afDataReqMTU
    843           *
    844           * @brief   Get the Data Request MTU(Max Transport Unit).
    845           *
    846           * @param   fields - afDataReqMTU_t
    847           *
    848           * @return  uint8(MTU)
    849           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    850          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    851          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    852            uint8 len;
    853            uint8 hdr;
    854          
    855            if ( fields->kvp == TRUE )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6401         XRL       A,#0x1
   \   00000C   7004         JNZ       ??afDataReqMTU_0
    856            {
    857              hdr = AF_HDR_KVP_MAX_LEN;
   \   00000E   7E08         MOV       R6,#0x8
   \   000010   8002         SJMP      ??afDataReqMTU_1
    858            }
    859            else
    860            {
    861              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000012   7E00         MOV       R6,#0x0
    862            }
    863          
    864            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
    865          
    866            return len;
   \                     ??afDataReqMTU_1:
   \   000014                ; Setup parameters for call to function APSDE_DataReqMTU
   \   000014   A3           INC       DPTR
   \   000015   AA82         MOV       R2,DPL
   \   000017   AB83         MOV       R3,DPH
   \   000019   12....       LCALL     `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
   \   00001C   E9           MOV       A,R1
   \   00001D   C3           CLR       C
   \   00001E   9E           SUBB      A,R6
   \   00001F   F9           MOV       R1,A
   \   000020                REQUIRE ?Subroutine4
   \   000020                ; // Fall through to label ?Subroutine4
    867          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    868          
    869          /*********************************************************************
    870           * @fn      afGetMatch
    871           *
    872           * @brief   Set the allow response flag.
    873           *
    874           * @param   ep - Application Endpoint to look for
    875           * @param   action - true - allow response, false - no response
    876           *
    877           * @return  TRUE allow responses, FALSE no response
    878           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    879          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
    880          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    881            epList_t *epSearch;
    882          
    883            // Look for the endpoint
    884            epSearch = afFindEndPointDescList( ep );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL     ?Subroutine25 & 0xFFFF
    885          
    886            if ( epSearch )
   \                     ??CrossCallReturnLabel_44:
   \   000008   600B         JZ        ??afGetMatch_0
    887            {
    888              if ( epSearch->flags & eEP_AllowMatch )
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00000F   5004         JNC       ??afGetMatch_0
    889                return ( TRUE );
   \   000011   7901         MOV       R1,#0x1
   \   000013   8002         SJMP      ??afGetMatch_1
    890              else
    891                return ( FALSE );
    892            }
    893            else
    894              return ( FALSE );
   \                     ??afGetMatch_0:
   \   000015   7900         MOV       R1,#0x0
   \                     ??afGetMatch_1:
   \   000017                REQUIRE ?Subroutine2
   \   000017                ; // Fall through to label ?Subroutine2
    895          }
    896          
    897          /*********************************************************************
    898           * @fn      afSetMatch
    899           *
    900           * @brief   Set the allow response flag.
    901           *
    902           * @param   ep - Application Endpoint to look for
    903           * @param   action - true - allow response, false - no response
    904           *
    905           * @return  TRUE if success, FALSE if endpoint not found
    906           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    907          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
    908          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FF           MOV       R7,A
    909            epList_t *epSearch;
    910          
    911            // Look for the endpoint
    912            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000A   8B..         MOV       ?V1,R3
   \   00000C   A9..         MOV       R1,?V1
    913          
    914            if ( epSearch )
   \   00000E   EA           MOV       A,R2
   \   00000F   49           ORL       A,R1
   \   000010   6019         JZ        ??afSetMatch_0
    915            {
    916              if ( action )
   \   000012   EA           MOV       A,R2
   \   000013   2402         ADD       A,#0x2
   \   000015   F582         MOV       DPL,A
   \   000017   E4           CLR       A
   \   000018   39           ADDC      A,R1
   \   000019   F583         MOV       DPH,A
   \   00001B   EF           MOV       A,R7
   \   00001C   6005         JZ        ??afSetMatch_1
    917              {
    918                epSearch->flags |= eEP_AllowMatch;
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   D2E0         SETB      0xE0 /* A   */.0
   \   000021   8003         SJMP      ??afSetMatch_2
    919              }
    920              else
    921              {
    922                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_1:
   \   000023   E0           MOVX      A,@DPTR
   \   000024   C2E0         CLR       0xE0 /* A   */.0
   \                     ??afSetMatch_2:
   \   000026   F0           MOVX      @DPTR,A
    923              }
    924              return ( TRUE );
   \   000027   7901         MOV       R1,#0x1
   \   000029   8002         SJMP      ??afSetMatch_3
    925            }
    926            else
    927              return ( FALSE );
   \                     ??afSetMatch_0:
   \   00002B   7900         MOV       R1,#0x0
   \                     ??afSetMatch_3:
   \   00002D   80..         SJMP      ?Subroutine2
    928          }
    929          
    930          /*********************************************************************
    931           * @fn      afNumEndPoints
    932           *
    933           * @brief   Returns the number of endpoints defined (including 0)
    934           *
    935           * @param   none
    936           *
    937           * @return  number of endpoints
    938           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    939          byte afNumEndPoints( void )
   \                     afNumEndPoints:
    940          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    941            epList_t *epSearch;
    942            byte endpoints;
    943          
    944            // Start at the beginning
    945            epSearch = epList;
   \   000004   90....       MOV       DPTR,#epList
   \   000007   12....       LCALL     ?Subroutine28 & 0xFFFF
    946            endpoints = 0;
   \                     ??CrossCallReturnLabel_49:
   \   00000A   7900         MOV       R1,#0x0
   \   00000C   800E         SJMP      ??afNumEndPoints_0
    947          
    948            while ( epSearch )
    949            {
    950              endpoints++;
   \                     ??afNumEndPoints_1:
   \   00000E   09           INC       R1
    951              epSearch = epSearch->nextDesc;
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   FA           MOV       R2,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   8A82         MOV       DPL,R2
   \   00001A   F583         MOV       DPH,A
    952            }
   \                     ??afNumEndPoints_0:
   \   00001C   E582         MOV       A,DPL
   \   00001E   4583         ORL       A,DPH
   \   000020   70EC         JNZ       ??afNumEndPoints_1
    953          
    954            return ( endpoints );
   \   000022                REQUIRE ?Subroutine0
   \   000022                ; // Fall through to label ?Subroutine0
    955          }
    956          
    957          /*********************************************************************
    958           * @fn      afEndPoints
    959           *
    960           * @brief   Fills in the passed in buffer with the endpoint (numbers).
    961           *          Use afNumEndPoints to find out how big a buffer to supply.
    962           *
    963           * @param   epBuf - pointer to mem used
    964           *
    965           * @return  void
    966           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    967          void afEndPoints( byte *epBuf, byte skipZDO )
   \                     afEndPoints:
    968          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FC           MOV       R4,A
    969            epList_t *epSearch;
    970            byte endPoint;
    971          
    972            // Start at the beginning
    973            epSearch = epList;
   \   000006   90....       MOV       DPTR,#epList
   \   000009   8028         SJMP      ??afEndPoints_0
    974          
    975            while ( epSearch )
    976            {
    977              endPoint = epSearch->epDesc->endPoint;
   \                     ??afEndPoints_1:
   \   00000B   8882         MOV       DPL,R0
   \   00000D   8983         MOV       DPH,R1
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   FD           MOV       R5,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F583         MOV       DPH,A
   \   000015   8D82         MOV       DPL,R5
   \   000017   E0           MOVX      A,@DPTR
   \   000018   FD           MOV       R5,A
    978          
    979              if ( !skipZDO || endPoint != 0 )
   \   000019   EC           MOV       A,R4
   \   00001A   6003         JZ        ??afEndPoints_2
   \   00001C   ED           MOV       A,R5
   \   00001D   600B         JZ        ??afEndPoints_3
    980                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   00001F   ED           MOV       A,R5
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   AA82         MOV       R2,DPL
   \   000028   AB83         MOV       R3,DPH
    981          
    982              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   00002A   8882         MOV       DPL,R0
   \   00002C   8983         MOV       DPH,R1
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
    983            }
   \                     ??afEndPoints_0:
   \   000033   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000036   70D3         JNZ       ??afEndPoints_1
    984          }
   \   000038   80..         SJMP      ?Subroutine0
    985          
    986          /*********************************************************************
    987           * @fn      afCopyAddress
    988           *
    989           * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
    990           *          from the zAddrType_t parameter. 
    991           *
    992           * @param   epBuf - pointer to mem used
    993           *
    994           * @return  void
    995           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    996          void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
    997          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    998            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   000009   EC           MOV       A,R4
   \   00000A   2408         ADD       A,#0x8
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   3D           ADDC      A,R5
   \   00000F   F9           MOV       R1,A
   \   000010   8882         MOV       DPL,R0
   \   000012   F583         MOV       DPH,A
   \   000014   E0           MOVX      A,@DPTR
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   F0           MOVX      @DPTR,A
    999            if ( zAddr->addrMode == Addr64Bit )
   \   000022   8882         MOV       DPL,R0
   \   000024   8983         MOV       DPH,R1
   \   000026   E0           MOVX      A,@DPTR
   \   000027   6403         XRL       A,#0x3
   \   000029   7005         JNZ       ??afCopyAddress_0
   1000            {
   1001              (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   00002B                ; Setup parameters for call to function sAddrExtCpy
   \   00002B   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00002E   800E         SJMP      ??CrossCallReturnLabel_83
   1002            }
   1003            else
   1004            {
   1005              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   000030   8C82         MOV       DPL,R4
   \   000032   8D83         MOV       DPH,R5
   \   000034   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   1006            }
   \                     ??CrossCallReturnLabel_63:
   \   000037   8A82         MOV       DPL,R2
   \   000039   8B83         MOV       DPH,R3
   \   00003B   12....       LCALL     ??Subroutine34_0 & 0xFFFF
   1007          
   1008            // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
   1009            afAddr->panId = 0;
   \                     ??CrossCallReturnLabel_83:
   \   00003E   8E82         MOV       DPL,R6
   \   000040   8F83         MOV       DPH,R7
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   E4           CLR       A
   \   00004D   F0           MOVX      @DPTR,A
   \   00004E   A3           INC       DPTR
   \   00004F   F0           MOVX      @DPTR,A
   1010          }
   \   000050   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegisterExtended::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegisterExtended

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afIncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afBuildMSGIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afBuildMSGIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDescList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDescList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindSimpleDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataReqMTU::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afGetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afSetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afNumEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afNumEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afCopyAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afCopyAddress
   1011          
   1012          /*********************************************************************
   1013          *********************************************************************/
   1014          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     54   AF_DataRequest
        0     45   -> APSDE_DataReq
        0     45   -> NLME_GetShortAddr
        0     45   -> NLME_IsAddressBroadcast
        0     45   -> RTG_CheckRtStatus
        0     45   -> afDataConfirm
        0     45   -> afDataReqMTU
        0     45   -> osal_mem_free
        0     45   -> sAddrExtCpy
      1     60   afBuildMSGIncoming
        0     19   -> afCopyAddress
        0     22   -> osal_memcpy
        0     19   -> osal_msg_allocate
        0     19   -> osal_msg_send
      1     28   afCopyAddress
        0      9   -> sAddrExtCpy
      1     59   afDataConfirm
        0     14   -> afFindEndPointDesc
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
      0     54   afDataReqMTU
        0      9   -> APSDE_DataReqMTU
      3      0   afEndPoints
      0     38   afFindEndPointDesc
        0     10   -> afFindEndPointDescList
      2     28   afFindEndPointDescList
      0     12   afFindSimpleDesc
        0     12   -> afFindEndPointDescList
      0     10   afGetMatch
        0     10   -> afFindEndPointDescList
      1     46   afIncomingData
        0     38   -> afBuildMSGIncoming
        0     28   -> afFindEndPointDesc
        0     28   -> afFindEndPointDescList
        0     28   -> aps_FindGroupForEndpoint
        0     28   -> osal_mem_free
      2      0   afInit
      2      0   afNumEndPoints
      0     10   afRegister
        0     10   -> afFindEndPointDescList
        0     10   -> afRegisterExtended
      0     22   afRegisterExtended
        0     12   -> osal_mem_alloc
      0     10   afSetMatch
        0     10   -> afFindEndPointDescList


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for AF_DataRequestDiscoverRoute>
       1  ??Subroutine30_0
       4  ??Subroutine31_0
       1  ??Subroutine32_0
       4  ??Subroutine33_0
       6  ??Subroutine34_0
       6  ??Subroutine35_0
       1  ??Subroutine36_0
       6  ??Subroutine37_0
       7  ?Subroutine0
       5  ?Subroutine1
       9  ?Subroutine10
      21  ?Subroutine11
      11  ?Subroutine12
       6  ?Subroutine13
      11  ?Subroutine14
       9  ?Subroutine15
       8  ?Subroutine16
       4  ?Subroutine17
       6  ?Subroutine18
      10  ?Subroutine19
       5  ?Subroutine2
       4  ?Subroutine20
       9  ?Subroutine21
       2  ?Subroutine22
       6  ?Subroutine23
       9  ?Subroutine24
      12  ?Subroutine25
       5  ?Subroutine26
       6  ?Subroutine27
       9  ?Subroutine28
       2  ?Subroutine29
       8  ?Subroutine3
       5  ?Subroutine4
       6  ?Subroutine5
      12  ?Subroutine6
       8  ?Subroutine7
       6  ?Subroutine8
       9  ?Subroutine9
     670  AF_DataRequest
       6  AF_DataRequest::?relay
       1  AF_DataRequestDiscoverRoute
     468  afBuildMSGIncoming
       6  afBuildMSGIncoming::?relay
      83  afCopyAddress
       6  afCopyAddress::?relay
      75  afDataConfirm
       6  afDataConfirm::?relay
      32  afDataReqMTU
       6  afDataReqMTU::?relay
      58  afEndPoints
       6  afEndPoints::?relay
      22  afFindEndPointDesc
       6  afFindEndPointDesc::?relay
      44  afFindEndPointDescList
       6  afFindEndPointDescList::?relay
      86  afFindSimpleDesc
       6  afFindSimpleDesc::?relay
      23  afGetMatch
       6  afGetMatch::?relay
     533  afIncomingData
       6  afIncomingData::?relay
      14  afInit
       6  afInit::?relay
      34  afNumEndPoints
       6  afNumEndPoints::?relay
      48  afRegister
       6  afRegister::?relay
      97  afRegisterExtended
       6  afRegisterExtended::?relay
      47  afSetMatch
       6  afSetMatch::?relay
       2  epList

 
 2 593 bytes in segment BANKED_CODE
    96 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
    97 bytes of CODE     memory
 2 593 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: none
