###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               13/Sep/2018  22:05:05
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.20
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Components\osal\common\OSAL_Clock.c
#    Command line       =  
#        -f C:\Users\ANANDA~1\AppData\Local\Temp\EW9B1E.tmp
#        (C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Components\osal\common\OSAL_Clock.c
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List
#        -lA
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List\OSAL_Clock.lst
#    Object file        =  
#        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj\OSAL_Clock.r51
#
###############################################################################

C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Components\osal\common\OSAL_Clock.c
      1          /**************************************************************************************************
      2            Filename:       OSAL_Clock.c
      3            Revised:        $Date: 2008-12-15 15:42:47 -0800 (Mon, 15 Dec 2008) $
      4            Revision:       $Revision: 18616 $
      5          
      6            Description:    OSAL Clock definition and manipulation functions.
      7          
      8            Copyright 2004-2008 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          **************************************************************************************************/
     38          
     39          /*********************************************************************
     40           * INCLUDES
     41           */
     42          
     43          #include "comdef.h"
     44          #include "OnBoard.h"
     45          #include "OSAL.h"
     46          #include "OSAL_Clock.h"
     47          
     48          /*********************************************************************
     49           * MACROS
     50           */
     51          
     52          /*********************************************************************
     53           * CONSTANTS
     54           */
     55          
     56          // (MAXCALCTICKS * 8) + (max remainder) must be <= (uint16 max), 
     57          // so: (8188 * 8) + 24 <= 65535
     58          #define MAXCALCTICKS  ((uint16)(8188))
     59          
     60          #define	BEGYEAR	        2000    //  00:00:00 January 1, 2000
     61          #define	DAY             86400UL // 24 hours * 60 minutes * 60 seconds
     62          #define	IsLeapYear(yr)	(!((yr) % 4) && (((yr) % 100) || !((yr) % 400)))
     63          #define	YearLength(yr)	(IsLeapYear(yr) ? 366 : 365)
     64          
     65          
     66          /*********************************************************************
     67           * TYPEDEFS
     68           */
     69          
     70          /*********************************************************************
     71           * GLOBAL VARIABLES
     72           */
     73          
     74          
     75          /*********************************************************************
     76           * EXTERNAL VARIABLES
     77           */
     78          
     79          /*********************************************************************
     80           * EXTERNAL FUNCTIONS
     81           */
     82          extern uint16 macMcuPrecisionCount(void);
     83          
     84          /*********************************************************************
     85           * LOCAL VARIABLES
     86           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     87          static uint16 previousMacTimerTick = 0;
   \                     previousMacTimerTick:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     88          static uint16 remUsTicks = 0;
   \                     remUsTicks:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          static uint16 timeMSec = 0;
   \                     timeMSec:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     90          
     91          // number of seconds since 0 hrs, 0 minutes, 0 seconds, on the
     92          // 1st of January 2000 UTC

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     93          UTCTime OSAL_timeSeconds = 0;
   \                     OSAL_timeSeconds:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     94          
     95          /*********************************************************************
     96           * LOCAL FUNCTION PROTOTYPES
     97           */
     98          static uint8 monthLength( uint8 lpyr, uint8 mon );
     99          
    100          static void osalClockUpdate( uint16 elapsedMSec );
    101          
    102          /*********************************************************************
    103           * FUNCTIONS
    104           *********************************************************************/
    105          
    106          /*********************************************************************
    107           * @fn      osalTimeUpdate
    108           *
    109           * @brief   Uses the free running rollover count of the MAC backoff timer;
    110           *          this timer runs freely with a constant 320 usec interval.  The
    111           *          count of 320-usec ticks is converted to msecs and used to update
    112           *          the OSAL clock and Timers by invoking osalClockUpdate() and
    113           *          osalTimerUpdate().  This function is intended to be invoked 
    114           *          from the background, not interrupt level.
    115           *
    116           * @param   None.
    117           *
    118           * @return  None.
    119           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    120          void osalTimeUpdate( void )
   \                     osalTimeUpdate:
    121          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    122            uint16 tmp;
    123            uint16 ticks320us;
    124            uint16 elapsedMSec = 0;
   \   000005   7E00         MOV       R6,#0x0
   \   000007   7F00         MOV       R7,#0x0
    125          
    126            // Get the free-running count of 320us timer ticks
    127            tmp = macMcuPrecisionCount();
   \   000009                ; Setup parameters for call to function macMcuPrecisionCount
   \   000009   12....       LCALL     `??macMcuPrecisionCount::?relay`; Banked call to: macMcuPrecisionCount
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   AC..         MOV       R4,?V0
   \   000012   AD..         MOV       R5,?V1
    128            
    129            if ( tmp != previousMacTimerTick )
   \   000014   90....       MOV       DPTR,#previousMacTimerTick
   \   000017   E0           MOVX      A,@DPTR
   \   000018   6C           XRL       A,R4
   \   000019   7003         JNZ       ??osalTimeUpdate_0
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   6D           XRL       A,R5
   \                     ??osalTimeUpdate_0:
   \   00001E   7003         JNZ       $+5
   \   000020   02....       LJMP      ??osalTimeUpdate_1 & 0xFFFF
    130            {
    131              // Calculate the elapsed ticks of the free-running timer.
    132              ticks320us = tmp - previousMacTimerTick;
   \   000023   90....       MOV       DPTR,#previousMacTimerTick
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F8           MOV       R0,A
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F9           MOV       R1,A
   \   00002B   EA           MOV       A,R2
   \   00002C   C3           CLR       C
   \   00002D   98           SUBB      A,R0
   \   00002E   F5..         MOV       ?V0,A
   \   000030   EB           MOV       A,R3
   \   000031   99           SUBB      A,R1
   \   000032   F5..         MOV       ?V1,A
    133            
    134              // Store the MAC Timer tick count for the next time through this function.
    135              previousMacTimerTick = tmp;
   \   000034   90....       MOV       DPTR,#previousMacTimerTick
   \   000037   EA           MOV       A,R2
   \   000038   F0           MOVX      @DPTR,A
   \   000039   A3           INC       DPTR
   \   00003A   EB           MOV       A,R3
   \   00003B   801F         SJMP      ??osalTimeUpdate_2
    136            
    137              /* It is necessary to loop to convert the usecs to msecs in increments so as 
    138               * not to overflow the 16-bit variables.
    139               */
    140              while ( ticks320us > MAXCALCTICKS )
    141              {
    142                ticks320us -= MAXCALCTICKS;
   \                     ??osalTimeUpdate_3:
   \   00003D   E5..         MOV       A,?V0
   \   00003F   2404         ADD       A,#0x4
   \   000041   F5..         MOV       ?V0,A
   \   000043   E5..         MOV       A,?V1
   \   000045   34E0         ADDC      A,#-0x20
   \   000047   F5..         MOV       ?V1,A
    143                elapsedMSec += MAXCALCTICKS * 8 / 25;
   \   000049   EE           MOV       A,R6
   \   00004A   243C         ADD       A,#0x3c
   \   00004C   FE           MOV       R6,A
   \   00004D   EF           MOV       A,R7
   \   00004E   340A         ADDC      A,#0xa
   \   000050   FF           MOV       R7,A
    144                remUsTicks += MAXCALCTICKS * 8 % 25;
   \   000051   90....       MOV       DPTR,#remUsTicks
   \   000054   E0           MOVX      A,@DPTR
   \   000055   2404         ADD       A,#0x4
   \   000057   F0           MOVX      @DPTR,A
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   3400         ADDC      A,#0x0
   \                     ??osalTimeUpdate_2:
   \   00005C   F0           MOVX      @DPTR,A
    145              }
   \   00005D   C3           CLR       C
   \   00005E   E5..         MOV       A,?V0
   \   000060   94FD         SUBB      A,#-0x3
   \   000062   E5..         MOV       A,?V1
   \   000064   941F         SUBB      A,#0x1f
   \   000066   50D5         JNC       ??osalTimeUpdate_3
    146            
    147              // update converted number with remaining ticks from loop and the 
    148              // accumulated remainder from loop
    149              tmp = (ticks320us * 8) + remUsTicks;
   \   000068   7403         MOV       A,#0x3
   \   00006A   78..         MOV       R0,#?V0
   \   00006C   12....       LCALL     ?S_SHL
   \   00006F   90....       MOV       DPTR,#remUsTicks
   \   000072   E0           MOVX      A,@DPTR
   \   000073   25..         ADD       A,?V0
   \   000075   FC           MOV       R4,A
   \   000076   A3           INC       DPTR
   \   000077   E0           MOVX      A,@DPTR
   \   000078   35..         ADDC      A,?V1
   \   00007A   FD           MOV       R5,A
    150                
    151              // Convert the 320 us ticks into milliseconds and a remainder
    152              elapsedMSec += tmp / 25;
   \   00007B   EC           MOV       A,R4
   \   00007C   F8           MOV       R0,A
   \   00007D   ED           MOV       A,R5
   \   00007E   F9           MOV       R1,A
   \   00007F   7A19         MOV       R2,#0x19
   \   000081   7B00         MOV       R3,#0x0
   \   000083   12....       LCALL     ?US_DIV_MOD
   \   000086   89..         MOV       ?V1,R1
   \   000088   EE           MOV       A,R6
   \   000089   28           ADD       A,R0
   \   00008A   FE           MOV       R6,A
   \   00008B   EF           MOV       A,R7
   \   00008C   35..         ADDC      A,?V1
   \   00008E   FF           MOV       R7,A
    153              remUsTicks = tmp % 25;
   \   00008F   EC           MOV       A,R4
   \   000090   F8           MOV       R0,A
   \   000091   ED           MOV       A,R5
   \   000092   F9           MOV       R1,A
   \   000093   7A19         MOV       R2,#0x19
   \   000095   7B00         MOV       R3,#0x0
   \   000097   12....       LCALL     ?US_DIV_MOD
   \   00009A   90....       MOV       DPTR,#remUsTicks
   \   00009D   EA           MOV       A,R2
   \   00009E   F0           MOVX      @DPTR,A
   \   00009F   A3           INC       DPTR
   \   0000A0   EB           MOV       A,R3
   \   0000A1   F0           MOVX      @DPTR,A
    154                  
    155              // Update OSAL Clock and Timers
    156              if ( elapsedMSec )
   \   0000A2   EE           MOV       A,R6
   \   0000A3   4F           ORL       A,R7
   \   0000A4   6043         JZ        ??osalTimeUpdate_1
    157              {
    158                osalClockUpdate( elapsedMSec );
   \   0000A6   90....       MOV       DPTR,#timeMSec
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   2E           ADD       A,R6
   \   0000AB   F0           MOVX      @DPTR,A
   \   0000AC   A3           INC       DPTR
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   3F           ADDC      A,R7
   \   0000AF   F0           MOVX      @DPTR,A
   \   0000B0   90....       MOV       DPTR,#timeMSec
   \   0000B3   C3           CLR       C
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   94E9         SUBB      A,#-0x17
   \   0000B7   A3           INC       DPTR
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   9403         SUBB      A,#0x3
   \   0000BB   4025         JC        ??osalTimeUpdate_4
   \   0000BD   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000C0   12....       LCALL     ?US_DIV_MOD
   \   0000C3   88..         MOV       ?V0,R0
   \   0000C5   89..         MOV       ?V1,R1
   \   0000C7   E4           CLR       A
   \   0000C8   F5..         MOV       ?V2,A
   \   0000CA   F5..         MOV       ?V3,A
   \   0000CC   90....       MOV       DPTR,#OSAL_timeSeconds
   \   0000CF   78..         MOV       R0,#?V0
   \   0000D1   12....       LCALL     ?L_ADD_TO_X
   \   0000D4   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000D7   12....       LCALL     ?US_DIV_MOD
   \   0000DA   90....       MOV       DPTR,#timeMSec
   \   0000DD   EA           MOV       A,R2
   \   0000DE   F0           MOVX      @DPTR,A
   \   0000DF   A3           INC       DPTR
   \   0000E0   EB           MOV       A,R3
   \   0000E1   F0           MOVX      @DPTR,A
    159                osalTimerUpdate( elapsedMSec );
   \                     ??osalTimeUpdate_4:
   \   0000E2                ; Setup parameters for call to function osalTimerUpdate
   \   0000E2   EE           MOV       A,R6
   \   0000E3   FA           MOV       R2,A
   \   0000E4   EF           MOV       A,R7
   \   0000E5   FB           MOV       R3,A
   \   0000E6   12....       LCALL     `??osalTimerUpdate::?relay`; Banked call to: osalTimerUpdate
    160              }
    161            }
    162          }
   \                     ??osalTimeUpdate_1:
   \   0000E9                REQUIRE ?Subroutine0
   \   0000E9                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    163          
    164          /*********************************************************************
    165           * @fn      osalClockUpdate
    166           *
    167           * @brief   Updates the OSAL Clock time with elapsed milliseconds.
    168           *
    169           * @param   elapsedMSec - elapsed milliseconds
    170           *
    171           * @return  none
    172           */
    173          static void osalClockUpdate( uint16 elapsedMSec )
    174          {
    175            // Add elapsed milliseconds to the saved millisecond portion of time
    176            timeMSec += elapsedMSec;
    177          
    178            // Roll up milliseconds to the number of seconds
    179            if ( timeMSec > 1000 )
    180            {
    181              OSAL_timeSeconds += timeMSec / 1000;
    182              timeMSec = timeMSec % 1000;
    183            }
    184          }
    185          
    186          /*********************************************************************
    187           * @fn      osal_setClock
    188           *
    189           * @brief   Set the new time.  This will only set the seconds portion
    190           *          of time and doesn't change the factional second counter.
    191           *
    192           * @param   newTime - number of seconds since 0 hrs, 0 minutes,
    193           *                    0 seconds, on the 1st of January 2000 UTC
    194           *
    195           * @return  none
    196           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    197          void osal_setClock( UTCTime newTime )
   \                     osal_setClock:
    198          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
    199            OSAL_timeSeconds = newTime;
   \   00000D   90....       MOV       DPTR,#OSAL_timeSeconds
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?L_MOV_TO_X
    200          }
   \   000015   80..         SJMP      ?Subroutine0
    201          
    202          /*********************************************************************
    203           * @fn      osal_getClock
    204           *
    205           * @brief   Gets the current time.  This will only return the seconds
    206           *          portion of time and doesn't include the factional second
    207           *          counter.
    208           *
    209           * @param   none
    210           *
    211           * @return  number of seconds since 0 hrs, 0 minutes, 0 seconds,
    212           *          on the 1st of January 2000 UTC
    213           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    214          UTCTime osal_getClock( void )
   \                     osal_getClock:
    215          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    216            return ( OSAL_timeSeconds );
   \   000004   90....       MOV       DPTR,#OSAL_timeSeconds
   \   000007   12....       LCALL     ?XLOAD_R2345
   \   00000A   D083         POP       DPH
   \   00000C   D082         POP       DPL
   \   00000E   02....       LJMP      ?BRET
    217          }
    218          
    219          /*********************************************************************
    220           * @fn      osal_ConvertUTCTime
    221           *
    222           * @brief   Converts UTCTime to UTCTimeStruct
    223           *
    224           * @param   tm - pointer to breakdown struct
    225           *
    226           * @param   secTime - number of seconds since 0 hrs, 0 minutes,
    227           *          0 seconds, on the 1st of January 2000 UTC
    228           *
    229           * @return  none
    230           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    231          void osal_ConvertUTCTime( UTCTimeStruct *tm, UTCTime secTime )
   \                     osal_ConvertUTCTime:
    232          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EA           MOV       A,R2
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EB           MOV       A,R3
   \   000014   F0           MOVX      @DPTR,A
    233            // calculate the time less than a day - hours, minutes, seconds
    234            {
    235              uint32 day = secTime % DAY;
   \   000015   7416         MOV       A,#0x16
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   78..         MOV       R0,#?V0
   \   00001C   12....       LCALL     ?L_MOV_X
   \   00001F   90....       MOV       DPTR,#__Constant_15180
   \   000022   78..         MOV       R0,#?V4
   \   000024   12....       LCALL     ?L_MOV_X
   \   000027   78..         MOV       R0,#?V0
   \   000029   79..         MOV       R1,#?V4
   \   00002B   12....       LCALL     ?UL_DIV_MOD
   \   00002E   7402         MOV       A,#0x2
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   78..         MOV       R0,#?V4
   \   000035   12....       LCALL     ?L_MOV_TO_X
    236              tm->seconds = day % 60UL;
   \   000038   7402         MOV       A,#0x2
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   78..         MOV       R0,#?V4
   \   00003F   12....       LCALL     ?L_MOV_X
   \   000042   90....       MOV       DPTR,#__Constant_3c
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?L_MOV_X
   \   00004A   78..         MOV       R0,#?V4
   \   00004C   79..         MOV       R1,#?V0
   \   00004E   12....       LCALL     ?UL_DIV_MOD
   \   000051   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000054   E5..         MOV       A,?V0
   \   000056   F0           MOVX      @DPTR,A
    237              tm->minutes = (day % 3600UL) / 60;
   \   000057   7402         MOV       A,#0x2
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   78..         MOV       R0,#?V4
   \   00005E   12....       LCALL     ?L_MOV_X
   \   000061   90....       MOV       DPTR,#__Constant_e10
   \   000064   78..         MOV       R0,#?V0
   \   000066   12....       LCALL     ?L_MOV_X
   \   000069   78..         MOV       R0,#?V4
   \   00006B   79..         MOV       R1,#?V0
   \   00006D   12....       LCALL     ?UL_DIV_MOD
   \   000070   90....       MOV       DPTR,#__Constant_3c
   \   000073   78..         MOV       R0,#?V4
   \   000075   12....       LCALL     ?L_MOV_X
   \   000078   78..         MOV       R0,#?V0
   \   00007A   79..         MOV       R1,#?V4
   \   00007C   12....       LCALL     ?UL_DIV_MOD
   \   00007F   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000082   A3           INC       DPTR
   \   000083   E5..         MOV       A,?V0
   \   000085   F0           MOVX      @DPTR,A
    238              tm->hour = day / 3600UL;
   \   000086   7402         MOV       A,#0x2
   \   000088   12....       LCALL     ?XSTACK_DISP0_8
   \   00008B   78..         MOV       R0,#?V0
   \   00008D   12....       LCALL     ?L_MOV_X
   \   000090   90....       MOV       DPTR,#__Constant_e10
   \   000093   78..         MOV       R0,#?V4
   \   000095   12....       LCALL     ?L_MOV_X
   \   000098   78..         MOV       R0,#?V0
   \   00009A   79..         MOV       R1,#?V4
   \   00009C   12....       LCALL     ?UL_DIV_MOD
   \   00009F   12....       LCALL     ?Subroutine2 & 0xFFFF
    239            }
   \                     ??CrossCallReturnLabel_2:
   \   0000A2   E5..         MOV       A,?V0
   \   0000A4   F0           MOVX      @DPTR,A
    240          
    241            // Fill in the calendar - day, month, year
    242            {
    243              uint16 numDays = secTime / DAY;
   \   0000A5   7416         MOV       A,#0x16
   \   0000A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AA   78..         MOV       R0,#?V0
   \   0000AC   12....       LCALL     ?L_MOV_X
   \   0000AF   90....       MOV       DPTR,#__Constant_15180
   \   0000B2   78..         MOV       R0,#?V4
   \   0000B4   12....       LCALL     ?L_MOV_X
   \   0000B7   78..         MOV       R0,#?V0
   \   0000B9   79..         MOV       R1,#?V4
   \   0000BB   12....       LCALL     ?UL_DIV_MOD
   \   0000BE   AE..         MOV       R6,?V0
   \   0000C0   AF..         MOV       R7,?V1
    244              tm->year = BEGYEAR;
   \   0000C2   85..82       MOV       DPL,?XSP + 0
   \   0000C5   85..83       MOV       DPH,?XSP + 1
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   2405         ADD       A,#0x5
   \   0000CB   F5..         MOV       ?V0,A
   \   0000CD   A3           INC       DPTR
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   3400         ADDC      A,#0x0
   \   0000D1   F5..         MOV       ?V1,A
   \   0000D3   85..82       MOV       DPL,?V0
   \   0000D6   F583         MOV       DPH,A
   \   0000D8   74D0         MOV       A,#-0x30
   \   0000DA   F0           MOVX      @DPTR,A
   \   0000DB   A3           INC       DPTR
   \   0000DC   7407         MOV       A,#0x7
   \   0000DE   8018         SJMP      ??osal_ConvertUTCTime_0
    245              while ( numDays >= YearLength( tm->year ) )
    246              {
    247                numDays -= YearLength( tm->year );
   \                     ??osal_ConvertUTCTime_1:
   \   0000E0   786D         MOV       R0,#0x6d
   \                     ??osal_ConvertUTCTime_2:
   \   0000E2   C3           CLR       C
   \   0000E3   EE           MOV       A,R6
   \   0000E4   98           SUBB      A,R0
   \   0000E5   FE           MOV       R6,A
   \   0000E6   EF           MOV       A,R7
   \   0000E7   9401         SUBB      A,#0x1
   \   0000E9   FF           MOV       R7,A
    248                tm->year++;
   \   0000EA   85..82       MOV       DPL,?V0
   \   0000ED   85..83       MOV       DPH,?V1
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   2401         ADD       A,#0x1
   \   0000F3   F0           MOVX      @DPTR,A
   \   0000F4   A3           INC       DPTR
   \   0000F5   E0           MOVX      A,@DPTR
   \   0000F6   3400         ADDC      A,#0x0
   \                     ??osal_ConvertUTCTime_0:
   \   0000F8   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000FB   F5..         MOV       ?V4,A
   \   0000FD   7022         JNZ       ??osal_ConvertUTCTime_3
   \   0000FF   EC           MOV       A,R4
   \   000100   F8           MOV       R0,A
   \   000101   ED           MOV       A,R5
   \   000102   F9           MOV       R1,A
   \   000103   7A64         MOV       R2,#0x64
   \   000105   7B00         MOV       R3,#0x0
   \   000107   12....       LCALL     ?US_DIV_MOD
   \   00010A   EA           MOV       A,R2
   \   00010B   4B           ORL       A,R3
   \   00010C   700F         JNZ       ??osal_ConvertUTCTime_4
   \   00010E   EC           MOV       A,R4
   \   00010F   F8           MOV       R0,A
   \   000110   ED           MOV       A,R5
   \   000111   F9           MOV       R1,A
   \   000112   7A90         MOV       R2,#-0x70
   \   000114   7B01         MOV       R3,#0x1
   \   000116   12....       LCALL     ?US_DIV_MOD
   \   000119   EA           MOV       A,R2
   \   00011A   4B           ORL       A,R3
   \   00011B   7004         JNZ       ??osal_ConvertUTCTime_3
   \                     ??osal_ConvertUTCTime_4:
   \   00011D   786E         MOV       R0,#0x6e
   \   00011F   8002         SJMP      ??osal_ConvertUTCTime_5
   \                     ??osal_ConvertUTCTime_3:
   \   000121   786D         MOV       R0,#0x6d
   \                     ??osal_ConvertUTCTime_5:
   \   000123   C3           CLR       C
   \   000124   EE           MOV       A,R6
   \   000125   98           SUBB      A,R0
   \   000126   EF           MOV       A,R7
   \   000127   9401         SUBB      A,#0x1
   \   000129   4026         JC        ??osal_ConvertUTCTime_6
   \   00012B   E5..         MOV       A,?V4
   \   00012D   70B1         JNZ       ??osal_ConvertUTCTime_1
   \   00012F   EC           MOV       A,R4
   \   000130   F8           MOV       R0,A
   \   000131   ED           MOV       A,R5
   \   000132   F9           MOV       R1,A
   \   000133   7A64         MOV       R2,#0x64
   \   000135   7B00         MOV       R3,#0x0
   \   000137   12....       LCALL     ?US_DIV_MOD
   \   00013A   EA           MOV       A,R2
   \   00013B   4B           ORL       A,R3
   \   00013C   700F         JNZ       ??osal_ConvertUTCTime_7
   \   00013E   EC           MOV       A,R4
   \   00013F   F8           MOV       R0,A
   \   000140   ED           MOV       A,R5
   \   000141   F9           MOV       R1,A
   \   000142   7A90         MOV       R2,#-0x70
   \   000144   7B01         MOV       R3,#0x1
   \   000146   12....       LCALL     ?US_DIV_MOD
   \   000149   EA           MOV       A,R2
   \   00014A   4B           ORL       A,R3
   \   00014B   7093         JNZ       ??osal_ConvertUTCTime_1
   \                     ??osal_ConvertUTCTime_7:
   \   00014D   786E         MOV       R0,#0x6e
   \   00014F   8091         SJMP      ??osal_ConvertUTCTime_2
    249              }
    250          
    251              tm->month = 0;
   \                     ??osal_ConvertUTCTime_6:
   \   000151   85..82       MOV       DPL,?XSP + 0
   \   000154   85..83       MOV       DPH,?XSP + 1
   \   000157   E0           MOVX      A,@DPTR
   \   000158   2404         ADD       A,#0x4
   \   00015A   F5..         MOV       ?V2,A
   \   00015C   A3           INC       DPTR
   \   00015D   E0           MOVX      A,@DPTR
   \   00015E   3400         ADDC      A,#0x0
   \   000160   F5..         MOV       ?V3,A
   \   000162   85..82       MOV       DPL,?V2
   \   000165   F583         MOV       DPH,A
   \   000167   E4           CLR       A
   \   000168   8012         SJMP      ??osal_ConvertUTCTime_8
    252              while ( numDays >= monthLength( IsLeapYear( tm->year ), tm->month ) )
    253              {
    254                numDays -= monthLength( IsLeapYear( tm->year ), tm->month );
   \                     ??osal_ConvertUTCTime_9:
   \   00016A   7900         MOV       R1,#0x0
   \                     ??osal_ConvertUTCTime_10:
   \   00016C                ; Setup parameters for call to function monthLength
   \   00016C   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00016F   FE           MOV       R6,A
   \   000170   EF           MOV       A,R7
   \   000171   9400         SUBB      A,#0x0
   \   000173   FF           MOV       R7,A
    255                tm->month++;
   \   000174   85..82       MOV       DPL,?V2
   \   000177   85..83       MOV       DPH,?V3
   \   00017A   E0           MOVX      A,@DPTR
   \   00017B   04           INC       A
   \                     ??osal_ConvertUTCTime_8:
   \   00017C   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00017F   7022         JNZ       ??osal_ConvertUTCTime_11
   \   000181   EC           MOV       A,R4
   \   000182   F8           MOV       R0,A
   \   000183   ED           MOV       A,R5
   \   000184   F9           MOV       R1,A
   \   000185   7A64         MOV       R2,#0x64
   \   000187   7B00         MOV       R3,#0x0
   \   000189   12....       LCALL     ?US_DIV_MOD
   \   00018C   EA           MOV       A,R2
   \   00018D   4B           ORL       A,R3
   \   00018E   700F         JNZ       ??osal_ConvertUTCTime_12
   \   000190   EC           MOV       A,R4
   \   000191   F8           MOV       R0,A
   \   000192   ED           MOV       A,R5
   \   000193   F9           MOV       R1,A
   \   000194   7A90         MOV       R2,#-0x70
   \   000196   7B01         MOV       R3,#0x1
   \   000198   12....       LCALL     ?US_DIV_MOD
   \   00019B   EA           MOV       A,R2
   \   00019C   4B           ORL       A,R3
   \   00019D   7004         JNZ       ??osal_ConvertUTCTime_11
   \                     ??osal_ConvertUTCTime_12:
   \   00019F   7901         MOV       R1,#0x1
   \   0001A1   8002         SJMP      ??osal_ConvertUTCTime_13
   \                     ??osal_ConvertUTCTime_11:
   \   0001A3   7900         MOV       R1,#0x0
   \                     ??osal_ConvertUTCTime_13:
   \   0001A5                ; Setup parameters for call to function monthLength
   \   0001A5   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0001A8   EF           MOV       A,R7
   \   0001A9   9400         SUBB      A,#0x0
   \   0001AB   4027         JC        ??osal_ConvertUTCTime_14
   \   0001AD   12....       LCALL     ?Subroutine7 & 0xFFFF
    256              }
   \                     ??CrossCallReturnLabel_12:
   \   0001B0   70B8         JNZ       ??osal_ConvertUTCTime_9
   \   0001B2   EC           MOV       A,R4
   \   0001B3   F8           MOV       R0,A
   \   0001B4   ED           MOV       A,R5
   \   0001B5   F9           MOV       R1,A
   \   0001B6   7A64         MOV       R2,#0x64
   \   0001B8   7B00         MOV       R3,#0x0
   \   0001BA   12....       LCALL     ?US_DIV_MOD
   \   0001BD   EA           MOV       A,R2
   \   0001BE   4B           ORL       A,R3
   \   0001BF   700F         JNZ       ??osal_ConvertUTCTime_15
   \   0001C1   EC           MOV       A,R4
   \   0001C2   F8           MOV       R0,A
   \   0001C3   ED           MOV       A,R5
   \   0001C4   F9           MOV       R1,A
   \   0001C5   7A90         MOV       R2,#-0x70
   \   0001C7   7B01         MOV       R3,#0x1
   \   0001C9   12....       LCALL     ?US_DIV_MOD
   \   0001CC   EA           MOV       A,R2
   \   0001CD   4B           ORL       A,R3
   \   0001CE   709A         JNZ       ??osal_ConvertUTCTime_9
   \                     ??osal_ConvertUTCTime_15:
   \   0001D0   7901         MOV       R1,#0x1
   \   0001D2   8098         SJMP      ??osal_ConvertUTCTime_10
    257          
    258              tm->day = numDays;
   \                     ??osal_ConvertUTCTime_14:
   \   0001D4   12....       LCALL     ?Subroutine2 & 0xFFFF
    259            }
   \                     ??CrossCallReturnLabel_3:
   \   0001D7   A3           INC       DPTR
   \   0001D8   EE           MOV       A,R6
   \   0001D9   F0           MOVX      @DPTR,A
    260          }
   \   0001DA   7406         MOV       A,#0x6
   \   0001DC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001DF   7F08         MOV       R7,#0x8
   \   0001E1   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F8           MOV       R0,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F583         MOV       DPH,A
   \   00000C   8882         MOV       DPL,R0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FA           MOV       R2,A
   \   000008   12....       LCALL     `??monthLength::?relay`; Banked call to: monthLength
   \   00000B   E9           MOV       A,R1
   \   00000C   F8           MOV       R0,A
   \   00000D   C3           CLR       C
   \   00000E   EE           MOV       A,R6
   \   00000F   98           SUBB      A,R0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FC           MOV       R4,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   FD           MOV       R5,A
   \   00000B   EC           MOV       A,R4
   \   00000C   5403         ANL       A,#0x3
   \   00000E   22           RET
    261          
    262          /*********************************************************************
    263           * @fn      monthLength
    264           *
    265           * @param   lpyr - 1 for leap year, 0 if not
    266           *
    267           * @param   mon - 0 - 11 (jan - dec)
    268           *
    269           * @return  returns the number of days in a month
    270           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    271          static uint8 monthLength( uint8 lpyr, uint8 mon )
   \                     monthLength:
    272          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   \   000001   F8           MOV       R0,A
    273            uint8 days = 31;
   \   000002   791F         MOV       R1,#0x1f
    274          
    275          	if ( mon == 1 ) // feb
   \   000004   7401         MOV       A,#0x1
   \   000006   6A           XRL       A,R2
   \   000007   7006         JNZ       ??monthLength_0
    276          		days = ( 28 + lpyr );
   \   000009   741C         MOV       A,#0x1c
   \   00000B   28           ADD       A,R0
   \   00000C   F9           MOV       R1,A
   \   00000D   800E         SJMP      ??monthLength_1
    277            else
    278            {
    279              if ( mon > 6 )
   \                     ??monthLength_0:
   \   00000F   EA           MOV       A,R2
   \   000010   C3           CLR       C
   \   000011   9407         SUBB      A,#0x7
   \   000013   4001         JC        ??monthLength_2
    280                mon--;
   \   000015   1A           DEC       R2
    281          
    282              if ( (mon % 2) == 1 )
   \                     ??monthLength_2:
   \   000016   EA           MOV       A,R2
   \   000017   A2E0         MOV       C,0xE0 /* A   */.0
   \   000019   5002         JNC       ??monthLength_1
    283                days = 30;
   \   00001B   791E         MOV       R1,#0x1e
    284            }
    285          
    286          	return ( days );
   \                     ??monthLength_1:
   \   00001D   02....       LJMP      ?BRET
    287          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   90....       MOV       DPTR,#timeMSec
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F9           MOV       R1,A
   \   000008   7AE8         MOV       R2,#-0x18
   \   00000A   7B03         MOV       R3,#0x3
   \   00000C   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_15180:
   \   000000   80510100     DD 86400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3c:
   \   000000   3C000000     DD 60

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_e10:
   \   000000   100E0000     DD 3600

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osalTimeUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalTimeUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_setClock::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_setClock

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_getClock::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_getClock

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_ConvertUTCTime::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_ConvertUTCTime

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??monthLength::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    monthLength

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     22   monthLength
      0     12   osalTimeUpdate
        0     12   -> macMcuPrecisionCount
        0     12   -> osalTimerUpdate
      1     26   osal_ConvertUTCTime
        0     22   -> monthLength
      2      0   osal_getClock
      0     12   osal_setClock


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ?Subroutine0
       5  ?Subroutine1
       6  ?Subroutine2
      17  ?Subroutine3
      13  ?Subroutine4
       4  ?Subroutine5
      15  ?Subroutine6
      15  ?Subroutine7
       4  OSAL_timeSeconds
       4  __Constant_15180
       4  __Constant_3c
       4  __Constant_e10
      32  monthLength
       6  monthLength::?relay
     233  osalTimeUpdate
       6  osalTimeUpdate::?relay
     484  osal_ConvertUTCTime
       6  osal_ConvertUTCTime::?relay
      17  osal_getClock
       6  osal_getClock::?relay
      23  osal_setClock
       6  osal_setClock::?relay
       2  previousMacTimerTick
       2  remUsTicks
       2  timeMSec

 
 869 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
  12 bytes in segment XDATA_ROM_C
  10 bytes in segment XDATA_Z
 
  30 bytes of CODE     memory
   0 bytes of CONST    memory (+ 12 bytes shared)
 869 bytes of HUGECODE memory
  10 bytes of XDATA    memory

Errors: none
Warnings: none
