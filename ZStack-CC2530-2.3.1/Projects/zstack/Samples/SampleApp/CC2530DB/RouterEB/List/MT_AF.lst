###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               12/Sep/2018  17:17:16
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.20
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\mt\MT_AF.c
#    Command line       =  
#        -f C:\Users\ANANDA~1\AppData\Local\Temp\EWC9AF.tmp ("C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\mt\MT_AF.c"
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List"
#        -lA "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List\MT_AF.lst
#    Object file        =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj\MT_AF.r51
#
###############################################################################

C:\Users\Ananda Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\mt\MT_AF.c
      1          /**************************************************************************************************
      2            Filename:       MT_AF.c
      3            Revised:        $Date: 2010-08-13 18:14:16 -0700 (Fri, 13 Aug 2010) $
      4            Revision:       $Revision: 23411 $
      5          
      6          
      7            Description:    MonitorTest functions for the AF layer.
      8          
      9          
     10            Copyright 2007-2010 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          
     40          **************************************************************************************************/
     41          
     42          /***************************************************************************************************
     43           * INCLUDES
     44           ***************************************************************************************************/
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "MT.h"
     48          #include "MT_AF.h"
     49          #include "MT_ZDO.h"
     50          #include "nwk.h"
     51          #include "OnBoard.h"
     52          #include "MT_UART.h"
     53          
     54          #if defined INTER_PAN
     55          #include "stub_aps.h"
     56          #endif
     57          
     58          /* ------------------------------------------------------------------------------------------------
     59           *                                          Constants
     60           * ------------------------------------------------------------------------------------------------
     61           */
     62          
     63          #if !defined MT_AF_EXEC_CNT
     64          #define MT_AF_EXEC_CNT  15
     65          #endif
     66          
     67          #if !defined MT_AF_EXEC_DLY
     68          #define MT_AF_EXEC_DLY  1000
     69          #endif
     70          
     71          /* ------------------------------------------------------------------------------------------------
     72           *                                           Typedefs
     73           * ------------------------------------------------------------------------------------------------
     74           */
     75          
     76          /*
     77          typedef struct
     78          {
     79            union
     80            {
     81              uint16      shortAddr;
     82              ZLongAddr_t extAddr;
     83            } addr;
     84            afAddrMode_t addrMode;
     85            byte endPoint;
     86            uint16 panId;  // used for the INTER_PAN feature
     87          } afAddrType_t;
     88          
     89          typedef struct
     90          {
     91            byte   TransSeqNumber;
     92            uint16 DataLength;               // Number of bytes in TransData
     93            byte  *Data;
     94          } afMSGCommandFormat_t;
     95           */
     96          
     97          typedef struct
     98          {
     99            uint8 *data;
    100            afAddrType_t dstAddr;
    101            endPointDesc_t *epDesc;
    102            uint16 cId;
    103            uint16 dataLen;
    104            uint8 transId;
    105            uint8 txOpts;
    106            uint8 radius;
    107            uint8 tick;
    108          } mtAfDataReq_t;
    109          
    110          struct _mtAfInMsgList_t
    111          {
    112            struct _mtAfInMsgList_t *next;
    113            uint8 *data;
    114            uint32 timestamp;         // Receipt timestamp from MAC.
    115            uint8 tick;
    116          };
    117          typedef struct _mtAfInMsgList_t mtAfInMsgList_t;
    118          
    119          /* ------------------------------------------------------------------------------------------------
    120           *                                        Local Variables
    121           * ------------------------------------------------------------------------------------------------
    122           */
    123          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    124          mtAfInMsgList_t *pMtAfInMsgList = NULL;
   \                     pMtAfInMsgList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          mtAfDataReq_t *pMtAfDataReq = NULL;
   \                     pMtAfDataReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    126          
    127          /* ------------------------------------------------------------------------------------------------
    128           *                                        Global Variables
    129           * ------------------------------------------------------------------------------------------------
    130           */
    131          
    132          #if defined ( MT_AF_CB_FUNC )
    133          uint16 _afCallbackSub;
    134          #endif
    135          
    136          /* ------------------------------------------------------------------------------------------------
    137           *                                        Local Functions
    138           * ------------------------------------------------------------------------------------------------
    139           */
    140          
    141          void MT_AfRegister(uint8 *pBuf);
    142          void MT_AfDataRequest(uint8 *pBuf);
    143          
    144          #if defined ( ZIGBEE_SOURCE_ROUTING )
    145          void MT_AfDataRequestSrcRtg(uint8 *pBuf);
    146          #endif
    147          
    148          #if defined INTER_PAN
    149          static void MT_AfInterPanCtl(uint8 *pBuf);
    150          #endif
    151          
    152          static void MT_AfDataRetrieve(uint8 *pBuf);
    153          static void MT_AfDataStore(uint8 *pBuf);
    154          
    155          /**************************************************************************************************
    156           * @fn          MT_AfExec
    157           *
    158           * @brief       This function is invoked by an MT timer event.
    159           *
    160           * input parameters
    161           *
    162           * None.
    163           *
    164           * output parameters
    165           *
    166           * None.
    167           *
    168           * @return      None.
    169           **************************************************************************************************
    170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    171          void MT_AfExec(void)
   \                     MT_AfExec:
    172          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    173            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \                     ??MT_AfExec_0:
   \   000005   90....       MOV       DPTR,#pMtAfInMsgList
   \   000008   8008         SJMP      ??MT_AfExec_1
    174          
    175            while (pItem != NULL)
    176            {
    177              if (--(pItem->tick) == 0)
    178              {
    179                if (pMtAfInMsgList == pItem)
    180                {
    181                  pMtAfInMsgList = pItem->next;
    182                  (void)osal_mem_free(pItem);
    183                  pItem = pMtAfInMsgList;
    184                }
    185                else
    186                {
    187                  pPrev->next = pItem->next;
    188                  (void)osal_mem_free(pItem);
    189                  pItem = pPrev->next;
    190                }
    191              }
    192              else
    193              {
    194                pPrev = pItem;
   \                     ??MT_AfExec_2:
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    195                pItem = pItem->next;
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
    196              }
   \                     ??MT_AfExec_1:
   \   000012   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000015   EA           MOV       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   6038         JZ        ??MT_AfExec_3
   \   000019   EA           MOV       A,R2
   \   00001A   2408         ADD       A,#0x8
   \   00001C   F582         MOV       DPL,A
   \   00001E   E4           CLR       A
   \   00001F   3B           ADDC      A,R3
   \   000020   F583         MOV       DPH,A
   \   000022   E0           MOVX      A,@DPTR
   \   000023   14           DEC       A
   \   000024   F0           MOVX      @DPTR,A
   \   000025   70E3         JNZ       ??MT_AfExec_2
   \   000027   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   00002A   EA           MOV       A,R2
   \   00002B   68           XRL       A,R0
   \   00002C   7002         JNZ       ??MT_AfExec_4
   \   00002E   EB           MOV       A,R3
   \   00002F   69           XRL       A,R1
   \                     ??MT_AfExec_4:
   \   000030   8A82         MOV       DPL,R2
   \   000032   8B83         MOV       DPH,R3
   \   000034   7008         JNZ       ??MT_AfExec_5
   \   000036   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000039                ; Setup parameters for call to function osal_mem_free
   \   000039   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00003C   80C7         SJMP      ??MT_AfExec_0
   \                     ??MT_AfExec_5:
   \   00003E   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000041   8E82         MOV       DPL,R6
   \   000043   8F83         MOV       DPH,R7
   \   000045   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000048                ; Setup parameters for call to function osal_mem_free
   \   000048   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00004B   8E82         MOV       DPL,R6
   \   00004D   8F83         MOV       DPH,R7
   \   00004F   80C1         SJMP      ??MT_AfExec_1
    197            }
    198          
    199            if (pMtAfDataReq != NULL)
   \                     ??MT_AfExec_3:
   \   000051   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000054   6015         JZ        ??MT_AfExec_6
    200            {
    201              if (--(pMtAfDataReq->tick) == 0)
   \   000056   E8           MOV       A,R0
   \   000057   2417         ADD       A,#0x17
   \   000059   F582         MOV       DPL,A
   \   00005B   E4           CLR       A
   \   00005C   39           ADDC      A,R1
   \   00005D   F583         MOV       DPH,A
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   14           DEC       A
   \   000061   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000064   E0           MOVX      A,@DPTR
   \   000065   7004         JNZ       ??MT_AfExec_6
    202              {
    203                (void)osal_mem_free(pMtAfDataReq);
   \   000067                ; Setup parameters for call to function osal_mem_free
   \   000067   12....       LCALL     ?Subroutine6 & 0xFFFF
    204                pMtAfDataReq = NULL;
    205              }
    206            }
   \                     ??CrossCallReturnLabel_8:
   \   00006A   F0           MOVX      @DPTR,A
    207          
    208            if ((pMtAfInMsgList != NULL) || (pMtAfDataReq != NULL))
   \                     ??MT_AfExec_6:
   \   00006B   90....       MOV       DPTR,#pMtAfInMsgList
   \   00006E   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000071   7005         JNZ       ??MT_AfExec_7
   \   000073   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000076   6008         JZ        ??CrossCallReturnLabel_55
    209            {
    210              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??MT_AfExec_7:
   \   000078                ; Setup parameters for call to function osal_start_timerEx
   \   000078   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00007B   6003         JZ        ??CrossCallReturnLabel_55
    211              {
    212                osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   00007D                ; Setup parameters for call to function osal_set_event
   \   00007D   12....       LCALL     ?Subroutine31 & 0xFFFF
    213              }
    214            }
    215          }
   \                     ??CrossCallReturnLabel_55:
   \   000080                REQUIRE ?Subroutine0
   \   000080                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   7A08         MOV       R2,#0x8
   \   000002   7B00         MOV       R3,#0x0
   \   000004   90....       MOV       DPTR,#MT_TaskID
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   7CE8         MOV       R4,#-0x18
   \   000002   7D03         MOV       R5,#0x3
   \   000004   7A08         MOV       R2,#0x8
   \   000006   7B00         MOV       R3,#0x0
   \   000008   90....       MOV       DPTR,#MT_TaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000010   E9           MOV       A,R1
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   C8           XCH       A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#pMtAfDataReq
   \   000004   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000007   2417         ADD       A,#0x17
   \   000009   F582         MOV       DPL,A
   \   00000B   E4           CLR       A
   \   00000C   38           ADDC      A,R0
   \   00000D   F583         MOV       DPH,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine51_0
   \   000001                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000003   90....       MOV       DPTR,#pMtAfInMsgList
   \   000006   E8           MOV       A,R0
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   E9           MOV       A,R1
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   90....       MOV       DPTR,#pMtAfInMsgList
   \   000003                REQUIRE ??Subroutine57_0
   \   000003                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003                REQUIRE ??Subroutine58_0
   \   000003                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000006   90....       MOV       DPTR,#pMtAfDataReq
   \   000009   E4           CLR       A
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET
    216          
    217          /***************************************************************************************************
    218           * @fn      MT_AfCommandProcessing
    219           *
    220           * @brief   Process all the AF commands that are issued by test tool
    221           *
    222           * @param   pBuf - pointer to the received buffer
    223           *
    224           * @return  status
    225           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    226          uint8 MT_AfCommandProcessing(uint8 *pBuf)
   \                     MT_AfCommandProcessing:
    227          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    228            uint8 status = MT_RPC_SUCCESS;
   \   000005   7E00         MOV       R6,#0x0
    229          
    230            switch (pBuf[MT_RPC_POS_CMD1])
   \   000007   8A82         MOV       DPL,R2
   \   000009   8B83         MOV       DPH,R3
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   600F         JZ        ??MT_AfCommandProcessing_0
   \   000010   14           DEC       A
   \   000011   6011         JZ        ??MT_AfCommandProcessing_1
   \   000013   14           DEC       A
   \   000014   600E         JZ        ??MT_AfCommandProcessing_1
   \   000016   24F1         ADD       A,#-0xf
   \   000018   6014         JZ        ??MT_AfCommandProcessing_2
   \   00001A   14           DEC       A
   \   00001B   600C         JZ        ??MT_AfCommandProcessing_3
   \   00001D   8014         SJMP      ??MT_AfCommandProcessing_4
    231            {
    232              case MT_AF_REGISTER:
    233                MT_AfRegister(pBuf);
   \                     ??MT_AfCommandProcessing_0:
   \   00001F                ; Setup parameters for call to function MT_AfRegister
   \   00001F   12....       LCALL     `??MT_AfRegister::?relay`; Banked call to: MT_AfRegister
    234                break;
   \   000022   8011         SJMP      ??MT_AfCommandProcessing_5
    235          
    236              case MT_AF_DATA_REQUEST:
    237              case MT_AF_DATA_REQUEST_EXT:
    238                MT_AfDataRequest(pBuf);
   \                     ??MT_AfCommandProcessing_1:
   \   000024                ; Setup parameters for call to function MT_AfDataRequest
   \   000024   12....       LCALL     `??MT_AfDataRequest::?relay`; Banked call to: MT_AfDataRequest
    239                break;
   \   000027   800C         SJMP      ??MT_AfCommandProcessing_5
    240          
    241              case MT_AF_DATA_RETRIEVE:
    242                MT_AfDataRetrieve(pBuf);
   \                     ??MT_AfCommandProcessing_3:
   \   000029                ; Setup parameters for call to function MT_AfDataRetrieve
   \   000029   12....       LCALL     `??MT_AfDataRetrieve::?relay`; Banked call to: MT_AfDataRetrieve
    243                break;
   \   00002C   8007         SJMP      ??MT_AfCommandProcessing_5
    244                
    245              case MT_AF_DATA_STORE:
    246                MT_AfDataStore(pBuf);
   \                     ??MT_AfCommandProcessing_2:
   \   00002E                ; Setup parameters for call to function MT_AfDataStore
   \   00002E   12....       LCALL     `??MT_AfDataStore::?relay`; Banked call to: MT_AfDataStore
    247                break;
   \   000031   8002         SJMP      ??MT_AfCommandProcessing_5
    248                
    249          #if defined ( ZIGBEE_SOURCE_ROUTING )
    250              case MT_AF_DATA_REQUEST_SRCRTG:
    251                MT_AfDataRequestSrcRtg(pBuf);
    252                break;
    253          #endif
    254                
    255          #if defined INTER_PAN
    256              case MT_AF_INTER_PAN_CTL:
    257                MT_AfInterPanCtl(pBuf);
    258                break; 
    259          #endif
    260                
    261              default:
    262                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_AfCommandProcessing_4:
   \   000033   7E02         MOV       R6,#0x2
    263                break;
    264            }
    265          
    266            return status;
   \                     ??MT_AfCommandProcessing_5:
   \   000035   EE           MOV       A,R6
   \   000036   F9           MOV       R1,A
   \   000037   80..         SJMP      ?Subroutine0
    267          }
    268          
    269          /***************************************************************************************************
    270           * @fn      MT_AfRegister
    271           *
    272           * @brief   Process AF Register command
    273           *
    274           * @param   pBuf - pointer to the received buffer
    275           *
    276           * @return  none
    277           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    278          void MT_AfRegister(uint8 *pBuf)
   \                     MT_AfRegister:
    279          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
    280            uint8 cmdId;
    281            uint8 retValue = ZMemError;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7410         MOV       A,#0x10
   \   000016   12....       LCALL     ?Subroutine34 & 0xFFFF
    282            endPointDesc_t *epDesc;
    283          
    284            /* parse header */
    285            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_60:
   \   000019   F5..         MOV       ?V0,A
    286            pBuf += MT_RPC_FRAME_HDR_SZ;
    287          
    288            epDesc = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
   \   00001B                ; Setup parameters for call to function osal_mem_alloc
   \   00001B   7A06         MOV       R2,#0x6
   \   00001D   7B00         MOV       R3,#0x0
   \   00001F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000022   8A..         MOV       ?V4,R2
   \   000024   8B..         MOV       ?V5,R3
   \   000026   AE..         MOV       R6,?V4
   \   000028   AF..         MOV       R7,?V5
    289            if ( epDesc )
   \   00002A   EA           MOV       A,R2
   \   00002B   4F           ORL       A,R7
   \   00002C   603F         JZ        ??MT_AfRegister_0
    290            {
    291              epDesc->task_id = &MT_TaskID;
   \   00002E   8A82         MOV       DPL,R2
   \   000030   8B83         MOV       DPH,R3
   \   000032   A3           INC       DPTR
   \   000033   74..         MOV       A,#MT_TaskID & 0xff
   \   000035   F0           MOVX      @DPTR,A
   \   000036   A3           INC       DPTR
   \   000037   74..         MOV       A,#(MT_TaskID >> 8) & 0xff
   \   000039   F0           MOVX      @DPTR,A
    292              retValue = MT_BuildEndpointDesc( pBuf, epDesc );
   \   00003A                ; Setup parameters for call to function MT_BuildEndpointDesc
   \   00003A   EA           MOV       A,R2
   \   00003B   FC           MOV       R4,A
   \   00003C   EB           MOV       A,R3
   \   00003D   FD           MOV       R5,A
   \   00003E   E5..         MOV       A,?V2
   \   000040   2403         ADD       A,#0x3
   \   000042   FA           MOV       R2,A
   \   000043   E4           CLR       A
   \   000044   35..         ADDC      A,?V3
   \   000046   FB           MOV       R3,A
   \   000047   12....       LCALL     `??MT_BuildEndpointDesc::?relay`; Banked call to: MT_BuildEndpointDesc
   \   00004A   E9           MOV       A,R1
   \   00004B   85..82       MOV       DPL,?XSP + 0
   \   00004E   85..83       MOV       DPH,?XSP + 1
   \   000051   F0           MOVX      @DPTR,A
    293              if ( retValue == ZSuccess )
   \   000052   700F         JNZ       ??MT_AfRegister_1
    294              {
    295                retValue = afRegister( epDesc );
   \   000054                ; Setup parameters for call to function afRegister
   \   000054   EE           MOV       A,R6
   \   000055   FA           MOV       R2,A
   \   000056   EF           MOV       A,R7
   \   000057   FB           MOV       R3,A
   \   000058   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
   \   00005B   E9           MOV       A,R1
   \   00005C   85..82       MOV       DPL,?XSP + 0
   \   00005F   85..83       MOV       DPH,?XSP + 1
   \   000062   F0           MOVX      @DPTR,A
    296              }
    297          
    298              if ( retValue != ZSuccess )
   \                     ??MT_AfRegister_1:
   \   000063   E0           MOVX      A,@DPTR
   \   000064   6007         JZ        ??MT_AfRegister_0
    299              {
    300                osal_mem_free( epDesc );
   \   000066                ; Setup parameters for call to function osal_mem_free
   \   000066   EE           MOV       A,R6
   \   000067   FA           MOV       R2,A
   \   000068   EF           MOV       A,R7
   \   000069   FB           MOV       R3,A
   \   00006A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    301              }
    302            }
    303          
    304            /* Build and send back the response */
    305            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfRegister_0:
   \   00006D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00006D   AC..         MOV       R4,?XSP + 0
   \   00006F   AD..         MOV       R5,?XSP + 1
   \   000071   7B01         MOV       R3,#0x1
   \   000073   AA..         MOV       R2,?V0
   \   000075                REQUIRE ?Subroutine1
   \   000075                ; // Fall through to label ?Subroutine1
    306          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7964         MOV       R1,#0x64
   \   000002   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000005   7401         MOV       A,#0x1
   \   000007   12....       LCALL     ?DEALLOC_XSTACK8
   \   00000A   7F06         MOV       R7,#0x6
   \   00000C   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET
    307          
    308          /***************************************************************************************************
    309           * @fn      MT_AfDataRequest
    310           *
    311           * @brief   Process AF Register command
    312           *
    313           * @param   pBuf - pointer to the received buffer
    314           *
    315           * @return  none
    316           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    317          void MT_AfDataRequest(uint8 *pBuf)
   \                     MT_AfDataRequest:
    318          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8B..         MOV       ?V1,R3
    319            #define MT_AF_REQ_MSG_LEN  10
    320            #define MT_AF_REQ_MSG_EXT  10
    321          
    322            endPointDesc_t *epDesc;
    323            afAddrType_t dstAddr;
    324            cId_t cId;
    325            uint8 transId, txOpts, radius;
    326            uint8 cmd0, cmd1;
    327            uint8 retValue = ZFailure;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   7401         MOV       A,#0x1
   \   000014   12....       LCALL     ?Subroutine46 & 0xFFFF
    328            uint16 dataLen, tempLen;
    329          
    330            /* Parse header */
    331            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \                     ??CrossCallReturnLabel_90:
   \   000017   E0           MOVX      A,@DPTR
   \   000018   C0E0         PUSH      A
   \   00001A   7404         MOV       A,#0x4
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   D0E0         POP       A
   \   000021   12....       LCALL     ?Subroutine34 & 0xFFFF
    332            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_61:
   \   000024   F5..         MOV       ?V7,A
    333            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000026   EA           MOV       A,R2
   \   000027   2403         ADD       A,#0x3
   \   000029   F5..         MOV       ?V0,A
   \   00002B   5002         JNC       ??MT_AfDataRequest_0
   \   00002D   05..         INC       ?V1
    334          
    335            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_0:
   \   00002F   2402         ADD       A,#0x2
   \   000031   F8           MOV       R0,A
   \   000032   E4           CLR       A
   \   000033   35..         ADDC      A,?V1
   \   000035   F9           MOV       R1,A
   \   000036   E8           MOV       A,R0
   \   000037   FA           MOV       R2,A
   \   000038   E9           MOV       A,R1
   \   000039   FB           MOV       R3,A
   \   00003A   85..82       MOV       DPL,?V0
   \   00003D   85..83       MOV       DPH,?V1
   \   000040   A3           INC       DPTR
   \   000041   A882         MOV       R0,DPL
   \   000043   A983         MOV       R1,DPH
   \   000045   7402         MOV       A,#0x2
   \   000047   65..         XRL       A,?V7
   \   000049   6003         JZ        $+5
   \   00004B   02....       LJMP      ??MT_AfDataRequest_1 & 0xFFFF
    336            {
    337              dstAddr.addrMode = (afAddrMode_t)*pBuf++;
   \   00004E   85..82       MOV       DPL,?V0
   \   000051   85..83       MOV       DPH,?V1
   \   000054   E0           MOVX      A,@DPTR
   \   000055   FC           MOV       R4,A
   \   000056   740D         MOV       A,#0xd
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   EC           MOV       A,R4
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   88..         MOV       ?V0,R0
   \   00005F   89..         MOV       ?V1,R1
    338          
    339              if (dstAddr.addrMode == afAddr64Bit)
   \   000061   7403         MOV       A,#0x3
   \   000063   6C           XRL       A,R4
   \   000064   701C         JNZ       ??MT_AfDataRequest_2
    340              {
    341                (void)osal_memcpy(dstAddr.addr.extAddr, pBuf, Z_EXTADDR_LEN);
   \   000066                ; Setup parameters for call to function osal_memcpy
   \   000066   88..         MOV       ?V4,R0
   \   000068   89..         MOV       ?V5,R1
   \   00006A   75..00       MOV       ?V6,#0x0
   \   00006D   78..         MOV       R0,#?V4
   \   00006F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000072   7C08         MOV       R4,#0x8
   \   000074   7D00         MOV       R5,#0x0
   \   000076   EC           MOV       A,R4
   \   000077   12....       LCALL     ?XSTACK_DISP101_8
   \   00007A   12....       LCALL     ??Subroutine54_0 & 0xFFFF
    342              }
   \                     ??CrossCallReturnLabel_127:
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000080   8015         SJMP      ??CrossCallReturnLabel_107
    343              else
    344              {
    345                dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRequest_2:
   \   000082   8882         MOV       DPL,R0
   \   000084   8983         MOV       DPH,R1
   \   000086   E0           MOVX      A,@DPTR
   \   000087   FC           MOV       R4,A
   \   000088   8A82         MOV       DPL,R2
   \   00008A   8B83         MOV       DPH,R3
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   F9           MOV       R1,A
   \   00008E   7405         MOV       A,#0x5
   \   000090   12....       LCALL     ?XSTACK_DISP0_8
   \   000093   EC           MOV       A,R4
   \   000094   12....       LCALL     ??Subroutine51_0 & 0xFFFF
    346              }
    347              pBuf += Z_EXTADDR_LEN;
    348          
    349              dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_107:
   \   000097   85..82       MOV       DPL,?V0
   \   00009A   85..83       MOV       DPH,?V1
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   C0E0         PUSH      A
   \   0000A8   740E         MOV       A,#0xe
   \   0000AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AD   D0E0         POP       A
   \   0000AF   F0           MOVX      @DPTR,A
   \   0000B0   E5..         MOV       A,?V0
   \   0000B2   2409         ADD       A,#0x9
   \   0000B4   F5..         MOV       ?V0,A
   \   0000B6   5002         JNC       ??MT_AfDataRequest_3
   \   0000B8   05..         INC       ?V1
    350              dstAddr.panId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRequest_3:
   \   0000BA   F582         MOV       DPL,A
   \   0000BC   85..83       MOV       DPH,?V1
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   FA           MOV       R2,A
   \   0000C1   A3           INC       DPTR
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   F9           MOV       R1,A
   \   0000C4   740F         MOV       A,#0xf
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   EA           MOV       A,R2
   \   0000CA   12....       LCALL     ??Subroutine51_0 & 0xFFFF
    351              pBuf += 2;
   \                     ??CrossCallReturnLabel_108:
   \   0000CD   E5..         MOV       A,?V0
   \   0000CF   2402         ADD       A,#0x2
   \   0000D1   F5..         MOV       ?V0,A
   \   0000D3   5040         JNC       ??MT_AfDataRequest_4
   \   0000D5   05..         INC       ?V1
   \   0000D7   803C         SJMP      ??MT_AfDataRequest_4
    352            }
    353            else
    354            {
    355              /* Destination address */
    356              dstAddr.addrMode = afAddr16Bit;
   \                     ??MT_AfDataRequest_1:
   \   0000D9   740D         MOV       A,#0xd
   \   0000DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DE   7402         MOV       A,#0x2
   \   0000E0   12....       LCALL     ?Subroutine37 & 0xFFFF
    357              dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_70:
   \   0000E3   FC           MOV       R4,A
   \   0000E4   8882         MOV       DPL,R0
   \   0000E6   8983         MOV       DPH,R1
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   F9           MOV       R1,A
   \   0000EA   7405         MOV       A,#0x5
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   EC           MOV       A,R4
   \   0000F0   12....       LCALL     ??Subroutine51_0 & 0xFFFF
    358              pBuf += 2;
    359          
    360              /* Destination endpoint */
    361              dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_109:
   \   0000F3   8A82         MOV       DPL,R2
   \   0000F5   8B83         MOV       DPH,R3
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   C0E0         PUSH      A
   \   0000FA   740E         MOV       A,#0xe
   \   0000FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FF   D0E0         POP       A
   \   000101   F0           MOVX      @DPTR,A
   \   000102   E5..         MOV       A,?V0
   \   000104   2403         ADD       A,#0x3
   \   000106   F5..         MOV       ?V0,A
   \   000108   5002         JNC       ??MT_AfDataRequest_5
   \   00010A   05..         INC       ?V1
    362              dstAddr.panId = 0;
   \                     ??MT_AfDataRequest_5:
   \   00010C   740F         MOV       A,#0xf
   \   00010E   12....       LCALL     ?XSTACK_DISP0_8
   \   000111   E4           CLR       A
   \   000112   F0           MOVX      @DPTR,A
   \   000113   A3           INC       DPTR
   \   000114   F0           MOVX      @DPTR,A
    363            }
    364          
    365            /* Source endpoint */
    366            epDesc = afFindEndPointDesc(*pBuf++);
   \                     ??MT_AfDataRequest_4:
   \   000115                ; Setup parameters for call to function afFindEndPointDesc
   \   000115   85..82       MOV       DPL,?V0
   \   000118   85..83       MOV       DPH,?V1
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   F9           MOV       R1,A
   \   00011D   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000120   7402         MOV       A,#0x2
   \   000122   12....       LCALL     ?XSTACK_DISP0_8
   \   000125   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000128   85..82       MOV       DPL,?V0
   \   00012B   85..83       MOV       DPH,?V1
   \   00012E   A3           INC       DPTR
   \   00012F   8582..       MOV       ?V0,DPL
   \   000132   8583..       MOV       ?V1,DPH
    367          
    368            /* ClusterId */
    369            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000135   E0           MOVX      A,@DPTR
   \   000136   FA           MOV       R2,A
   \   000137   A3           INC       DPTR
   \   000138   E0           MOVX      A,@DPTR
   \   000139   F8           MOV       R0,A
   \   00013A   E4           CLR       A
   \   00013B   C8           XCH       A,R0
   \   00013C   F9           MOV       R1,A
   \   00013D   EA           MOV       A,R2
   \   00013E   28           ADD       A,R0
   \   00013F   F5..         MOV       ?V4,A
   \   000141   E4           CLR       A
   \   000142   39           ADDC      A,R1
   \   000143   F5..         MOV       ?V5,A
    370            pBuf +=2;
    371          
    372            /* TransId */
    373            transId = *pBuf++;
   \   000145   85..82       MOV       DPL,?V0
   \   000148   85..83       MOV       DPH,?V1
   \   00014B   A3           INC       DPTR
   \   00014C   A3           INC       DPTR
   \   00014D   E0           MOVX      A,@DPTR
   \   00014E   C0E0         PUSH      A
   \   000150   7401         MOV       A,#0x1
   \   000152   12....       LCALL     ?XSTACK_DISP0_8
   \   000155   D0E0         POP       A
   \   000157   F0           MOVX      @DPTR,A
    374          
    375            /* TxOption */
    376            txOpts = *pBuf++;
   \   000158   85..82       MOV       DPL,?V0
   \   00015B   85..83       MOV       DPH,?V1
   \   00015E   A3           INC       DPTR
   \   00015F   A3           INC       DPTR
   \   000160   A3           INC       DPTR
   \   000161   E0           MOVX      A,@DPTR
   \   000162   F5..         MOV       ?V6,A
    377          
    378            /* Radius */
    379            radius = *pBuf++;
   \   000164   85..82       MOV       DPL,?V0
   \   000167   85..83       MOV       DPH,?V1
   \   00016A   A3           INC       DPTR
   \   00016B   A3           INC       DPTR
   \   00016C   A3           INC       DPTR
   \   00016D   A3           INC       DPTR
   \   00016E   E0           MOVX      A,@DPTR
   \   00016F   F5..         MOV       ?V3,A
   \   000171   E5..         MOV       A,?V0
   \   000173   2405         ADD       A,#0x5
   \   000175   F5..         MOV       ?V0,A
   \   000177   5002         JNC       ??MT_AfDataRequest_6
   \   000179   05..         INC       ?V1
    380          
    381            /* Length */
    382            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_6:
   \   00017B   F582         MOV       DPL,A
   \   00017D   85..83       MOV       DPH,?V1
   \   000180   A3           INC       DPTR
   \   000181   A882         MOV       R0,DPL
   \   000183   A983         MOV       R1,DPH
   \   000185   F582         MOV       DPL,A
   \   000187   85..83       MOV       DPH,?V1
   \   00018A   E0           MOVX      A,@DPTR
   \   00018B   FA           MOV       R2,A
   \   00018C   7402         MOV       A,#0x2
   \   00018E   65..         XRL       A,?V7
   \   000190   701A         JNZ       ??MT_AfDataRequest_7
    383            {
    384              dataLen = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000192   8882         MOV       DPL,R0
   \   000194   8983         MOV       DPH,R1
   \   000196   12....       LCALL     ?Subroutine21 & 0xFFFF
    385              tempLen = dataLen + MT_AF_REQ_MSG_LEN + MT_AF_REQ_MSG_EXT;
   \                     ??CrossCallReturnLabel_34:
   \   000199   EA           MOV       A,R2
   \   00019A   2414         ADD       A,#0x14
   \   00019C   F8           MOV       R0,A
   \   00019D   E4           CLR       A
   \   00019E   3F           ADDC      A,R7
   \   00019F   F9           MOV       R1,A
    386              pBuf += 2;
   \   0001A0   E5..         MOV       A,?V0
   \   0001A2   2402         ADD       A,#0x2
   \   0001A4   F5..         MOV       ?V0,A
   \   0001A6   5013         JNC       ??MT_AfDataRequest_8
   \   0001A8   05..         INC       ?V1
   \   0001AA   800F         SJMP      ??MT_AfDataRequest_8
    387            }
    388            else
    389            {
    390              dataLen = *pBuf++;
   \                     ??MT_AfDataRequest_7:
   \   0001AC   EA           MOV       A,R2
   \   0001AD   FE           MOV       R6,A
   \   0001AE   7F00         MOV       R7,#0x0
   \   0001B0   88..         MOV       ?V0,R0
   \   0001B2   89..         MOV       ?V1,R1
    391              tempLen = dataLen + MT_AF_REQ_MSG_LEN;
   \   0001B4   240A         ADD       A,#0xa
   \   0001B6   F8           MOV       R0,A
   \   0001B7   E4           CLR       A
   \   0001B8   3400         ADDC      A,#0x0
   \   0001BA   F9           MOV       R1,A
    392            }
    393          
    394            if ( epDesc == NULL )
   \                     ??MT_AfDataRequest_8:
   \   0001BB   7402         MOV       A,#0x2
   \   0001BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C0   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   0001C3   EA           MOV       A,R2
   \   0001C4   4B           ORL       A,R3
   \   0001C5   6011         JZ        ??MT_AfDataRequest_9
    395            {
    396              retValue = afStatus_INVALID_PARAMETER;
    397            }
    398            else if (tempLen > (uint16)MT_RPC_DATA_MAX)
   \   0001C7   C3           CLR       C
   \   0001C8   E8           MOV       A,R0
   \   0001C9   94FB         SUBB      A,#-0x5
   \   0001CB   E9           MOV       A,R1
   \   0001CC   9400         SUBB      A,#0x0
   \   0001CE   5003         JNC       $+5
   \   0001D0   02....       LJMP      ??MT_AfDataRequest_10 & 0xFFFF
    399            {
    400              if (pMtAfDataReq != NULL)
   \   0001D3   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   0001D6   600B         JZ        ??MT_AfDataRequest_11
    401              {
    402                retValue = afStatus_INVALID_PARAMETER;
   \                     ??MT_AfDataRequest_9:
   \   0001D8   85..82       MOV       DPL,?XSP + 0
   \   0001DB   85..83       MOV       DPH,?XSP + 1
   \   0001DE   7402         MOV       A,#0x2
   \   0001E0   02....       LJMP      ??MT_AfDataRequest_12 & 0xFFFF
    403              }
    404              else if ((pMtAfDataReq = osal_mem_alloc(sizeof(mtAfDataReq_t) + dataLen)) == NULL)
   \                     ??MT_AfDataRequest_11:
   \   0001E3                ; Setup parameters for call to function osal_mem_alloc
   \   0001E3   EE           MOV       A,R6
   \   0001E4   2418         ADD       A,#0x18
   \   0001E6   FA           MOV       R2,A
   \   0001E7   E4           CLR       A
   \   0001E8   3F           ADDC      A,R7
   \   0001E9   FB           MOV       R3,A
   \   0001EA   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0001ED   90....       MOV       DPTR,#pMtAfDataReq
   \   0001F0   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0001F3   F9           MOV       R1,A
   \   0001F4   EA           MOV       A,R2
   \   0001F5   49           ORL       A,R1
   \   0001F6   85..82       MOV       DPL,?XSP + 0
   \   0001F9   85..83       MOV       DPH,?XSP + 1
   \   0001FC   7005         JNZ       ??MT_AfDataRequest_13
    405              {
    406                retValue = afStatus_MEM_FAIL;
   \   0001FE   7410         MOV       A,#0x10
   \   000200   02....       LJMP      ??MT_AfDataRequest_12 & 0xFFFF
    407              }
    408              else
    409              {
    410                retValue = afStatus_SUCCESS;
   \                     ??MT_AfDataRequest_13:
   \   000203   E4           CLR       A
   \   000204   F0           MOVX      @DPTR,A
    411          
    412                pMtAfDataReq->data = (uint8 *)(pMtAfDataReq+1);
   \   000205   90....       MOV       DPTR,#pMtAfDataReq
   \   000208   E0           MOVX      A,@DPTR
   \   000209   2418         ADD       A,#0x18
   \   00020B   FA           MOV       R2,A
   \   00020C   A3           INC       DPTR
   \   00020D   E0           MOVX      A,@DPTR
   \   00020E   3400         ADDC      A,#0x0
   \   000210   FB           MOV       R3,A
   \   000211   90....       MOV       DPTR,#pMtAfDataReq
   \   000214   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000217   A3           INC       DPTR
   \   000218   EB           MOV       A,R3
   \   000219   F0           MOVX      @DPTR,A
    413                (void)osal_memcpy(&(pMtAfDataReq->dstAddr), &dstAddr, sizeof(afAddrType_t));
   \   00021A                ; Setup parameters for call to function osal_memcpy
   \   00021A   7405         MOV       A,#0x5
   \   00021C   12....       LCALL     ?XSTACK_DISP100_8
   \   00021F   88..         MOV       ?V0,R0
   \   000221   89..         MOV       ?V1,R1
   \   000223   75..00       MOV       ?V2,#0x0
   \   000226   78..         MOV       R0,#?V0
   \   000228   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00022B   7C0C         MOV       R4,#0xc
   \   00022D   7D00         MOV       R5,#0x0
   \   00022F   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000232   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000235   12....       LCALL     ?DEALLOC_XSTACK8
    414                pMtAfDataReq->epDesc = epDesc;
   \   000238   7402         MOV       A,#0x2
   \   00023A   12....       LCALL     ?XSTACK_DISP0_8
   \   00023D   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000240   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000243   240E         ADD       A,#0xe
   \   000245   F582         MOV       DPL,A
   \   000247   E4           CLR       A
   \   000248   38           ADDC      A,R0
   \   000249   F583         MOV       DPH,A
   \   00024B   EA           MOV       A,R2
   \   00024C   F0           MOVX      @DPTR,A
   \   00024D   A3           INC       DPTR
   \   00024E   EB           MOV       A,R3
   \   00024F   12....       LCALL     ?Subroutine15 & 0xFFFF
    415                pMtAfDataReq->cId = cId;
   \                     ??CrossCallReturnLabel_96:
   \   000252   2410         ADD       A,#0x10
   \   000254   F582         MOV       DPL,A
   \   000256   E4           CLR       A
   \   000257   38           ADDC      A,R0
   \   000258   F583         MOV       DPH,A
   \   00025A   E5..         MOV       A,?V4
   \   00025C   F0           MOVX      @DPTR,A
   \   00025D   A3           INC       DPTR
   \   00025E   E5..         MOV       A,?V5
   \   000260   12....       LCALL     ?Subroutine15 & 0xFFFF
    416                pMtAfDataReq->dataLen = dataLen;
   \                     ??CrossCallReturnLabel_97:
   \   000263   2412         ADD       A,#0x12
   \   000265   F582         MOV       DPL,A
   \   000267   E4           CLR       A
   \   000268   38           ADDC      A,R0
   \   000269   F583         MOV       DPH,A
   \   00026B   EE           MOV       A,R6
   \   00026C   F0           MOVX      @DPTR,A
   \   00026D   A3           INC       DPTR
   \   00026E   EF           MOV       A,R7
   \   00026F   F0           MOVX      @DPTR,A
    417                pMtAfDataReq->transId = transId;
   \   000270   7401         MOV       A,#0x1
   \   000272   12....       LCALL     ?XSTACK_DISP0_8
   \   000275   E0           MOVX      A,@DPTR
   \   000276   C0E0         PUSH      A
   \   000278   90....       MOV       DPTR,#pMtAfDataReq
   \   00027B   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00027E   D0E0         POP       A
   \   000280   F0           MOVX      @DPTR,A
    418                pMtAfDataReq->txOpts = txOpts;
   \   000281   90....       MOV       DPTR,#pMtAfDataReq
   \   000284   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000287   E5..         MOV       A,?V6
   \   000289   F0           MOVX      @DPTR,A
    419                pMtAfDataReq->radius = radius;
   \   00028A   90....       MOV       DPTR,#pMtAfDataReq
   \   00028D   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000290   E5..         MOV       A,?V3
   \   000292   12....       LCALL     ?Subroutine9 & 0xFFFF
    420          
    421                // Setup to time-out the huge outgoing item if host does not MT_AF_DATA_STORE it.
    422                pMtAfDataReq->tick = MT_AF_EXEC_CNT;
   \                     ??CrossCallReturnLabel_15:
   \   000295   12....       LCALL     ?Subroutine24 & 0xFFFF
    423                if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??CrossCallReturnLabel_93:
   \   000298   604E         JZ        ??MT_AfDataRequest_14
    424                {
    425                  (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   00029A                ; Setup parameters for call to function osal_set_event
   \   00029A   12....       LCALL     ?Subroutine31 & 0xFFFF
    426                }
    427              }
    428            }
   \                     ??CrossCallReturnLabel_56:
   \   00029D   8049         SJMP      ??MT_AfDataRequest_14
    429            else
    430            {
    431              retValue = AF_DataRequest(&dstAddr, epDesc, cId, dataLen, pBuf, &transId, txOpts, radius);
   \                     ??MT_AfDataRequest_10:
   \   00029F                ; Setup parameters for call to function AF_DataRequest
   \   00029F   E5..         MOV       A,?V3
   \   0002A1   F5..         MOV       ?V2,A
   \   0002A3   78..         MOV       R0,#?V2
   \   0002A5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002A8   7402         MOV       A,#0x2
   \   0002AA   12....       LCALL     ?XSTACK_DISP100_8
   \   0002AD   88..         MOV       ?V2,R0
   \   0002AF   89..         MOV       ?V3,R1
   \   0002B1   78..         MOV       R0,#?V2
   \   0002B3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002B6   78..         MOV       R0,#?V0
   \   0002B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002BB   8E..         MOV       ?V0,R6
   \   0002BD   8F..         MOV       ?V1,R7
   \   0002BF   78..         MOV       R0,#?V0
   \   0002C1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002C4   78..         MOV       R0,#?V4
   \   0002C6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002C9   A9..         MOV       R1,?V6
   \   0002CB   740B         MOV       A,#0xb
   \   0002CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D0   12....       LCALL     ?Subroutine22 & 0xFFFF
    432            }
   \                     ??CrossCallReturnLabel_36:
   \   0002D3   740E         MOV       A,#0xe
   \   0002D5   12....       LCALL     ?XSTACK_DISP101_8
   \   0002D8   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0002DB   7409         MOV       A,#0x9
   \   0002DD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002E0   E9           MOV       A,R1
   \   0002E1   85..82       MOV       DPL,?XSP + 0
   \   0002E4   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_AfDataRequest_12:
   \   0002E7   F0           MOVX      @DPTR,A
    433          
    434            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??MT_AfDataRequest_14:
   \   0002E8   7404         MOV       A,#0x4
   \   0002EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0002ED   E0           MOVX      A,@DPTR
   \   0002EE   54E0         ANL       A,#0xe0
   \   0002F0   6420         XRL       A,#0x20
   \   0002F2   700D         JNZ       ??MT_AfDataRequest_15
    435            {
    436              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_AF), cmd1, 1, &retValue);
   \   0002F4                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0002F4   AC..         MOV       R4,?XSP + 0
   \   0002F6   AD..         MOV       R5,?XSP + 1
   \   0002F8   7B01         MOV       R3,#0x1
   \   0002FA   AA..         MOV       R2,?V7
   \   0002FC   7964         MOV       R1,#0x64
   \   0002FE   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    437            }
    438          }
   \                     ??MT_AfDataRequest_15:
   \   000301   7411         MOV       A,#0x11
   \   000303                REQUIRE ?Subroutine2
   \   000303                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   740F         MOV       A,#0xf
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function osal_start_timerEx
   \   000003                ; Setup parameters for call to function osal_start_timerEx
   \   000003                REQUIRE ??Subroutine48_0
   \   000003                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine49_0
   \   000001                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003                REQUIRE ??Subroutine50_0
   \   000003                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F583         MOV       DPH,A
   \   000004   8882         MOV       DPL,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000003   2416         ADD       A,#0x16
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000003   2415         ADD       A,#0x15
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000003   2414         ADD       A,#0x14
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000003   EA           MOV       A,R2
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   E4           CLR       A
   \   000003   C8           XCH       A,R0
   \   000004   F9           MOV       R1,A
   \   000005   EA           MOV       A,R2
   \   000006   28           ADD       A,R0
   \   000007   FE           MOV       R6,A
   \   000008   E4           CLR       A
   \   000009   39           ADDC      A,R1
   \   00000A   FF           MOV       R7,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2402         ADD       A,#0x2
   \   000006   FA           MOV       R2,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   3400         ADDC      A,#0x0
   \   00000B   FB           MOV       R3,A
   \   00000C   22           RET
    439          
    440          #if defined ( ZIGBEE_SOURCE_ROUTING )
    441          
    442          /***************************************************************************************************
    443           * @fn      MT_AfDataRequestSrcRtg
    444           *
    445           * @brief   Process AF Register command
    446           *
    447           * @param   pBuf - pointer to the received buffer
    448           *
    449           * @return  none
    450           ***************************************************************************************************/
    451          void MT_AfDataRequestSrcRtg(uint8 *pBuf)
    452          {
    453            uint8 cmdId, dataLen = 0;
    454            uint8 retValue = ZFailure;
    455            endPointDesc_t *epDesc;
    456            byte transId;
    457            afAddrType_t dstAddr;
    458            cId_t cId;
    459            byte txOpts, radius, srcEP, relayCnt;
    460            uint16 *pRelayList;
    461            uint8 i;
    462          
    463            /* parse header */
    464            cmdId = pBuf[MT_RPC_POS_CMD1];
    465            pBuf += MT_RPC_FRAME_HDR_SZ;
    466          
    467            /* Destination address */
    468            /* Initialize the panID field to zero to avoid inter-pan */
    469            osal_memset( &dstAddr, 0, sizeof(afAddrType_t) ); 
    470            dstAddr.addrMode = afAddr16Bit;
    471            dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
    472            pBuf += 2;
    473          
    474            /* Destination endpoint */
    475            dstAddr.endPoint = *pBuf++;
    476          
    477            /* Source endpoint */
    478            srcEP = *pBuf++;
    479            epDesc = afFindEndPointDesc( srcEP );
    480          
    481            /* ClusterId */
    482            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
    483            pBuf +=2;
    484          
    485            /* TransId */
    486            transId = *pBuf++;
    487          
    488            /* TxOption */
    489            txOpts = *pBuf++;
    490          
    491            /* Radius */
    492            radius = *pBuf++;
    493            
    494            /* Source route relay count */
    495            relayCnt = *pBuf++;
    496            
    497            /* Convert the source route relay list */
    498            if( (pRelayList = osal_mem_alloc( relayCnt * sizeof( uint16 ))) != NULL )
    499            {
    500              for( i = 0; i < relayCnt; i++ )
    501              {
    502                pRelayList[i]  = BUILD_UINT16( pBuf[0], pBuf[1] );
    503                pBuf += 2;
    504              }
    505            
    506              /* Data payload Length */
    507              dataLen = *pBuf++;
    508          
    509              if ( epDesc == NULL )
    510              {
    511                retValue = afStatus_INVALID_PARAMETER;
    512              }
    513              else
    514              {
    515                retValue = AF_DataRequestSrcRtg( &dstAddr, epDesc, cId, dataLen, pBuf, 
    516                                               &transId, txOpts, radius, relayCnt, pRelayList );
    517              }
    518              
    519              /* Free the memory allocated */
    520              osal_mem_free( pRelayList );
    521            }
    522            else
    523            {
    524              retValue = afStatus_MEM_FAIL;
    525            }
    526              
    527          
    528            /* Build and send back the response */
    529            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
    530          }
    531          #endif
    532          
    533          #if defined INTER_PAN
    534          /***************************************************************************************************
    535           * @fn      MT_AfInterPanCtl
    536           *
    537           * @brief   Process the AF Inter Pan control command.
    538           *
    539           * @param   pBuf - pointer to the received buffer
    540           *
    541           * @return  none
    542           ***************************************************************************************************/
    543          static void MT_AfInterPanCtl(uint8 *pBuf)
    544          {
    545            uint8 cmd, rtrn;
    546            uint16 panId;
    547            endPointDesc_t *pEP;
    548            
    549            cmd = pBuf[MT_RPC_POS_CMD1];
    550            pBuf += MT_RPC_FRAME_HDR_SZ;
    551          
    552            switch (*pBuf++)  // Inter-pan request parameter.
    553            {
    554            case InterPanClr:
    555              rtrn = StubAPS_SetIntraPanChannel();           // Switch channel back to the NIB channel.
    556              break;
    557          
    558            case InterPanSet:
    559              rtrn = StubAPS_SetInterPanChannel(*pBuf);      // Set channel for inter-pan communication.
    560              break;
    561          
    562            case InterPanReg:
    563              if ((pEP = afFindEndPointDesc(*pBuf)))
    564              {
    565                StubAPS_RegisterApp(pEP);
    566                rtrn = SUCCESS;
    567              }
    568              else
    569              {
    570                rtrn = FAILURE;
    571              }
    572              break;
    573          
    574            case InterPanChk:
    575              panId = BUILD_UINT16(pBuf[0], pBuf[1]);
    576              rtrn = (StubAPS_InterPan(panId, pBuf[2])) ? ZSuccess : ZFailure;
    577              break;
    578          
    579            default:
    580              rtrn = afStatus_INVALID_PARAMETER;
    581              break;
    582            }
    583          
    584            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmd, 1, &rtrn);
    585          }
    586          #endif
    587          
    588          /***************************************************************************************************
    589           * @fn      MT_AfDataConfirm
    590           *
    591           * @brief   Process
    592           *
    593           * @param   pBuf - pointer to the received buffer
    594           *
    595           * @return  none
    596           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    597          void MT_AfDataConfirm(afDataConfirm_t *pMsg)
   \                     MT_AfDataConfirm:
    598          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV       A,#-0x3
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    599            uint8 retArray[3];
    600          
    601            retArray[0] = pMsg->hdr.status;
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   85..82       MOV       DPL,?XSP + 0
   \   000012   85..83       MOV       DPH,?XSP + 1
   \   000015   12....       LCALL     ?Subroutine34 & 0xFFFF
    602            retArray[1] = pMsg->endpoint;
   \                     ??CrossCallReturnLabel_62:
   \   000018   C0E0         PUSH      A
   \   00001A   7401         MOV       A,#0x1
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   D0E0         POP       A
   \   000021   12....       LCALL     ?Subroutine46 & 0xFFFF
    603            retArray[2] = pMsg->transID;
   \                     ??CrossCallReturnLabel_92:
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   C0E0         PUSH      A
   \   000029   7402         MOV       A,#0x2
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   D0E0         POP       A
   \   000030   F0           MOVX      @DPTR,A
    604          
    605            /* Build and send back the response */
    606            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_DATA_CONFIRM, 3, retArray);
   \   000031                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000031   AC..         MOV       R4,?XSP + 0
   \   000033   AD..         MOV       R5,?XSP + 1
   \   000035   7B03         MOV       R3,#0x3
   \   000037   7A80         MOV       R2,#-0x80
   \   000039   7944         MOV       R1,#0x44
   \   00003B   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    607          }
   \   00003E   7403         MOV       A,#0x3
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
   \   000043   D083         POP       DPH
   \   000045   D082         POP       DPL
   \   000047   02....       LJMP      ?BRET
    608          
    609          /***************************************************************************************************
    610           * @fn          MT_AfIncomingMsg
    611           *
    612           * @brief       Process the callback subscription for AF Incoming data.
    613           *
    614           * @param       pkt - Incoming AF data.
    615           *
    616           * @return      none
    617           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    618          void MT_AfIncomingMsg(afIncomingMSGPacket_t *pMsg)
   \                     MT_AfIncomingMsg:
    619          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EA           MOV       A,R2
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EB           MOV       A,R3
   \   000014   12....       LCALL     ??Subroutine55_0 & 0xFFFF
    620            #define MT_AF_INC_MSG_LEN  17
    621            #define MT_AF_INC_MSG_EXT  10
    622          
    623            uint16 dataLen = pMsg->cmd.DataLength;  // Length of the data section in the response packet.
   \                     ??CrossCallReturnLabel_133:
   \   000017   241F         ADD       A,#0x1f
   \   000019   F582         MOV       DPL,A
   \   00001B   E4           CLR       A
   \   00001C   3B           ADDC      A,R3
   \   00001D   F583         MOV       DPH,A
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V6,A
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V7,A
    624            uint16 respLen = MT_AF_INC_MSG_LEN + dataLen;
   \   000026   E5..         MOV       A,?V6
   \   000028   2411         ADD       A,#0x11
   \   00002A   FE           MOV       R6,A
   \   00002B   E4           CLR       A
   \   00002C   35..         ADDC      A,?V7
   \   00002E   FF           MOV       R7,A
    625            uint8 cmd = MT_AF_INCOMING_MSG;
   \   00002F   7406         MOV       A,#0x6
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   7481         MOV       A,#-0x7f
   \   000036   F0           MOVX      @DPTR,A
    626            uint8 *pRsp, *pTmp;
    627            mtAfInMsgList_t *pItem = NULL;
   \   000037   7402         MOV       A,#0x2
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   E4           CLR       A
   \   00003D   F0           MOVX      @DPTR,A
   \   00003E   12....       LCALL     ?Subroutine32 & 0xFFFF
    628          
    629          #if defined INTER_PAN
    630            if (StubAPS_InterPan(pMsg->srcAddr.panId, pMsg->srcAddr.endPoint))
    631            {
    632              cmd = MT_AF_INCOMING_MSG_EXT;
    633            }
    634            else
    635          #endif
    636            if ((pMsg->srcAddr.addrMode == afAddr64Bit) ||
    637                (respLen > (uint16)(MT_RPC_DATA_MAX - MT_AF_INC_MSG_EXT)))
   \                     ??CrossCallReturnLabel_131:
   \   000041   240E         ADD       A,#0xe
   \   000043   F5..         MOV       ?V0,A
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   3400         ADDC      A,#0x0
   \   000049   F5..         MOV       ?V1,A
   \   00004B   85..82       MOV       DPL,?V0
   \   00004E   F583         MOV       DPH,A
   \   000050   E0           MOVX      A,@DPTR
   \   000051   6403         XRL       A,#0x3
   \   000053   6009         JZ        ??MT_AfIncomingMsg_0
   \   000055   C3           CLR       C
   \   000056   EE           MOV       A,R6
   \   000057   94F1         SUBB      A,#-0xf
   \   000059   EF           MOV       A,R7
   \   00005A   9400         SUBB      A,#0x0
   \   00005C   400F         JC        ??MT_AfIncomingMsg_1
    638            {
    639              cmd = MT_AF_INCOMING_MSG_EXT;
   \                     ??MT_AfIncomingMsg_0:
   \   00005E   7406         MOV       A,#0x6
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   7482         MOV       A,#-0x7e
   \   000065   F0           MOVX      @DPTR,A
    640            }
    641          
    642            if (cmd == MT_AF_INCOMING_MSG_EXT)
    643            {
    644              respLen += MT_AF_INC_MSG_EXT;
   \   000066   EE           MOV       A,R6
   \   000067   240A         ADD       A,#0xa
   \   000069   FE           MOV       R6,A
   \   00006A   E4           CLR       A
   \   00006B   3F           ADDC      A,R7
   \   00006C   FF           MOV       R7,A
    645            }
    646          
    647            if (respLen > (uint16)MT_RPC_DATA_MAX)
   \                     ??MT_AfIncomingMsg_1:
   \   00006D   C3           CLR       C
   \   00006E   EE           MOV       A,R6
   \   00006F   94FB         SUBB      A,#-0x5
   \   000071   EF           MOV       A,R7
   \   000072   9400         SUBB      A,#0x0
   \   000074   4044         JC        ??MT_AfIncomingMsg_2
    648            {
    649              if ((pItem = (mtAfInMsgList_t *)osal_mem_alloc(sizeof(mtAfInMsgList_t) + dataLen)) == NULL)
   \   000076                ; Setup parameters for call to function osal_mem_alloc
   \   000076   E5..         MOV       A,?V6
   \   000078   2409         ADD       A,#0x9
   \   00007A   FA           MOV       R2,A
   \   00007B   E4           CLR       A
   \   00007C   35..         ADDC      A,?V7
   \   00007E   FB           MOV       R3,A
   \   00007F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000082   7402         MOV       A,#0x2
   \   000084   12....       LCALL     ?XSTACK_DISP0_8
   \   000087   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00008A   7402         MOV       A,#0x2
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000092   7003         JNZ       $+5
   \   000094   02....       LJMP      ??CrossCallReturnLabel_11 & 0xFFFF
    650              {
    651                return;  // If cannot hold a huge message, cannot give indication at all.
    652              }
    653          
    654              pItem->data = (uint8 *)(pItem+1);
   \   000097   7402         MOV       A,#0x2
   \   000099   12....       LCALL     ?XSTACK_DISP0_8
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   2409         ADD       A,#0x9
   \   00009F   FA           MOV       R2,A
   \   0000A0   A3           INC       DPTR
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   3400         ADDC      A,#0x0
   \   0000A4   FB           MOV       R3,A
   \   0000A5   7402         MOV       A,#0x2
   \   0000A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AA   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   0000AD   A3           INC       DPTR
   \   0000AE   12....       LCALL     ?Subroutine36 & 0xFFFF
    655              respLen -= dataLen;  // Zero data bytes are sent with an over-sized incoming indication.
   \                     ??CrossCallReturnLabel_66:
   \   0000B1   C3           CLR       C
   \   0000B2   EE           MOV       A,R6
   \   0000B3   95..         SUBB      A,?V6
   \   0000B5   FE           MOV       R6,A
   \   0000B6   EF           MOV       A,R7
   \   0000B7   95..         SUBB      A,?V7
   \   0000B9   FF           MOV       R7,A
    656            }
    657          
    658            // Attempt to allocate memory for the response packet.
    659            if ((pRsp = osal_mem_alloc(respLen)) == NULL)
   \                     ??MT_AfIncomingMsg_2:
   \   0000BA                ; Setup parameters for call to function osal_mem_alloc
   \   0000BA   EE           MOV       A,R6
   \   0000BB   FA           MOV       R2,A
   \   0000BC   EF           MOV       A,R7
   \   0000BD   FB           MOV       R3,A
   \   0000BE   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000C1   7404         MOV       A,#0x4
   \   0000C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C6   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0000C9   7404         MOV       A,#0x4
   \   0000CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CE   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   0000D1   7015         JNZ       ??MT_AfIncomingMsg_3
    660            {
    661              if (pItem != NULL)
   \   0000D3   7402         MOV       A,#0x2
   \   0000D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D8   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   0000DB   6008         JZ        ??CrossCallReturnLabel_10
    662              {
    663                (void)osal_mem_free(pItem);
   \   0000DD                ; Setup parameters for call to function osal_mem_free
   \   0000DD   7402         MOV       A,#0x2
   \   0000DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E2   12....       LCALL     ?Subroutine7 & 0xFFFF
    664              }
    665              return;
   \                     ??CrossCallReturnLabel_10:
   \   0000E5   02....       LJMP      ??CrossCallReturnLabel_11 & 0xFFFF
    666            }
    667            pTmp = pRsp;
    668          
    669            /* Group ID */
    670            *pTmp++ = LO_UINT16(pMsg->groupId);
   \                     ??MT_AfIncomingMsg_3:
   \   0000E8   85..82       MOV       DPL,?XSP + 0
   \   0000EB   85..83       MOV       DPH,?XSP + 1
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   2402         ADD       A,#0x2
   \   0000F1   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0000F4   C0E0         PUSH      A
   \   0000F6   7404         MOV       A,#0x4
   \   0000F8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FB   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0000FE   D0E0         POP       A
   \   000100   F0           MOVX      @DPTR,A
    671            *pTmp++ = HI_UINT16(pMsg->groupId);
   \   000101   8A82         MOV       DPL,R2
   \   000103   8983         MOV       DPH,R1
   \   000105   A3           INC       DPTR
   \   000106   E0           MOVX      A,@DPTR
   \   000107   C0E0         PUSH      A
   \   000109   7404         MOV       A,#0x4
   \   00010B   12....       LCALL     ?XSTACK_DISP0_8
   \   00010E   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000111   D0E0         POP       A
   \   000113   12....       LCALL     ??Subroutine55_0 & 0xFFFF
    672          
    673            /* Cluster ID */
    674            *pTmp++ = LO_UINT16(pMsg->clusterId);
   \                     ??CrossCallReturnLabel_134:
   \   000116   2404         ADD       A,#0x4
   \   000118   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00011B   C0E0         PUSH      A
   \   00011D   7404         MOV       A,#0x4
   \   00011F   12....       LCALL     ?XSTACK_DISP0_8
   \   000122   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000125   A3           INC       DPTR
   \   000126   D0E0         POP       A
   \   000128   F0           MOVX      @DPTR,A
    675            *pTmp++ = HI_UINT16(pMsg->clusterId);
   \   000129   8A82         MOV       DPL,R2
   \   00012B   8983         MOV       DPH,R1
   \   00012D   A3           INC       DPTR
   \   00012E   E0           MOVX      A,@DPTR
   \   00012F   C0E0         PUSH      A
   \   000131   7404         MOV       A,#0x4
   \   000133   12....       LCALL     ?XSTACK_DISP0_8
   \   000136   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000139   D0E0         POP       A
   \   00013B   F0           MOVX      @DPTR,A
   \   00013C   7404         MOV       A,#0x4
   \   00013E   12....       LCALL     ?XSTACK_DISP0_8
   \   000141   E0           MOVX      A,@DPTR
   \   000142   2405         ADD       A,#0x5
   \   000144   F5..         MOV       ?V4,A
   \   000146   A3           INC       DPTR
   \   000147   E0           MOVX      A,@DPTR
   \   000148   3400         ADDC      A,#0x0
   \   00014A   F5..         MOV       ?V5,A
   \   00014C   7404         MOV       A,#0x4
   \   00014E   12....       LCALL     ?XSTACK_DISP0_8
   \   000151   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000154   E8           MOV       A,R0
   \   000155   FA           MOV       R2,A
   \   000156   E9           MOV       A,R1
   \   000157   FB           MOV       R3,A
   \   000158   85..82       MOV       DPL,?XSP + 0
   \   00015B   85..83       MOV       DPH,?XSP + 1
   \   00015E   E0           MOVX      A,@DPTR
   \   00015F   240F         ADD       A,#0xf
   \   000161   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000164   7407         MOV       A,#0x7
   \   000166   12....       LCALL     ?XSTACK_DISP0_8
   \   000169   E8           MOV       A,R0
   \   00016A   F0           MOVX      @DPTR,A
   \   00016B   A3           INC       DPTR
   \   00016C   E9           MOV       A,R1
   \   00016D   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000170   2406         ADD       A,#0x6
   \   000172   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000175   7406         MOV       A,#0x6
   \   000177   12....       LCALL     ?XSTACK_DISP0_8
   \   00017A   E0           MOVX      A,@DPTR
   \   00017B   6482         XRL       A,#0x82
   \   00017D   7067         JNZ       ??MT_AfIncomingMsg_4
    676          
    677            if (cmd == MT_AF_INCOMING_MSG_EXT)
    678            {
    679              *pTmp++ = pMsg->srcAddr.addrMode;
   \   00017F   85..82       MOV       DPL,?V0
   \   000182   85..83       MOV       DPH,?V1
   \   000185   E0           MOVX      A,@DPTR
   \   000186   8A82         MOV       DPL,R2
   \   000188   8B83         MOV       DPH,R3
   \   00018A   12....       LCALL     ?Subroutine37 & 0xFFFF
    680          
    681              if (pMsg->srcAddr.addrMode == afAddr64Bit)
   \                     ??CrossCallReturnLabel_71:
   \   00018D   6403         XRL       A,#0x3
   \   00018F   701B         JNZ       ??MT_AfIncomingMsg_5
    682              {
    683                (void)osal_memcpy(pTmp, pMsg->srcAddr.addr.extAddr, Z_EXTADDR_LEN);
   \   000191                ; Setup parameters for call to function osal_memcpy
   \   000191   88..         MOV       ?V0,R0
   \   000193   89..         MOV       ?V1,R1
   \   000195   75..00       MOV       ?V2,#0x0
   \   000198   78..         MOV       R0,#?V0
   \   00019A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00019D   7C08         MOV       R4,#0x8
   \   00019F   7D00         MOV       R5,#0x0
   \   0001A1   0A           INC       R2
   \   0001A2   AB..         MOV       R3,?V5
   \   0001A4   12....       LCALL     ??Subroutine54_0 & 0xFFFF
    684              }
   \                     ??CrossCallReturnLabel_129:
   \   0001A7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001AA   800F         SJMP      ??CrossCallReturnLabel_49
    685              else
    686              {
    687                pTmp[0] = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_5:
   \   0001AC   8882         MOV       DPL,R0
   \   0001AE   8983         MOV       DPH,R1
   \   0001B0   12....       LCALL     ?Subroutine18 & 0xFFFF
    688                pTmp[1] = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??CrossCallReturnLabel_29:
   \   0001B3   8882         MOV       DPL,R0
   \   0001B5   8983         MOV       DPH,R1
   \   0001B7   A3           INC       DPTR
   \   0001B8   12....       LCALL     ?Subroutine28 & 0xFFFF
    689              }
    690              pTmp += Z_EXTADDR_LEN;
    691          
    692              *pTmp++ = pMsg->srcAddr.endPoint;
   \                     ??CrossCallReturnLabel_49:
   \   0001BB   7407         MOV       A,#0x7
   \   0001BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C0   12....       LCALL     ?Subroutine11 & 0xFFFF
    693          #if defined INTER_PAN
    694              *pTmp++ = LO_UINT16(pMsg->srcAddr.panId);
    695              *pTmp++ = HI_UINT16(pMsg->srcAddr.panId);
    696          #else
    697              *pTmp++ = 0;
    698              *pTmp++ = 0;
    699          #endif
    700            }
   \                     ??CrossCallReturnLabel_19:
   \   0001C3   85..82       MOV       DPL,?V4
   \   0001C6   85..83       MOV       DPH,?V5
   \   0001C9   A3           INC       DPTR
   \   0001CA   A3           INC       DPTR
   \   0001CB   A3           INC       DPTR
   \   0001CC   A3           INC       DPTR
   \   0001CD   A3           INC       DPTR
   \   0001CE   A3           INC       DPTR
   \   0001CF   A3           INC       DPTR
   \   0001D0   A3           INC       DPTR
   \   0001D1   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0001D4   E4           CLR       A
   \   0001D5   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0001D8   A3           INC       DPTR
   \   0001D9   F0           MOVX      @DPTR,A
   \   0001DA   E5..         MOV       A,?V4
   \   0001DC   240B         ADD       A,#0xb
   \   0001DE   F5..         MOV       ?V4,A
   \   0001E0   5043         JNC       ??MT_AfIncomingMsg_6
   \   0001E2   05..         INC       ?V5
   \   0001E4   803F         SJMP      ??MT_AfIncomingMsg_6
    701            else
    702            {
    703              /* Source Address */
    704              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_4:
   \   0001E6   8882         MOV       DPL,R0
   \   0001E8   8983         MOV       DPH,R1
   \   0001EA   E0           MOVX      A,@DPTR
   \   0001EB   8A82         MOV       DPL,R2
   \   0001ED   8B83         MOV       DPH,R3
   \   0001EF   F0           MOVX      @DPTR,A
    705              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   0001F0   8882         MOV       DPL,R0
   \   0001F2   8983         MOV       DPH,R1
   \   0001F4   A3           INC       DPTR
   \   0001F5   12....       LCALL     ?Subroutine18 & 0xFFFF
    706          
    707              /* Source EP */
    708              *pTmp++ = pMsg->srcAddr.endPoint;
   \                     ??CrossCallReturnLabel_30:
   \   0001F8   7407         MOV       A,#0x7
   \   0001FA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FD   12....       LCALL     ?Subroutine11 & 0xFFFF
    709            }
   \                     ??CrossCallReturnLabel_20:
   \   000200   C0E0         PUSH      A
   \   000202   7404         MOV       A,#0x4
   \   000204   12....       LCALL     ?XSTACK_DISP0_8
   \   000207   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00020A   2406         ADD       A,#0x6
   \   00020C   F582         MOV       DPL,A
   \   00020E   E4           CLR       A
   \   00020F   38           ADDC      A,R0
   \   000210   F583         MOV       DPH,A
   \   000212   D0E0         POP       A
   \   000214   F0           MOVX      @DPTR,A
   \   000215   7404         MOV       A,#0x4
   \   000217   12....       LCALL     ?XSTACK_DISP0_8
   \   00021A   E0           MOVX      A,@DPTR
   \   00021B   2407         ADD       A,#0x7
   \   00021D   F5..         MOV       ?V4,A
   \   00021F   A3           INC       DPTR
   \   000220   E0           MOVX      A,@DPTR
   \   000221   3400         ADDC      A,#0x0
   \   000223   F5..         MOV       ?V5,A
    710          
    711            /* Destination EP */
    712            *pTmp++ = pMsg->endPoint;
   \                     ??MT_AfIncomingMsg_6:
   \   000225   85..82       MOV       DPL,?XSP + 0
   \   000228   85..83       MOV       DPH,?XSP + 1
   \   00022B   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00022E   12....       LCALL     ?Subroutine18 & 0xFFFF
    713          
    714            /* WasBroadCast */
    715            *pTmp++ = pMsg->wasBroadcast;
   \                     ??CrossCallReturnLabel_31:
   \   000231   85..82       MOV       DPL,?XSP + 0
   \   000234   85..83       MOV       DPH,?XSP + 1
   \   000237   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00023A   12....       LCALL     ?Subroutine28 & 0xFFFF
    716          
    717            /* LinkQuality */
    718            *pTmp++ = pMsg->LinkQuality;
   \                     ??CrossCallReturnLabel_50:
   \   00023D   85..82       MOV       DPL,?XSP + 0
   \   000240   85..83       MOV       DPH,?XSP + 1
   \   000243   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000246   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000249   F0           MOVX      @DPTR,A
    719          
    720            /* SecurityUse */
    721            *pTmp++ = pMsg->SecurityUse;
   \   00024A   85..82       MOV       DPL,?XSP + 0
   \   00024D   85..83       MOV       DPH,?XSP + 1
   \   000250   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000253   2419         ADD       A,#0x19
   \   000255   F582         MOV       DPL,A
   \   000257   E4           CLR       A
   \   000258   38           ADDC      A,R0
   \   000259   F583         MOV       DPH,A
   \   00025B   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00025E   12....       LCALL     ?Subroutine32 & 0xFFFF
    722          
    723            /* Timestamp */
    724            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 0);
   \                     ??CrossCallReturnLabel_132:
   \   000261   241A         ADD       A,#0x1a
   \   000263   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000266   7407         MOV       A,#0x7
   \   000268   12....       LCALL     ?XSTACK_DISP0_8
   \   00026B   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   00026E   7407         MOV       A,#0x7
   \   000270   12....       LCALL     ?XSTACK_DISP0_8
   \   000273   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000276   12....       LCALL     ?L_MOV_X
   \   000279   85..82       MOV       DPL,?V4
   \   00027C   85..83       MOV       DPH,?V5
   \   00027F   A3           INC       DPTR
   \   000280   A3           INC       DPTR
   \   000281   A3           INC       DPTR
   \   000282   A3           INC       DPTR
   \   000283   E5..         MOV       A,?V0
   \   000285   F0           MOVX      @DPTR,A
    725            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 1);
   \   000286   7407         MOV       A,#0x7
   \   000288   12....       LCALL     ?XSTACK_DISP0_8
   \   00028B   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00028E   12....       LCALL     ?L_MOV_X
   \   000291   E5..         MOV       A,?V1
   \   000293   85..82       MOV       DPL,?V4
   \   000296   85..83       MOV       DPH,?V5
   \   000299   A3           INC       DPTR
   \   00029A   A3           INC       DPTR
   \   00029B   A3           INC       DPTR
   \   00029C   A3           INC       DPTR
   \   00029D   A3           INC       DPTR
   \   00029E   F0           MOVX      @DPTR,A
    726            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 2);
   \   00029F   7407         MOV       A,#0x7
   \   0002A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A4   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0002A7   12....       LCALL     ?L_MOV_X
   \   0002AA   7410         MOV       A,#0x10
   \   0002AC   78..         MOV       R0,#?V0
   \   0002AE   12....       LCALL     ?UL_SHR
   \   0002B1   85..82       MOV       DPL,?V4
   \   0002B4   85..83       MOV       DPH,?V5
   \   0002B7   A3           INC       DPTR
   \   0002B8   A3           INC       DPTR
   \   0002B9   A3           INC       DPTR
   \   0002BA   A3           INC       DPTR
   \   0002BB   A3           INC       DPTR
   \   0002BC   A3           INC       DPTR
   \   0002BD   E5..         MOV       A,?V0
   \   0002BF   F0           MOVX      @DPTR,A
    727            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 3);
   \   0002C0   7407         MOV       A,#0x7
   \   0002C2   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C5   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0002C8   12....       LCALL     ?L_MOV_X
   \   0002CB   7418         MOV       A,#0x18
   \   0002CD   78..         MOV       R0,#?V0
   \   0002CF   12....       LCALL     ?UL_SHR
   \   0002D2   85..82       MOV       DPL,?V4
   \   0002D5   85..83       MOV       DPH,?V5
   \   0002D8   A3           INC       DPTR
   \   0002D9   A3           INC       DPTR
   \   0002DA   A3           INC       DPTR
   \   0002DB   A3           INC       DPTR
   \   0002DC   A3           INC       DPTR
   \   0002DD   A3           INC       DPTR
   \   0002DE   A3           INC       DPTR
   \   0002DF   E5..         MOV       A,?V0
   \   0002E1   F0           MOVX      @DPTR,A
    728          
    729          
    730            /* Data Length */
    731            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   0002E2   E5..         MOV       A,?V4
   \   0002E4   240A         ADD       A,#0xa
   \   0002E6   F8           MOV       R0,A
   \   0002E7   E4           CLR       A
   \   0002E8   35..         ADDC      A,?V5
   \   0002EA   F9           MOV       R1,A
   \   0002EB   E5..         MOV       A,?V4
   \   0002ED   2409         ADD       A,#0x9
   \   0002EF   FA           MOV       R2,A
   \   0002F0   E4           CLR       A
   \   0002F1   35..         ADDC      A,?V5
   \   0002F3   FB           MOV       R3,A
   \   0002F4   EA           MOV       A,R2
   \   0002F5   FC           MOV       R4,A
   \   0002F6   E5..         MOV       A,?V4
   \   0002F8   2408         ADD       A,#0x8
   \   0002FA   1A           DEC       R2
   \   0002FB   E4           CLR       A
   \   0002FC   35..         ADDC      A,?V5
   \   0002FE   8A..         MOV       ?V0,R2
   \   000300   F5..         MOV       ?V1,A
   \   000302   7406         MOV       A,#0x6
   \   000304   12....       LCALL     ?XSTACK_DISP0_8
   \   000307   E0           MOVX      A,@DPTR
   \   000308   6482         XRL       A,#0x82
   \   00030A   701C         JNZ       ??MT_AfIncomingMsg_7
    732            {
    733              /* Z-Tool apparently takes the last Byte before the data buffer as the dynamic length and
    734               * ignores the bigger UInt16 length of an EXT incoming message. But no data bytes will be sent
    735               * with a huge message, so it's necessary to work-around and fake-out Z-Tool with a zero here.
    736               */
    737              *pTmp++ = 0;  // TODO - workaround Z-Tool shortcoming; should be: = pMsg->cmd.TransSeqNumber;
   \   00030C   8A82         MOV       DPL,R2
   \   00030E   85..83       MOV       DPH,?V1
   \   000311   E4           CLR       A
   \   000312   12....       LCALL     ?Subroutine38 & 0xFFFF
    738              *pTmp++ = LO_UINT16(dataLen);
    739              *pTmp++ = HI_UINT16(dataLen);
   \                     ??CrossCallReturnLabel_72:
   \   000315   8882         MOV       DPL,R0
   \   000317   8983         MOV       DPH,R1
   \   000319   E5..         MOV       A,?V7
   \   00031B   F0           MOVX      @DPTR,A
   \   00031C   E5..         MOV       A,?V4
   \   00031E   240B         ADD       A,#0xb
   \   000320   F5..         MOV       ?V4,A
   \   000322   5025         JNC       ??MT_AfIncomingMsg_8
   \   000324   05..         INC       ?V5
   \   000326   8021         SJMP      ??MT_AfIncomingMsg_8
    740            }
    741            else
    742            {
    743              *pTmp++ = pMsg->cmd.TransSeqNumber;
   \                     ??MT_AfIncomingMsg_7:
   \   000328   85..82       MOV       DPL,?XSP + 0
   \   00032B   85..83       MOV       DPH,?XSP + 1
   \   00032E   E0           MOVX      A,@DPTR
   \   00032F   FA           MOV       R2,A
   \   000330   A3           INC       DPTR
   \   000331   E0           MOVX      A,@DPTR
   \   000332   CA           XCH       A,R2
   \   000333   241E         ADD       A,#0x1e
   \   000335   F582         MOV       DPL,A
   \   000337   E4           CLR       A
   \   000338   3A           ADDC      A,R2
   \   000339   F583         MOV       DPH,A
   \   00033B   E0           MOVX      A,@DPTR
   \   00033C   85..82       MOV       DPL,?V0
   \   00033F   85..83       MOV       DPH,?V1
   \   000342   12....       LCALL     ?Subroutine38 & 0xFFFF
    744              *pTmp++ = dataLen;
    745            }
   \                     ??CrossCallReturnLabel_73:
   \   000345   88..         MOV       ?V4,R0
   \   000347   89..         MOV       ?V5,R1
    746          
    747            /* Data */
    748            if (pItem != NULL)
   \                     ??MT_AfIncomingMsg_8:
   \   000349   85..82       MOV       DPL,?XSP + 0
   \   00034C   85..83       MOV       DPH,?XSP + 1
   \   00034F   E0           MOVX      A,@DPTR
   \   000350   2421         ADD       A,#0x21
   \   000352   F5..         MOV       ?V0,A
   \   000354   A3           INC       DPTR
   \   000355   E0           MOVX      A,@DPTR
   \   000356   3400         ADDC      A,#0x0
   \   000358   F5..         MOV       ?V1,A
   \   00035A   7402         MOV       A,#0x2
   \   00035C   12....       LCALL     ?XSTACK_DISP0_8
   \   00035F   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000362   6065         JZ        ??MT_AfIncomingMsg_9
    749            {
    750              // Enqueue the new huge incoming item.
    751              pItem->next = pMtAfInMsgList;
   \   000364   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000367   7402         MOV       A,#0x2
   \   000369   12....       LCALL     ?XSTACK_DISP0_8
   \   00036C   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   00036F   12....       LCALL     ?Subroutine36 & 0xFFFF
    752              pMtAfInMsgList = pItem;
   \                     ??CrossCallReturnLabel_68:
   \   000372   7402         MOV       A,#0x2
   \   000374   12....       LCALL     ?XSTACK_DISP0_8
   \   000377   12....       LCALL     ?Subroutine8 & 0xFFFF
    753          
    754              // Setup to time-out the huge incoming item if host does not MT_AF_DATA_RETRIEVE it.
    755              pItem->tick = MT_AF_EXEC_CNT;
   \                     ??CrossCallReturnLabel_14:
   \   00037A   7402         MOV       A,#0x2
   \   00037C   12....       LCALL     ?XSTACK_DISP0_8
   \   00037F   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000382   2408         ADD       A,#0x8
   \   000384   F582         MOV       DPL,A
   \   000386   E4           CLR       A
   \   000387   38           ADDC      A,R0
   \   000388   F583         MOV       DPH,A
   \   00038A   12....       LCALL     ?Subroutine24 & 0xFFFF
    756              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??CrossCallReturnLabel_94:
   \   00038D   6003         JZ        ??CrossCallReturnLabel_57
    757              {
    758                (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   00038F                ; Setup parameters for call to function osal_set_event
   \   00038F   12....       LCALL     ?Subroutine31 & 0xFFFF
    759              }
    760          
    761              pItem->timestamp = pMsg->timestamp;
   \                     ??CrossCallReturnLabel_57:
   \   000392   7407         MOV       A,#0x7
   \   000394   12....       LCALL     ?XSTACK_DISP0_8
   \   000397   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00039A   12....       LCALL     ?XLOAD_R0123
   \   00039D   7402         MOV       A,#0x2
   \   00039F   12....       LCALL     ?XSTACK_DISP0_8
   \   0003A2   E0           MOVX      A,@DPTR
   \   0003A3   FC           MOV       R4,A
   \   0003A4   A3           INC       DPTR
   \   0003A5   E0           MOVX      A,@DPTR
   \   0003A6   F583         MOV       DPH,A
   \   0003A8   8C82         MOV       DPL,R4
   \   0003AA   A3           INC       DPTR
   \   0003AB   A3           INC       DPTR
   \   0003AC   A3           INC       DPTR
   \   0003AD   A3           INC       DPTR
   \   0003AE   12....       LCALL     ?XSTORE_R0123
    762              (void)osal_memcpy(pItem->data, pMsg->cmd.Data, dataLen);
   \   0003B1                ; Setup parameters for call to function osal_memcpy
   \   0003B1   12....       LCALL     ?Subroutine25 & 0xFFFF
    763            }
   \                     ??CrossCallReturnLabel_43:
   \   0003B4   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0003B7   AC..         MOV       R4,?V6
   \   0003B9   AD..         MOV       R5,?V7
   \   0003BB   7405         MOV       A,#0x5
   \   0003BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0003C0   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0003C3   FA           MOV       R2,A
   \   0003C4   A3           INC       DPTR
   \   0003C5   E0           MOVX      A,@DPTR
   \   0003C6   FB           MOV       R3,A
   \   0003C7   800E         SJMP      ??MT_AfIncomingMsg_10
    764            else
    765            {
    766              (void)osal_memcpy(pTmp, pMsg->cmd.Data, dataLen);
   \                     ??MT_AfIncomingMsg_9:
   \   0003C9                ; Setup parameters for call to function osal_memcpy
   \   0003C9   12....       LCALL     ?Subroutine25 & 0xFFFF
    767            }
   \                     ??CrossCallReturnLabel_44:
   \   0003CC   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0003CF   AC..         MOV       R4,?V6
   \   0003D1   AD..         MOV       R5,?V7
   \   0003D3   AA..         MOV       R2,?V4
   \   0003D5   AB..         MOV       R3,?V5
   \                     ??MT_AfIncomingMsg_10:
   \   0003D7   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   0003DA   12....       LCALL     ?DEALLOC_XSTACK8
    768          
    769            /* Build and send back the response */
    770            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_AF), cmd, respLen, pRsp);
   \   0003DD                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0003DD   7404         MOV       A,#0x4
   \   0003DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0003E2   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0003E5   EE           MOV       A,R6
   \   0003E6   FB           MOV       R3,A
   \   0003E7   7406         MOV       A,#0x6
   \   0003E9   12....       LCALL     ?XSTACK_DISP0_8
   \   0003EC   E0           MOVX      A,@DPTR
   \   0003ED   FA           MOV       R2,A
   \   0003EE   7944         MOV       R1,#0x44
   \   0003F0   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    771          
    772            (void)osal_mem_free(pRsp);
   \   0003F3                ; Setup parameters for call to function osal_mem_free
   \   0003F3   7404         MOV       A,#0x4
   \   0003F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0003F8   12....       LCALL     ?Subroutine7 & 0xFFFF
    773          }
   \                     ??CrossCallReturnLabel_11:
   \   0003FB   7409         MOV       A,#0x9
   \   0003FD   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8B83         MOV       DPH,R3
   \   000005   E5..         MOV       A,?V6
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V4
   \   000004   85..83       MOV       DPH,?V5
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V4
   \   000004   85..83       MOV       DPH,?V5
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F5..         MOV       ?V1,A
   \   00000D   78..         MOV       R0,#?V0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   90....       MOV       DPTR,#pMtAfInMsgList
   \   000003                REQUIRE ??Subroutine52_0
   \   000003                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000003   E8           MOV       A,R0
   \   000004   FA           MOV       R2,A
   \   000005   E9           MOV       A,R1
   \   000006   8882         MOV       DPL,R0
   \   000008   F583         MOV       DPH,A
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V4
   \   000004   85..83       MOV       DPH,?V5
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002                REQUIRE ??Subroutine53_0
   \   000002                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine55_0
   \   000001                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2404         ADD       A,#0x4
   \   000003   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   3400         ADDC      A,#0x0
   \   000005   F9           MOV       R1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002                REQUIRE ??Subroutine56_0
   \   000002                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET
    774          
    775          /**************************************************************************************************
    776           * @fn          MT_AfDataRetrieve
    777           *
    778           * @brief   Process AF Data Retrieve command to incrementally read out a very large
    779           *          incoming AF message.
    780           *
    781           * input parameters
    782           *
    783           * @param pBuf - pointer to the received buffer
    784           *
    785           * output parameters
    786           *
    787           * @param rtrn - AF-Status of the operation.
    788           *
    789           * @return      None.
    790           **************************************************************************************************
    791           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    792          void MT_AfDataRetrieve(uint8 *pBuf)
   \                     MT_AfDataRetrieve:
    793          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine36 & 0xFFFF
    794            #define MT_AF_RTV_HDR_SZ  2
    795          
    796            uint32 timestamp;
    797            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \                     ??CrossCallReturnLabel_69:
   \   000012   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000015   7403         MOV       A,#0x3
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   12....       LCALL     ?Subroutine35 & 0xFFFF
    798            uint8 rtrn = afStatus_FAILED;
   \                     ??CrossCallReturnLabel_112:
   \   00001D   7A01         MOV       R2,#0x1
    799            uint8 len = 0;
   \   00001F   85..82       MOV       DPL,?XSP + 0
   \   000022   85..83       MOV       DPH,?XSP + 1
   \   000025   E4           CLR       A
   \   000026   F0           MOVX      @DPTR,A
    800          
    801            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000027   04           INC       A
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   2403         ADD       A,#0x3
   \   00002E   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000031   EA           MOV       A,R2
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   12....       LCALL     ?Subroutine35 & 0xFFFF
    802            timestamp = BUILD_UINT32(pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
   \                     ??CrossCallReturnLabel_113:
   \   000038   EA           MOV       A,R2
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00003F   F5..         MOV       ?V0,A
   \   000041   E4           CLR       A
   \   000042   F5..         MOV       ?V1,A
   \   000044   F5..         MOV       ?V2,A
   \   000046   F5..         MOV       ?V3,A
   \   000048   04           INC       A
   \   000049   12....       LCALL     ?XSTACK_DISP0_8
   \   00004C   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F5..         MOV       ?V4,A
   \   000052   E4           CLR       A
   \   000053   F5..         MOV       ?V5,A
   \   000055   F5..         MOV       ?V6,A
   \   000057   F5..         MOV       ?V7,A
   \   000059   7408         MOV       A,#0x8
   \   00005B   78..         MOV       R0,#?V4
   \   00005D   12....       LCALL     ?L_SHL
   \   000060   78..         MOV       R0,#?V0
   \   000062   79..         MOV       R1,#?V4
   \   000064   12....       LCALL     ?L_ADD
   \   000067   EA           MOV       A,R2
   \   000068   12....       LCALL     ?XSTACK_DISP0_8
   \   00006B   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00006E   F5..         MOV       ?V4,A
   \   000070   E4           CLR       A
   \   000071   F5..         MOV       ?V5,A
   \   000073   7410         MOV       A,#0x10
   \   000075   78..         MOV       R0,#?V4
   \   000077   12....       LCALL     ?L_SHL
   \   00007A   78..         MOV       R0,#?V0
   \   00007C   79..         MOV       R1,#?V4
   \   00007E   12....       LCALL     ?L_ADD
   \   000081   EA           MOV       A,R2
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000088   E0           MOVX      A,@DPTR
   \   000089   F5..         MOV       ?V4,A
   \   00008B   E4           CLR       A
   \   00008C   F5..         MOV       ?V6,A
   \   00008E   7418         MOV       A,#0x18
   \   000090   78..         MOV       R0,#?V4
   \   000092   12....       LCALL     ?L_SHL
   \   000095   78..         MOV       R0,#?V0
   \   000097   79..         MOV       R1,#?V4
   \   000099   12....       LCALL     ?L_ADD
   \   00009C   8010         SJMP      ??CrossCallReturnLabel_114
    803          
    804            while (pItem != NULL)
    805            {
    806              pPrev = pItem;
    807              if (pItem->timestamp == timestamp)
    808              {
    809                break;
    810              }
    811              pItem = pItem->next;
   \                     ??MT_AfDataRetrieve_0:
   \   00009E   7403         MOV       A,#0x3
   \   0000A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A3   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000A6   7403         MOV       A,#0x3
   \   0000A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AB   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   0000AE   7403         MOV       A,#0x3
   \   0000B0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B3   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   0000B6   6075         JZ        ??MT_AfDataRetrieve_1
   \   0000B8   E8           MOV       A,R0
   \   0000B9   FC           MOV       R4,A
   \   0000BA   E9           MOV       A,R1
   \   0000BB   FD           MOV       R5,A
   \   0000BC   7403         MOV       A,#0x3
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   12....       LCALL     ??Subroutine53_0 & 0xFFFF
    812            }
   \                     ??CrossCallReturnLabel_122:
   \   0000C4   A3           INC       DPTR
   \   0000C5   78..         MOV       R0,#?V0
   \   0000C7   12....       LCALL     ?L_EQ_X
   \   0000CA   70D2         JNZ       ??MT_AfDataRetrieve_0
    813          
    814            if (pItem != NULL)
    815            {
    816              uint16 idx;
    817              uint8 *pRsp;
    818          
    819              pBuf += 4;
   \   0000CC   EA           MOV       A,R2
   \   0000CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D0   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000D3   EA           MOV       A,R2
   \   0000D4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D7   12....       LCALL     ?Subroutine35 & 0xFFFF
    820              idx = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_115:
   \   0000DA   EA           MOV       A,R2
   \   0000DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DE   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000E1   FA           MOV       R2,A
   \   0000E2   7401         MOV       A,#0x1
   \   0000E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E7   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   0000EA   12....       LCALL     ?Subroutine21 & 0xFFFF
    821              len = pBuf[2];
   \                     ??CrossCallReturnLabel_35:
   \   0000ED   7401         MOV       A,#0x1
   \   0000EF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F2   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000F5   85..82       MOV       DPL,?XSP + 0
   \   0000F8   85..83       MOV       DPH,?XSP + 1
   \   0000FB   F0           MOVX      @DPTR,A
    822          
    823              if (len == 0)  // Indication to delete the afIncomingMSGPacket.
   \   0000FC   7061         JNZ       ??MT_AfDataRetrieve_2
    824              {
    825                if (pMtAfInMsgList == pItem)
   \   0000FE   7403         MOV       A,#0x3
   \   000100   12....       LCALL     ?XSTACK_DISP0_8
   \   000103   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000106   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000109   7403         MOV       A,#0x3
   \   00010B   12....       LCALL     ?XSTACK_DISP0_8
   \   00010E   E0           MOVX      A,@DPTR
   \   00010F   6A           XRL       A,R2
   \   000110   7003         JNZ       ??MT_AfDataRetrieve_3
   \   000112   A3           INC       DPTR
   \   000113   E0           MOVX      A,@DPTR
   \   000114   6B           XRL       A,R3
   \                     ??MT_AfDataRetrieve_3:
   \   000115   7005         JNZ       ??MT_AfDataRetrieve_4
    826                {
    827                  pMtAfInMsgList = pItem->next;
   \   000117   90....       MOV       DPTR,#pMtAfInMsgList
   \   00011A   8004         SJMP      ??MT_AfDataRetrieve_5
    828                }
    829                else
    830                {
    831                  pPrev->next = pItem->next;
   \                     ??MT_AfDataRetrieve_4:
   \   00011C   8C82         MOV       DPL,R4
   \   00011E   8D83         MOV       DPH,R5
    832                }
   \                     ??MT_AfDataRetrieve_5:
   \   000120   12....       LCALL     ?Subroutine35 & 0xFFFF
    833                (void)osal_mem_free(pItem);
   \                     ??CrossCallReturnLabel_116:
   \   000123                ; Setup parameters for call to function osal_mem_free
   \   000123   7403         MOV       A,#0x3
   \   000125   12....       LCALL     ?XSTACK_DISP0_8
   \   000128   12....       LCALL     ?Subroutine7 & 0xFFFF
    834                rtrn = afStatus_SUCCESS;
   \                     ??CrossCallReturnLabel_12:
   \   00012B   7A00         MOV       R2,#0x0
    835              }
    836              else if ((pRsp = osal_mem_alloc(len + MT_AF_RTV_HDR_SZ)) == NULL)
    837              {
    838                rtrn = afStatus_MEM_FAIL;
    839                len = 0;
    840              }
    841              else
    842              {
    843                pRsp[0] = ZSuccess;
    844                pRsp[1] = len;
    845                (void)osal_memcpy(pRsp + MT_AF_RTV_HDR_SZ, pItem->data+idx, len);
    846                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), 
    847                                                     MT_AF_DATA_RETRIEVE, len + MT_AF_RTV_HDR_SZ, pRsp);
    848                (void)osal_mem_free(pRsp);
    849                return;
    850              }
    851            }
    852          
    853            pBuf[0] = rtrn;
   \                     ??MT_AfDataRetrieve_1:
   \   00012D   7401         MOV       A,#0x1
   \   00012F   12....       LCALL     ?XSTACK_DISP0_8
   \   000132   12....       LCALL     ?Subroutine23 & 0xFFFF
    854            pBuf[1] = len;
   \                     ??CrossCallReturnLabel_42:
   \   000135   85..82       MOV       DPL,?XSP + 0
   \   000138   85..83       MOV       DPH,?XSP + 1
   \   00013B   E0           MOVX      A,@DPTR
   \   00013C   C0E0         PUSH      A
   \   00013E   7401         MOV       A,#0x1
   \   000140   12....       LCALL     ?XSTACK_DISP0_8
   \   000143   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000146   D0E0         POP       A
   \   000148   F0           MOVX      @DPTR,A
    855            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), 
    856                                                 MT_AF_DATA_RETRIEVE, MT_AF_RTV_HDR_SZ, pBuf);
   \   000149                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000149   7401         MOV       A,#0x1
   \   00014B   12....       LCALL     ?XSTACK_DISP0_8
   \   00014E   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000151   7B02         MOV       R3,#0x2
   \   000153   7A12         MOV       R2,#0x12
   \   000155   7964         MOV       R1,#0x64
   \   000157   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    857          }
   \                     ??MT_AfDataRetrieve_6:
   \   00015A   7405         MOV       A,#0x5
   \   00015C   02....       LJMP      ?Subroutine2 & 0xFFFF
   \                     ??MT_AfDataRetrieve_2:
   \   00015F                ; Setup parameters for call to function osal_mem_alloc
   \   00015F   2402         ADD       A,#0x2
   \   000161   FA           MOV       R2,A
   \   000162   E4           CLR       A
   \   000163   3400         ADDC      A,#0x0
   \   000165   FB           MOV       R3,A
   \   000166   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000169   8A..         MOV       ?V0,R2
   \   00016B   8B..         MOV       ?V1,R3
   \   00016D   EA           MOV       A,R2
   \   00016E   4B           ORL       A,R3
   \   00016F   700C         JNZ       ??MT_AfDataRetrieve_7
   \   000171   7A10         MOV       R2,#0x10
   \   000173   85..82       MOV       DPL,?XSP + 0
   \   000176   85..83       MOV       DPH,?XSP + 1
   \   000179   E4           CLR       A
   \   00017A   F0           MOVX      @DPTR,A
   \   00017B   80B0         SJMP      ??MT_AfDataRetrieve_1
   \                     ??MT_AfDataRetrieve_7:
   \   00017D   8A82         MOV       DPL,R2
   \   00017F   8B83         MOV       DPH,R3
   \   000181   E4           CLR       A
   \   000182   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000185   8A82         MOV       DPL,R2
   \   000187   8B83         MOV       DPH,R3
   \   000189   A3           INC       DPTR
   \   00018A   F0           MOVX      @DPTR,A
   \   00018B                ; Setup parameters for call to function osal_memcpy
   \   00018B   7403         MOV       A,#0x3
   \   00018D   12....       LCALL     ?XSTACK_DISP0_8
   \   000190   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000193   2E           ADD       A,R6
   \   000194   F5..         MOV       ?V4,A
   \   000196   A3           INC       DPTR
   \   000197   E0           MOVX      A,@DPTR
   \   000198   3F           ADDC      A,R7
   \   000199   F5..         MOV       ?V5,A
   \   00019B   78..         MOV       R0,#?V4
   \   00019D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001A0   7403         MOV       A,#0x3
   \   0001A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A5   E0           MOVX      A,@DPTR
   \   0001A6   FC           MOV       R4,A
   \   0001A7   7D00         MOV       R5,#0x0
   \   0001A9   EA           MOV       A,R2
   \   0001AA   2402         ADD       A,#0x2
   \   0001AC   FA           MOV       R2,A
   \   0001AD   E4           CLR       A
   \   0001AE   35..         ADDC      A,?V1
   \   0001B0   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   0001B3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001B6                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0001B6   AC..         MOV       R4,?V0
   \   0001B8   AD..         MOV       R5,?V1
   \   0001BA   85..82       MOV       DPL,?XSP + 0
   \   0001BD   85..83       MOV       DPH,?XSP + 1
   \   0001C0   E0           MOVX      A,@DPTR
   \   0001C1   2402         ADD       A,#0x2
   \   0001C3   FB           MOV       R3,A
   \   0001C4   7A12         MOV       R2,#0x12
   \   0001C6   7964         MOV       R1,#0x64
   \   0001C8   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   0001CB                ; Setup parameters for call to function osal_mem_free
   \   0001CB   AA..         MOV       R2,?V0
   \   0001CD   AB..         MOV       R3,?V1
   \   0001CF   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001D2   8086         SJMP      ??MT_AfDataRetrieve_6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine54_0
   \   000001                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000003   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000006   22           RET
    858          
    859          /**************************************************************************************************
    860           * @fn          MT_AfDataStore
    861           *
    862           * @brief   Process AF Data Store command to incrementally store the data buffer for very large
    863           *          outgoing AF message.
    864           *
    865           * input parameters
    866           *
    867           * @param pBuf - pointer to the received buffer
    868           *
    869           * output parameters
    870           *
    871           * @param rtrn - AF-Status of the operation.
    872           *
    873           * @return      None.
    874           **************************************************************************************************
    875           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    876          void MT_AfDataStore(uint8 *pBuf)
   \                     MT_AfDataStore:
    877          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    878            uint16 idx;
    879            uint8 len, rtrn = afStatus_FAILED;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   7401         MOV       A,#0x1
   \   000012   F0           MOVX      @DPTR,A
    880          
    881            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000013   EA           MOV       A,R2
   \   000014   2403         ADD       A,#0x3
   \   000016   FA           MOV       R2,A
   \   000017   5001         JNC       ??MT_AfDataStore_0
   \   000019   0B           INC       R3
    882            idx = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataStore_0:
   \   00001A   F582         MOV       DPL,A
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   FC           MOV       R4,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F8           MOV       R0,A
   \   000023   E4           CLR       A
   \   000024   C8           XCH       A,R0
   \   000025   F9           MOV       R1,A
   \   000026   EC           MOV       A,R4
   \   000027   28           ADD       A,R0
   \   000028   FE           MOV       R6,A
   \   000029   E4           CLR       A
   \   00002A   39           ADDC      A,R1
   \   00002B   FF           MOV       R7,A
    883            len = pBuf[2];
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F9           MOV       R1,A
    884            pBuf += 3;
   \   000034   EA           MOV       A,R2
   \   000035   2403         ADD       A,#0x3
   \   000037   FA           MOV       R2,A
   \   000038   5001         JNC       ??MT_AfDataStore_1
   \   00003A   0B           INC       R3
    885          
    886            if (pMtAfDataReq == NULL)
   \                     ??MT_AfDataStore_1:
   \   00003B   90....       MOV       DPTR,#pMtAfDataReq
   \   00003E   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000041   EC           MOV       A,R4
   \   000042   4D           ORL       A,R5
   \   000043   700B         JNZ       ??MT_AfDataStore_2
    887            {
    888              rtrn = afStatus_MEM_FAIL;
   \   000045   85..82       MOV       DPL,?XSP + 0
   \   000048   85..83       MOV       DPH,?XSP + 1
   \   00004B   7410         MOV       A,#0x10
   \   00004D   02....       LJMP      ??MT_AfDataStore_3 & 0xFFFF
    889            }
    890            else if (len == 0)  // Indication to send the message.
   \                     ??MT_AfDataStore_2:
   \   000050   E0           MOVX      A,@DPTR
   \   000051   F583         MOV       DPH,A
   \   000053   8C82         MOV       DPL,R4
   \   000055   E0           MOVX      A,@DPTR
   \   000056   F5..         MOV       ?V4,A
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   F5..         MOV       ?V5,A
   \   00005C   E9           MOV       A,R1
   \   00005D   707C         JNZ       ??MT_AfDataStore_4
    891            {
    892              rtrn = AF_DataRequest(&(pMtAfDataReq->dstAddr), pMtAfDataReq->epDesc, pMtAfDataReq->cId, 
    893                                      pMtAfDataReq->dataLen,  pMtAfDataReq->data, 
    894                                    &(pMtAfDataReq->transId), pMtAfDataReq->txOpts, pMtAfDataReq->radius);
   \   00005F                ; Setup parameters for call to function AF_DataRequest
   \   00005F   EC           MOV       A,R4
   \   000060   2416         ADD       A,#0x16
   \   000062   F582         MOV       DPL,A
   \   000064   E4           CLR       A
   \   000065   3D           ADDC      A,R5
   \   000066   F583         MOV       DPH,A
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F5..         MOV       ?V0,A
   \   00006B   78..         MOV       R0,#?V0
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000070   90....       MOV       DPTR,#pMtAfDataReq
   \   000073   E0           MOVX      A,@DPTR
   \   000074   2414         ADD       A,#0x14
   \   000076   F5..         MOV       ?V0,A
   \   000078   A3           INC       DPTR
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   3400         ADDC      A,#0x0
   \   00007C   F5..         MOV       ?V1,A
   \   00007E   78..         MOV       R0,#?V0
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000083   78..         MOV       R0,#?V4
   \   000085   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000088   90....       MOV       DPTR,#pMtAfDataReq
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   2412         ADD       A,#0x12
   \   00008E   F582         MOV       DPL,A
   \   000090   E4           CLR       A
   \   000091   3D           ADDC      A,R5
   \   000092   F583         MOV       DPH,A
   \   000094   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000097   90....       MOV       DPTR,#pMtAfDataReq
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   2410         ADD       A,#0x10
   \   00009D   F582         MOV       DPL,A
   \   00009F   E4           CLR       A
   \   0000A0   3D           ADDC      A,R5
   \   0000A1   F583         MOV       DPH,A
   \   0000A3   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000A6   90....       MOV       DPTR,#pMtAfDataReq
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   2415         ADD       A,#0x15
   \   0000AC   F582         MOV       DPL,A
   \   0000AE   E4           CLR       A
   \   0000AF   3D           ADDC      A,R5
   \   0000B0   F583         MOV       DPH,A
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   F9           MOV       R1,A
   \   0000B4   90....       MOV       DPTR,#pMtAfDataReq
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   240E         ADD       A,#0xe
   \   0000BA   F582         MOV       DPL,A
   \   0000BC   E4           CLR       A
   \   0000BD   3D           ADDC      A,R5
   \   0000BE   F583         MOV       DPH,A
   \   0000C0   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0000C3   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0000C6   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000C9   7409         MOV       A,#0x9
   \   0000CB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CE   E9           MOV       A,R1
   \   0000CF   85..82       MOV       DPL,?XSP + 0
   \   0000D2   85..83       MOV       DPH,?XSP + 1
   \   0000D5   F0           MOVX      @DPTR,A
    895              (void)osal_mem_free(pMtAfDataReq);
   \   0000D6                ; Setup parameters for call to function osal_mem_free
   \   0000D6   12....       LCALL     ?Subroutine6 & 0xFFFF
    896              pMtAfDataReq = NULL;
    897            }
   \                     ??CrossCallReturnLabel_9:
   \   0000D9   8023         SJMP      ??MT_AfDataStore_3
    898            else
    899            {
    900              (void)osal_memcpy(pMtAfDataReq->data+idx, pBuf, len);
   \                     ??MT_AfDataStore_4:
   \   0000DB                ; Setup parameters for call to function osal_memcpy
   \   0000DB   8A..         MOV       ?V0,R2
   \   0000DD   8B..         MOV       ?V1,R3
   \   0000DF   88..         MOV       ?V2,R0
   \   0000E1   78..         MOV       R0,#?V0
   \   0000E3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000E6   E9           MOV       A,R1
   \   0000E7   FC           MOV       R4,A
   \   0000E8   7D00         MOV       R5,#0x0
   \   0000EA   E5..         MOV       A,?V4
   \   0000EC   2E           ADD       A,R6
   \   0000ED   FA           MOV       R2,A
   \   0000EE   E5..         MOV       A,?V5
   \   0000F0   3F           ADDC      A,R7
   \   0000F1   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   0000F4   12....       LCALL     ?DEALLOC_XSTACK8
    901              rtrn = afStatus_SUCCESS;
   \   0000F7   85..82       MOV       DPL,?XSP + 0
   \   0000FA   85..83       MOV       DPH,?XSP + 1
   \   0000FD   E4           CLR       A
   \                     ??MT_AfDataStore_3:
   \   0000FE   F0           MOVX      @DPTR,A
    902            }
    903          
    904            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), 
    905                                                                          MT_AF_DATA_STORE, 1, &rtrn);
   \   0000FF                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000FF   AC..         MOV       R4,?XSP + 0
   \   000101   AD..         MOV       R5,?XSP + 1
   \   000103   7B01         MOV       R3,#0x1
   \   000105   7A11         MOV       R2,#0x11
   \   000107   02....       LJMP      ?Subroutine1 & 0xFFFF
    906          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfExec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfExec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfCommandProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfIncomingMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfIncomingMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataRetrieve::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRetrieve

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataStore::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataStore
    907          
    908          /***************************************************************************************************
    909          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   MT_AfCommandProcessing
        0      9   -> MT_AfDataRequest
        0      9   -> MT_AfDataRetrieve
        0      9   -> MT_AfDataStore
        0      9   -> MT_AfRegister
      3      3   MT_AfDataConfirm
        2      3   -> MT_BuildAndSendZToolResponse
      1     51   MT_AfDataRequest
        0     42   -> AF_DataRequest
        0     33   -> MT_BuildAndSendZToolResponse
        0     33   -> afFindEndPointDesc
        0     33   -> osal_mem_alloc
        0     36   -> osal_memcpy
        0     33   -> osal_set_event
        0     33   -> osal_start_timerEx
      1     33   MT_AfDataRetrieve
        0     21   -> MT_BuildAndSendZToolResponse
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     24   -> osal_memcpy
      1     33   MT_AfDataStore
        0     24   -> AF_DataRequest
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> osal_mem_free
        0     18   -> osal_memcpy
      0      9   MT_AfExec
        0      9   -> osal_mem_free
        0      9   -> osal_set_event
        0      9   -> osal_start_timerEx
      1     28   MT_AfIncomingMsg
        0     25   -> MT_BuildAndSendZToolResponse
        0     25   -> osal_mem_alloc
        0     25   -> osal_mem_free
        0     28   -> osal_memcpy
        0     25   -> osal_set_event
        0     25   -> osal_start_timerEx
      1     24   MT_AfRegister
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> MT_BuildEndpointDesc
        0     15   -> afRegister
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      18  ??Subroutine48_0
       3  ??Subroutine49_0
       4  ??Subroutine50_0
       5  ??Subroutine51_0
       6  ??Subroutine52_0
       7  ??Subroutine53_0
       6  ??Subroutine54_0
       9  ??Subroutine55_0
       5  ??Subroutine56_0
       6  ??Subroutine57_0
       6  ??Subroutine58_0
       5  ?Subroutine0
      15  ?Subroutine1
       7  ?Subroutine10
       5  ?Subroutine11
      12  ?Subroutine12
      12  ?Subroutine13
      12  ?Subroutine14
       1  ?Subroutine15
       2  ?Subroutine16
       2  ?Subroutine17
       9  ?Subroutine18
      12  ?Subroutine19
       8  ?Subroutine2
       3  ?Subroutine20
      12  ?Subroutine21
       6  ?Subroutine22
       6  ?Subroutine23
       3  ?Subroutine24
      16  ?Subroutine25
      13  ?Subroutine26
       7  ?Subroutine27
       5  ?Subroutine28
       5  ?Subroutine29
       3  ?Subroutine3
       4  ?Subroutine30
      13  ?Subroutine31
       1  ?Subroutine32
      17  ?Subroutine33
       6  ?Subroutine34
       1  ?Subroutine35
       6  ?Subroutine36
       9  ?Subroutine37
       9  ?Subroutine38
       1  ?Subroutine39
       7  ?Subroutine4
       3  ?Subroutine40
       6  ?Subroutine41
       6  ?Subroutine42
       9  ?Subroutine43
       7  ?Subroutine44
       9  ?Subroutine45
       7  ?Subroutine46
       7  ?Subroutine47
       6  ?Subroutine5
      13  ?Subroutine6
       4  ?Subroutine7
      12  ?Subroutine8
      16  ?Subroutine9
      57  MT_AfCommandProcessing
       6  MT_AfCommandProcessing::?relay
      74  MT_AfDataConfirm
       6  MT_AfDataConfirm::?relay
     771  MT_AfDataRequest
       6  MT_AfDataRequest::?relay
     468  MT_AfDataRetrieve
       6  MT_AfDataRetrieve::?relay
     266  MT_AfDataStore
       6  MT_AfDataStore::?relay
     128  MT_AfExec
       6  MT_AfExec::?relay
    1024  MT_AfIncomingMsg
       6  MT_AfIncomingMsg::?relay
     117  MT_AfRegister
       6  MT_AfRegister::?relay
       2  pMtAfDataReq
       2  pMtAfInMsgList

 
 3 340 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     4 bytes in segment XDATA_Z
 
    48 bytes of CODE     memory
 3 340 bytes of HUGECODE memory
     4 bytes of XDATA    memory

Errors: none
Warnings: none
