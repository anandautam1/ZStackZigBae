###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               12/Sep/2018  17:17:17
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.20
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
#    Command line       =  
#        -f C:\Users\ANANDA~1\AppData\Local\Temp\EWD08A.tmp ("C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\SampleApp.c"
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List"
#        -lA "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List\SampleApp.lst
#    Object file        =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj\SampleApp.r51
#
###############################################################################

C:\Users\Ananda Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ?AS IS? WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "AF.h"
     60          #include "OSAL.h"
     61          #include "OnBoard.h"
     62          #include "ZGlobals.h"
     63          #include "AF.h"
     64          #include "aps_groups.h"
     65          #include "ZDApp.h"
     66          #include "ZDObject.h"
     67          #include "ZDProfile.h"
     68          
     69          #include "SampleApp.h"
     70          #include "SampleAppHw.h"
     71          
     72          /* HAL */
     73          #include "hal_drivers.h"
     74          #if defined (LCD_SUPPORTED )
     75            #include "hal_lcd.h"
     76          #endif
     77          #include "hal_led.h"
     78          #include "hal_key.h"
     79          #include "hal_adc.h"
     80          #include "hal_uart.h"
     81          
     82          /*********************************************************************
     83           * MACROS
     84           */
     85          
     86          /*********************************************************************
     87           * CONSTANTS
     88           */
     89          
     90          /*********************************************************************
     91           * TYPEDEFS
     92           */
     93          
     94          /*********************************************************************
     95           * GLOBAL VARIABLES
     96           */
     97          
     98          uint8 SampleApp_TaskID;    // Task ID for internal task/event processing.
     99          
    100          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    101          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    102          {
    103            SAMPLEAPP_PERIODIC_CLUSTERID,
    104            SAMPLEAPP_FLASH_CLUSTERID
    105          };
    106          

   \                                 In  segment XDATA_ROM_C, align 1
    107          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    108          {
    109            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    110            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    111            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    112            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    113            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    114            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    115            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    116            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    117            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    118          };
    119          
    120          /*
    121          const endPointDesc_t SampleApp_epDesc =
    122          {
    123            SAMPLEAPP_ENDPOINT,
    124           &SampleApp_TaskID,
    125            (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc,
    126            noLatencyReqs
    127          };
    128          */
    129          
    130          // This is the Endpoint/Interface description.  It is defined here, but
    131          // filled-in in SampleApp_Init().  Another way to go would be to fill
    132          // in the structure here and make it a "const" (in code space).  The
    133          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    135          
    136          /*********************************************************************
    137           * EXTERNAL VARIABLES
    138           */
    139          
    140          /*********************************************************************
    141           * EXTERNAL FUNCTIONS
    142           */
    143          
    144          /*********************************************************************
    145           * LOCAL VARIABLES
    146           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          static uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    148                                    // This variable will be received when
    149                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    151          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    153          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    158          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    161          
    162          /*********************************************************************
    163           * LOCAL FUNCTIONS
    164           */
    165          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    166          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    167          void SampleApp_SendPeriodicMessage( void );
    168          void SampleApp_SendFlashMessage( uint16 flashTime );
    169          
    170          /*********************************************************************
    171           * NETWORK LAYER CALLBACKS
    172           */
    173          
    174          /*********************************************************************
    175           * PUBLIC FUNCTIONS
    176           */
    177          
    178          /*********************************************************************
    179           * @fn      SampleApp_Init
    180           *
    181           * @brief   Initialization function for the Generic App Task.
    182           *          This is called during initialization and should contain
    183           *          any application specific initialization (ie. hardware
    184           *          initialization/setup, table initialization, power up
    185           *          notificaiton ... ).
    186           *
    187           * @param   task_id - the ID assigned by OSAL.  This ID should be
    188           *                    used to send messages and set timers.
    189           *
    190           * @return  none
    191           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    192          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    193          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    194            SampleApp_TaskID = task_id;
   \   000006   90....       MOV       DPTR,#SampleApp_TaskID
   \   000009   F0           MOVX      @DPTR,A
    195            SampleApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV       DPTR,#SampleApp_NwkState
   \   00000D   7401         MOV       A,#0x1
   \   00000F   F0           MOVX      @DPTR,A
    196            SampleApp_TransID = 0;
   \   000010   90....       MOV       DPTR,#SampleApp_TransID
   \   000013   E4           CLR       A
   \   000014   F0           MOVX      @DPTR,A
    197          
    198            // Device hardware initialization can be added here or in main() (Zmain.c).
    199            // If the hardware is application specific - add it here.
    200            // If the hardware is other parts of the device add it in main().
    201          
    202           #if defined ( BUILD_ALL_DEVICES )
    203            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    204            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    205            // together - if they are - we will start up a coordinator. Otherwise,
    206            // the device will start as a router.
    207            if ( readCoordinatorJumper() )
    208              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    209            else
    210              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    211          #endif // BUILD_ALL_DEVICES
    212          
    213          #if defined ( HOLD_AUTO_START )
    214            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    215            //  from starting the device and wait for the application to
    216            //  start the device.
    217            ZDOInitDevice(0);
    218          #endif
    219          
    220            // Setup for the periodic message's destination address
    221            // Broadcast to everyone
    222            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000015   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000018   740F         MOV       A,#0xf
   \   00001A   F0           MOVX      @DPTR,A
    223            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00001B   A3           INC       DPTR
   \   00001C   7414         MOV       A,#0x14
   \   00001E   F0           MOVX      @DPTR,A
    224            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00001F   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr
   \   000022   74FF         MOV       A,#-0x1
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   F0           MOVX      @DPTR,A
    225          
    226            // Setup for the flash command's destination address - Group 1
    227            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000027   90....       MOV       DPTR,#SampleApp_Flash_DstAddr + 8
   \   00002A   7401         MOV       A,#0x1
   \   00002C   F0           MOVX      @DPTR,A
    228            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00002D   A3           INC       DPTR
   \   00002E   7414         MOV       A,#0x14
   \   000030   F0           MOVX      @DPTR,A
    229            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000031   90....       MOV       DPTR,#SampleApp_Flash_DstAddr
   \   000034   7401         MOV       A,#0x1
   \   000036   F0           MOVX      @DPTR,A
   \   000037   A3           INC       DPTR
   \   000038   E4           CLR       A
   \   000039   F0           MOVX      @DPTR,A
    230          
    231            // Fill out the endpoint description.
    232            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00003A   90....       MOV       DPTR,#SampleApp_epDesc
   \   00003D   7414         MOV       A,#0x14
   \   00003F   F0           MOVX      @DPTR,A
    233            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000040   A3           INC       DPTR
   \   000041   74..         MOV       A,#SampleApp_TaskID & 0xff
   \   000043   F0           MOVX      @DPTR,A
   \   000044   A3           INC       DPTR
   \   000045   74..         MOV       A,#(SampleApp_TaskID >> 8) & 0xff
   \   000047   F0           MOVX      @DPTR,A
    234            SampleApp_epDesc.simpleDesc
    235                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000048   A3           INC       DPTR
   \   000049   74..         MOV       A,#SampleApp_SimpleDesc & 0xff
   \   00004B   F0           MOVX      @DPTR,A
   \   00004C   A3           INC       DPTR
   \   00004D   74..         MOV       A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00004F   F0           MOVX      @DPTR,A
    236            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000050   A3           INC       DPTR
   \   000051   E4           CLR       A
   \   000052   F0           MOVX      @DPTR,A
    237          
    238            // Register the endpoint description with the AF
    239            afRegister( &SampleApp_epDesc );
   \   000053                ; Setup parameters for call to function afRegister
   \   000053   7A..         MOV       R2,#SampleApp_epDesc & 0xff
   \   000055   7B..         MOV       R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000057   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    240          
    241            // Register for all key events - This app will handle all key events
    242            RegisterForKeys( SampleApp_TaskID );
   \   00005A                ; Setup parameters for call to function RegisterForKeys
   \   00005A   90....       MOV       DPTR,#SampleApp_TaskID
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   F9           MOV       R1,A
   \   00005F   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    243          
    244            // By default, all devices start out in Group 1
    245            SampleApp_Group.ID = 0x0001;
   \   000062   90....       MOV       DPTR,#SampleApp_Group
   \   000065   7401         MOV       A,#0x1
   \   000067   F0           MOVX      @DPTR,A
   \   000068   A3           INC       DPTR
   \   000069   E4           CLR       A
   \   00006A   F0           MOVX      @DPTR,A
    246            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   00006B                ; Setup parameters for call to function osal_memcpy
   \   00006B   75....       MOV       ?V0,#`?<Constant "Group 1">` & 0xff
   \   00006E   75....       MOV       ?V1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000071   F5..         MOV       ?V2,A
   \   000073   78..         MOV       R0,#?V0
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000078   7C07         MOV       R4,#0x7
   \   00007A   7D00         MOV       R5,#0x0
   \   00007C   7A..         MOV       R2,#(SampleApp_Group + 2) & 0xff
   \   00007E   7B..         MOV       R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000080   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000083   7403         MOV       A,#0x3
   \   000085   12....       LCALL     ?DEALLOC_XSTACK8
    247            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   000088                ; Setup parameters for call to function aps_AddGroup
   \   000088   7A..         MOV       R2,#SampleApp_Group & 0xff
   \   00008A   7B..         MOV       R3,#(SampleApp_Group >> 8) & 0xff
   \   00008C   7914         MOV       R1,#0x14
   \   00008E   12....       LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
    248          
    249          #if defined ( LCD_SUPPORTED )
    250            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   000091                ; Setup parameters for call to function HalLcdWriteString
   \   000091   7901         MOV       R1,#0x1
   \   000093   7A..         MOV       R2,#`?<Constant "SampleApp">` & 0xff
   \   000095   7B..         MOV       R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   000097   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    251          #endif
    252          }
   \   00009A   7F03         MOV       R7,#0x3
   \   00009C   02....       LJMP      ?BANKED_LEAVE_XDATA
    253          
    254          /*********************************************************************
    255           * @fn      SampleApp_ProcessEvent
    256           *
    257           * @brief   Generic Application Task event processor.  This function
    258           *          is called to process all events for the task.  Events
    259           *          include timers, messages and any other user defined events.
    260           *
    261           * @param   task_id  - The OSAL assigned task ID.
    262           * @param   events - events to process.  This is a bit map and can
    263           *                   contain more than one event.
    264           *
    265           * @return  none
    266           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    267          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    268          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    269            afIncomingMSGPacket_t *MSGpkt;
    270            (void)task_id;  // Intentionally unreferenced parameter
    271          
    272            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL       A,#0x80
   \   00000B   6078         JZ        ??SampleApp_ProcessEvent_0
    273            {
    274              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   802B         SJMP      ??SampleApp_ProcessEvent_1
    275              while ( MSGpkt )
    276              {
    277                switch ( MSGpkt->hdr.event )
    278                {
    279                  // Received when a key is pressed
    280                  case KEY_CHANGE:
    281                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    282                    break;
    283          
    284                  // Received when a messages is received (OTA) for this endpoint
    285                  case AF_INCOMING_MSG_CMD:
    286                    SampleApp_MessageMSGCB( MSGpkt );
    287                    break;
    288          
    289                  // Received whenever the device changes state in the network
    290                  case ZDO_STATE_CHANGE:
    291                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   90....       MOV       DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX      @DPTR,A
    292                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    293                        || (SampleApp_NwkState == DEV_ROUTER)
    294                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6409         XRL       A,#0x9
   \   000017   600A         JZ        ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   6407         XRL       A,#0x7
   \   00001C   6005         JZ        ??SampleApp_ProcessEvent_3
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   6406         XRL       A,#0x6
   \   000021   7010         JNZ       ??SampleApp_ProcessEvent_4
    295                    {
    296                      // Start sending the periodic message in a regular interval.
    297                      osal_start_timerEx( SampleApp_TaskID,
    298                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    299                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000023                ; Setup parameters for call to function osal_start_timerEx
   \   000023   7C88         MOV       R4,#-0x78
   \   000025   7D13         MOV       R5,#0x13
   \   000027   7A01         MOV       R2,#0x1
   \   000029   7B00         MOV       R3,#0x0
   \   00002B   90....       MOV       DPTR,#SampleApp_TaskID
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F9           MOV       R1,A
   \   000030   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    300                    }
    301                    else
    302                    {
    303                      // Device is no longer in the network
    304                    }
    305                    break;
    306          
    307                  default:
    308                    break;
    309                }
    310          
    311                // Release the memory
    312                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000033                ; Setup parameters for call to function osal_msg_deallocate
   \   000033   AA..         MOV       R2,?V0
   \   000035   AB..         MOV       R3,?V1
   \   000037   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    313          
    314                // Next - if one is available
    315                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00003A                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00003A   90....       MOV       DPTR,#SampleApp_TaskID
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F9           MOV       R1,A
   \   00003F   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000042   8A..         MOV       ?V0,R2
   \   000044   8B..         MOV       ?V1,R3
   \   000046   E5..         MOV       A,?V0
   \   000048   45..         ORL       A,?V1
   \   00004A   6032         JZ        ??SampleApp_ProcessEvent_5
   \   00004C   85..82       MOV       DPL,?V0
   \   00004F   85..83       MOV       DPH,?V1
   \   000052   E0           MOVX      A,@DPTR
   \   000053   24E6         ADD       A,#-0x1a
   \   000055   601E         JZ        ??SampleApp_ProcessEvent_6
   \   000057   245A         ADD       A,#0x5a
   \   000059   6006         JZ        ??SampleApp_ProcessEvent_7
   \   00005B   24EF         ADD       A,#-0x11
   \   00005D   60B0         JZ        ??SampleApp_ProcessEvent_2
   \   00005F   80D2         SJMP      ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   000061                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   FA           MOV       R2,A
   \   000066   85..82       MOV       DPL,?V0
   \   000069   85..83       MOV       DPH,?V1
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F9           MOV       R1,A
   \   000070   12....       LCALL     `??SampleApp_HandleKeys::?relay`; Banked call to: SampleApp_HandleKeys
   \   000073   80BE         SJMP      ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000075                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000075   AA..         MOV       R2,?V0
   \   000077   AB..         MOV       R3,?V1
   \   000079   12....       LCALL     `??SampleApp_MessageMSGCB::?relay`; Banked call to: SampleApp_MessageMSGCB
   \   00007C   80B5         SJMP      ??SampleApp_ProcessEvent_4
    316              }
    317              
    318              
    319          
    320              // return unprocessed events
    321              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00007E   EE           MOV       A,R6
   \   00007F   FA           MOV       R2,A
   \   000080   EF           MOV       A,R7
   \   000081   6480         XRL       A,#0x80
   \   000083   8024         SJMP      ??SampleApp_ProcessEvent_8
    322            }
    323          
    324            // Send a message out - This event is generated by a timer
    325            //  (setup in SampleApp_Init()).
    326            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000085   EA           MOV       A,R2
   \   000086   A2E0         MOV       C,0xE0 /* A   */.0
   \   000088   5022         JNC       ??SampleApp_ProcessEvent_9
    327            {
    328              // Send the periodic message
    329              SampleApp_SendPeriodicMessage();
   \   00008A                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00008A   12....       LCALL     `??SampleApp_SendPeriodicMessage::?relay`; Banked call to: SampleApp_SendPeriodicMessage
    330          
    331              // Setup to send message again in normal period (+ a little jitter)
    332              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    333                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   00008D                ; Setup parameters for call to function osal_rand
   \   00008D   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000090                ; Setup parameters for call to function osal_start_timerEx
   \   000090   EA           MOV       A,R2
   \   000091   2488         ADD       A,#-0x78
   \   000093   FC           MOV       R4,A
   \   000094   E4           CLR       A
   \   000095   3413         ADDC      A,#0x13
   \   000097   FD           MOV       R5,A
   \   000098   7A01         MOV       R2,#0x1
   \   00009A   7B00         MOV       R3,#0x0
   \   00009C   90....       MOV       DPTR,#SampleApp_TaskID
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   F9           MOV       R1,A
   \   0000A1   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    334          
    335              // return unprocessed events
    336              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A4   EE           MOV       A,R6
   \   0000A5   6401         XRL       A,#0x1
   \   0000A7   FA           MOV       R2,A
   \   0000A8   EF           MOV       A,R7
   \                     ??SampleApp_ProcessEvent_8:
   \   0000A9   FB           MOV       R3,A
   \   0000AA   8004         SJMP      ??SampleApp_ProcessEvent_10
    337            }
    338          
    339            // Discard unknown events
    340            return 0;
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AC   7A00         MOV       R2,#0x0
   \   0000AE   7B00         MOV       R3,#0x0
   \                     ??SampleApp_ProcessEvent_10:
   \   0000B0   7F04         MOV       R7,#0x4
   \   0000B2   02....       LJMP      ?BANKED_LEAVE_XDATA
    341          }
    342          
    343          /*********************************************************************
    344           * Event Generation Functions
    345           */
    346          /*********************************************************************
    347           * @fn      SampleApp_HandleKeys
    348           *
    349           * @brief   Handles all key events for this device.
    350           *
    351           * @param   shift - true if in shift/alt.
    352           * @param   keys - bit field for key events. Valid entries:
    353           *                 HAL_KEY_SW_2
    354           *                 HAL_KEY_SW_1
    355           *
    356           * @return  none
    357           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    358          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    359          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
    360            static uint16 JoyStickUpCount = 0;
    361            (void)shift;  // Intentionally unreferenced parameter
    362            uint8 buffer[3];
    363            
    364            buffer[0] = (uint8)0xCC;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   74CC         MOV       A,#-0x34
   \   000014   F0           MOVX      @DPTR,A
    365            buffer[1] = (uint8)0x0B;
   \   000015   7401         MOV       A,#0x1
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   740B         MOV       A,#0xb
   \   00001C   F0           MOVX      @DPTR,A
    366            buffer[2] = (uint8)0x05;
   \   00001D   7402         MOV       A,#0x2
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   7405         MOV       A,#0x5
   \   000024   F0           MOVX      @DPTR,A
    367            
    368            if ( keys & HAL_KEY_SW_1 )
   \   000025   EA           MOV       A,R2
   \   000026   A2E0         MOV       C,0xE0 /* A   */.0
   \   000028   5053         JNC       ??SampleApp_HandleKeys_0
    369            {
    370              /* This key sends the Flash Command is sent to Group 1.
    371               * This device will not receive the Flash Command from this
    372               * device (even if it belongs to group 1).
    373               */
    374              
    375              // joystick is up send a packet to the coordinator with three bytes
    376              // 0xCC and next two bytes to be your App ID matthew id 3542046
    377              // 0xCC2046
    378              
    379              // send the packet 
    380              
    381              if (AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    382                                 SAMPLEAPP_FLASH_CLUSTERID,
    383                                 3,
    384                                 buffer,
    385                                 &SampleApp_TransID,
    386                                 AF_DISCV_ROUTE,
    387                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00002A                ; Setup parameters for call to function AF_DataRequest
   \   00002A   75..1E       MOV       ?V0,#0x1e
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000032   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000035   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7403         MOV       A,#0x3
   \   00003F   12....       LCALL     ?XSTACK_DISP100_8
   \   000042   88..         MOV       ?V0,R0
   \   000044   89..         MOV       ?V1,R1
   \   000046   78..         MOV       R0,#?V0
   \   000048   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004B   75..03       MOV       ?V0,#0x3
   \   00004E   75..00       MOV       ?V1,#0x0
   \   000051   78..         MOV       R0,#?V0
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000056   75..02       MOV       ?V0,#0x2
   \   000059   78..         MOV       R0,#?V0
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005E   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000061   12....       LCALL     ?DEALLOC_XSTACK8
    388              {
    389              }
    390              else
    391              {
    392                // Error occurred in request to send.
    393              }
    394              
    395              // SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
    396              
    397              // do the logic for the arrow keys led blinker
    398              // HalLedBlink( uint8 leds, uint8 cnt, uint8 duty, uint16 time );
    399              HalLedBlink(HAL_LED_1,4,50,1000);
   \   000064                ; Setup parameters for call to function HalLedBlink
   \   000064   7CE8         MOV       R4,#-0x18
   \   000066   7D03         MOV       R5,#0x3
   \   000068   7B32         MOV       R3,#0x32
   \   00006A   7A04         MOV       R2,#0x4
   \   00006C   7901         MOV       R1,#0x1
   \   00006E   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    400              //HalLcdWriteString ( "Joystick Up", HAL_LCD_LINE_2);
    401              JoyStickUpCount++;
   \   000071   90....       MOV       DPTR,#??JoyStickUpCount
   \   000074   E0           MOVX      A,@DPTR
   \   000075   2401         ADD       A,#0x1
   \   000077   F0           MOVX      @DPTR,A
   \   000078   A3           INC       DPTR
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   3400         ADDC      A,#0x0
   \   00007C   F0           MOVX      @DPTR,A
    402            }
    403          
    404            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   00007D   EE           MOV       A,R6
   \   00007E   A2E1         MOV       C,0xE0 /* A   */.1
   \   000080   5037         JNC       ??SampleApp_HandleKeys_1
    405            {
    406              // do the logic for the arrow keys led blinker
    407              // HalLedBlink( uint8 leds, uint8 cnt, uint8 duty, uint16 time );
    408              HalLedBlink(HAL_LED_2,4,50,1000);
   \   000082                ; Setup parameters for call to function HalLedBlink
   \   000082   7CE8         MOV       R4,#-0x18
   \   000084   7D03         MOV       R5,#0x3
   \   000086   7B32         MOV       R3,#0x32
   \   000088   7A04         MOV       R2,#0x4
   \   00008A   7902         MOV       R1,#0x2
   \   00008C   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    409              HalLcdWriteString ( "Joystick Right", HAL_LCD_LINE_1);
   \   00008F                ; Setup parameters for call to function HalLcdWriteString
   \   00008F   7901         MOV       R1,#0x1
   \   000091   7A..         MOV       R2,#`?<Constant "Joystick Right">` & 0xff
   \   000093   7B..         MOV       R3,#(`?<Constant "Joystick Right">` >> 8) & 0xff
   \   000095   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    410              
    411              /* The Flashr Command is sent to Group 1.
    412               * This key toggles this device in and out of group 1.
    413               * If this device doesn't belong to group 1, this application
    414               * will not receive the Flash command sent to group 1.
    415               */
    416              aps_Group_t *grp;
    417              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    418              if ( grp )
   \   000098                ; Setup parameters for call to function aps_FindGroup
   \   000098   7A01         MOV       R2,#0x1
   \   00009A   7B00         MOV       R3,#0x0
   \   00009C   7914         MOV       R1,#0x14
   \   00009E   12....       LCALL     `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   0000A1   EA           MOV       A,R2
   \   0000A2   4B           ORL       A,R3
   \   0000A3   600B         JZ        ??SampleApp_HandleKeys_2
    419              {
    420                // Remove from the group
    421                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   0000A5                ; Setup parameters for call to function aps_RemoveGroup
   \   0000A5   7A01         MOV       R2,#0x1
   \   0000A7   7B00         MOV       R3,#0x0
   \   0000A9   7914         MOV       R1,#0x14
   \   0000AB   12....       LCALL     `??aps_RemoveGroup::?relay`; Banked call to: aps_RemoveGroup
   \   0000AE   8009         SJMP      ??SampleApp_HandleKeys_1
    422              }
    423              else
    424              {
    425                // Add to the flash group
    426                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   0000B0                ; Setup parameters for call to function aps_AddGroup
   \   0000B0   7A..         MOV       R2,#SampleApp_Group & 0xff
   \   0000B2   7B..         MOV       R3,#(SampleApp_Group >> 8) & 0xff
   \   0000B4   7914         MOV       R1,#0x14
   \   0000B6   12....       LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
    427              }
    428            }
    429            if ( keys & HAL_KEY_SW_3 )
   \                     ??SampleApp_HandleKeys_1:
   \   0000B9   EE           MOV       A,R6
   \   0000BA   A2E4         MOV       C,0xE0 /* A   */.4
   \   0000BC   5032         JNC       ??SampleApp_HandleKeys_3
    430            {
    431              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   0000BE                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   0000BE   7AE8         MOV       R2,#-0x18
   \   0000C0   7B03         MOV       R3,#0x3
   \   0000C2   12....       LCALL     `??SampleApp_SendFlashMessage::?relay`; Banked call to: SampleApp_SendFlashMessage
    432              
    433              
    434              //flash led
    435              HalLedBlink(HAL_LED_3,4,50,1000);
   \   0000C5                ; Setup parameters for call to function HalLedBlink
   \   0000C5   7CE8         MOV       R4,#-0x18
   \   0000C7   7D03         MOV       R5,#0x3
   \   0000C9   7B32         MOV       R3,#0x32
   \   0000CB   7A04         MOV       R2,#0x4
   \   0000CD   7904         MOV       R1,#0x4
   \   0000CF   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    436              //display jpystick up count
    437              HalLcdWriteStringValue( "Ananda Utama:", JoyStickUpCount, 16, HAL_LCD_LINE_2);
   \   0000D2                ; Setup parameters for call to function HalLcdWriteStringValue
   \   0000D2   75..02       MOV       ?V0,#0x2
   \   0000D5   78..         MOV       R0,#?V0
   \   0000D7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DA   7910         MOV       R1,#0x10
   \   0000DC   90....       MOV       DPTR,#??JoyStickUpCount
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   FC           MOV       R4,A
   \   0000E1   A3           INC       DPTR
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   FD           MOV       R5,A
   \   0000E4   7A..         MOV       R2,#`?<Constant "Ananda Utama:">` & 0xff
   \   0000E6   7B..         MOV       R3,#(`?<Constant "Ananda Utama:">` >> 8) & 0xff
   \   0000E8   12....       LCALL     `??HalLcdWriteStringValue::?relay`; Banked call to: HalLcdWriteStringValue
   \   0000EB   7401         MOV       A,#0x1
   \   0000ED   12....       LCALL     ?DEALLOC_XSTACK8
    438            }
    439            if ( keys & HAL_KEY_SW_4 )
   \                     ??SampleApp_HandleKeys_3:
   \   0000F0   EE           MOV       A,R6
   \   0000F1   A2E3         MOV       C,0xE0 /* A   */.3
   \   0000F3   5010         JNC       ??SampleApp_HandleKeys_4
    440            {
    441              JoyStickUpCount = 0;
   \   0000F5   90....       MOV       DPTR,#??JoyStickUpCount
   \   0000F8   E4           CLR       A
   \   0000F9   F0           MOVX      @DPTR,A
   \   0000FA   A3           INC       DPTR
   \   0000FB   F0           MOVX      @DPTR,A
    442              HalLcdWriteString ( "Count Reset", HAL_LCD_LINE_2);
   \   0000FC                ; Setup parameters for call to function HalLcdWriteString
   \   0000FC   7902         MOV       R1,#0x2
   \   0000FE   7A..         MOV       R2,#`?<Constant "Count Reset">` & 0xff
   \   000100   7B..         MOV       R3,#(`?<Constant "Count Reset">` >> 8) & 0xff
   \   000102   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    443            }
    444          }
   \                     ??SampleApp_HandleKeys_4:
   \   000105                REQUIRE ?Subroutine0
   \   000105                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7403         MOV       A,#0x3
   \   000002                REQUIRE ??Subroutine3_0
   \   000002                ; // Fall through to label ??Subroutine3_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F02         MOV       R7,#0x2
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7920         MOV       R1,#0x20
   \   000002   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   000004   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000006   7A..         MOV       R2,#SampleApp_Flash_DstAddr & 0xff
   \   000008   7B..         MOV       R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   00000A                REQUIRE ??Subroutine4_0
   \   00000A                ; // Fall through to label ??Subroutine4_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine4_0:
   \   000000   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000003   7409         MOV       A,#0x9
   \   000005   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??JoyStickUpCount:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    445          
    446          /*********************************************************************
    447           * LOCAL FUNCTIONS
    448           */
    449          
    450          /*********************************************************************
    451           * @fn      SampleApp_MessageMSGCB
    452           *
    453           * @brief   Data message processor callback.  This function processes
    454           *          any incoming data - probably from other devices.  So, based
    455           *          on cluster ID, perform the intended action.
    456           *
    457           * @param   none
    458           *
    459           * @return  none
    460           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    461          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    462          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    463            uint16 flashTime;
    464            
    465            // additional variable
    466            uint8 groupID;
    467            uint16 srcShortAddr;
                          ^
Warning[Pe177]: variable "srcShortAddr" was declared but never referenced
    468          
    469            uint8 buffer[4];
    470            switch ( pkt->clusterId )
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   6402         XRL       A,#0x2
   \   000015   7002         JNZ       ??SampleApp_MessageMSGCB_0
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   000019   6003         JZ        $+5
   \   00001B   02....       LJMP      ??SampleApp_MessageMSGCB_1 & 0xFFFF
    471            {
    472              case SAMPLEAPP_PERIODIC_CLUSTERID:
    473                break;
    474          
    475              case SAMPLEAPP_FLASH_CLUSTERID:
    476                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    477                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   00001E   EA           MOV       A,R2
   \   00001F   2421         ADD       A,#0x21
   \   000021   FE           MOV       R6,A
   \   000022   E4           CLR       A
   \   000023   3B           ADDC      A,R3
   \   000024   FF           MOV       R7,A
   \   000025   8E82         MOV       DPL,R6
   \   000027   F583         MOV       DPH,A
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F8           MOV       R0,A
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F9           MOV       R1,A
   \   00002E                ; Setup parameters for call to function HalLedBlink
   \   00002E   8882         MOV       DPL,R0
   \   000030   F583         MOV       DPH,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   FA           MOV       R2,A
   \   000035   8882         MOV       DPL,R0
   \   000037   8983         MOV       DPH,R1
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F8           MOV       R0,A
   \   00003D   E4           CLR       A
   \   00003E   C8           XCH       A,R0
   \   00003F   F9           MOV       R1,A
   \   000040   EA           MOV       A,R2
   \   000041   28           ADD       A,R0
   \   000042   F5..         MOV       ?V0,A
   \   000044   E4           CLR       A
   \   000045   39           ADDC      A,R1
   \   000046   F5..         MOV       ?V1,A
   \   000048   7402         MOV       A,#0x2
   \   00004A   78..         MOV       R0,#?V0
   \   00004C   12....       LCALL     ?US_SHR
   \   00004F   AC..         MOV       R4,?V0
   \   000051   AD..         MOV       R5,?V1
   \   000053   7B32         MOV       R3,#0x32
   \   000055   7A04         MOV       R2,#0x4
   \   000057   7908         MOV       R1,#0x8
   \   000059   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    478          
    479                // added new codes 
    480                //groupIDJinx=BUILD_UINT16(pkt->cmd.Data[0], pkt->cmd.Data[1]);
    481                // extracting application data 
    482                uint8 firstByte = pkt->cmd.Data[0];
   \   00005C   8E82         MOV       DPL,R6
   \   00005E   8F83         MOV       DPH,R7
   \   000060   E0           MOVX      A,@DPTR
   \   000061   FA           MOV       R2,A
   \   000062   A3           INC       DPTR
   \   000063   E0           MOVX      A,@DPTR
   \   000064   FB           MOV       R3,A
   \   000065   8A82         MOV       DPL,R2
   \   000067   F583         MOV       DPH,A
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   FC           MOV       R4,A
    483                uint8 secondByte = pkt->cmd.Data[1];
   \   00006B   A3           INC       DPTR
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   FD           MOV       R5,A
    484                uint8 thirdByte = pkt->cmd.Data[2];
    485                
    486                uint32 finalValue = 0;
    487                finalValue = BUILD_UINT32(firstByte, secondByte, thirdByte, (uint8)0);
   \   00006E   8C..         MOV       ?V4,R4
   \   000070   E4           CLR       A
   \   000071   F5..         MOV       ?V5,A
   \   000073   F5..         MOV       ?V6,A
   \   000075   F5..         MOV       ?V7,A
   \   000077   8D..         MOV       ?V0,R5
   \   000079   F5..         MOV       ?V1,A
   \   00007B   F5..         MOV       ?V2,A
   \   00007D   F5..         MOV       ?V3,A
   \   00007F   7408         MOV       A,#0x8
   \   000081   78..         MOV       R0,#?V0
   \   000083   12....       LCALL     ?L_SHL
   \   000086   78..         MOV       R0,#?V4
   \   000088   79..         MOV       R1,#?V0
   \   00008A   12....       LCALL     ?L_ADD
   \   00008D   8A82         MOV       DPL,R2
   \   00008F   8B83         MOV       DPH,R3
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000096   12....       LCALL     ?L_SHL
   \   000099   78..         MOV       R0,#?V4
   \   00009B   79..         MOV       R1,#?V0
   \   00009D   12....       LCALL     ?L_ADD
    488                //finalValue = BUILD_UINT32((uint8)0, firstByte, secondByte, thirdByte);
    489                
    490                groupID = pkt->cmd.Data[0];
    491                
    492                
    493                if (groupID == 0x05){
   \   0000A0   7405         MOV       A,#0x5
   \   0000A2   6C           XRL       A,R4
   \   0000A3   6003         JZ        $+5
   \   0000A5   02....       LJMP      ??SampleApp_MessageMSGCB_2 & 0xFFFF
    494                  // take the first and second byte for the group ID 
    495                  buffer[0] = (uint8)firstByte;
   \   0000A8   EC           MOV       A,R4
   \   0000A9   85..82       MOV       DPL,?XSP + 0
   \   0000AC   85..83       MOV       DPH,?XSP + 1
   \   0000AF   F0           MOVX      @DPTR,A
    496                  buffer[1] = (uint8)secondByte;
   \   0000B0   7401         MOV       A,#0x1
   \   0000B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B5   ED           MOV       A,R5
   \   0000B6   F0           MOVX      @DPTR,A
    497                  // read the adc and pushed it to the buffer 
    498                  uint16 AdcResult = HalAdcRead (HAL_ADC_CHANNEL_7, HAL_ADC_RESOLUTION_14);
   \   0000B7                ; Setup parameters for call to function HalAdcRead
   \   0000B7   7A04         MOV       R2,#0x4
   \   0000B9   7907         MOV       R1,#0x7
   \   0000BB   12....       LCALL     `??HalAdcRead::?relay`; Banked call to: HalAdcRead
    499                  buffer[2] = (uint8)AdcResult & 0xFF;
   \   0000BE   7402         MOV       A,#0x2
   \   0000C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C3   EA           MOV       A,R2
   \   0000C4   F0           MOVX      @DPTR,A
    500                  buffer[3] = (uint8)(AdcResult >> 8);
   \   0000C5   7403         MOV       A,#0x3
   \   0000C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CA   EB           MOV       A,R3
   \   0000CB   F0           MOVX      @DPTR,A
    501          
    502                  if (AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    503                                 SAMPLEAPP_FLASH_CLUSTERID,
    504                                 4,
    505                                 buffer,
    506                                 &SampleApp_TransID,
    507                                 AF_DISCV_ROUTE,
    508                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   0000CC                ; Setup parameters for call to function AF_DataRequest
   \   0000CC   75..1E       MOV       ?V0,#0x1e
   \   0000CF   78..         MOV       R0,#?V0
   \   0000D1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D4   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   0000D7   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   0000DA   78..         MOV       R0,#?V0
   \   0000DC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DF   7403         MOV       A,#0x3
   \   0000E1   12....       LCALL     ?XSTACK_DISP100_8
   \   0000E4   88..         MOV       ?V0,R0
   \   0000E6   89..         MOV       ?V1,R1
   \   0000E8   78..         MOV       R0,#?V0
   \   0000EA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000ED   75..04       MOV       ?V0,#0x4
   \   0000F0   75..00       MOV       ?V1,#0x0
   \   0000F3   78..         MOV       R0,#?V0
   \   0000F5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F8   75..02       MOV       ?V0,#0x2
   \   0000FB   78..         MOV       R0,#?V0
   \   0000FD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000100   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000103   12....       LCALL     ?DEALLOC_XSTACK8
    509                  {
    510                  }
    511                  else
    512                  {
    513                    // Error occurred in request to send.
    514                  }
    515                  
    516                  finalValue = BUILD_UINT32(buffer[0], buffer[1], buffer[2], buffer[3]);
   \   000106   85..82       MOV       DPL,?XSP + 0
   \   000109   85..83       MOV       DPH,?XSP + 1
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   F5..         MOV       ?V4,A
   \   00010F   E4           CLR       A
   \   000110   F5..         MOV       ?V5,A
   \   000112   F5..         MOV       ?V6,A
   \   000114   F5..         MOV       ?V7,A
   \   000116   04           INC       A
   \   000117   12....       LCALL     ?XSTACK_DISP0_8
   \   00011A   E0           MOVX      A,@DPTR
   \   00011B   F5..         MOV       ?V0,A
   \   00011D   E4           CLR       A
   \   00011E   F5..         MOV       ?V2,A
   \   000120   7408         MOV       A,#0x8
   \   000122   78..         MOV       R0,#?V0
   \   000124   12....       LCALL     ?L_SHL
   \   000127   78..         MOV       R0,#?V4
   \   000129   79..         MOV       R1,#?V0
   \   00012B   12....       LCALL     ?L_ADD
   \   00012E   7402         MOV       A,#0x2
   \   000130   12....       LCALL     ?XSTACK_DISP0_8
   \   000133   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000136   12....       LCALL     ?L_SHL
   \   000139   78..         MOV       R0,#?V4
   \   00013B   79..         MOV       R1,#?V0
   \   00013D   12....       LCALL     ?L_ADD
   \   000140   7403         MOV       A,#0x3
   \   000142   12....       LCALL     ?XSTACK_DISP0_8
   \   000145   E0           MOVX      A,@DPTR
   \   000146   F5..         MOV       ?V0,A
   \   000148   E4           CLR       A
   \   000149   F5..         MOV       ?V2,A
   \   00014B   7418         MOV       A,#0x18
   \   00014D   78..         MOV       R0,#?V0
   \   00014F   12....       LCALL     ?L_SHL
   \   000152   78..         MOV       R0,#?V4
   \   000154   79..         MOV       R1,#?V0
   \   000156   12....       LCALL     ?L_ADD
    517                  HalLcdWriteValue( finalValue , 16, HAL_LCD_LINE_2);
   \   000159                ; Setup parameters for call to function HalLcdWriteValue
   \   000159   75..02       MOV       ?V0,#0x2
   \   00015C   78..         MOV       R0,#?V0
   \   00015E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000161   7910         MOV       R1,#0x10
   \   000163   AA..         MOV       R2,?V4
   \   000165   AB..         MOV       R3,?V5
   \   000167   AC..         MOV       R4,?V6
   \   000169   AD..         MOV       R5,?V7
   \   00016B   12....       LCALL     `??HalLcdWriteValue::?relay`; Banked call to: HalLcdWriteValue
   \   00016E   7401         MOV       A,#0x1
   \   000170   12....       LCALL     ?DEALLOC_XSTACK8
    518                }
    519                
    520                // srcShortAddr = pkt->srcAddr.addr.shortAddr;
    521                // HalLcdWriteStringValueValue( "R:", srcShortAddr, 16, groupIDJinx, 16, HAL_LCD_LINE_2);
    522                
    523                HalLcdWriteValue( finalValue , 16, HAL_LCD_LINE_3);
   \                     ??SampleApp_MessageMSGCB_2:
   \   000173                ; Setup parameters for call to function HalLcdWriteValue
   \   000173   75..03       MOV       ?V0,#0x3
   \   000176   78..         MOV       R0,#?V0
   \   000178   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00017B   7910         MOV       R1,#0x10
   \   00017D   AA..         MOV       R2,?V4
   \   00017F   AB..         MOV       R3,?V5
   \   000181   AC..         MOV       R4,?V6
   \   000183   AD..         MOV       R5,?V7
   \   000185   12....       LCALL     `??HalLcdWriteValue::?relay`; Banked call to: HalLcdWriteValue
   \   000188   7401         MOV       A,#0x1
   \   00018A   12....       LCALL     ?DEALLOC_XSTACK8
    524                
    525                // HalLcdWriteStringValueValue( , firstByte, 16, secondByte, 16, HAL_LCD_LINE_3);
    526                break;
    527            }
    528          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   00018D   7404         MOV       A,#0x4
   \   00018F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000192   7F08         MOV       R7,#0x8
   \   000194   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   E4           CLR       A
   \   000004   F5..         MOV       ?V1,A
   \   000006   7410         MOV       A,#0x10
   \   000008   78..         MOV       R0,#?V0
   \   00000A   22           RET
    529          
    530          /*********************************************************************
    531           * @fn      SampleApp_SendPeriodicMessage
    532           *
    533           * @brief   Send the periodic message.
    534           *
    535           * @param   none
    536           *
    537           * @return  none
    538           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    539          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    540          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    541            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    542                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    543                                 1,
    544                                 (uint8*)&SampleAppPeriodicCounter,
    545                                 &SampleApp_TransID,
    546                                 AF_DISCV_ROUTE,
    547                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV       ?V0,#0x1e
   \   000008   78..         MOV       R0,#?V0
   \   00000A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV       R0,#?V0
   \   000015   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV       ?V0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV       ?V1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV       ?V0,#0x1
   \   000026   75..00       MOV       ?V1,#0x0
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV       R1,#0x20
   \   000035   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV       R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV       R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL     ??Subroutine4_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000040   02....       LJMP      ??Subroutine3_0 & 0xFFFF
    548            {
    549            }
    550            else
    551            {
    552              // Error occurred in request to send.
    553            }
    554          }
    555          
    556          /*********************************************************************
    557           * @fn      SampleApp_SendFlashMessage
    558           *
    559           * @brief   Send the flash message to group 1.
    560           *
    561           * @param   flashTime - in milliseconds
    562           *
    563           * @return  none
    564           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    565          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    566          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    567            uint8 buffer[3];
    568            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV       DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   F0           MOVX      @DPTR,A
   \   000015   90....       MOV       DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX      A,@DPTR
   \   000019   04           INC       A
   \   00001A   F0           MOVX      @DPTR,A
    569            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV       A,#0x1
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   EA           MOV       A,R2
   \   000021   F0           MOVX      @DPTR,A
    570            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   EB           MOV       A,R3
   \   000028   F0           MOVX      @DPTR,A
    571          
    572            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    573                                 SAMPLEAPP_FLASH_CLUSTERID,
    574                                 3,
    575                                 buffer,
    576                                 &SampleApp_TransID,
    577                                 AF_DISCV_ROUTE,
    578                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV       ?V0,#0x1e
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV       A,#0x3
   \   00003E   12....       LCALL     ?XSTACK_DISP100_8
   \   000041   88..         MOV       ?V0,R0
   \   000043   89..         MOV       ?V1,R1
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   75..03       MOV       ?V0,#0x3
   \   00004D   75..00       MOV       ?V1,#0x0
   \   000050   78..         MOV       R0,#?V0
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   75..02       MOV       ?V0,#0x2
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000060   12....       LCALL     ?DEALLOC_XSTACK8
    579            {
    580            }
    581            else
    582            {
    583              // Error occurred in request to send.
    584            }
    585          }
   \   000063   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_MessageMSGCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendPeriodicMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendFlashMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Joystick Right">`:
   \   000000   4A6F7973     DB "Joystick Right"
   \            7469636B
   \            20526967
   \            687400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Ananda Utama:">`:
   \   000000   416E616E     DB "Ananda Utama:"
   \            64612055
   \            74616D61
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Count Reset">`:
   \   000000   436F756E     DB "Count Reset"
   \            74205265
   \            73657400
    586          
    587          /*********************************************************************
    588          *********************************************************************/
    589          
    590          /*********************************************************************
    591           * @fn      SampleApp_CallBack
    592           *
    593           * @brief   Send data OTA.
    594           *
    595           * @param   port - UART port.
    596           * @param   event - the UART port event flag.
    597           *
    598           * @return  none
    599           */
    600          /*
    601          static void SampleApp_CallBack(uint8 port, uint8 event)
    602          {
    603            (void)port;
    604          
    605            if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
    606          #if SERIAL_APP_LOOPBACK
    607                (SampleApp_TxLen < SERIAL_APP_TX_MAX))
    608          #else
    609                !SampleApp_TxLen)
    610          #endif
    611            {
    612              SampleApp_Send();
    613            }
    614          }
    615          */
    616          
    617          /*********************************************************************
    618          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     34   SampleApp_HandleKeys
        0     22   -> AF_DataRequest
        0     13   -> HalLcdWriteString
        0     14   -> HalLcdWriteStringValue
        0     13   -> HalLedBlink
        0     13   -> SampleApp_SendFlashMessage
        0     13   -> aps_AddGroup
        0     13   -> aps_FindGroup
        0     13   -> aps_RemoveGroup
      0     14   SampleApp_Init
        0     11   -> HalLcdWriteString
        0     11   -> RegisterForKeys
        0     11   -> afRegister
        0     11   -> aps_AddGroup
        0     14   -> osal_memcpy
      1     41   SampleApp_MessageMSGCB
        0     29   -> AF_DataRequest
        0     20   -> HalAdcRead
        0     21   -> HalLcdWriteValue
        0     20   -> HalLedBlink
      0     12   SampleApp_ProcessEvent
        0     12   -> SampleApp_HandleKeys
        0     12   -> SampleApp_MessageMSGCB
        0     12   -> SampleApp_SendPeriodicMessage
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> osal_rand
        0     12   -> osal_start_timerEx
      1     35   SampleApp_SendFlashMessage
        0     22   -> AF_DataRequest
      0     31   SampleApp_SendPeriodicMessage
        0     19   -> AF_DataRequest


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  ?<Constant "Ananda Utama:">
      12  ?<Constant "Count Reset">
       8  ?<Constant "Group 1">
      15  ?<Constant "Joystick Right">
      10  ?<Constant "SampleApp">
       8  ??Subroutine3_0
       6  ??Subroutine4_0
       2  ?Subroutine0
      11  ?Subroutine1
      10  ?Subroutine2
       2  JoyStickUpCount
       1  SampleAppFlashCounter
       1  SampleAppPeriodicCounter
       4  SampleApp_ClusterList
      12  SampleApp_Flash_DstAddr
      18  SampleApp_Group
     261  SampleApp_HandleKeys
       6  SampleApp_HandleKeys::?relay
     159  SampleApp_Init
       6  SampleApp_Init::?relay
     407  SampleApp_MessageMSGCB
       6  SampleApp_MessageMSGCB::?relay
       1  SampleApp_NwkState
      12  SampleApp_Periodic_DstAddr
     181  SampleApp_ProcessEvent
       6  SampleApp_ProcessEvent::?relay
     102  SampleApp_SendFlashMessage
       6  SampleApp_SendFlashMessage::?relay
      67  SampleApp_SendPeriodicMessage
       6  SampleApp_SendPeriodicMessage::?relay
      12  SampleApp_SimpleDesc
       1  SampleApp_TaskID
       1  SampleApp_TransID
       6  SampleApp_epDesc

 
 1 214 bytes in segment BANKED_CODE
    36 bytes in segment BANK_RELAYS
    75 bytes in segment XDATA_ROM_C
    55 bytes in segment XDATA_Z
 
    36 bytes of CODE     memory
    75 bytes of CONST    memory
 1 214 bytes of HUGECODE memory
    55 bytes of XDATA    memory

Errors: none
Warnings: 1
