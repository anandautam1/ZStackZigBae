///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.20.1.5333 for 8051              13/Sep/2018  22:05:05
// Copyright 2004-2018 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.20
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//    Command line       =  
//        -f C:\Users\ANANDA~1\AppData\Local\Temp\EW9E32.tmp
//        (C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
//        LCD_SUPPORTED=DEBUG -lC
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List
//        -lA
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List
//        --diag_suppress Pe001,Pa010 -o
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 8 -f
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DRTR_NWK) -f
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) -I
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\
//        -I
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\
//        -I
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
//        -I
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
//        -I
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
//        -I
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
//        -I
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
//        -I
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
//        -I
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
//        -I
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
//        -I
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
//        -I
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
//        -I
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
//        -I
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
//        -I
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
//        -I
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
//        -I
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
//        -I
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
//        -I
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
//        -I
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
//        -I
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
//        -I
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
//        -Ohz --require_prototypes)
//    Locale             =  English_USA.1252
//    List file          =  
//        C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List\SampleApp.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME SampleApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD
        EXTERN ?L_SHL
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SHR
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_Z

        FUNCTION `??SampleApp_CallBack::?relay`,0203H
        PUBLIC `??SampleApp_HandleKeys::?relay`
        FUNCTION `??SampleApp_HandleKeys::?relay`,0203H
        PUBLIC `??SampleApp_Init::?relay`
        FUNCTION `??SampleApp_Init::?relay`,0203H
        PUBLIC `??SampleApp_MessageMSGCB::?relay`
        FUNCTION `??SampleApp_MessageMSGCB::?relay`,0203H
        PUBLIC `??SampleApp_ProcessEvent::?relay`
        FUNCTION `??SampleApp_ProcessEvent::?relay`,0203H
        PUBLIC `??SampleApp_SendFlashMessage::?relay`
        FUNCTION `??SampleApp_SendFlashMessage::?relay`,0203H
        PUBLIC `??SampleApp_SendPeriodicMessage::?relay`
        FUNCTION `??SampleApp_SendPeriodicMessage::?relay`,0203H
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_Broadcast
        FUNCTION SampleApp_CallBack,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 92, STACK
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_HandleKeys
        FUNCTION SampleApp_HandleKeys,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 24, STACK
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 30, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SampleApp_SendFlashMessage
        FUNCTION SampleApp_SendFlashMessage,0a1203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC SampleApp_SendPeriodicMessage
        FUNCTION SampleApp_SendPeriodicMessage,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBLIC SerialApp_TaskID
        PUBLIC SerialApp_epDesc
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
`??AF_DataRequest::?relay` SYMBOL "?relay", AF_DataRequest
HalAdcRead          SYMBOL "HalAdcRead"
`??HalAdcRead::?relay` SYMBOL "?relay", HalAdcRead
HalLcdWriteString   SYMBOL "HalLcdWriteString"
`??HalLcdWriteString::?relay` SYMBOL "?relay", HalLcdWriteString
HalLcdWriteStringValue SYMBOL "HalLcdWriteStringValue"
`??HalLcdWriteStringValue::?relay` SYMBOL "?relay", HalLcdWriteStringValue
HalLcdWriteValue    SYMBOL "HalLcdWriteValue"
`??HalLcdWriteValue::?relay` SYMBOL "?relay", HalLcdWriteValue
HalLedBlink         SYMBOL "HalLedBlink"
`??HalLedBlink::?relay` SYMBOL "?relay", HalLedBlink
HalUARTOpen         SYMBOL "HalUARTOpen"
`??HalUARTOpen::?relay` SYMBOL "?relay", HalUARTOpen
HalUARTRead         SYMBOL "HalUARTRead"
`??HalUARTRead::?relay` SYMBOL "?relay", HalUARTRead
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
aps_AddGroup        SYMBOL "aps_AddGroup"
`??aps_AddGroup::?relay` SYMBOL "?relay", aps_AddGroup
aps_FindGroup       SYMBOL "aps_FindGroup"
`??aps_FindGroup::?relay` SYMBOL "?relay", aps_FindGroup
aps_RemoveGroup     SYMBOL "aps_RemoveGroup"
`??aps_RemoveGroup::?relay` SYMBOL "?relay", aps_RemoveGroup
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_rand           SYMBOL "osal_rand"
`??osal_rand::?relay` SYMBOL "?relay", osal_rand
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
SampleApp_HandleKeys SYMBOL "SampleApp_HandleKeys"
`??SampleApp_HandleKeys::?relay` SYMBOL "?relay", SampleApp_HandleKeys
SampleApp_Init      SYMBOL "SampleApp_Init"
`??SampleApp_Init::?relay` SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
`??SampleApp_MessageMSGCB::?relay` SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
`??SampleApp_ProcessEvent::?relay` SYMBOL "?relay", SampleApp_ProcessEvent
SampleApp_SendFlashMessage SYMBOL "SampleApp_SendFlashMessage"
`??SampleApp_SendFlashMessage::?relay` SYMBOL "?relay", SampleApp_SendFlashMessage
SampleApp_SendPeriodicMessage SYMBOL "SampleApp_SendPeriodicMessage"
`??SampleApp_SendPeriodicMessage::?relay` SYMBOL "?relay", SampleApp_SendPeriodicMessage

        EXTERN `??AF_DataRequest::?relay`
        FUNCTION `??AF_DataRequest::?relay`,00H
        EXTERN `??HalAdcRead::?relay`
        FUNCTION `??HalAdcRead::?relay`,00H
        EXTERN `??HalLcdWriteString::?relay`
        FUNCTION `??HalLcdWriteString::?relay`,00H
        EXTERN `??HalLcdWriteStringValue::?relay`
        FUNCTION `??HalLcdWriteStringValue::?relay`,00H
        EXTERN `??HalLcdWriteValue::?relay`
        FUNCTION `??HalLcdWriteValue::?relay`,00H
        EXTERN `??HalLedBlink::?relay`
        FUNCTION `??HalLedBlink::?relay`,00H
        EXTERN `??HalUARTOpen::?relay`
        FUNCTION `??HalUARTOpen::?relay`,00H
        EXTERN `??HalUARTRead::?relay`
        FUNCTION `??HalUARTRead::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??aps_AddGroup::?relay`
        FUNCTION `??aps_AddGroup::?relay`,00H
        EXTERN `??aps_FindGroup::?relay`
        FUNCTION `??aps_FindGroup::?relay`,00H
        EXTERN `??aps_RemoveGroup::?relay`
        FUNCTION `??aps_RemoveGroup::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_rand::?relay`
        FUNCTION `??osal_rand::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalAdcRead
        FUNCTION HalAdcRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteStringValue
        FUNCTION HalLcdWriteStringValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteValue
        FUNCTION HalLcdWriteValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 91, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindGroup
        FUNCTION aps_FindGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_RemoveGroup
        FUNCTION aps_RemoveGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\gitmuck\ZStackZigBae\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//    1 /**************************************************************************************************
//    2   Filename:       SampleApp.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    Sample Application (no Profile).
//    7 
//    8 
//    9   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED ?AS IS? WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends it's messages either as broadcast or
//   45   broadcast filtered group messages.  The other (more normal)
//   46   message addressing is unicast.  Most of the other sample
//   47   applications are written to support the unicast message model.
//   48 
//   49   Key control:
//   50     SW1:  Sends a flash command to all devices in Group 1.
//   51     SW2:  Adds/Removes (toggles) this device in and out
//   52           of Group 1.  This will enable and disable the
//   53           reception of the flash command.
//   54 *********************************************************************/
//   55 
//   56 /*********************************************************************
//   57  * INCLUDES
//   58  */
//   59 #include "AF.h"
//   60 #include "OSAL.h"
//   61 #include "OnBoard.h"
//   62 #include "ZGlobals.h"
//   63 #include "AF.h"
//   64 #include "aps_groups.h"
//   65 #include "ZDApp.h"
//   66 #include "ZDObject.h"
//   67 #include "ZDProfile.h"
//   68 
//   69 #include "SampleApp.h"
//   70 #include "SampleAppHw.h"
//   71 
//   72 /* HAL */
//   73 #include "hal_drivers.h"
//   74 #if defined (LCD_SUPPORTED )
//   75   #include "hal_lcd.h"
//   76 #endif
//   77 #include "hal_led.h"
//   78 #include "hal_key.h"
//   79 #include "hal_adc.h"
//   80 #include "hal_uart.h"
//   81 
//   82 /*********************************************************************
//   83  * MACROS
//   84  */
//   85 
//   86 /*********************************************************************
//   87  * CONSTANTS
//   88  */
//   89 
//   90 #if !defined( SAMPLE_APP_PORT )
//   91 #define SAMPLE_APP_PORT  0
//   92 #endif
//   93 
//   94 #if !defined( SAMPLE_APP_BAUD )
//   95 #define SAMPLE_APP_BAUD  HAL_UART_BR_38400
//   96 //#define SAMPLE_APP_BAUD  HAL_UART_BR_115200
//   97 #endif
//   98 
//   99 // When the Rx buf space is less than this threshold, invoke the Rx callback.
//  100 #if !defined( SAMPLE_APP_THRESH )
//  101 #define SAMPLE_APP_THRESH  64
//  102 #endif
//  103 
//  104 #if !defined( SAMPLE_APP_RX_SZ )
//  105 #define SAMPLE_APP_RX_SZ  128
//  106 #endif
//  107 
//  108 #if !defined( SAMPLE_APP_TX_SZ )
//  109 #define SAMPLE_APP_TX_SZ  128
//  110 #endif
//  111 
//  112 // Millisecs of idle time after a byte is received before invoking Rx callback.
//  113 #if !defined( SAMPLE_APP_IDLE )
//  114 #define SAMPLE_APP_IDLE  6
//  115 #endif
//  116 
//  117 // Loopback Rx bytes to Tx for throughput testing.
//  118 #if !defined( SAMPLE_APP_LOOPBACK )
//  119 #define SAMPLE_APP_LOOPBACK  FALSE
//  120 #endif
//  121 
//  122 // This is the max byte count per OTA message.
//  123 #if !defined( SAMPLE_APP_TX_MAX )
//  124 #define SAMPLE_APP_TX_MAX  80
//  125 #endif
//  126 
//  127 #define SAMPLE_APP_RSP_CNT  4
//  128 
//  129 /*********************************************************************
//  130  * TYPEDEFS
//  131  */
//  132 
//  133 /*********************************************************************
//  134  * GLOBAL VARIABLES
//  135  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  136 uint8 SerialApp_TaskID;    // Task ID for internal task/event processing.
SerialApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  137 
//  138 uint8 SampleApp_TaskID;    // Task ID for internal task/event processing.
//  139 
//  140 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  141 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
        DW 3
        DW 4
        DW 0
        DW 0
//  142 {
//  143   SAMPLEAPP_PERIODIC_CLUSTERID,
//  144   SAMPLEAPP_FLASH_CLUSTERID,
//  145   SAMPLEAPP_CLUSTERID1,
//  146   SAMPLEAPP_CLUSTERID2
//  147 };
//  148 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  149 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 6
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 6
        DATA16
        DW SampleApp_ClusterList
//  150 {
//  151   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//  152   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//  153   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  154   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  155   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//  156   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  157   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//  158   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  159   (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
//  160 };
//  161 
//  162 // This is the Endpoint/Interface description.  It is defined here, but
//  163 // filled-in in SampleApp_Init().  Another way to go would be to fill
//  164 // in the structure here and make it a "const" (in code space).  The
//  165 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  166 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  167 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  168 const endPointDesc_t SerialApp_epDesc =
SerialApp_epDesc:
        DB 20
        DATA16
        DW SerialApp_TaskID
        DW SampleApp_SimpleDesc
        DATA8
        DB 0
//  169 {
//  170   SAMPLEAPP_ENDPOINT,
//  171  &SerialApp_TaskID,
//  172   (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc,
//  173   noLatencyReqs
//  174 };
//  175 
//  176 /*********************************************************************
//  177  * EXTERNAL VARIABLES
//  178  */
//  179 
//  180 typedef struct
//  181 {
//  182     int temperature;           // -100 degrees C to 200 degrees C
//  183     int water_level;           // -50m to 50m
//  184     int  flow_rate;   	 // -10000 L/min to 10000 L/min
//  185     uint8  PH;   		 // 0 to 14
//  186     uint32  salinity;   	 // 0 to 2000000 mg
//  187     uint8  batt_level;        // 0 to 100 percent
//  188     float GNSS_latitude;         // -85 to 85 decimal degrees
//  189     float GNSS_longitude;        // -180 to 180 decimal degrees
//  190     
//  191     bool sensors_okay;   	 // 1=good, 0=bad
//  192     bool node_okay;   		 // 1=good, 0=bad
//  193     char error_state[25];    	 // char message, null terminated "\n"
//  194  
//  195 } data_sensor_outgoing;
//  196 
//  197 
//  198 /*********************************************************************
//  199  * EXTERNAL FUNCTIONS
//  200  */
//  201 
//  202 /*********************************************************************
//  203  * LOCAL VARIABLES
//  204  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  205 static uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  206                           // This variable will be received when
//  207                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  208 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  209 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  210 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  211 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  212 afAddrType_t SampleApp_Periodic_DstAddr;
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  213 afAddrType_t SampleApp_Flash_DstAddr;
SampleApp_Flash_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  214 afAddrType_t SampleApp_Broadcast;
SampleApp_Broadcast:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  215 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  216 aps_Group_t SampleApp_Group;
SampleApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  217 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  218 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  219 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  220 
//  221 static afAddrType_t SampleApp_TxAddr;
//  222 static uint8 SampleApp_TxSeq;
//  223 static uint8 SampleApp_TxBuf[SAMPLE_APP_TX_MAX+1];

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  224 static uint8 SampleApp_TxLen;
SampleApp_TxLen:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  225 
//  226 static afAddrType_t SampleApp_RxAddr;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  227 static uint8 SampleApp_RxSeq;
SampleApp_RxSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  228 static uint8 SampleApp_RspBuf[SAMPLE_APP_RSP_CNT];
//  229 
//  230 /*********************************************************************
//  231  * LOCAL FUNCTIONS
//  232  */
//  233 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//  234 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  235 void SampleApp_SendPeriodicMessage( void );
//  236 void SampleApp_SendFlashMessage( uint16 flashTime );
//  237 
//  238 static void SampleApp_CallBack(uint8 port, uint8 event);
//  239 
//  240 /*********************************************************************
//  241  * NETWORK LAYER CALLBACKS
//  242  */
//  243 
//  244 /*********************************************************************
//  245  * PUBLIC FUNCTIONS
//  246  */
//  247 
//  248 /*********************************************************************
//  249  * @fn      SampleApp_Init
//  250  *
//  251  * @brief   Initialization function for the Generic App Task.
//  252  *          This is called during initialization and should contain
//  253  *          any application specific initialization (ie. hardware
//  254  *          initialization/setup, table initialization, power up
//  255  *          notificaiton ... ).
//  256  *
//  257  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  258  *                    used to send messages and set timers.
//  259  *
//  260  * @return  none
//  261  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  262 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function SampleApp_Init
        CODE
//  263 {
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 29
        MOV       A,#-0x1d
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       A,R1
        MOV       R6,A
//  264   SampleApp_TaskID = task_id;
        MOV       DPTR,#SampleApp_TaskID
        MOVX      @DPTR,A
//  265   SampleApp_NwkState = DEV_INIT;
        MOV       DPTR,#SampleApp_NwkState
        MOV       A,#0x1
        MOVX      @DPTR,A
//  266   SampleApp_TransID = 0;
        MOV       DPTR,#SampleApp_TransID
        CLR       A
        MOVX      @DPTR,A
//  267 
//  268   // Device hardware initialization can be added here or in main() (Zmain.c).
//  269   // If the hardware is application specific - add it here.
//  270   // If the hardware is other parts of the device add it in main().
//  271 
//  272  #if defined ( BUILD_ALL_DEVICES )
//  273   // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  274   // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  275   // together - if they are - we will start up a coordinator. Otherwise,
//  276   // the device will start as a router.
//  277   if ( readCoordinatorJumper() )
//  278     zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  279   else
//  280     zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  281 #endif // BUILD_ALL_DEVICES
//  282 
//  283 #if defined ( HOLD_AUTO_START )
//  284   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  285   //  from starting the device and wait for the application to
//  286   //  start the device.
//  287   ZDOInitDevice(0);
//  288 #endif
//  289 
//  290   // Setup for the periodic message's destination address
//  291   // Broadcast to everyone
//  292   SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV       DPTR,#SampleApp_Periodic_DstAddr + 8
        MOV       A,#0xf
        MOVX      @DPTR,A
//  293   SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC       DPTR
        MOV       A,#0x14
        MOVX      @DPTR,A
//  294   SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
        MOV       DPTR,#SampleApp_Periodic_DstAddr
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  295 
//  296   // Setup for the flash command's destination address - Group 1
//  297   SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
        MOV       DPTR,#SampleApp_Flash_DstAddr + 8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  298   SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC       DPTR
        MOV       A,#0x14
        MOVX      @DPTR,A
//  299   SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
        MOV       DPTR,#SampleApp_Flash_DstAddr
        MOV       A,#0x1
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  300   
//  301   SampleApp_Broadcast.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV       DPTR,#SampleApp_Broadcast + 8
        MOV       A,#0xf
        MOVX      @DPTR,A
//  302   SampleApp_Broadcast.endPoint = SAMPLEAPP_ENDPOINT;
        INC       DPTR
        MOV       A,#0x14
        MOVX      @DPTR,A
//  303   SampleApp_Broadcast.addr.shortAddr = 0xFFFF;
        MOV       DPTR,#SampleApp_Broadcast
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  304 
//  305   // Fill out the endpoint description.
//  306   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV       DPTR,#SampleApp_epDesc
        MOV       A,#0x14
        MOVX      @DPTR,A
//  307   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC       DPTR
        MOV       A,#SampleApp_TaskID & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX      @DPTR,A
//  308   SampleApp_epDesc.simpleDesc
//  309             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC       DPTR
        MOV       A,#SampleApp_SimpleDesc & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX      @DPTR,A
//  310   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC       DPTR
        CLR       A
        LCALL     ?Subroutine2 & 0xFFFF
//  311 
//  312   // Register the endpoint description with the AF
//  313   afRegister( &SampleApp_epDesc );
//  314 
//  315   // Register for all key events - This app will handle all key events
//  316   RegisterForKeys( SampleApp_TaskID );
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function RegisterForKeys
        MOV       DPTR,#SampleApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  317 
//  318   // By default, all devices start out in Group 1
//  319   SampleApp_Group.ID = 0x0001;
        MOV       DPTR,#SampleApp_Group
        MOV       A,#0x1
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  320   osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "Group 1">` & 0xff
        MOV       ?V1,#(`?<Constant "Group 1">` >> 8) & 0xff
        MOV       ?V2,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 43)
        MOV       R4,#0x7
        MOV       R5,#0x0
        MOV       R2,#(SampleApp_Group + 2) & 0xff
        MOV       R3,#((SampleApp_Group + 2) >> 8) & 0xff
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 40)
//  321   aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
        ; Setup parameters for call to function aps_AddGroup
        MOV       R2,#SampleApp_Group & 0xff
        MOV       R3,#(SampleApp_Group >> 8) & 0xff
        MOV       R1,#0x14
        LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
//  322   
//  323   // Serial initialization start 
//  324   halUARTCfg_t uartConfig;
//  325 
//  326   SampleApp_TaskID = task_id;
        MOV       A,R6
        MOV       DPTR,#SampleApp_TaskID
        MOVX      @DPTR,A
//  327   SampleApp_RxSeq = 0xC3;
        MOV       DPTR,#SampleApp_RxSeq
        MOV       A,#-0x3d
        LCALL     ?Subroutine2 & 0xFFFF
//  328 
//  329   afRegister( (endPointDesc_t *)&SampleApp_epDesc );
//  330 
//  331   RegisterForKeys( task_id );
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function RegisterForKeys
        MOV       A,R6
        MOV       R1,A
        LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  332 
//  333   uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        MOVX      @DPTR,A
//  334   uartConfig.baudRate             = SAMPLE_APP_BAUD;
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  335   uartConfig.flowControl          = TRUE;
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  336   uartConfig.flowControlThreshold = SAMPLE_APP_THRESH; // 2x30 don't care - see uart driver.
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x40
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  337   uartConfig.rx.maxBufSize        = SAMPLE_APP_RX_SZ;  // 2x30 don't care - see uart driver.
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x80
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  338   uartConfig.tx.maxBufSize        = SAMPLE_APP_TX_SZ;  // 2x30 don't care - see uart driver.
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x80
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  339   uartConfig.idleTimeout          = SAMPLE_APP_IDLE;   // 2x30 don't care - see uart driver.
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x6
        MOVX      @DPTR,A
//  340   uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  341   uartConfig.callBackFunc         = SampleApp_CallBack;
        MOV       A,#0x1b
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`??SampleApp_CallBack::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??SampleApp_CallBack::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
//  342   HalUARTOpen (SAMPLE_APP_PORT, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x0
        LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
//  343   // Serial Initialization end
//  344 
//  345 #if defined ( LCD_SUPPORTED )
//  346   HalLcdWriteString( "SerialApp+Labs", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x1
        MOV       R2,#`?<Constant "SerialApp+Labs">` & 0xff
        MOV       R3,#(`?<Constant "SerialApp+Labs">` >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  347 #endif
//  348 }
        MOV       A,#0x1d
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       R7,#0x3
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function SampleApp_Init
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function SampleApp_Init
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond2) CFA_SP SP+-2
          CFI (cfiCond2) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiPicker3 Using cfiCommon1
          CFI (cfiPicker3) NoFunction
          CFI (cfiPicker3) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function afRegister
        ; Setup parameters for call to function afRegister
        MOV       R2,#SampleApp_epDesc & 0xff
        MOV       R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL     `??afRegister::?relay`; Banked call to: afRegister
        RET
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiPicker3
//  349 
//  350 /*********************************************************************
//  351  * @fn      SampleApp_ProcessEvent
//  352  *
//  353  * @brief   Generic Application Task event processor.  This function
//  354  *          is called to process all events for the task.  Events
//  355  *          include timers, messages and any other user defined events.
//  356  *
//  357  * @param   task_id  - The OSAL assigned task ID.
//  358  * @param   events - events to process.  This is a bit map and can
//  359  *                   contain more than one event.
//  360  *
//  361  * @return  none
//  362  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  363 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function SampleApp_ProcessEvent
        CODE
//  364 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_SendPeriodicMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  365   afIncomingMSGPacket_t *MSGpkt;
//  366   (void)task_id;  // Intentionally unreferenced parameter
//  367 
//  368   if ( events & SYS_EVENT_MSG )
        ANL       A,#0x80
        JZ        ??SampleApp_ProcessEvent_0
//  369   {
//  370     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP      ??SampleApp_ProcessEvent_1
//  371     while ( MSGpkt )
//  372     {
//  373       switch ( MSGpkt->hdr.event )
//  374       {
//  375         // Received when a key is pressed
//  376         case KEY_CHANGE:
//  377           SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  378           break;
//  379 
//  380         // Received when a messages is received (OTA) for this endpoint
//  381         case AF_INCOMING_MSG_CMD:
//  382           SampleApp_MessageMSGCB( MSGpkt );
//  383           break;
//  384 
//  385         // Received whenever the device changes state in the network
//  386         case ZDO_STATE_CHANGE:
//  387           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_2:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPTR,#SampleApp_NwkState
        MOVX      @DPTR,A
//  388           if ( (SampleApp_NwkState == DEV_ZB_COORD)
//  389               || (SampleApp_NwkState == DEV_ROUTER)
//  390               || (SampleApp_NwkState == DEV_END_DEVICE) )
        XRL       A,#0x9
        JZ        ??SampleApp_ProcessEvent_3
        MOVX      A,@DPTR
        XRL       A,#0x7
        JZ        ??SampleApp_ProcessEvent_3
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??SampleApp_ProcessEvent_4
//  391           {
//  392             // Start sending the periodic message in a regular interval.
//  393             osal_start_timerEx( SampleApp_TaskID,
//  394                               SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  395                               SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
??SampleApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_start_timerEx
        MOV       R4,#-0x78
        MOV       R5,#0x13
        MOV       R2,#0x1
        MOV       R3,#0x0
        MOV       DPTR,#SampleApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
//  396           }
//  397           else
//  398           {
//  399             // Device is no longer in the network
//  400           }
//  401           break;
//  402 
//  403         default:
//  404           break;
//  405       }
//  406 
//  407       // Release the memory
//  408       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//  409 
//  410       // Next - if one is available
//  411       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV       DPTR,#SampleApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??SampleApp_ProcessEvent_5
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ADD       A,#-0x1a
        JZ        ??SampleApp_ProcessEvent_6
        ADD       A,#0x5a
        JZ        ??SampleApp_ProcessEvent_7
        ADD       A,#-0x11
        JZ        ??SampleApp_ProcessEvent_2
        SJMP      ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_7:
        ; Setup parameters for call to function SampleApp_HandleKeys
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??SampleApp_HandleKeys::?relay`; Banked call to: SampleApp_HandleKeys
        SJMP      ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_6:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??SampleApp_MessageMSGCB::?relay`; Banked call to: SampleApp_MessageMSGCB
        SJMP      ??SampleApp_ProcessEvent_4
//  412     }
//  413     
//  414     
//  415 
//  416     // return unprocessed events
//  417     return (events ^ SYS_EVENT_MSG);
??SampleApp_ProcessEvent_5:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
        SJMP      ??SampleApp_ProcessEvent_8
//  418   }
//  419 
//  420   // Send a message out - This event is generated by a timer
//  421   //  (setup in SampleApp_Init()).
//  422   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
??SampleApp_ProcessEvent_0:
        MOV       A,R2
        MOV       C,0xE0 /* A   */.0
        JNC       ??SampleApp_ProcessEvent_9
//  423   {
//  424     // Send the periodic message
//  425     SampleApp_SendPeriodicMessage();
        ; Setup parameters for call to function SampleApp_SendPeriodicMessage
        LCALL     `??SampleApp_SendPeriodicMessage::?relay`; Banked call to: SampleApp_SendPeriodicMessage
//  426 
//  427     // Setup to send message again in normal period (+ a little jitter)
//  428     osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  429         (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
        ; Setup parameters for call to function osal_start_timerEx
        MOV       A,R2
        ADD       A,#-0x78
        MOV       R4,A
        CLR       A
        ADDC      A,#0x13
        MOV       R5,A
        MOV       R2,#0x1
        MOV       R3,#0x0
        MOV       DPTR,#SampleApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
//  430 
//  431     // return unprocessed events
//  432     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
        MOV       A,R6
        XRL       A,#0x1
        MOV       R2,A
        MOV       A,R7
??SampleApp_ProcessEvent_8:
        MOV       R3,A
        SJMP      ??SampleApp_ProcessEvent_10
//  433   }
//  434 
//  435   // Discard unknown events
//  436   return 0;
??SampleApp_ProcessEvent_9:
        MOV       R2,#0x0
        MOV       R3,#0x0
??SampleApp_ProcessEvent_10:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
//  437 }
          CFI EndBlock cfiBlock4
//  438 
//  439 /*********************************************************************
//  440  * Event Generation Functions
//  441  */
//  442 /*********************************************************************
//  443  * @fn      SampleApp_HandleKeys
//  444  *
//  445  * @brief   Handles all key events for this device.
//  446  *
//  447  * @param   shift - true if in shift/alt.
//  448  * @param   keys - bit field for key events. Valid entries:
//  449  *                 HAL_KEY_SW_2
//  450  *                 HAL_KEY_SW_1
//  451  *
//  452  * @return  none
//  453  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  454 void SampleApp_HandleKeys( uint8 shift, uint8 keys )
SampleApp_HandleKeys:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function SampleApp_HandleKeys
        CODE
//  455 {
        FUNCALL SampleApp_HandleKeys, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_FindGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_RemoveGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, SampleApp_SendFlashMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 5
        MOV       A,#-0x5
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,R2
        MOV       R6,A
//  456   static uint16 JoyStickUpCount = 0;
//  457   (void)shift;  // Intentionally unreferenced parameter
//  458   uint8 buffer[5];
//  459   
//  460   // the first data can be the device id.
//  461   // temperature
//  462   buffer[0] = (uint8)0x25;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x25
        MOVX      @DPTR,A
//  463   // water level 
//  464   buffer[1] = (uint8)0x10;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x10
        MOVX      @DPTR,A
//  465   // PH 
//  466   buffer[2] = (uint8)0x01;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  467   // Salinity
//  468   buffer[3] = (uint8)0x07;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x7
        MOVX      @DPTR,A
//  469   // Battery_level
//  470   buffer[4] = (uint8)0x99;
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x67
        MOVX      @DPTR,A
//  471   
//  472   if ( keys & HAL_KEY_SW_1 )
        MOV       A,R2
        MOV       C,0xE0 /* A   */.0
        JNC       ??SampleApp_HandleKeys_0
//  473   {
//  474     /* This key sends the Flash Command is sent to Group 1.
//  475      * This device will not receive the Flash Command from this
//  476      * device (even if it belongs to group 1).
//  477      */
//  478     
//  479     // the first data can be the device id.
//  480     // temperature
//  481     buffer[0] = (uint8)0x25;
//  482     // water level 
//  483     buffer[1] = (uint8)0x10;
//  484     // PH 
//  485     buffer[2] = (uint8)0x5000;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        LCALL     ??Subroutine5_0 & 0xFFFF
//  486     // Salinity
//  487     buffer[3] = (uint8)0x07;
//  488     // Battery_level
//  489     buffer[4] = (uint8)0x99;
//  490     
//  491     // joystick is up send a packet to the coordinator with three bytes
//  492     // 0xCC and next two bytes to be your App ID matthew id 3542046
//  493     // 0xCC2046
//  494     
//  495     // send the packet 
//  496     if (AF_DataRequest( &SampleApp_Broadcast, &SampleApp_epDesc,
//  497                        SAMPLEAPP_CLUSTERID1,
//  498                        5,
//  499                        buffer,
//  500                        &SampleApp_TransID,
//  501                        AF_DISCV_ROUTE,
//  502                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
??CrossCallReturnLabel_11:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V0,#SampleApp_TransID & 0xff
        MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V0,#0x5
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V0,#0x3
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
//  503     {
//  504     }
//  505     else
//  506     {
//  507       // Error occurred in request to send.
//  508     }
//  509     
//  510     // SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
//  511     
//  512     // do the logic for the arrow keys led blinker
//  513     // HalLedBlink( uint8 leds, uint8 cnt, uint8 duty, uint16 time );
//  514     // HalLedBlink(HAL_LED_1,4,50,1000);
//  515     // HalLcdWriteString ( "Joystick Up", HAL_LCD_LINE_2);
//  516     JoyStickUpCount++;
        MOV       DPTR,#??JoyStickUpCount
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOVX      @DPTR,A
//  517   }
//  518 
//  519   if ( keys & HAL_KEY_SW_2 )
??SampleApp_HandleKeys_0:
        MOV       A,R6
        MOV       C,0xE0 /* A   */.1
        JNC       ??SampleApp_HandleKeys_1
//  520   {
//  521     // do the logic for the arrow keys led blinker
//  522     // HalLedBlink( uint8 leds, uint8 cnt, uint8 duty, uint16 time );
//  523     HalLedBlink(HAL_LED_2,4,50,1000);
        ; Setup parameters for call to function HalLedBlink
        MOV       R4,#-0x18
        MOV       R5,#0x3
        MOV       R3,#0x32
        MOV       R2,#0x4
        MOV       R1,#0x2
        LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
//  524     HalLcdWriteString ( "Joystick Right", HAL_LCD_LINE_1);
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x1
        MOV       R2,#`?<Constant "Joystick Right">` & 0xff
        MOV       R3,#(`?<Constant "Joystick Right">` >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  525     
//  526     /* The Flashr Command is sent to Group 1.
//  527      * This key toggles this device in and out of group 1.
//  528      * If this device doesn't belong to group 1, this application
//  529      * will not receive the Flash command sent to group 1.
//  530      */
//  531     aps_Group_t *grp;
//  532     grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
//  533     if ( grp )
        ; Setup parameters for call to function aps_FindGroup
        MOV       R2,#0x1
        MOV       R3,#0x0
        MOV       R1,#0x14
        LCALL     `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
        MOV       A,R2
        ORL       A,R3
        JZ        ??SampleApp_HandleKeys_2
//  534     {
//  535       // Remove from the group
//  536       aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
        ; Setup parameters for call to function aps_RemoveGroup
        MOV       R2,#0x1
        MOV       R3,#0x0
        MOV       R1,#0x14
        LCALL     `??aps_RemoveGroup::?relay`; Banked call to: aps_RemoveGroup
        SJMP      ??SampleApp_HandleKeys_1
//  537     }
//  538     else
//  539     {
//  540       // Add to the flash group
//  541       aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
??SampleApp_HandleKeys_2:
        ; Setup parameters for call to function aps_AddGroup
        MOV       R2,#SampleApp_Group & 0xff
        MOV       R3,#(SampleApp_Group >> 8) & 0xff
        MOV       R1,#0x14
        LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
//  542     }
//  543   }
//  544   if ( keys & HAL_KEY_SW_3 )
??SampleApp_HandleKeys_1:
        MOV       A,R6
        MOV       C,0xE0 /* A   */.4
        JNC       ??SampleApp_HandleKeys_3
//  545   {
//  546     SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
        ; Setup parameters for call to function SampleApp_SendFlashMessage
        MOV       R2,#-0x18
        MOV       R3,#0x3
        LCALL     `??SampleApp_SendFlashMessage::?relay`; Banked call to: SampleApp_SendFlashMessage
//  547     
//  548     
//  549     //flash led
//  550     HalLedBlink(HAL_LED_3,4,50,1000);
        ; Setup parameters for call to function HalLedBlink
        MOV       R4,#-0x18
        MOV       R5,#0x3
        MOV       R3,#0x32
        MOV       R2,#0x4
        MOV       R1,#0x4
        LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
//  551     //display jpystick up count
//  552     HalLcdWriteStringValue( "Ananda Utama:", JoyStickUpCount, 16, HAL_LCD_LINE_2);
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV       ?V0,#0x2
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R1,#0x10
        MOV       DPTR,#??JoyStickUpCount
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       R2,#`?<Constant "Ananda Utama:">` & 0xff
        MOV       R3,#(`?<Constant "Ananda Utama:">` >> 8) & 0xff
        LCALL     ?Subroutine3 & 0xFFFF
//  553   }
??CrossCallReturnLabel_2:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
//  554   if ( keys & HAL_KEY_SW_4 )
??SampleApp_HandleKeys_3:
        MOV       A,R6
        MOV       C,0xE0 /* A   */.3
        JNC       ??SampleApp_HandleKeys_4
//  555   {
//  556     JoyStickUpCount = 0;
        MOV       DPTR,#??JoyStickUpCount
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  557     HalLcdWriteString ( "Count Reset", HAL_LCD_LINE_2);
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x2
        MOV       R2,#`?<Constant "Count Reset">` & 0xff
        MOV       R3,#(`?<Constant "Count Reset">` >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  558     
//  559     // the first data can be the device id.
//  560     // temperature
//  561     buffer[0] = (uint8)0x10;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x10
        MOVX      @DPTR,A
//  562     // water level 
//  563     buffer[1] = (uint8)0x10;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x10
        MOVX      @DPTR,A
//  564     // PH 
//  565     buffer[2] = (uint8)0x08;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x8
        MOVX      @DPTR,A
//  566     // Salinity
//  567     buffer[3] = (uint8)0x07;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x7
        MOVX      @DPTR,A
//  568     // Battery_level
//  569     buffer[4] = (uint8)0x20;
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x20
        LCALL     ??Subroutine5_0 & 0xFFFF
//  570     
//  571     // send the packet 
//  572     if (AF_DataRequest( &SampleApp_Broadcast, &SampleApp_epDesc,
//  573                        SAMPLEAPP_CLUSTERID1,
//  574                        5,
//  575                        buffer,
//  576                        &SampleApp_TransID,
//  577                        AF_DISCV_ROUTE,
//  578                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
//  579     {
//  580     }
//  581     else
//  582     {
//  583       // Error occurred in request to send.
//  584     }
//  585     
//  586   }
??CrossCallReturnLabel_12:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V0,#SampleApp_TransID & 0xff
        MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V0,#0x5
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V0,#0x3
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
//  587 }
??SampleApp_HandleKeys_4:
        MOV       A,#0x5
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock5

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??JoyStickUpCount:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  588 
//  589 /*********************************************************************
//  590  * LOCAL FUNCTIONS
//  591  */
//  592 
//  593 /*********************************************************************
//  594  * @fn      SampleApp_MessageMSGCB
//  595  *
//  596  * @brief   Data message processor callback.  This function processes
//  597  *          any incoming data - probably from other devices.  So, based
//  598  *          on cluster ID, perform the intended action.
//  599  *
//  600  * @param   none
//  601  *
//  602  * @return  none
//  603  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  604 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function SampleApp_MessageMSGCB
        CODE
//  605 {
        FUNCALL SampleApp_MessageMSGCB, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLcdWriteValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLcdWriteValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 5
        MOV       A,#-0x5
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       DPL,R2
        MOV       DPH,R3
//  606   uint16 flashTime = 1;
//  607   
//  608   // additional variable
//  609   uint8 groupID;
//  610   uint16 srcShortAddr;
//  611 
//  612   uint8 buffer[5];
//  613   switch ( pkt->clusterId )
        MOV       A,DPL
        ADD       A,#0x21
        MOV       R6,A
        CLR       A
        ADDC      A,DPH
        MOV       R7,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?US_SWITCH_DENSE
`?<Jumptable for SampleApp_MessageMSGCB>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_2
        CODE
//  614   {
//  615     case SAMPLEAPP_PERIODIC_CLUSTERID:
//  616       break;
//  617       
//  618     case SAMPLEAPP_CLUSTERID1:
//  619       HalLedBlink( HAL_LED_1, 4, 50, 250 );
??SampleApp_MessageMSGCB_2:
        ; Setup parameters for call to function HalLedBlink
        MOV       R4,#-0x6
        MOV       R5,#0x0
        MOV       R3,#0x32
        MOV       R2,#0x4
        MOV       R1,#0x1
        LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
//  620       
//  621       uint8 firstByte;
//  622       uint8 secondByte;
//  623       
//  624       uint8 temperature = pkt->cmd.Data[0];
//  625       uint8 water_level = pkt->cmd.Data[1];
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
//  626       uint8 flow_rate = pkt->cmd.Data[2];
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
//  627       uint8 PH = pkt->cmd.Data[3];
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
//  628       uint8 batt_level = pkt->cmd.Data[4];
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
//  629       uint8 node_okay = 1;
//  630       
//  631       data_sensor_outgoing current_status;
//  632       // ",GNSS_latitude:r1r0ft5p6pxb4vwr",
//  633       
//  634       HalLcdWriteStringValue( ",temperature:", temperature, 16, HAL_LCD_LINE_1);
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV       ?V2,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R1,#0x10
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R5,#0x0
        MOV       R2,#`?<Constant ",temperature:">` & 0xff
        MOV       R3,#(`?<Constant ",temperature:">` >> 8) & 0xff
        LCALL     ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
//  635       HalLcdWriteStringValue( ",water_level:", water_level, 16, HAL_LCD_LINE_2);
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV       ?V2,#0x2
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R1,#0x10
        MOV       A,R7
        MOV       R4,A
        MOV       R5,#0x0
        MOV       R2,#`?<Constant ",water_level:">` & 0xff
        MOV       R3,#(`?<Constant ",water_level:">` >> 8) & 0xff
        LCALL     ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
//  636       HalLcdWriteStringValue( ",flow_rate:", flow_rate, 16, HAL_LCD_LINE_3);
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV       ?V2,#0x3
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R1,#0x10
        MOV       R4,?V0
        MOV       R5,#0x0
        MOV       R2,#`?<Constant ",flow_rate:">` & 0xff
        MOV       R3,#(`?<Constant ",flow_rate:">` >> 8) & 0xff
        LCALL     ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
//  637       HalLcdWriteStringValue( ",PH:", PH, 16, HAL_LCD_LINE_1);
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R1,#0x10
        MOV       R4,?V1
        MOV       R5,#0x0
        MOV       R2,#`?<Constant ",PH:">` & 0xff
        MOV       R3,#(`?<Constant ",PH:">` >> 8) & 0xff
        LCALL     ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
//  638       HalLcdWriteStringValue( ",batt_level:", batt_level, 16, HAL_LCD_LINE_2);
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV       ?V0,#0x2
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R1,#0x10
        MOV       A,R6
        MOV       R4,A
        MOV       R5,#0x0
        MOV       R2,#`?<Constant ",batt_level:">` & 0xff
        MOV       R3,#(`?<Constant ",batt_level:">` >> 8) & 0xff
        LCALL     ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
//  639       HalLcdWriteStringValue( ",node_okay:", node_okay, 16, HAL_LCD_LINE_3);
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV       ?V0,#0x3
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R1,#0x10
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       R2,#`?<Constant ",node_okay:">` & 0xff
        MOV       R3,#(`?<Constant ",node_okay:">` >> 8) & 0xff
        LCALL     `??HalLcdWriteStringValue::?relay`; Banked call to: HalLcdWriteStringValue
        LJMP      ??SampleApp_MessageMSGCB_3 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 21)
//  640       
//  641       break;
//  642 
//  643     case SAMPLEAPP_FLASH_CLUSTERID:
//  644       flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
//  645       HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
??SampleApp_MessageMSGCB_1:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        ; Setup parameters for call to function HalLedBlink
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        CLR       A
        XCH       A,R0
        MOV       R1,A
        MOV       A,R2
        ADD       A,R0
        MOV       ?V0,A
        CLR       A
        ADDC      A,R1
        MOV       ?V1,A
        MOV       A,#0x2
        MOV       R0,#?V0
        LCALL     ?US_SHR
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       R3,#0x32
        MOV       R2,#0x4
        MOV       R1,#0x8
        LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
//  646 
//  647       // added new codes 
//  648       //groupIDJinx=BUILD_UINT16(pkt->cmd.Data[0], pkt->cmd.Data[1]);
//  649       // extracting application data 
//  650       //uint8 firstByte = pkt->cmd.Data[0];
//  651       //uint8 secondByte = pkt->cmd.Data[1];
//  652       //uint8 thirdByte = pkt->cmd.Data[2];
//  653       
//  654       uint32 finalValue = 0;
        MOV       ?V0,#0x0
        MOV       ?V1,#0x0
        MOV       ?V2,#0x0
        MOV       ?V3,#0x0
//  655       //finalValue = BUILD_UINT32(firstByte, secondByte, thirdByte, (uint8)0);
//  656       //finalValue = BUILD_UINT32((uint8)0, firstByte, secondByte, thirdByte);
//  657       
//  658       groupID = pkt->cmd.Data[0];
//  659       
//  660       if (groupID == 0x05){
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        XRL       A,#0x5
        JZ        $+5
        LJMP      ??SampleApp_MessageMSGCB_4 & 0xFFFF
//  661         // take the first and second byte for the group ID 
//  662         buffer[0] = (uint8)firstByte;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,?V4
        MOVX      @DPTR,A
//  663         buffer[1] = (uint8)secondByte;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V5
        MOVX      @DPTR,A
//  664         // read the adc and pushed it to the buffer 
//  665         uint16 AdcResult = HalAdcRead (HAL_ADC_CHANNEL_7, HAL_ADC_RESOLUTION_14);
        ; Setup parameters for call to function HalAdcRead
        MOV       R2,#0x4
        MOV       R1,#0x7
        LCALL     `??HalAdcRead::?relay`; Banked call to: HalAdcRead
//  666         buffer[2] = (uint8)AdcResult & 0xFF;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
//  667         buffer[3] = (uint8)(AdcResult >> 8);
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine1 & 0xFFFF
//  668 
//  669         if (AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
//  670                        SAMPLEAPP_FLASH_CLUSTERID,
//  671                        4,
//  672                        buffer,
//  673                        &SampleApp_TransID,
//  674                        AF_DISCV_ROUTE,
//  675                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
??CrossCallReturnLabel_9:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V0,#SampleApp_TransID & 0xff
        MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       ?V0,#0x4
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V0,#0x2
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R1,#0x20
        MOV       R4,#SampleApp_epDesc & 0xff
        MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV       R2,#SampleApp_Flash_DstAddr & 0xff
        MOV       R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
        LCALL     ??Subroutine6_0 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
//  676         {
//  677         }
//  678         else
//  679         {
//  680           // Error occurred in request to send.
//  681         }
//  682         
//  683         finalValue = BUILD_UINT32(buffer[0], buffer[1], buffer[2], buffer[3]);
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       ?V0,A
        CLR       A
        INC       A
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V4,A
        CLR       A
        MOV       ?V5,A
        MOV       ?V6,A
        MOV       ?V7,A
        MOV       A,#0x8
        MOV       R0,#?V4
        LCALL     ?L_SHL
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?L_ADD
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V4,A
        CLR       A
        MOV       ?V5,A
        MOV       A,#0x10
        MOV       R0,#?V4
        LCALL     ?L_SHL
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?L_ADD
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V4,A
        CLR       A
        MOV       ?V6,A
        MOV       A,#0x18
        MOV       R0,#?V4
        LCALL     ?L_SHL
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?L_ADD
//  684         HalLcdWriteValue( finalValue , 16, HAL_LCD_LINE_2);
        ; Setup parameters for call to function HalLcdWriteValue
        MOV       ?V4,#0x2
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R1,#0x10
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R4,?V2
        MOV       R5,?V3
        LCALL     `??HalLcdWriteValue::?relay`; Banked call to: HalLcdWriteValue
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
//  685       }
//  686       
//  687       // srcShortAddr = pkt->srcAddr.addr.shortAddr;
//  688       // HalLcdWriteStringValueValue( "R:", srcShortAddr, 16, groupIDJinx, 16, HAL_LCD_LINE_2);
//  689       
//  690       HalLcdWriteValue( finalValue , 16, HAL_LCD_LINE_3);
??SampleApp_MessageMSGCB_4:
        ; Setup parameters for call to function HalLcdWriteValue
        MOV       ?V4,#0x3
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R1,#0x10
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R4,?V2
        MOV       R5,?V3
        LCALL     `??HalLcdWriteValue::?relay`; Banked call to: HalLcdWriteValue
??SampleApp_MessageMSGCB_3:
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
//  691       
//  692       // HalLcdWriteStringValueValue( , firstByte, 16, secondByte, 16, HAL_LCD_LINE_3);
//  693       break;
//  694   }
//  695 }
??SampleApp_MessageMSGCB_0:
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond7 Using cfiCommon0
          CFI Function SampleApp_HandleKeys
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function SampleApp_MessageMSGCB
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function SampleApp_MessageMSGCB
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function SampleApp_MessageMSGCB
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function SampleApp_MessageMSGCB
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function SampleApp_MessageMSGCB
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function SampleApp_CallBack
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
        LCALL     `??HalLcdWriteStringValue::?relay`; Banked call to: HalLcdWriteStringValue
        MOV       A,#0x1
        RET
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function SampleApp_MessageMSGCB
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function SampleApp_SendFlashMessage
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        MOV       A,R3
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17
        REQUIRE ??Subroutine5_0
        ; // Fall through to label ??Subroutine5_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine5_0:
          CFI Block cfiCond18 Using cfiCommon0
          CFI Function SampleApp_HandleKeys
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function SampleApp_HandleKeys
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function SampleApp_MessageMSGCB
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function SampleApp_SendFlashMessage
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function AF_DataRequest
        ; Setup parameters for call to function AF_DataRequest
        ; Setup parameters for call to function AF_DataRequest
        ; Setup parameters for call to function AF_DataRequest
        MOV       ?V0,#0x1e
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22
//  696 
//  697 /*********************************************************************
//  698  * @fn      SampleApp_SendPeriodicMessage
//  699  *
//  700  * @brief   Send the periodic message.
//  701  *
//  702  * @param   none
//  703  *
//  704  * @return  none
//  705  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  706 void SampleApp_SendPeriodicMessage( void )
SampleApp_SendPeriodicMessage:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function SampleApp_SendPeriodicMessage
        CODE
//  707 {
        FUNCALL SampleApp_SendPeriodicMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  708   if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  709                        SAMPLEAPP_PERIODIC_CLUSTERID,
//  710                        1,
//  711                        (uint8*)&SampleAppPeriodicCounter,
//  712                        &SampleApp_TransID,
//  713                        AF_DISCV_ROUTE,
//  714                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV       ?V0,#0x1e
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       ?V0,#SampleApp_TransID & 0xff
        MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       ?V0,#SampleAppPeriodicCounter & 0xff
        MOV       ?V1,#(SampleAppPeriodicCounter >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R1,#0x20
        MOV       R4,#SampleApp_epDesc & 0xff
        MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV       R2,#SampleApp_Periodic_DstAddr & 0xff
        MOV       R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
        LCALL     ??Subroutine6_0 & 0xFFFF
??CrossCallReturnLabel_16:
        SJMP      ?Subroutine0
//  715   {
//  716   }
//  717   else
//  718   {
//  719     // Error occurred in request to send.
//  720   }
//  721 }
          CFI EndBlock cfiBlock23
//  722 
//  723 /*********************************************************************
//  724  * @fn      SampleApp_SendFlashMessage
//  725  *
//  726  * @brief   Send the flash message to group 1.
//  727  *
//  728  * @param   flashTime - in milliseconds
//  729  *
//  730  * @return  none
//  731  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  732 void SampleApp_SendFlashMessage( uint16 flashTime )
SampleApp_SendFlashMessage:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function SampleApp_SendFlashMessage
        CODE
//  733 {
        FUNCALL SampleApp_SendFlashMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  734   uint8 buffer[3];
//  735   buffer[0] = (uint8)(SampleAppFlashCounter++);
        MOV       DPTR,#SampleAppFlashCounter
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       DPTR,#SampleAppFlashCounter
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
//  736   buffer[1] = LO_UINT16( flashTime );
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
//  737   buffer[2] = HI_UINT16( flashTime );
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine1 & 0xFFFF
//  738 
//  739   if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
//  740                        SAMPLEAPP_FLASH_CLUSTERID,
//  741                        3,
//  742                        buffer,
//  743                        &SampleApp_TransID,
//  744                        AF_DISCV_ROUTE,
//  745                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
??CrossCallReturnLabel_10:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,#SampleApp_TransID & 0xff
        MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V0,#0x3
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V0,#0x2
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R1,#0x20
        MOV       R4,#SampleApp_epDesc & 0xff
        MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV       R2,#SampleApp_Flash_DstAddr & 0xff
        MOV       R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
        LCALL     ??Subroutine6_0 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  746   {
//  747   }
//  748   else
//  749   {
//  750     // Error occurred in request to send.
//  751   }
//  752 }
        MOV       A,#0x3
          CFI EndBlock cfiBlock24
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Valid
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock25

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond26 Using cfiCommon0
          CFI Function SampleApp_HandleKeys
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function SampleApp_HandleKeys
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker28 Using cfiCommon1
          CFI (cfiPicker28) NoFunction
          CFI (cfiPicker28) Picker
        MOV       R1,#0x20
        MOV       R4,#SampleApp_epDesc & 0xff
        MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV       R2,#SampleApp_Broadcast & 0xff
        MOV       R3,#(SampleApp_Broadcast >> 8) & 0xff
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiPicker28
        REQUIRE ??Subroutine6_0
        ; // Fall through to label ??Subroutine6_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine6_0:
          CFI Block cfiCond29 Using cfiCommon0
          CFI Function SampleApp_MessageMSGCB
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function SampleApp_SendPeriodicMessage
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function SampleApp_SendFlashMessage
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function SampleApp_HandleKeys
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function SampleApp_HandleKeys
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker34 Using cfiCommon1
          CFI (cfiPicker34) NoFunction
          CFI (cfiPicker34) Picker
        LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV       A,#0x9
        RET
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiPicker34
//  753 
//  754 /*********************************************************************
//  755 *********************************************************************/
//  756 
//  757 /*********************************************************************
//  758  * @fn      SampleApp_CallBack
//  759  *
//  760  * @brief   Send data OTA.
//  761  *
//  762  * @param   port - UART port.
//  763  * @param   event - the UART port event flag.
//  764  *
//  765  * @return  none
//  766  */
//  767 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  768 static void SampleApp_CallBack(uint8 port, uint8 event)
SampleApp_CallBack:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI Function SampleApp_CallBack
        CODE
//  769 {
        FUNCALL SampleApp_CallBack, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 91, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 91, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_CallBack, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 81
        MOV       A,#-0x51
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 91)
        MOV       A,R2
        MOV       R6,A
//  770   (void)port;
//  771   uint8 localBuf[81];
//  772   uint16 receivedUARTLen;
//  773 
//  774   if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
//  775 #if SERIAL_APP_LOOPBACK
//  776       (SampleApp_TxLen < SERIAL_APP_TX_MAX))
//  777 #else
//  778       !SampleApp_TxLen)
        MOV       A,#0x7
        ANL       A,R6
        JZ        ??SampleApp_CallBack_0
        MOV       DPTR,#SampleApp_TxLen
        MOVX      A,@DPTR
        JNZ       ??SampleApp_CallBack_0
//  779 #endif
//  780   {
//  781     // buffer needed to be emptied for the new liner
//  782     for(int i = 0; i < 81; i++){
//  783       localBuf[i] = 0;
        CLR       A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       R0,#0x51
??SampleApp_CallBack_1:
        MOVX      @DPTR,A
        INC       DPTR
        DJNZ      R0,??SampleApp_CallBack_1
//  784     }   
//  785     receivedUARTLen= HalUARTRead(SAMPLE_APP_PORT, localBuf, SAMPLE_APP_TX_MAX);
        ; Setup parameters for call to function HalUARTRead
        MOV       R4,#0x50
        MOV       R5,A
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,A
        LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
//  786     HalLcdWriteStringValue( localBuf,  receivedUARTLen, 16, HAL_LCD_LINE_3 ); 
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV       ?V0,#0x3
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 92)
        MOV       R1,#0x10
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     ?Subroutine3 & 0xFFFF
//  787     
//  788     
//  789     //HalUARTWrite(SAMPLE_APP_PORT, *localBuf, 81);
//  790     //SampleApp_Send();
//  791   }
??CrossCallReturnLabel_8:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 91)
//  792 }
??SampleApp_CallBack_0:
        MOV       A,#0x51
        SJMP      ?Subroutine0
          CFI EndBlock cfiBlock35

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SampleApp_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SampleApp_ProcessEvent::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SampleApp_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SampleApp_MessageMSGCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SampleApp_SendPeriodicMessage::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_SendPeriodicMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SampleApp_SendFlashMessage::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_SendFlashMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SampleApp_CallBack::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_CallBack

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group 1">`:
        DB "Group 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SerialApp+Labs">`:
        DB "SerialApp+Labs"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Joystick Right">`:
        DB "Joystick Right"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Ananda Utama:">`:
        DB "Ananda Utama:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Count Reset">`:
        DB "Count Reset"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant ",temperature:">`:
        DB ",temperature:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant ",water_level:">`:
        DB ",water_level:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant ",flow_rate:">`:
        DB ",flow_rate:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant ",PH:">`:
        DB ",PH:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant ",batt_level:">`:
        DB ",batt_level:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant ",node_okay:">`:
        DB ",node_okay:"

        END
//  793 
//  794 
//  795 /*********************************************************************
//  796 *********************************************************************/
// 
// 1 737 bytes in segment BANKED_CODE
//    42 bytes in segment BANK_RELAYS
//   164 bytes in segment XDATA_ROM_C
//    70 bytes in segment XDATA_Z
// 
//    42 bytes of CODE     memory
//   164 bytes of CONST    memory
// 1 737 bytes of HUGECODE memory
//    70 bytes of XDATA    memory
//
//Errors: none
//Warnings: 12
