###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               12/Sep/2018  17:17:16
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.20
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\osal\common\OSAL.c
#    Command line       =  
#        -f C:\Users\ANANDA~1\AppData\Local\Temp\EWCDA3.tmp ("C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\osal\common\OSAL.c"
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List"
#        -lA "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\"
#        -I "C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\"
#        -Ohz --require_prototypes)
#    Locale             =  English_USA.1252
#    List file          =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List\OSAL.lst
#    Object file        =  
#        C:\Users\Ananda
#        Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj\OSAL.r51
#
###############################################################################

C:\Users\Ananda Utama\Documents\RMIT2018\WSN\ZStack-CC2530-2.3.1\Components\osal\common\OSAL.c
      1          /**************************************************************************************************
      2            Filename:       OSAL.c
      3            Revised:        $Date: 2009-12-04 08:04:20 -0800 (Fri, 04 Dec 2009) $
      4            Revision:       $Revision: 21276 $
      5          
      6            Description:    This API allows the software components in the Z-stack to be written
      7                            independently of the specifics of the operating system, kernel or tasking
      8                            environment (including control loops or connect-to-interrupt systems).
      9          
     10          
     11            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License").  You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product.  Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com. 
     40          **************************************************************************************************/
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45          
     46          #include <string.h>
     47          
     48          #include "comdef.h"
     49          #include "OSAL.h"
     50          #include "OSAL_Tasks.h"
     51          #include "OSAL_Memory.h"
     52          #include "OSAL_PwrMgr.h"
     53          #include "OSAL_Clock.h"   
     54          
     55          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     56          
     57          /* HAL */
     58          #include "hal_drivers.h"
     59          
     60          /*********************************************************************
     61           * MACROS
     62           */
     63          
     64          /*********************************************************************
     65           * CONSTANTS
     66           */
     67          
     68          /*********************************************************************
     69           * TYPEDEFS
     70           */
     71          
     72          /*********************************************************************
     73           * GLOBAL VARIABLES
     74           */
     75          
     76          // Message Pool Definitions

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     77          osal_msg_q_t osal_qHead;
   \                     osal_qHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     78          
     79          /*********************************************************************
     80           * EXTERNAL VARIABLES
     81           */
     82          
     83          /*********************************************************************
     84           * EXTERNAL FUNCTIONS
     85           */
     86          
     87          /*********************************************************************
     88           * LOCAL VARIABLES
     89           */
     90          
     91          /*********************************************************************
     92           * LOCAL FUNCTION PROTOTYPES
     93           */
     94          
     95          /*********************************************************************
     96           * HELPER FUNCTIONS
     97           */
     98          /* very ugly stub so Keil can compile */
     99          #ifdef __KEIL__
    100          char *  itoa ( int value, char * buffer, int radix )
    101          {
    102            return(buffer);
    103          }
    104          #endif
    105          
    106          /*********************************************************************
    107           * @fn      osal_strlen
    108           *
    109           * @brief
    110           *
    111           *   Calculates the length of a string.  The string must be null
    112           *   terminated.
    113           *
    114           * @param   char *pString - pointer to text string
    115           *
    116           * @return  int - number of characters
    117           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    118          int osal_strlen( char *pString )
   \                     osal_strlen:
    119          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    120            return (int)( strlen( pString ) );
   \   000004                ; Setup parameters for call to function strlen
   \   000004   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000007   02....       LJMP      ?Subroutine0 & 0xFFFF
    121          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    122          
    123          /*********************************************************************
    124           * @fn      osal_memcpy
    125           *
    126           * @brief
    127           *
    128           *   Generic memory copy.
    129           *
    130           *   Note: This function differs from the standard memcpy(), since
    131           *         it returns the pointer to the next destination uint8. The
    132           *         standard memcpy() returns the original destination address.
    133           *
    134           * @param   dst - destination address
    135           * @param   src - source address
    136           * @param   len - number of bytes to copy
    137           *
    138           * @return  pointer to end of destination buffer
    139           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    140          void *osal_memcpy( void *dst, const void GENERIC *src, unsigned int len )
   \                     osal_memcpy:
    141          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    142            uint8 *pDst;
    143            const uint8 GENERIC *pSrc;
    144          
    145            pSrc = src;
   \   000009   7409         MOV       A,#0x9
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   12....       LCALL     ?Subroutine11 & 0xFFFF
    146            pDst = dst;
   \                     ??CrossCallReturnLabel_12:
   \   000011   8E82         MOV       DPL,R6
   \   000013   8F83         MOV       DPH,R7
   \   000015   800C         SJMP      ??osal_memcpy_0
    147          
    148            while ( len-- )
    149              *pDst++ = *pSrc++;
   \                     ??osal_memcpy_1:
   \   000017   12....       LCALL     ?C_GPTR_LOAD
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   E9           MOV       A,R1
   \   00001C   2401         ADD       A,#0x1
   \   00001E   09           INC       R1
   \   00001F   E4           CLR       A
   \   000020   3A           ADDC      A,R2
   \   000021   FA           MOV       R2,A
   \   000022   A3           INC       DPTR
   \                     ??osal_memcpy_0:
   \   000023   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000026   70EF         JNZ       ??osal_memcpy_1
    150          
    151            return ( pDst );
   \   000028   02....       LJMP      ?Subroutine1 & 0xFFFF
    152          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   EC           MOV       A,R4
   \   000001   FE           MOV       R6,A
   \   000002   ED           MOV       A,R5
   \   000003   FF           MOV       R7,A
   \   000004   EE           MOV       A,R6
   \   000005   24FF         ADD       A,#-0x1
   \   000007   1C           DEC       R4
   \   000008   EF           MOV       A,R7
   \   000009   34FF         ADDC      A,#-0x1
   \   00000B   FD           MOV       R5,A
   \   00000C   EE           MOV       A,R6
   \   00000D   4F           ORL       A,R7
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   A3           INC       DPTR
   \   000003   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004                REQUIRE ??Subroutine28_0
   \   000004                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    153          
    154          /*********************************************************************
    155           * @fn      osal_revmemcpy
    156           *
    157           * @brief   Generic reverse memory copy.  Starts at the end of the 
    158           *   source buffer, by taking the source address pointer and moving 
    159           *   pointer ahead "len" bytes, then decrementing the pointer.
    160           *
    161           *   Note: This function differs from the standard memcpy(), since
    162           *         it returns the pointer to the next destination uint8. The
    163           *         standard memcpy() returns the original destination address.
    164           *
    165           * @param   dst - destination address
    166           * @param   src - source address
    167           * @param   len - number of bytes to copy
    168           *
    169           * @return  pointer to end of destination buffer
    170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    171          void *osal_revmemcpy( void *dst, const void GENERIC *src, unsigned int len )
   \                     osal_revmemcpy:
    172          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    173            uint8 *pDst;
    174            const uint8 GENERIC *pSrc;
    175          
    176            pSrc = src;
    177            pSrc += (len-1);
   \   000009   7409         MOV       A,#0x9
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000011   E9           MOV       A,R1
   \   000012   2C           ADD       A,R4
   \   000013   F9           MOV       R1,A
   \   000014   EA           MOV       A,R2
   \   000015   3D           ADDC      A,R5
   \   000016   FA           MOV       R2,A
   \   000017   E9           MOV       A,R1
   \   000018   24FF         ADD       A,#-0x1
   \   00001A   19           DEC       R1
   \   00001B   EA           MOV       A,R2
   \   00001C   34FF         ADDC      A,#-0x1
   \   00001E   FA           MOV       R2,A
    178            pDst = dst;
   \   00001F   8E82         MOV       DPL,R6
   \   000021   8F83         MOV       DPH,R7
   \   000023   800D         SJMP      ??osal_revmemcpy_0
    179          
    180            while ( len-- )
    181              *pDst++ = *pSrc--;
   \                     ??osal_revmemcpy_1:
   \   000025   12....       LCALL     ?C_GPTR_LOAD
   \   000028   F0           MOVX      @DPTR,A
   \   000029   E9           MOV       A,R1
   \   00002A   24FF         ADD       A,#-0x1
   \   00002C   19           DEC       R1
   \   00002D   EA           MOV       A,R2
   \   00002E   34FF         ADDC      A,#-0x1
   \   000030   FA           MOV       R2,A
   \   000031   A3           INC       DPTR
   \                     ??osal_revmemcpy_0:
   \   000032   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000035   70EE         JNZ       ??osal_revmemcpy_1
    182          
    183            return ( pDst );
   \   000037   02....       LJMP      ?Subroutine1 & 0xFFFF
    184          }
    185          
    186          /*********************************************************************
    187           * @fn      osal_memdup
    188           *
    189           * @brief   Allocates a buffer [with osal_mem_alloc()] and copies
    190           *          the src buffer into the newly allocated space.
    191           *
    192           * @param   src - source address
    193           * @param   len - number of bytes to copy
    194           *
    195           * @return  pointer to the new allocated buffer, or NULL if
    196           *          allocation problem.
    197           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    198          void *osal_memdup( const void GENERIC *src, unsigned int len )
   \                     osal_memdup:
    199          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   8B..         MOV       ?V2,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
    200            uint8 *pDst;
    201            
    202            pDst = osal_mem_alloc( len );
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   EC           MOV       A,R4
   \   000010   FA           MOV       R2,A
   \   000011   ED           MOV       A,R5
   \   000012   FB           MOV       R3,A
   \   000013   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000016   8A..         MOV       ?V6,R2
   \   000018   8B..         MOV       ?V7,R3
    203            if ( pDst )
   \   00001A   EA           MOV       A,R2
   \   00001B   4B           ORL       A,R3
   \   00001C   6011         JZ        ??osal_memdup_0
    204            {
    205              VOID osal_memcpy( pDst, src, len );
   \   00001E                ; Setup parameters for call to function osal_memcpy
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000023   EE           MOV       A,R6
   \   000024   FC           MOV       R4,A
   \   000025   EF           MOV       A,R7
   \   000026   FD           MOV       R5,A
   \   000027   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00002A   7403         MOV       A,#0x3
   \   00002C   12....       LCALL     ?DEALLOC_XSTACK8
    206            }
    207          
    208            return ( (void *)pDst );
   \                     ??osal_memdup_0:
   \   00002F   AA..         MOV       R2,?V6
   \   000031   AB..         MOV       R3,?V7
   \   000033   02....       LJMP      ?Subroutine2 & 0xFFFF
    209          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    210          
    211          /*********************************************************************
    212           * @fn      osal_memcmp
    213           *
    214           * @brief
    215           *
    216           *   Generic memory compare.
    217           *
    218           * @param   src1 - source 1 addrexx
    219           * @param   src2 - source 2 address
    220           * @param   len - number of bytes to compare
    221           *
    222           * @return  TRUE - same, FALSE - different
    223           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    224          uint8 osal_memcmp( const void GENERIC *src1, const void GENERIC *src2, unsigned int len )
   \                     osal_memcmp:
    225          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8C..         MOV       ?V0,R4
   \   00000C   8D..         MOV       ?V1,R5
    226            const uint8 GENERIC *pSrc1;
    227            const uint8 GENERIC *pSrc2;
    228          
    229            pSrc1 = src1;
   \   00000E   89..         MOV       ?V4,R1
   \   000010   8A..         MOV       ?V5,R2
   \   000012   8B..         MOV       ?V6,R3
    230            pSrc2 = src2;
   \   000014   7412         MOV       A,#0x12
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FC           MOV       R4,A
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   FD           MOV       R5,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   FE           MOV       R6,A
    231          
    232            while ( len-- )
   \                     ??osal_memcmp_0:
   \   000021   A8..         MOV       R0,?V0
   \   000023   A9..         MOV       R1,?V1
   \   000025   E8           MOV       A,R0
   \   000026   24FF         ADD       A,#-0x1
   \   000028   F5..         MOV       ?V0,A
   \   00002A   E9           MOV       A,R1
   \   00002B   34FF         ADDC      A,#-0x1
   \   00002D   F5..         MOV       ?V1,A
   \   00002F   E8           MOV       A,R0
   \   000030   49           ORL       A,R1
   \   000031   6046         JZ        ??osal_memcmp_1
    233            {
    234              if( *pSrc1++ != *pSrc2++ )
   \   000033   A9..         MOV       R1,?V4
   \   000035   AA..         MOV       R2,?V5
   \   000037   AB..         MOV       R3,?V6
   \   000039   E9           MOV       A,R1
   \   00003A   2401         ADD       A,#0x1
   \   00003C   F5..         MOV       ?V4,A
   \   00003E   E4           CLR       A
   \   00003F   3A           ADDC      A,R2
   \   000040   F5..         MOV       ?V5,A
   \   000042   85..82       MOV       DPL,?XSP + 0
   \   000045   85..83       MOV       DPH,?XSP + 1
   \   000048   EC           MOV       A,R4
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   A3           INC       DPTR
   \   00004B   ED           MOV       A,R5
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A3           INC       DPTR
   \   00004E   EE           MOV       A,R6
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   85..82       MOV       DPL,?XSP + 0
   \   000053   85..83       MOV       DPH,?XSP + 1
   \   000056   E0           MOVX      A,@DPTR
   \   000057   FC           MOV       R4,A
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   FD           MOV       R5,A
   \   00005B   EC           MOV       A,R4
   \   00005C   2401         ADD       A,#0x1
   \   00005E   0C           INC       R4
   \   00005F   E4           CLR       A
   \   000060   3D           ADDC      A,R5
   \   000061   FD           MOV       R5,A
   \   000062   12....       LCALL     ?C_GPTR_LOAD
   \   000065   F8           MOV       R0,A
   \   000066   85..82       MOV       DPL,?XSP + 0
   \   000069   85..83       MOV       DPH,?XSP + 1
   \   00006C   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00006F   12....       LCALL     ?C_GPTR_LOAD
   \   000072   68           XRL       A,R0
   \   000073   60AC         JZ        ??osal_memcmp_0
    235                return FALSE;
   \   000075   7900         MOV       R1,#0x0
   \   000077   8002         SJMP      ??osal_memcmp_2
    236            }
    237            return TRUE;
   \                     ??osal_memcmp_1:
   \   000079   7901         MOV       R1,#0x1
   \                     ??osal_memcmp_2:
   \   00007B   7403         MOV       A,#0x3
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000080   7F07         MOV       R7,#0x7
   \   000082   02....       LJMP      ?BANKED_LEAVE_XDATA
    238          }
    239          
    240          
    241          /*********************************************************************
    242           * @fn      osal_memset
    243           *
    244           * @brief
    245           *
    246           *   Set memory buffer to value.
    247           *
    248           * @param   dest - pointer to buffer
    249           * @param   value - what to set each uint8 of the message
    250           * @param   size - how big
    251           *
    252           * @return  value of next widget, 0 if no widget found
    253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    254          void *osal_memset( void *dest, uint8 value, int len )
   \                     osal_memset:
    255          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    256            return memset( dest, value, len );
   \   000005                ; Setup parameters for call to function memset
   \   000005   8C..         MOV       ?V0,R4
   \   000007   8D..         MOV       ?V1,R5
   \   000009   78..         MOV       R0,#?V0
   \   00000B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00000E   E9           MOV       A,R1
   \   00000F   FC           MOV       R4,A
   \   000010   7D00         MOV       R5,#0x0
   \   000012   12....       LCALL     `??memset::?relay`; Banked call to: memset
   \   000015   7402         MOV       A,#0x2
   \   000017   12....       LCALL     ?DEALLOC_XSTACK8
   \   00001A   02....       LJMP      ?Subroutine3 & 0xFFFF
    257          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    258          
    259          /*********************************************************************
    260           * @fn      osal_build_uint16
    261           *
    262           * @brief
    263           *
    264           *   Build a uint16 out of 2 bytes (0 then 1).
    265           *
    266           * @param   swapped - 0 then 1
    267           *
    268           * @return  uint16
    269           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    270          uint16 osal_build_uint16( uint8 *swapped )
   \                     osal_build_uint16:
    271          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    272            return ( BUILD_UINT16( swapped[0], swapped[1] ) );
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FC           MOV       R4,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   C8           XCH       A,R0
   \   00000F   F9           MOV       R1,A
   \   000010   EC           MOV       A,R4
   \   000011   28           ADD       A,R0
   \   000012   FA           MOV       R2,A
   \   000013   E4           CLR       A
   \   000014   39           ADDC      A,R1
   \   000015   FB           MOV       R3,A
   \   000016   02....       LJMP      ?Subroutine0 & 0xFFFF
    273          }
    274          
    275          /*********************************************************************
    276           * @fn      osal_build_uint32
    277           *
    278           * @brief
    279           *
    280           *   Build a uint32 out of sequential bytes.
    281           *
    282           * @param   swapped - sequential bytes
    283           * @param   len - number of bytes in the uint8 array
    284           *
    285           * @return  uint32
    286           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          uint32 osal_build_uint32( uint8 *swapped, uint8 len )
   \                     osal_build_uint32:
    288          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    289            if ( len == 2 )
   \   000007   8A82         MOV       DPL,R2
   \   000009   8B83         MOV       DPH,R3
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F5..         MOV       ?V0,A
   \   00000E   E4           CLR       A
   \   00000F   F5..         MOV       ?V1,A
   \   000011   F5..         MOV       ?V2,A
   \   000013   F5..         MOV       ?V3,A
   \   000015   7402         MOV       A,#0x2
   \   000017   6E           XRL       A,R6
   \   000018   7005         JNZ       ??osal_build_uint32_0
    290              return ( BUILD_UINT32( swapped[0], swapped[1], 0L, 0L ) );
   \   00001A   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00001D   8047         SJMP      ??osal_build_uint32_1
    291            else if ( len == 3 )
   \                     ??osal_build_uint32_0:
   \   00001F   7403         MOV       A,#0x3
   \   000021   6E           XRL       A,R6
   \   000022   7012         JNZ       ??osal_build_uint32_2
    292              return ( BUILD_UINT32( swapped[0], swapped[1], swapped[2], 0L ) );
   \   000024   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000027   12....       LCALL     ?L_SHL
   \   00002A   78..         MOV       R0,#?V0
   \   00002C   79..         MOV       R1,#?V4
   \   00002E   12....       LCALL     ?L_ADD
   \   000031   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000034   8030         SJMP      ??osal_build_uint32_1
    293            else if ( len == 4 )
   \                     ??osal_build_uint32_2:
   \   000036   7404         MOV       A,#0x4
   \   000038   6E           XRL       A,R6
   \   000039   7037         JNZ       ??osal_build_uint32_3
    294              return ( BUILD_UINT32( swapped[0], swapped[1], swapped[2], swapped[3] ) );
   \   00003B   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00003E   12....       LCALL     ?L_SHL
   \   000041   78..         MOV       R0,#?V0
   \   000043   79..         MOV       R1,#?V4
   \   000045   12....       LCALL     ?L_ADD
   \   000048   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00004B   78..         MOV       R0,#?V4
   \   00004D   12....       LCALL     ?L_SHL
   \   000050   78..         MOV       R0,#?V0
   \   000052   79..         MOV       R1,#?V4
   \   000054   12....       LCALL     ?L_ADD
   \   000057   8A82         MOV       DPL,R2
   \   000059   8B83         MOV       DPH,R3
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F5..         MOV       ?V4,A
   \   000061   E4           CLR       A
   \   000062   F5..         MOV       ?V6,A
   \   000064   7418         MOV       A,#0x18
   \                     ??osal_build_uint32_1:
   \   000066   78..         MOV       R0,#?V4
   \   000068   12....       LCALL     ?L_SHL
   \   00006B   78..         MOV       R0,#?V0
   \   00006D   79..         MOV       R1,#?V4
   \   00006F   12....       LCALL     ?L_ADD
    295            else
    296              return ( (uint32)swapped[0] );
   \                     ??osal_build_uint32_3:
   \   000072   AA..         MOV       R2,?V0
   \   000074   AB..         MOV       R3,?V1
   \   000076   AC..         MOV       R4,?V2
   \   000078   AD..         MOV       R5,?V3
   \   00007A   02....       LJMP      ?Subroutine2 & 0xFFFF
    297          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V4,A
   \   000009   E4           CLR       A
   \   00000A   F5..         MOV       ?V5,A
   \   00000C   7410         MOV       A,#0x10
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000003   78..         MOV       R0,#?V4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F5..         MOV       ?V4,A
   \   000004   E4           CLR       A
   \   000005   F5..         MOV       ?V5,A
   \   000007   F5..         MOV       ?V6,A
   \   000009   F5..         MOV       ?V7,A
   \   00000B   7408         MOV       A,#0x8
   \   00000D   22           RET
    298          
    299          #if !defined ( ZBIT ) && !defined ( ZBIT2 ) && !defined (UBIT)
    300          /*********************************************************************
    301           * @fn      _ltoa
    302           *
    303           * @brief
    304           *
    305           *   convert a long unsigned int to a string.
    306           *
    307           * @param  l - long to convert
    308           * @param  buf - buffer to convert to
    309           * @param  radix - 10 dec, 16 hex
    310           *
    311           * @return  pointer to buffer
    312           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    313          unsigned char * _ltoa(unsigned long l, unsigned char *buf, unsigned char radix)
   \                     _ltoa:
    314          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 39
   \   000005   74D9         MOV       A,#-0x27
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7405         MOV       A,#0x5
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   EC           MOV       A,R4
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   ED           MOV       A,R5
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   7402         MOV       A,#0x2
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E9           MOV       A,R1
   \   000020   F0           MOVX      @DPTR,A
    315          #if defined( __GNUC__ )
    316            return ( (char*)ltoa( l, buf, radix ) );
    317          #else
    318            unsigned char tmp1[10] = "", tmp2[10] = "", tmp3[10] = "";
   \   000021   90....       MOV       DPTR,#`?<Constant "">`
   \   000024   7409         MOV       A,#0x9
   \   000026   12....       LCALL     ?XSTACK_DISP102_8
   \   000029   740A         MOV       A,#0xa
   \   00002B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   00002E   90....       MOV       DPTR,#`?<Constant "">_1`
   \   000031   740A         MOV       A,#0xa
   \   000033   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000036   90....       MOV       DPTR,#`?<Constant "">_2`
   \   000039   740A         MOV       A,#0xa
   \   00003B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    319            unsigned short num1, num2, num3;
    320            unsigned char i;
    321          
    322            buf[0] = '\0';
   \   00003E   7437         MOV       A,#0x37
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000046   E4           CLR       A
   \   000047   F0           MOVX      @DPTR,A
    323          
    324            if ( radix == 10 )
   \   000048   7403         MOV       A,#0x3
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   74..         MOV       A,#`?<Constant "0">` & 0xff
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   A3           INC       DPTR
   \   000051   74..         MOV       A,#(`?<Constant "0">` >> 8) & 0xff
   \   000053   F0           MOVX      @DPTR,A
   \   000054   7402         MOV       A,#0x2
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   640A         XRL       A,#0xa
   \   00005C   6003         JZ        $+5
   \   00005E   02....       LJMP      ??_ltoa_0 & 0xFFFF
    325            {
    326              num1 = l % 10000;
   \   000061   7405         MOV       A,#0x5
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   78..         MOV       R0,#?V4
   \   000068   12....       LCALL     ?L_MOV_X
   \   00006B   90....       MOV       DPTR,#__Constant_2710
   \   00006E   78..         MOV       R0,#?V0
   \   000070   12....       LCALL     ?L_MOV_X
   \   000073   78..         MOV       R0,#?V4
   \   000075   79..         MOV       R1,#?V0
   \   000077   12....       LCALL     ?UL_DIV_MOD
   \   00007A   85..82       MOV       DPL,?XSP + 0
   \   00007D   85..83       MOV       DPH,?XSP + 1
   \   000080   E5..         MOV       A,?V0
   \   000082   F0           MOVX      @DPTR,A
   \   000083   A3           INC       DPTR
   \   000084   E5..         MOV       A,?V1
   \   000086   F0           MOVX      @DPTR,A
    327              num2 = (l / 10000) % 10000;
   \   000087   7405         MOV       A,#0x5
   \   000089   12....       LCALL     ?XSTACK_DISP0_8
   \   00008C   78..         MOV       R0,#?V4
   \   00008E   12....       LCALL     ?L_MOV_X
   \   000091   90....       MOV       DPTR,#__Constant_2710
   \   000094   78..         MOV       R0,#?V0
   \   000096   12....       LCALL     ?L_MOV_X
   \   000099   78..         MOV       R0,#?V4
   \   00009B   79..         MOV       R1,#?V0
   \   00009D   12....       LCALL     ?UL_DIV_MOD
   \   0000A0   90....       MOV       DPTR,#__Constant_2710
   \   0000A3   78..         MOV       R0,#?V0
   \   0000A5   12....       LCALL     ?L_MOV_X
   \   0000A8   78..         MOV       R0,#?V4
   \   0000AA   79..         MOV       R1,#?V0
   \   0000AC   12....       LCALL     ?UL_DIV_MOD
   \   0000AF   AE..         MOV       R6,?V0
   \   0000B1   AF..         MOV       R7,?V1
    328              num3 = (unsigned short)(l / 100000000);
   \   0000B3   7405         MOV       A,#0x5
   \   0000B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B8   78..         MOV       R0,#?V4
   \   0000BA   12....       LCALL     ?L_MOV_X
   \   0000BD   90....       MOV       DPTR,#__Constant_5f5e100
   \   0000C0   78..         MOV       R0,#?V0
   \   0000C2   12....       LCALL     ?L_MOV_X
   \   0000C5   78..         MOV       R0,#?V4
   \   0000C7   79..         MOV       R1,#?V0
   \   0000C9   12....       LCALL     ?UL_DIV_MOD
   \   0000CC   85....       MOV       ?V6,?V4
   \   0000CF   85....       MOV       ?V7,?V5
    329          
    330              if (num3) _itoa(num3, tmp3, 10);
   \   0000D2   E5..         MOV       A,?V6
   \   0000D4   45..         ORL       A,?V7
   \   0000D6   600E         JZ        ??_ltoa_1
   \   0000D8                ; Setup parameters for call to function _itoa
   \   0000D8   790A         MOV       R1,#0xa
   \   0000DA   741D         MOV       A,#0x1d
   \   0000DC   12....       LCALL     ?XSTACK_DISP102_8
   \   0000DF   AA..         MOV       R2,?V6
   \   0000E1   AB..         MOV       R3,?V7
   \   0000E3   12....       LCALL     `??_itoa::?relay`; Banked call to: _itoa
    331              if (num2) _itoa(num2, tmp2, 10);
   \                     ??_ltoa_1:
   \   0000E6   EE           MOV       A,R6
   \   0000E7   4F           ORL       A,R7
   \   0000E8   600E         JZ        ??_ltoa_2
   \   0000EA                ; Setup parameters for call to function _itoa
   \   0000EA   790A         MOV       R1,#0xa
   \   0000EC   7413         MOV       A,#0x13
   \   0000EE   12....       LCALL     ?XSTACK_DISP102_8
   \   0000F1   EE           MOV       A,R6
   \   0000F2   FA           MOV       R2,A
   \   0000F3   EF           MOV       A,R7
   \   0000F4   FB           MOV       R3,A
   \   0000F5   12....       LCALL     `??_itoa::?relay`; Banked call to: _itoa
    332              if (num1) _itoa(num1, tmp1, 10);
   \                     ??_ltoa_2:
   \   0000F8   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000FB   600A         JZ        ??CrossCallReturnLabel_21
   \   0000FD                ; Setup parameters for call to function _itoa
   \   0000FD   790A         MOV       R1,#0xa
   \   0000FF   7409         MOV       A,#0x9
   \   000101   12....       LCALL     ?XSTACK_DISP102_8
   \   000104   12....       LCALL     ?Subroutine15 & 0xFFFF
    333          
    334              if (num3)
   \                     ??CrossCallReturnLabel_21:
   \   000107   E5..         MOV       A,?V6
   \   000109   45..         ORL       A,?V7
   \   00010B   602B         JZ        ??_ltoa_3
    335              {
    336                strcpy((char*)buf, (char const*)tmp3);
   \   00010D                ; Setup parameters for call to function strcpy
   \   00010D   741D         MOV       A,#0x1d
   \   00010F   12....       LCALL     ?XSTACK_DISP102_8
   \   000112   7437         MOV       A,#0x37
   \   000114   12....       LCALL     ?XSTACK_DISP0_8
   \   000117   12....       LCALL     ?Subroutine13 & 0xFFFF
    337                for (i = 0; i < 4 - strlen((char const*)tmp2); i++)
   \                     ??CrossCallReturnLabel_17:
   \   00011A   800E         SJMP      ??CrossCallReturnLabel_3
    338                  strcat((char*)buf, "0");
   \                     ??_ltoa_4:
   \   00011C                ; Setup parameters for call to function strcat
   \   00011C   7403         MOV       A,#0x3
   \   00011E   12....       LCALL     ?XSTACK_DISP0_8
   \   000121   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000124   12....       LCALL     ?XSTACK_DISP0_8
   \   000127   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00012A   E5..         MOV       A,?V2
   \   00012C   F5..         MOV       ?V0,A
   \   00012E                ; Setup parameters for call to function strlen
   \   00012E   7413         MOV       A,#0x13
   \   000130   12....       LCALL     ?XSTACK_DISP101_8
   \   000133   12....       LCALL     ?Subroutine6 & 0xFFFF
    339              }
   \                     ??CrossCallReturnLabel_0:
   \   000136   40E4         JC        ??_ltoa_4
    340              strcat((char*)buf, (char const*)tmp2);
   \                     ??_ltoa_3:
   \   000138                ; Setup parameters for call to function strcat
   \   000138   7413         MOV       A,#0x13
   \   00013A   12....       LCALL     ?XSTACK_DISP102_8
   \   00013D   7437         MOV       A,#0x37
   \   00013F   12....       LCALL     ?XSTACK_DISP0_8
   \   000142   12....       LCALL     ?Subroutine12 & 0xFFFF
    341              if (num3 || num2)
   \                     ??CrossCallReturnLabel_15:
   \   000145   7004         JNZ       ??_ltoa_5
   \   000147   EE           MOV       A,R6
   \   000148   4F           ORL       A,R7
   \   000149   6021         JZ        ??_ltoa_6
    342              {
    343                for (i = 0; i < 4 - strlen((char const*)tmp1); i++)
   \                     ??_ltoa_5:
   \   00014B   75..00       MOV       ?V2,#0x0
   \   00014E   800E         SJMP      ??CrossCallReturnLabel_4
    344                  strcat((char*)buf, "0");
   \                     ??_ltoa_7:
   \   000150                ; Setup parameters for call to function strcat
   \   000150   7403         MOV       A,#0x3
   \   000152   12....       LCALL     ?XSTACK_DISP0_8
   \   000155   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000158   12....       LCALL     ?XSTACK_DISP0_8
   \   00015B   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00015E   E5..         MOV       A,?V2
   \   000160   F5..         MOV       ?V0,A
   \   000162                ; Setup parameters for call to function strlen
   \   000162   7409         MOV       A,#0x9
   \   000164   12....       LCALL     ?XSTACK_DISP101_8
   \   000167   12....       LCALL     ?Subroutine6 & 0xFFFF
    345              }
   \                     ??CrossCallReturnLabel_1:
   \   00016A   40E4         JC        ??_ltoa_7
    346              strcat((char*)buf, (char const*)tmp1);
   \                     ??_ltoa_6:
   \   00016C                ; Setup parameters for call to function strcat
   \   00016C   7409         MOV       A,#0x9
   \   00016E   12....       LCALL     ?XSTACK_DISP102_8
   \   000171   7437         MOV       A,#0x37
   \   000173   12....       LCALL     ?XSTACK_DISP0_8
   \   000176   12....       LCALL     ?Subroutine12 & 0xFFFF
    347              if (!num3 && !num2 && !num1)
    348                strcpy((char*)buf, "0");
    349            }
   \                     ??CrossCallReturnLabel_16:
   \   000179   7007         JNZ       ??_ltoa_8
   \   00017B   EE           MOV       A,R6
   \   00017C   4F           ORL       A,R7
   \   00017D   7003         JNZ       $+5
   \   00017F   02....       LJMP      ??_ltoa_9 & 0xFFFF
    350            else if ( radix == 16 )
    351            {
    352              num1 = l & 0x0000FFFF;
    353              num2 = l >> 16;
    354          
    355              if (num2) _itoa(num2, tmp2, 16);
    356              if (num1) _itoa(num1, tmp1, 16);
    357          
    358              if (num2)
    359              {
    360                strcpy((char*)buf,(char const*)tmp2);
    361                for (i = 0; i < 4 - strlen((char const*)tmp1); i++)
    362                  strcat((char*)buf, "0");
    363              }
    364              strcat((char*)buf, (char const*)tmp1);
    365              if (!num2 && !num1)
    366                strcpy((char*)buf, "0");
    367            }
    368            else
    369              return NULL;
    370          
    371            return buf;
   \                     ??_ltoa_8:
   \   000182   7437         MOV       A,#0x37
   \   000184   12....       LCALL     ?XSTACK_DISP0_8
   \   000187   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00018A   7427         MOV       A,#0x27
   \   00018C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00018F   02....       LJMP      ?Subroutine2 & 0xFFFF
   \                     ??_ltoa_0:
   \   000192   E0           MOVX      A,@DPTR
   \   000193   6410         XRL       A,#0x10
   \   000195   6003         JZ        $+5
   \   000197   02....       LJMP      ??_ltoa_10 & 0xFFFF
   \   00019A   7405         MOV       A,#0x5
   \   00019C   12....       LCALL     ?XSTACK_DISP0_8
   \   00019F   78..         MOV       R0,#?V0
   \   0001A1   12....       LCALL     ?L_MOV_X
   \   0001A4   85..82       MOV       DPL,?XSP + 0
   \   0001A7   85..83       MOV       DPH,?XSP + 1
   \   0001AA   E5..         MOV       A,?V0
   \   0001AC   F0           MOVX      @DPTR,A
   \   0001AD   A3           INC       DPTR
   \   0001AE   E5..         MOV       A,?V1
   \   0001B0   F0           MOVX      @DPTR,A
   \   0001B1   7405         MOV       A,#0x5
   \   0001B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B6   78..         MOV       R0,#?V0
   \   0001B8   12....       LCALL     ?L_MOV_X
   \   0001BB   7410         MOV       A,#0x10
   \   0001BD   78..         MOV       R0,#?V0
   \   0001BF   12....       LCALL     ?UL_SHR
   \   0001C2   AE..         MOV       R6,?V0
   \   0001C4   AF..         MOV       R7,?V1
   \   0001C6   EE           MOV       A,R6
   \   0001C7   4F           ORL       A,R7
   \   0001C8   600E         JZ        ??_ltoa_11
   \   0001CA                ; Setup parameters for call to function _itoa
   \   0001CA   7910         MOV       R1,#0x10
   \   0001CC   7413         MOV       A,#0x13
   \   0001CE   12....       LCALL     ?XSTACK_DISP102_8
   \   0001D1   EE           MOV       A,R6
   \   0001D2   FA           MOV       R2,A
   \   0001D3   EF           MOV       A,R7
   \   0001D4   FB           MOV       R3,A
   \   0001D5   12....       LCALL     `??_itoa::?relay`; Banked call to: _itoa
   \                     ??_ltoa_11:
   \   0001D8   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0001DB   600A         JZ        ??CrossCallReturnLabel_22
   \   0001DD                ; Setup parameters for call to function _itoa
   \   0001DD   7910         MOV       R1,#0x10
   \   0001DF   7409         MOV       A,#0x9
   \   0001E1   12....       LCALL     ?XSTACK_DISP102_8
   \   0001E4   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0001E7   EE           MOV       A,R6
   \   0001E8   4F           ORL       A,R7
   \   0001E9   602B         JZ        ??_ltoa_12
   \   0001EB                ; Setup parameters for call to function strcpy
   \   0001EB   7413         MOV       A,#0x13
   \   0001ED   12....       LCALL     ?XSTACK_DISP102_8
   \   0001F0   7437         MOV       A,#0x37
   \   0001F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F5   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0001F8   800E         SJMP      ??CrossCallReturnLabel_5
   \                     ??_ltoa_13:
   \   0001FA                ; Setup parameters for call to function strcat
   \   0001FA   7403         MOV       A,#0x3
   \   0001FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FF   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000202   12....       LCALL     ?XSTACK_DISP0_8
   \   000205   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000208   E5..         MOV       A,?V2
   \   00020A   F5..         MOV       ?V0,A
   \   00020C                ; Setup parameters for call to function strlen
   \   00020C   7409         MOV       A,#0x9
   \   00020E   12....       LCALL     ?XSTACK_DISP101_8
   \   000211   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000214   40E4         JC        ??_ltoa_13
   \                     ??_ltoa_12:
   \   000216                ; Setup parameters for call to function strcat
   \   000216   7409         MOV       A,#0x9
   \   000218   12....       LCALL     ?XSTACK_DISP102_8
   \   00021B   7437         MOV       A,#0x37
   \   00021D   12....       LCALL     ?XSTACK_DISP0_8
   \   000220   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000223   12....       LCALL     `??strcat::?relay`; Banked call to: strcat
   \   000226   EE           MOV       A,R6
   \   000227   4F           ORL       A,R7
   \   000228   6003         JZ        $+5
   \   00022A   02....       LJMP      ??_ltoa_8 & 0xFFFF
   \                     ??_ltoa_9:
   \   00022D   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000230   6003         JZ        $+5
   \   000232   02....       LJMP      ??_ltoa_8 & 0xFFFF
   \   000235                ; Setup parameters for call to function strcpy
   \   000235   7403         MOV       A,#0x3
   \   000237   12....       LCALL     ?XSTACK_DISP0_8
   \   00023A   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00023D   12....       LCALL     ?XSTACK_DISP0_8
   \   000240   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000243   12....       LCALL     `??strcpy::?relay`; Banked call to: strcpy
   \   000246   02....       LJMP      ??_ltoa_8 & 0xFFFF
   \                     ??_ltoa_10:
   \   000249   7A00         MOV       R2,#0x0
   \   00024B   7B00         MOV       R3,#0x0
   \   00024D   02....       LJMP      ??CrossCallReturnLabel_23 & 0xFFFF
    372          #endif
    373          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000009   12....       LCALL     `??_itoa::?relay`; Banked call to: _itoa
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000003   12....       LCALL     `??strcpy::?relay`; Banked call to: strcpy
   \   000006   75..00       MOV       ?V2,#0x0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000003   E5..         MOV       A,?V6
   \   000005   45..         ORL       A,?V7
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   7437         MOV       A,#0x37
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000003   05..         INC       ?V2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??strcat::?relay`; Banked call to: strcat
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000003   8A..         MOV       ?V4,R2
   \   000005   8B..         MOV       ?V5,R3
   \   000007   7404         MOV       A,#0x4
   \   000009   C3           CLR       C
   \   00000A   95..         SUBB      A,?V4
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   95..         SUBB      A,?V5
   \   000010   F9           MOV       R1,A
   \   000011   C3           CLR       C
   \   000012   E5..         MOV       A,?V0
   \   000014   98           SUBB      A,R0
   \   000015   E4           CLR       A
   \   000016   99           SUBB      A,R1
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine29_0
   \   000006                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET
    374          #endif // !defined(ZBIT) && !defined(ZBIT2)
    375          
    376          /*********************************************************************
    377           * @fn        osal_rand
    378           *
    379           * @brief    Random number generator
    380           *
    381           * @param   none
    382           *
    383           * @return  uint16 - new random number
    384           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    385          uint16 osal_rand( void )
   \                     osal_rand:
    386          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    387            return ( Onboard_rand() );
   \   000004                ; Setup parameters for call to function Onboard_rand
   \   000004   12....       LCALL     `??Onboard_rand::?relay`; Banked call to: Onboard_rand
   \   000007   80..         SJMP      ?Subroutine0
    388          }
    389          
    390          /*********************************************************************
    391           * API FUNCTIONS
    392           *********************************************************************/
    393          
    394          /*********************************************************************
    395           * @fn      osal_msg_allocate
    396           *
    397           * @brief
    398           *
    399           *    This function is called by a task to allocate a message buffer
    400           *    into which the task will encode the particular message it wishes
    401           *    to send.  This common buffer scheme is used to strictly limit the
    402           *    creation of message buffers within the system due to RAM size
    403           *    limitations on the microprocessor.   Note that all message buffers
    404           *    are a fixed size (at least initially).  The parameter len is kept
    405           *    in case a message pool with varying fixed message sizes is later
    406           *    created (for example, a pool of message buffers of size LARGE,
    407           *    MEDIUM and SMALL could be maintained and allocated based on request
    408           *    from the tasks).
    409           *
    410           *
    411           * @param   uint8 len  - wanted buffer length
    412           *
    413           *
    414           * @return  pointer to allocated buffer or NULL if allocation failed.
    415           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    416          uint8 * osal_msg_allocate( uint16 len )
   \                     osal_msg_allocate:
    417          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    418            osal_msg_hdr_t *hdr;
    419          
    420            if ( len == 0 )
   \   000009   EA           MOV       A,R2
   \   00000A   4F           ORL       A,R7
   \   00000B   6033         JZ        ??osal_msg_allocate_0
    421              return ( NULL );
    422          
    423            hdr = (osal_msg_hdr_t *) osal_mem_alloc( (short)(len + sizeof( osal_msg_hdr_t )) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   EA           MOV       A,R2
   \   00000E   2405         ADD       A,#0x5
   \   000010   FA           MOV       R2,A
   \   000011   E4           CLR       A
   \   000012   3F           ADDC      A,R7
   \   000013   FB           MOV       R3,A
   \   000014   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000017   8B..         MOV       ?V1,R3
   \   000019   A9..         MOV       R1,?V1
    424            if ( hdr )
   \   00001B   EA           MOV       A,R2
   \   00001C   49           ORL       A,R1
   \   00001D   6021         JZ        ??osal_msg_allocate_0
    425            {
    426              hdr->next = NULL;
   \   00001F   8A82         MOV       DPL,R2
   \   000021   8B83         MOV       DPH,R3
   \   000023   E4           CLR       A
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   F0           MOVX      @DPTR,A
    427              hdr->len = len;
   \   000027   8A82         MOV       DPL,R2
   \   000029   8B83         MOV       DPH,R3
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   12....       LCALL     ?Subroutine23 & 0xFFFF
    428              hdr->dest_id = TASK_NO_TASK;
   \                     ??CrossCallReturnLabel_38:
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   74FF         MOV       A,#-0x1
   \   000036   F0           MOVX      @DPTR,A
    429              return ( (uint8 *) (hdr + 1) );
   \   000037   EA           MOV       A,R2
   \   000038   2405         ADD       A,#0x5
   \   00003A   FA           MOV       R2,A
   \   00003B   E4           CLR       A
   \   00003C   39           ADDC      A,R1
   \   00003D   FB           MOV       R3,A
   \   00003E   8004         SJMP      ??osal_msg_allocate_1
    430            }
    431            else
    432              return ( NULL );
   \                     ??osal_msg_allocate_0:
   \   000040   7A00         MOV       R2,#0x0
   \   000042   7B00         MOV       R3,#0x0
   \                     ??osal_msg_allocate_1:
   \   000044   02....       LJMP      ?Subroutine3 & 0xFFFF
    433          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   EE           MOV       A,R6
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EF           MOV       A,R7
   \   000004   F0           MOVX      @DPTR,A
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   22           RET
    434          
    435          /*********************************************************************
    436           * @fn      osal_msg_deallocate
    437           *
    438           * @brief
    439           *
    440           *    This function is used to deallocate a message buffer. This function
    441           *    is called by a task (or processing element) after it has finished
    442           *    processing a received message.
    443           *
    444           *
    445           * @param   uint8 *msg_ptr - pointer to new message buffer
    446           *
    447           * @return  SUCCESS, INVALID_MSG_POINTER
    448           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    449          uint8 osal_msg_deallocate( uint8 *msg_ptr )
   \                     osal_msg_deallocate:
    450          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    451            uint8 *x;
    452          
    453            if ( msg_ptr == NULL )
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   7004         JNZ       ??osal_msg_deallocate_0
    454              return ( INVALID_MSG_POINTER );
   \   000008   7905         MOV       R1,#0x5
   \   00000A   8016         SJMP      ??osal_msg_deallocate_1
    455          
    456            // don't deallocate queued buffer
    457            if ( OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
   \                     ??osal_msg_deallocate_0:
   \   00000C   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00000F   6004         JZ        ??osal_msg_deallocate_2
    458              return ( MSG_BUFFER_NOT_AVAIL );
   \   000011   7904         MOV       R1,#0x4
   \   000013   800D         SJMP      ??osal_msg_deallocate_1
    459          
    460            x = (uint8 *)((uint8 *)msg_ptr - sizeof( osal_msg_hdr_t ));
    461          
    462            osal_mem_free( (void *)x );
   \                     ??osal_msg_deallocate_2:
   \   000015                ; Setup parameters for call to function osal_mem_free
   \   000015   EA           MOV       A,R2
   \   000016   24FB         ADD       A,#-0x5
   \   000018   FA           MOV       R2,A
   \   000019   EB           MOV       A,R3
   \   00001A   34FF         ADDC      A,#-0x1
   \   00001C   FB           MOV       R3,A
   \   00001D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    463          
    464            return ( SUCCESS );
   \   000020   7900         MOV       R1,#0x0
   \                     ??osal_msg_deallocate_1:
   \   000022                REQUIRE ?Subroutine0
   \   000022                ; // Fall through to label ?Subroutine0
    465          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EA           MOV       A,R2
   \   000001   24FF         ADD       A,#-0x1
   \   000003   F582         MOV       DPL,A
   \   000005   EB           MOV       A,R3
   \   000006   34FF         ADDC      A,#-0x1
   \   000008   F583         MOV       DPH,A
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F4           CPL       A
   \   00000C   22           RET
    466          
    467          /*********************************************************************
    468           * @fn      osal_msg_send
    469           *
    470           * @brief
    471           *
    472           *    This function is called by a task to send a command message to
    473           *    another task or processing element.  The sending_task field must
    474           *    refer to a valid task, since the task ID will be used
    475           *    for the response message.  This function will also set a message
    476           *    ready event in the destination tasks event list.
    477           *
    478           *
    479           * @param   uint8 destination task - Send msg to?  Task ID
    480           * @param   uint8 *msg_ptr - pointer to new message buffer
    481           * @param   uint8 len - length of data in message
    482           *
    483           * @return  SUCCESS, INVALID_TASK, INVALID_MSG_POINTER
    484           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    485          uint8 osal_msg_send( uint8 destination_task, uint8 *msg_ptr )
   \                     osal_msg_send:
    486          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    487            if ( msg_ptr == NULL )
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   6021         JZ        ??osal_msg_send_0
    488              return ( INVALID_MSG_POINTER );
    489          
    490            if ( destination_task >= tasksCnt )
   \   00000B   90....       MOV       DPTR,#tasksCnt
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F8           MOV       R0,A
   \   000010   E9           MOV       A,R1
   \   000011   C3           CLR       C
   \   000012   98           SUBB      A,R0
   \   000013   4007         JC        ??osal_msg_send_1
    491            {
    492              osal_msg_deallocate( msg_ptr );
   \   000015                ; Setup parameters for call to function osal_msg_deallocate
   \   000015   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    493              return ( INVALID_TASK );
   \   000018   7903         MOV       R1,#0x3
   \   00001A   802C         SJMP      ??osal_msg_send_2
    494            }
    495          
    496            // Check the message header
    497            if ( OSAL_MSG_NEXT( msg_ptr ) != NULL ||
    498                 OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
   \                     ??osal_msg_send_1:
   \   00001C   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00001F   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000022   7005         JNZ       ??osal_msg_send_3
   \   000024   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000027   6007         JZ        ??osal_msg_send_4
    499            {
    500              osal_msg_deallocate( msg_ptr );
   \                     ??osal_msg_send_3:
   \   000029                ; Setup parameters for call to function osal_msg_deallocate
   \   000029   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    501              return ( INVALID_MSG_POINTER );
   \                     ??osal_msg_send_0:
   \   00002C   7905         MOV       R1,#0x5
   \   00002E   8018         SJMP      ??osal_msg_send_2
    502            }
    503          
    504            OSAL_MSG_ID( msg_ptr ) = destination_task;
   \                     ??osal_msg_send_4:
   \   000030   EE           MOV       A,R6
   \   000031   F0           MOVX      @DPTR,A
    505          
    506            // queue message
    507            osal_msg_enqueue( &osal_qHead, msg_ptr );
   \   000032                ; Setup parameters for call to function osal_msg_enqueue
   \   000032   EA           MOV       A,R2
   \   000033   FC           MOV       R4,A
   \   000034   EB           MOV       A,R3
   \   000035   FD           MOV       R5,A
   \   000036   7A..         MOV       R2,#osal_qHead & 0xff
   \   000038   7B..         MOV       R3,#(osal_qHead >> 8) & 0xff
   \   00003A   12....       LCALL     `??osal_msg_enqueue::?relay`; Banked call to: osal_msg_enqueue
    508          
    509            // Signal the task that a message is waiting
    510            osal_set_event( destination_task, SYS_EVENT_MSG );
   \   00003D                ; Setup parameters for call to function osal_set_event
   \   00003D   7A00         MOV       R2,#0x0
   \   00003F   7B80         MOV       R3,#-0x80
   \   000041   EE           MOV       A,R6
   \   000042   F9           MOV       R1,A
   \   000043   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    511          
    512            return ( SUCCESS );
   \   000046   7900         MOV       R1,#0x0
   \                     ??osal_msg_send_2:
   \   000048   02....       LJMP      ??Subroutine28_0 & 0xFFFF
    513          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   EA           MOV       A,R2
   \   000001   24FB         ADD       A,#-0x5
   \   000003                REQUIRE ??Subroutine30_0
   \   000003                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   F582         MOV       DPL,A
   \   000002   EB           MOV       A,R3
   \   000003                REQUIRE ??Subroutine31_0
   \   000003                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   34FF         ADDC      A,#-0x1
   \   000002   F583         MOV       DPH,A
   \   000004   22           RET
    514          
    515          /*********************************************************************
    516           * @fn      osal_msg_receive
    517           *
    518           * @brief
    519           *
    520           *    This function is called by a task to retrieve a received command
    521           *    message. The calling task must deallocate the message buffer after
    522           *    processing the message using the osal_msg_deallocate() call.
    523           *
    524           * @param   uint8 task_id - receiving tasks ID
    525           *
    526           * @return  *uint8 - message information or NULL if no message
    527           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    528          uint8 *osal_msg_receive( uint8 task_id )
   \                     osal_msg_receive:
    529          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
    530            osal_msg_hdr_t *listHdr;
    531            osal_msg_hdr_t *prevHdr = NULL;
   \   000007   75..00       MOV       ?V2,#0x0
   \   00000A   75..00       MOV       ?V3,#0x0
    532            osal_msg_hdr_t *foundHdr = NULL;
   \   00000D   7E00         MOV       R6,#0x0
   \   00000F   7F00         MOV       R7,#0x0
    533            halIntState_t   intState;
    534          
    535            // Hold off interrupts
    536            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000011   A2AF         MOV       C,0xa8.7
   \   000013   E4           CLR       A
   \   000014   33           RLC       A
   \   000015   F5..         MOV       ?V1,A
   \   000017   C2AF         CLR       0xa8.7
    537          
    538            // Point to the top of the queue
    539            listHdr = osal_qHead;
   \   000019   90....       MOV       DPTR,#osal_qHead
   \   00001C   8011         SJMP      ??CrossCallReturnLabel_61
    540          
    541            // Look through the queue for a message that belongs to the asking task
    542            while ( listHdr != NULL )
    543            {
    544              if ( (listHdr - 1)->dest_id == task_id )
    545              {
    546                if ( foundHdr == NULL )
    547                {
    548                  // Save the first one
    549                  foundHdr = listHdr;
    550                }
    551                else
    552                {
    553                  // Second msg found, stop looking
    554                  break;
    555                }
    556              }
    557              if ( foundHdr == NULL )
   \                     ??osal_msg_receive_0:
   \   00001E   EE           MOV       A,R6
   \   00001F   4F           ORL       A,R7
   \   000020   7004         JNZ       ??osal_msg_receive_1
    558              {
    559                prevHdr = listHdr;
   \   000022   88..         MOV       ?V2,R0
   \   000024   89..         MOV       ?V3,R1
    560              }
    561              listHdr = OSAL_MSG_NEXT( listHdr );
   \                     ??osal_msg_receive_1:
   \   000026   E8           MOV       A,R0
   \   000027   24FB         ADD       A,#-0x5
   \   000029   F582         MOV       DPL,A
   \   00002B   E9           MOV       A,R1
   \   00002C   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00002F   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000032   6023         JZ        ??osal_msg_receive_2
   \   000034   E8           MOV       A,R0
   \   000035   24FF         ADD       A,#-0x1
   \   000037   F582         MOV       DPL,A
   \   000039   E9           MOV       A,R1
   \   00003A   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   65..         XRL       A,?V0
   \   000040   70DC         JNZ       ??osal_msg_receive_0
   \   000042   EE           MOV       A,R6
   \   000043   4F           ORL       A,R7
   \   000044   7006         JNZ       ??osal_msg_receive_3
   \   000046   E8           MOV       A,R0
   \   000047   FE           MOV       R6,A
   \   000048   E9           MOV       A,R1
   \   000049   FF           MOV       R7,A
   \   00004A   80DA         SJMP      ??osal_msg_receive_1
    562            }
    563            
    564            // Is there more than one?
    565            if ( listHdr != NULL )
    566            {
    567              // Yes, Signal the task that a message is waiting
    568              osal_set_event( task_id, SYS_EVENT_MSG );
   \                     ??osal_msg_receive_3:
   \   00004C                ; Setup parameters for call to function osal_set_event
   \   00004C   7A00         MOV       R2,#0x0
   \   00004E   7B80         MOV       R3,#-0x80
   \   000050   A9..         MOV       R1,?V0
   \   000052   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000055   800D         SJMP      ??osal_msg_receive_4
    569            }
    570            else
    571            {
    572              // No more
    573              osal_clear_event( task_id, SYS_EVENT_MSG );
   \                     ??osal_msg_receive_2:
   \   000057                ; Setup parameters for call to function osal_clear_event
   \   000057   7A00         MOV       R2,#0x0
   \   000059   7B80         MOV       R3,#-0x80
   \   00005B   A9..         MOV       R1,?V0
   \   00005D   12....       LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
    574            }
    575          
    576            // Did we find a message?
    577            if ( foundHdr != NULL )
   \   000060   EE           MOV       A,R6
   \   000061   4F           ORL       A,R7
   \   000062   6015         JZ        ??osal_msg_receive_5
    578            {
    579              // Take out of the link list
    580              osal_msg_extract( &osal_qHead, foundHdr, prevHdr );
   \                     ??osal_msg_receive_4:
   \   000064                ; Setup parameters for call to function osal_msg_extract
   \   000064   78..         MOV       R0,#?V2
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000069   EE           MOV       A,R6
   \   00006A   FC           MOV       R4,A
   \   00006B   EF           MOV       A,R7
   \   00006C   FD           MOV       R5,A
   \   00006D   7A..         MOV       R2,#osal_qHead & 0xff
   \   00006F   7B..         MOV       R3,#(osal_qHead >> 8) & 0xff
   \   000071   12....       LCALL     `??osal_msg_extract::?relay`; Banked call to: osal_msg_extract
   \   000074   7402         MOV       A,#0x2
   \   000076   12....       LCALL     ?DEALLOC_XSTACK8
    581            }
    582          
    583            // Release interrupts
    584            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osal_msg_receive_5:
   \   000079   E5..         MOV       A,?V1
   \   00007B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00007D   92AF         MOV       0xa8.7,C
    585          
    586            return ( (uint8*) foundHdr );
   \   00007F   EE           MOV       A,R6
   \   000080   FA           MOV       R2,A
   \   000081   EF           MOV       A,R7
   \   000082   FB           MOV       R3,A
   \   000083                REQUIRE ?Subroutine4
   \   000083                REQUIRE _A_IEN0
   \   000083                ; // Fall through to label ?Subroutine4
    587          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    588          
    589          /**************************************************************************************************
    590           * @fn          osal_msg_find
    591           *
    592           * @brief       This function finds in place an OSAL message matching the task_id and event
    593           *              parameters.
    594           *
    595           * input parameters
    596           *
    597           * @param       task_id - The OSAL task id that the enqueued OSAL message must match.
    598           * @param       event - The OSAL event id that the enqueued OSAL message must match.
    599           *
    600           * output parameters
    601           *
    602           * None.
    603           *
    604           * @return      NULL if no match, otherwise an in place pointer to the matching OSAL message.
    605           **************************************************************************************************
    606           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    607          osal_event_hdr_t *osal_msg_find(uint8 task_id, uint8 event)
   \                     osal_msg_find:
    608          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV       A,R2
   \   000005   FC           MOV       R4,A
    609            osal_msg_hdr_t *pHdr;
    610            halIntState_t intState;
    611          
    612            HAL_ENTER_CRITICAL_SECTION(intState);  // Hold off interrupts.
   \   000006   A2AF         MOV       C,0xa8.7
   \   000008   E4           CLR       A
   \   000009   33           RLC       A
   \   00000A   F8           MOV       R0,A
   \   00000B   C2AF         CLR       0xa8.7
    613          
    614            pHdr = osal_qHead;  // Point to the top of the queue.
   \   00000D   90....       MOV       DPTR,#osal_qHead
   \   000010   8003         SJMP      ??CrossCallReturnLabel_70
    615          
    616            // Look through the queue for a message that matches the task_id and event parameters.
    617            while (pHdr != NULL)
    618            {
    619              if (((pHdr-1)->dest_id == task_id) && (((osal_event_hdr_t *)pHdr)->event == event))
    620              {
    621                break;
    622              }
    623          
    624              pHdr = OSAL_MSG_NEXT(pHdr);
   \                     ??osal_msg_find_0:
   \   000012   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000015   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000018   EA           MOV       A,R2
   \   000019   4B           ORL       A,R3
   \   00001A   6012         JZ        ??osal_msg_find_1
   \   00001C   EA           MOV       A,R2
   \   00001D   24FF         ADD       A,#-0x1
   \   00001F   12....       LCALL     ??Subroutine30_0 & 0xFFFF
    625            }
   \                     ??CrossCallReturnLabel_67:
   \   000022   E0           MOVX      A,@DPTR
   \   000023   69           XRL       A,R1
   \   000024   70EC         JNZ       ??osal_msg_find_0
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   6C           XRL       A,R4
   \   00002C   70E4         JNZ       ??osal_msg_find_0
    626            
    627            HAL_EXIT_CRITICAL_SECTION(intState);  // Release interrupts.
   \                     ??osal_msg_find_1:
   \   00002E   E8           MOV       A,R0
   \   00002F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000031   92AF         MOV       0xa8.7,C
    628          
    629            return (osal_event_hdr_t *)pHdr;
   \   000033   02....       LJMP      ?Subroutine0 & 0xFFFF
   \   000036                REQUIRE _A_IEN0
    630          }
    631          
    632          /*********************************************************************
    633           * @fn      osal_msg_enqueue
    634           *
    635           * @brief
    636           *
    637           *    This function enqueues an OSAL message into an OSAL queue.
    638           *
    639           * @param   osal_msg_q_t *q_ptr - OSAL queue
    640           * @param   void *msg_ptr  - OSAL message
    641           *
    642           * @return  none
    643           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    644          void osal_msg_enqueue( osal_msg_q_t *q_ptr, void *msg_ptr )
   \                     osal_msg_enqueue:
    645          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
    646            void *list;
    647            halIntState_t intState;
    648          
    649            // Hold off interrupts
    650            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000007   A2AF         MOV       C,0xa8.7
   \   000009   E4           CLR       A
   \   00000A   33           RLC       A
   \   00000B   FA           MOV       R2,A
   \   00000C   C2AF         CLR       0xa8.7
    651          
    652            OSAL_MSG_NEXT( msg_ptr ) = NULL;
   \   00000E   EC           MOV       A,R4
   \   00000F   24FB         ADD       A,#-0x5
   \   000011   F582         MOV       DPL,A
   \   000013   ED           MOV       A,R5
   \   000014   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000017   E4           CLR       A
   \   000018   F0           MOVX      @DPTR,A
   \   000019   A3           INC       DPTR
   \   00001A   F0           MOVX      @DPTR,A
    653            // If first message in queue
    654            if ( *q_ptr == NULL )
   \   00001B   8E82         MOV       DPL,R6
   \   00001D   8B83         MOV       DPH,R3
   \   00001F   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000022   7006         JNZ       ??osal_msg_enqueue_0
    655            {
    656              *q_ptr = msg_ptr;
   \   000024   8E82         MOV       DPL,R6
   \   000026   8B83         MOV       DPH,R3
   \   000028   8019         SJMP      ??osal_msg_enqueue_1
    657            }
    658            else
    659            {
    660              // Find end of queue
    661              for ( list = *q_ptr; OSAL_MSG_NEXT( list ) != NULL; list = OSAL_MSG_NEXT( list ) );
   \                     ??osal_msg_enqueue_0:
   \   00002A   E8           MOV       A,R0
   \   00002B   24FB         ADD       A,#-0x5
   \   00002D   F8           MOV       R0,A
   \   00002E   E9           MOV       A,R1
   \   00002F   34FF         ADDC      A,#-0x1
   \   000031   F9           MOV       R1,A
   \   000032   E8           MOV       A,R0
   \   000033   FE           MOV       R6,A
   \   000034   E9           MOV       A,R1
   \   000035   FF           MOV       R7,A
   \   000036   8882         MOV       DPL,R0
   \   000038   F583         MOV       DPH,A
   \   00003A   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00003D   70EB         JNZ       ??osal_msg_enqueue_0
    662          
    663              // Add message to end of queue
    664              OSAL_MSG_NEXT( list ) = msg_ptr;
   \   00003F   8E82         MOV       DPL,R6
   \   000041   8F83         MOV       DPH,R7
   \                     ??osal_msg_enqueue_1:
   \   000043   EC           MOV       A,R4
   \   000044   F0           MOVX      @DPTR,A
   \   000045   A3           INC       DPTR
   \   000046   ED           MOV       A,R5
   \   000047   F0           MOVX      @DPTR,A
    665            }
    666          
    667            // Re-enable interrupts
    668            HAL_EXIT_CRITICAL_SECTION(intState);
   \   000048   EA           MOV       A,R2
   \   000049   A2E0         MOV       C,0xE0 /* A   */.0
   \   00004B                REQUIRE ?Subroutine5
   \   00004B                REQUIRE _A_IEN0
   \   00004B                ; // Fall through to label ?Subroutine5
    669          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   92AF         MOV       0xa8.7,C
   \   000002   80..         SJMP      ??Subroutine28_0
    670          
    671          /*********************************************************************
    672           * @fn      osal_msg_dequeue
    673           *
    674           * @brief
    675           *
    676           *    This function dequeues an OSAL message from an OSAL queue.
    677           *
    678           * @param   osal_msg_q_t *q_ptr - OSAL queue
    679           *
    680           * @return  void * - pointer to OSAL message or NULL of queue is empty.
    681           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    682          void *osal_msg_dequeue( osal_msg_q_t *q_ptr )
   \                     osal_msg_dequeue:
    683          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FC           MOV       R4,A
   \   000007   EB           MOV       A,R3
   \   000008   FD           MOV       R5,A
    684            void *msg_ptr = NULL;
   \   000009   7A00         MOV       R2,#0x0
   \   00000B   7B00         MOV       R3,#0x0
    685            halIntState_t intState;
    686          
    687            // Hold off interrupts
    688            HAL_ENTER_CRITICAL_SECTION(intState);
   \   00000D   A2AF         MOV       C,0xa8.7
   \   00000F   E4           CLR       A
   \   000010   33           RLC       A
   \   000011   FE           MOV       R6,A
   \   000012   C2AF         CLR       0xa8.7
    689          
    690            if ( *q_ptr != NULL )
   \   000014   8C82         MOV       DPL,R4
   \   000016   8D83         MOV       DPH,R5
   \   000018   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00001B   6033         JZ        ??osal_msg_dequeue_0
    691            {
    692              // Dequeue message
    693              msg_ptr = *q_ptr;
   \   00001D   E8           MOV       A,R0
   \   00001E   FA           MOV       R2,A
   \   00001F   E9           MOV       A,R1
   \   000020   FB           MOV       R3,A
    694              *q_ptr = OSAL_MSG_NEXT( msg_ptr );
   \   000021   E8           MOV       A,R0
   \   000022   24FB         ADD       A,#-0x5
   \   000024   F8           MOV       R0,A
   \   000025   E9           MOV       A,R1
   \   000026   34FF         ADDC      A,#-0x1
   \   000028   F9           MOV       R1,A
   \   000029   8882         MOV       DPL,R0
   \   00002B   F583         MOV       DPH,A
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F5..         MOV       ?V0,A
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F5..         MOV       ?V1,A
   \   000034   8C82         MOV       DPL,R4
   \   000036   8D83         MOV       DPH,R5
   \   000038   E5..         MOV       A,?V0
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   A3           INC       DPTR
   \   00003C   E5..         MOV       A,?V1
   \   00003E   F0           MOVX      @DPTR,A
    695              OSAL_MSG_NEXT( msg_ptr ) = NULL;
   \   00003F   8882         MOV       DPL,R0
   \   000041   8983         MOV       DPH,R1
   \   000043   E4           CLR       A
   \   000044   F0           MOVX      @DPTR,A
   \   000045   A3           INC       DPTR
   \   000046   F0           MOVX      @DPTR,A
    696              OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
   \   000047   EA           MOV       A,R2
   \   000048   24FF         ADD       A,#-0x1
   \   00004A   12....       LCALL     ??Subroutine30_0 & 0xFFFF
    697            }
   \                     ??CrossCallReturnLabel_68:
   \   00004D   74FF         MOV       A,#-0x1
   \   00004F   F0           MOVX      @DPTR,A
    698          
    699            // Re-enable interrupts
    700            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osal_msg_dequeue_0:
   \   000050   EE           MOV       A,R6
   \   000051   A2E0         MOV       C,0xE0 /* A   */.0
   \   000053   92AF         MOV       0xa8.7,C
    701          
    702            return msg_ptr;
   \   000055                REQUIRE ?Subroutine3
   \   000055                REQUIRE _A_IEN0
   \   000055                ; // Fall through to label ?Subroutine3
    703          }
    704          
    705          /*********************************************************************
    706           * @fn      osal_msg_push
    707           *
    708           * @brief
    709           *
    710           *    This function pushes an OSAL message to the head of an OSAL
    711           *    queue.
    712           *
    713           * @param   osal_msg_q_t *q_ptr - OSAL queue
    714           * @param   void *msg_ptr  - OSAL message
    715           *
    716           * @return  none
    717           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    718          void osal_msg_push( osal_msg_q_t *q_ptr, void *msg_ptr )
   \                     osal_msg_push:
    719          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    720            halIntState_t intState;
    721          
    722            // Hold off interrupts
    723            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000005   A8A8         MOV       R0,0xa8+0x0
   \   000007   C2AF         CLR       0xa8.7
    724          
    725            // Push message to head of queue
    726            OSAL_MSG_NEXT( msg_ptr ) = *q_ptr;
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   FE           MOV       R6,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   FF           MOV       R7,A
   \   000012   EC           MOV       A,R4
   \   000013   24FB         ADD       A,#-0x5
   \   000015   F582         MOV       DPL,A
   \   000017   ED           MOV       A,R5
   \   000018   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00001B   12....       LCALL     ?Subroutine23 & 0xFFFF
    727            *q_ptr = msg_ptr;
   \                     ??CrossCallReturnLabel_39:
   \   00001E   EC           MOV       A,R4
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   A3           INC       DPTR
   \   000021   ED           MOV       A,R5
   \   000022   F0           MOVX      @DPTR,A
    728          
    729            // Re-enable interrupts
    730            HAL_EXIT_CRITICAL_SECTION(intState);
   \   000023   E8           MOV       A,R0
   \   000024   A2E7         MOV       C,0xE0 /* A   */.7
   \   000026   02....       LJMP      ?Subroutine5 & 0xFFFF
   \   000029                REQUIRE _A_IEN0
    731          }
    732          
    733          /*********************************************************************
    734           * @fn      osal_msg_extract
    735           *
    736           * @brief
    737           *
    738           *    This function extracts and removes an OSAL message from the
    739           *    middle of an OSAL queue.
    740           *
    741           * @param   osal_msg_q_t *q_ptr - OSAL queue
    742           * @param   void *msg_ptr  - OSAL message to be extracted
    743           * @param   void *prev_ptr  - OSAL message before msg_ptr in queue
    744           *
    745           * @return  none
    746           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    747          void osal_msg_extract( osal_msg_q_t *q_ptr, void *msg_ptr, void *prev_ptr )
   \                     osal_msg_extract:
    748          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    749            halIntState_t intState;
    750          
    751            // Hold off interrupts
    752            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000005   A2AF         MOV       C,0xa8.7
   \   000007   E4           CLR       A
   \   000008   33           RLC       A
   \   000009   FE           MOV       R6,A
   \   00000A   C2AF         CLR       0xa8.7
    753          
    754            if ( msg_ptr == *q_ptr )
   \   00000C   EC           MOV       A,R4
   \   00000D   24FB         ADD       A,#-0x5
   \   00000F   F8           MOV       R0,A
   \   000010   ED           MOV       A,R5
   \   000011   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F8           MOV       R0,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F9           MOV       R1,A
   \   000019   8A82         MOV       DPL,R2
   \   00001B   8B83         MOV       DPH,R3
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V2,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F5..         MOV       ?V3,A
   \   000024   EC           MOV       A,R4
   \   000025   65..         XRL       A,?V2
   \   000027   7003         JNZ       ??osal_msg_extract_0
   \   000029   ED           MOV       A,R5
   \   00002A   65..         XRL       A,?V3
   \                     ??osal_msg_extract_0:
   \   00002C   7006         JNZ       ??osal_msg_extract_1
    755            {
    756              // remove from first
    757              *q_ptr = OSAL_MSG_NEXT( msg_ptr );
   \   00002E   8A82         MOV       DPL,R2
   \   000030   8B83         MOV       DPH,R3
   \   000032   8012         SJMP      ??CrossCallReturnLabel_65
    758            }
    759            else
    760            {
    761              // remove from middle
    762              OSAL_MSG_NEXT( prev_ptr ) = OSAL_MSG_NEXT( msg_ptr );
   \                     ??osal_msg_extract_1:
   \   000034   740C         MOV       A,#0xc
   \   000036   12....       LCALL     ?XSTACK_DISP0_8
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   FA           MOV       R2,A
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   CA           XCH       A,R2
   \   00003E   24FB         ADD       A,#-0x5
   \   000040   F582         MOV       DPL,A
   \   000042   EA           MOV       A,R2
   \   000043   12....       LCALL     ??Subroutine31_0 & 0xFFFF
    763            }
   \                     ??CrossCallReturnLabel_65:
   \   000046   E8           MOV       A,R0
   \   000047   F0           MOVX      @DPTR,A
   \   000048   A3           INC       DPTR
   \   000049   E9           MOV       A,R1
   \   00004A   F0           MOVX      @DPTR,A
    764            OSAL_MSG_NEXT( msg_ptr ) = NULL;
   \   00004B   85..82       MOV       DPL,?V0
   \   00004E   85..83       MOV       DPH,?V1
   \   000051   E4           CLR       A
   \   000052   F0           MOVX      @DPTR,A
   \   000053   A3           INC       DPTR
   \   000054   F0           MOVX      @DPTR,A
    765            OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
   \   000055   EC           MOV       A,R4
   \   000056   24FF         ADD       A,#-0x1
   \   000058   F582         MOV       DPL,A
   \   00005A   ED           MOV       A,R5
   \   00005B   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00005E   74FF         MOV       A,#-0x1
   \   000060   F0           MOVX      @DPTR,A
    766          
    767            // Re-enable interrupts
    768            HAL_EXIT_CRITICAL_SECTION(intState);
   \   000061   EE           MOV       A,R6
   \   000062   A2E0         MOV       C,0xE0 /* A   */.0
   \   000064   92AF         MOV       0xa8.7,C
    769          }
   \   000066   02....       LJMP      ?Subroutine4 & 0xFFFF
   \   000069                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   34FF         ADDC      A,#-0x1
   \   000002   88..         MOV       ?V0,R0
   \   000004   F5..         MOV       ?V1,A
   \   000006   8882         MOV       DPL,R0
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET
    770          
    771          /*********************************************************************
    772           * @fn      osal_msg_enqueue_max
    773           *
    774           * @brief
    775           *
    776           *    This function enqueues an OSAL message into an OSAL queue if
    777           *    the length of the queue is less than max.
    778           *
    779           * @param   osal_msg_q_t *q_ptr - OSAL queue
    780           * @param   void *msg_ptr  - OSAL message
    781           * @param   uint8 max - maximum length of queue
    782           *
    783           * @return  TRUE if message was enqueued, FALSE otherwise
    784           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    785          uint8 osal_msg_enqueue_max( osal_msg_q_t *q_ptr, void *msg_ptr, uint8 max )
   \                     osal_msg_enqueue_max:
    786          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   E9           MOV       A,R1
   \   00000A   FE           MOV       R6,A
    787            void *list;
    788            uint8 ret = FALSE;
   \   00000B   7A00         MOV       R2,#0x0
    789            halIntState_t intState;
    790          
    791            // Hold off interrupts
    792            HAL_ENTER_CRITICAL_SECTION(intState);
   \   00000D   A2AF         MOV       C,0xa8.7
   \   00000F   E4           CLR       A
   \   000010   33           RLC       A
   \   000011   FB           MOV       R3,A
   \   000012   C2AF         CLR       0xa8.7
    793          
    794            // If first message in queue
    795            if ( *q_ptr == NULL )
   \   000014   85..82       MOV       DPL,?V0
   \   000017   85..83       MOV       DPH,?V1
   \   00001A   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00001D   7005         JNZ       ??osal_msg_enqueue_max_0
    796            {
    797              *q_ptr = msg_ptr;
   \   00001F   8014         SJMP      ??osal_msg_enqueue_max_1
    798              ret = TRUE;
    799            }
    800            else
    801            {
    802              // Find end of queue or max
    803              list = *q_ptr;
    804              max--;
    805              while ( (OSAL_MSG_NEXT( list ) != NULL) && (max > 0) )
   \                     ??osal_msg_enqueue_max_2:
   \   000021   EE           MOV       A,R6
   \   000022   601E         JZ        ??osal_msg_enqueue_max_3
    806              {
    807                list = OSAL_MSG_NEXT( list );
    808                max--;
   \                     ??osal_msg_enqueue_max_0:
   \   000024   1E           DEC       R6
    809              }
   \   000025   E8           MOV       A,R0
   \   000026   24FB         ADD       A,#-0x5
   \   000028   F8           MOV       R0,A
   \   000029   E9           MOV       A,R1
   \   00002A   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00002D   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000030   70EF         JNZ       ??osal_msg_enqueue_max_2
    810          
    811              // Add message to end of queue if max not reached
    812              if ( max != 0 )
   \   000032   EE           MOV       A,R6
   \   000033   600D         JZ        ??osal_msg_enqueue_max_3
    813              {
    814                OSAL_MSG_NEXT( list ) = msg_ptr;
   \                     ??osal_msg_enqueue_max_1:
   \   000035   85..82       MOV       DPL,?V0
   \   000038   85..83       MOV       DPH,?V1
   \   00003B   EC           MOV       A,R4
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   ED           MOV       A,R5
   \   00003F   F0           MOVX      @DPTR,A
    815                ret = TRUE;
   \   000040   7A01         MOV       R2,#0x1
    816              }
    817            }
    818          
    819            // Re-enable interrupts
    820            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osal_msg_enqueue_max_3:
   \   000042   EB           MOV       A,R3
   \   000043   A2E0         MOV       C,0xE0 /* A   */.0
   \   000045   92AF         MOV       0xa8.7,C
    821          
    822            return ret;
   \   000047   EA           MOV       A,R2
   \   000048   F9           MOV       R1,A
   \   000049   02....       LJMP      ?Subroutine3 & 0xFFFF
   \   00004C                REQUIRE _A_IEN0
    823          }
    824          
    825          /*********************************************************************
    826           * @fn      osal_set_event
    827           *
    828           * @brief
    829           *
    830           *    This function is called to set the event flags for a task.  The
    831           *    event passed in is OR'd into the task's event variable.
    832           *
    833           * @param   uint8 task_id - receiving tasks ID
    834           * @param   uint8 event_flag - what event to set
    835           *
    836           * @return  SUCCESS, INVALID_TASK
    837           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    838          uint8 osal_set_event( uint8 task_id, uint16 event_flag )
   \                     osal_set_event:
    839          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    840            if ( task_id < tasksCnt )
   \   000005   90....       MOV       DPTR,#tasksCnt
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F8           MOV       R0,A
   \   00000A   E9           MOV       A,R1
   \   00000B   C3           CLR       C
   \   00000C   98           SUBB      A,R0
   \   00000D   5027         JNC       ??osal_set_event_0
    841            {
    842              halIntState_t   intState;
    843              HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
   \   00000F   ACA8         MOV       R4,0xa8+0x0
   \   000011   C2AF         CLR       0xa8.7
    844              tasksEvents[task_id] |= event_flag;  // Stuff the event bit(s)
   \   000013   E9           MOV       A,R1
   \   000014   29           ADD       A,R1
   \   000015   F8           MOV       R0,A
   \   000016   E4           CLR       A
   \   000017   33           RLC       A
   \   000018   F9           MOV       R1,A
   \   000019   90....       MOV       DPTR,#tasksEvents
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   28           ADD       A,R0
   \   00001E   FD           MOV       R5,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   39           ADDC      A,R1
   \   000022   8D82         MOV       DPL,R5
   \   000024   F583         MOV       DPH,A
   \   000026   E0           MOVX      A,@DPTR
   \   000027   4A           ORL       A,R2
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   4B           ORL       A,R3
   \   00002C   F0           MOVX      @DPTR,A
    845              HAL_EXIT_CRITICAL_SECTION(intState);     // Release interrupts
   \   00002D   EC           MOV       A,R4
   \   00002E   A2E7         MOV       C,0xE0 /* A   */.7
   \   000030   92AF         MOV       0xa8.7,C
    846              return ( SUCCESS );
   \   000032   7900         MOV       R1,#0x0
   \   000034   8002         SJMP      ??osal_set_event_1
    847            }
    848             else
    849            {
    850              return ( INVALID_TASK );
   \                     ??osal_set_event_0:
   \   000036   7903         MOV       R1,#0x3
    851            }
   \                     ??osal_set_event_1:
   \   000038   02....       LJMP      ??Subroutine28_0 & 0xFFFF
   \   00003B                REQUIRE _A_IEN0
    852          }
    853          
    854          /*********************************************************************
    855           * @fn      osal_clear_event
    856           *
    857           * @brief
    858           *
    859           *    This function is called to clear the event flags for a task.  The
    860           *    event passed in is masked out of the task's event variable.
    861           *
    862           * @param   uint8 task_id - receiving tasks ID
    863           * @param   uint8 event_flag - what event to set
    864           *
    865           * @return  SUCCESS, INVALID_TASK
    866           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    867          uint8 osal_clear_event( uint8 task_id, uint16 event_flag )
   \                     osal_clear_event:
    868          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    869            if ( task_id < tasksCnt )
   \   000005   90....       MOV       DPTR,#tasksCnt
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F8           MOV       R0,A
   \   00000A   E9           MOV       A,R1
   \   00000B   C3           CLR       C
   \   00000C   98           SUBB      A,R0
   \   00000D   501F         JNC       ??osal_clear_event_0
    870            {
    871              halIntState_t   intState;
    872              HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
   \   00000F   AEA8         MOV       R6,0xa8+0x0
   \   000011   C2AF         CLR       0xa8.7
    873              tasksEvents[task_id] &= ~(event_flag);   // clear the event bit(s)
   \   000013   EA           MOV       A,R2
   \   000014   F4           CPL       A
   \   000015   FC           MOV       R4,A
   \   000016   EB           MOV       A,R3
   \   000017   F4           CPL       A
   \   000018   FD           MOV       R5,A
   \   000019   E9           MOV       A,R1
   \   00001A   29           ADD       A,R1
   \   00001B   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   5C           ANL       A,R4
   \   000020   F0           MOVX      @DPTR,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   5D           ANL       A,R5
   \   000024   F0           MOVX      @DPTR,A
    874              HAL_EXIT_CRITICAL_SECTION(intState);     // Release interrupts
   \   000025   EE           MOV       A,R6
   \   000026   A2E7         MOV       C,0xE0 /* A   */.7
   \   000028   92AF         MOV       0xa8.7,C
    875              return ( SUCCESS );
   \   00002A   7900         MOV       R1,#0x0
   \   00002C   8002         SJMP      ??osal_clear_event_1
    876            }
    877             else
    878            {
    879              return ( INVALID_TASK );
   \                     ??osal_clear_event_0:
   \   00002E   7903         MOV       R1,#0x3
    880            }
   \                     ??osal_clear_event_1:
   \   000030   02....       LJMP      ??Subroutine28_0 & 0xFFFF
   \   000033                REQUIRE _A_IEN0
    881          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   33           RLC       A
   \   000003   F9           MOV       R1,A
   \   000004   90....       MOV       DPTR,#tasksEvents
   \   000007   E0           MOVX      A,@DPTR
   \   000008   28           ADD       A,R0
   \   000009   FA           MOV       R2,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   39           ADDC      A,R1
   \   00000D   8A82         MOV       DPL,R2
   \   00000F   F583         MOV       DPH,A
   \   000011   22           RET
    882          
    883          /*********************************************************************
    884           * @fn      osal_isr_register
    885           *
    886           * @brief
    887           *
    888           *   This function is called to register a service routine with an
    889           *   interrupt. When the interrupt occurs, this service routine is called.
    890           *
    891           * @param   uint8 interrupt_id - Interrupt number
    892           * @param   void (*isr_ptr)( uint8* ) - function pointer to ISR
    893           *
    894           * @return  SUCCESS, INVALID_INTERRUPT_ID,
    895           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    896          uint8 osal_isr_register( uint8 interrupt_id, void (*isr_ptr)( uint8* ) )
   \                     osal_isr_register:
    897          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    898            // Remove these statements when functionality is complete
    899            (void)interrupt_id;
    900            (void)isr_ptr;
    901            return ( SUCCESS );
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
    902          }
    903          
    904          /*********************************************************************
    905           * @fn      osal_int_enable
    906           *
    907           * @brief
    908           *
    909           *   This function is called to enable an interrupt. Once enabled,
    910           *   occurrence of the interrupt causes the service routine associated
    911           *   with that interrupt to be called.
    912           *
    913           *   If INTS_ALL is the interrupt_id, interrupts (in general) are enabled.
    914           *   If a single interrupt is passed in, then interrupts still have
    915           *   to be enabled with another call to INTS_ALL.
    916           *
    917           * @param   uint8 interrupt_id - Interrupt number
    918           *
    919           * @return  SUCCESS or INVALID_INTERRUPT_ID
    920           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    921          uint8 osal_int_enable( uint8 interrupt_id )
   \                     osal_int_enable:
    922          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   \   000001   F8           MOV       R0,A
    923          
    924            if ( interrupt_id == INTS_ALL )
   \   000002   74FF         MOV       A,#-0x1
   \   000004   68           XRL       A,R0
   \   000005   7006         JNZ       ??osal_int_enable_0
    925            {
    926              HAL_ENABLE_INTERRUPTS();
   \   000007   D2AF         SETB      0xa8.7
    927              return ( SUCCESS );
   \   000009   7900         MOV       R1,#0x0
   \   00000B   8002         SJMP      ??osal_int_enable_1
    928            }
    929            else
    930            {
    931              return ( INVALID_INTERRUPT_ID );
   \                     ??osal_int_enable_0:
   \   00000D   7907         MOV       R1,#0x7
   \                     ??osal_int_enable_1:
   \   00000F   02....       LJMP      ?BRET
   \   000012                REQUIRE _A_IEN0
    932            }
    933          }
    934          
    935          /*********************************************************************
    936           * @fn      osal_int_disable
    937           *
    938           * @brief
    939           *
    940           *   This function is called to disable an interrupt. When a disabled
    941           *   interrupt occurs, the service routine associated with that
    942           *   interrupt is not called.
    943           *
    944           *   If INTS_ALL is the interrupt_id, interrupts (in general) are disabled.
    945           *   If a single interrupt is passed in, then just that interrupt is disabled.
    946           *
    947           * @param   uint8 interrupt_id - Interrupt number
    948           *
    949           * @return  SUCCESS or INVALID_INTERRUPT_ID
    950           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    951          uint8 osal_int_disable( uint8 interrupt_id )
   \                     osal_int_disable:
    952          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   \   000001   F8           MOV       R0,A
    953          
    954            if ( interrupt_id == INTS_ALL )
   \   000002   74FF         MOV       A,#-0x1
   \   000004   68           XRL       A,R0
   \   000005   7006         JNZ       ??osal_int_disable_0
    955            {
    956              HAL_DISABLE_INTERRUPTS();
   \   000007   C2AF         CLR       0xa8.7
    957              return ( SUCCESS );
   \   000009   7900         MOV       R1,#0x0
   \   00000B   8002         SJMP      ??osal_int_disable_1
    958            }
    959            else
    960            {
    961              return ( INVALID_INTERRUPT_ID );
   \                     ??osal_int_disable_0:
   \   00000D   7907         MOV       R1,#0x7
   \                     ??osal_int_disable_1:
   \   00000F   02....       LJMP      ?BRET
   \   000012                REQUIRE _A_IEN0
    962            }
    963          }
    964          
    965          /*********************************************************************
    966           * @fn      osal_init_system
    967           *
    968           * @brief
    969           *
    970           *   This function initializes the "task" system by creating the
    971           *   tasks defined in the task table (OSAL_Tasks.h).
    972           *
    973           * @param   void
    974           *
    975           * @return  SUCCESS
    976           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    977          uint8 osal_init_system( void )
   \                     osal_init_system:
    978          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    979            // Initialize the Memory Allocation System
    980            osal_mem_init();
   \   000004                ; Setup parameters for call to function osal_mem_init
   \   000004   12....       LCALL     `??osal_mem_init::?relay`; Banked call to: osal_mem_init
    981          
    982            // Initialize the message queue
    983            osal_qHead = NULL;
   \   000007   90....       MOV       DPTR,#osal_qHead
   \   00000A   E4           CLR       A
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   A3           INC       DPTR
   \   00000D   F0           MOVX      @DPTR,A
    984          
    985            // Initialize the timers
    986            osalTimerInit();
   \   00000E                ; Setup parameters for call to function osalTimerInit
   \   00000E   12....       LCALL     `??osalTimerInit::?relay`; Banked call to: osalTimerInit
    987          
    988            // Initialize the Power Management System
    989            osal_pwrmgr_init();
   \   000011                ; Setup parameters for call to function osal_pwrmgr_init
   \   000011   12....       LCALL     `??osal_pwrmgr_init::?relay`; Banked call to: osal_pwrmgr_init
    990          
    991            // Initialize the system tasks.
    992            osalInitTasks();
   \   000014                ; Setup parameters for call to function osalInitTasks
   \   000014   12....       LCALL     `??osalInitTasks::?relay`; Banked call to: osalInitTasks
    993          
    994            // Setup efficient search for the first free block of heap.
    995            osal_mem_kick();
   \   000017                ; Setup parameters for call to function osal_mem_kick
   \   000017   12....       LCALL     `??osal_mem_kick::?relay`; Banked call to: osal_mem_kick
    996          
    997            return ( SUCCESS );
   \   00001A   7900         MOV       R1,#0x0
   \   00001C   02....       LJMP      ?Subroutine0 & 0xFFFF
    998          }
    999          
   1000          /*********************************************************************
   1001           * @fn      osal_start_system
   1002           *
   1003           * @brief
   1004           *
   1005           *   This function is the main loop function of the task system.  It
   1006           *   will look through all task events and call the task_event_processor()
   1007           *   function for the task with the event.  If there are no events (for
   1008           *   all tasks), this function puts the processor into Sleep.
   1009           *   This Function doesn't return.
   1010           *
   1011           * @param   void
   1012           *
   1013           * @return  none
   1014           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1015          void osal_start_system( void )
   \                     osal_start_system:
   1016          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1017          #if !defined ( ZBIT ) && !defined ( UBIT )
   1018            for(;;)  // Forever Loop
   1019          #endif
   1020            {
   1021              uint8 idx = 0;
   \                     ??osal_start_system_0:
   \   000005   75..00       MOV       ?V0,#0x0
   1022          
   1023              osalTimeUpdate();
   \   000008                ; Setup parameters for call to function osalTimeUpdate
   \   000008   12....       LCALL     `??osalTimeUpdate::?relay`; Banked call to: osalTimeUpdate
   1024              Hal_ProcessPoll();  // This replaces MT_SerialPoll() and osal_check_timer().
   \   00000B                ; Setup parameters for call to function Hal_ProcessPoll
   \   00000B   12....       LCALL     `??Hal_ProcessPoll::?relay`; Banked call to: Hal_ProcessPoll
   1025              
   1026              do {
   1027                if (tasksEvents[idx])  // Task is highest priority that is ready.
   \                     ??osal_start_system_1:
   \   00000E   A8..         MOV       R0,?V0
   \   000010   E8           MOV       A,R0
   \   000011   28           ADD       A,R0
   \   000012   12....       LCALL     ?Subroutine14 & 0xFFFF
   1028                {
   1029                  break;
   1030                }
   1031              } while (++idx < tasksCnt);
   \                     ??CrossCallReturnLabel_20:
   \   000015   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000018   700D         JNZ       ??osal_start_system_2
   \   00001A   05..         INC       ?V0
   \   00001C   90....       MOV       DPTR,#tasksCnt
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F8           MOV       R0,A
   \   000021   E5..         MOV       A,?V0
   \   000023   C3           CLR       C
   \   000024   98           SUBB      A,R0
   \   000025   40E7         JC        ??osal_start_system_1
   1032          
   1033              if (idx < tasksCnt)
   \                     ??osal_start_system_2:
   \   000027   90....       MOV       DPTR,#tasksCnt
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F8           MOV       R0,A
   \   00002C   E5..         MOV       A,?V0
   \   00002E   C3           CLR       C
   \   00002F   98           SUBB      A,R0
   \   000030   50D3         JNC       ??osal_start_system_0
   1034              {
   1035                uint16 events;
   1036                halIntState_t intState;
   1037          
   1038                HAL_ENTER_CRITICAL_SECTION(intState);
   \   000032   ACA8         MOV       R4,0xa8+0x0
   \   000034   C2AF         CLR       0xa8.7
   1039                events = tasksEvents[idx];
   \   000036   AE..         MOV       R6,?V0
   \   000038   EE           MOV       A,R6
   \   000039   2E           ADD       A,R6
   \   00003A   FE           MOV       R6,A
   \   00003B   E4           CLR       A
   \   00003C   33           RLC       A
   \   00003D   FF           MOV       R7,A
   \   00003E   90....       MOV       DPTR,#tasksEvents
   \   000041   E0           MOVX      A,@DPTR
   \   000042   2E           ADD       A,R6
   \   000043   F8           MOV       R0,A
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   3F           ADDC      A,R7
   \   000047   F9           MOV       R1,A
   \   000048   8882         MOV       DPL,R0
   \   00004A   F583         MOV       DPH,A
   \   00004C   12....       LCALL     ?Subroutine16 & 0xFFFF
   1040                tasksEvents[idx] = 0;  // Clear the Events for this task.
   \                     ??CrossCallReturnLabel_27:
   \   00004F   8882         MOV       DPL,R0
   \   000051   8983         MOV       DPH,R1
   \   000053   E4           CLR       A
   \   000054   F0           MOVX      @DPTR,A
   \   000055   A3           INC       DPTR
   \   000056   F0           MOVX      @DPTR,A
   1041                HAL_EXIT_CRITICAL_SECTION(intState);
   \   000057   EC           MOV       A,R4
   \   000058   A2E7         MOV       C,0xE0 /* A   */.7
   \   00005A   92AF         MOV       0xa8.7,C
   1042          
   1043                events = (tasksArr[idx])( idx, events );
   \   00005C                ; Setup parameters for indirect call
   \   00005C   A9..         MOV       R1,?V0
   \   00005E   74..         MOV       A,#tasksArr & 0xff
   \   000060   2E           ADD       A,R6
   \   000061   F582         MOV       DPL,A
   \   000063   74..         MOV       A,#(tasksArr >> 8) & 0xff
   \   000065   3F           ADDC      A,R7
   \   000066   F583         MOV       DPH,A
   \   000068   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00006B   12....       LCALL     ?CALL_IND
   1044          
   1045                HAL_ENTER_CRITICAL_SECTION(intState);
   \   00006E   A8A8         MOV       R0,0xa8+0x0
   \   000070   C2AF         CLR       0xa8.7
   1046                tasksEvents[idx] |= events;  // Add back unprocessed events to the current task.
   \   000072   90....       MOV       DPTR,#tasksEvents
   \   000075   E0           MOVX      A,@DPTR
   \   000076   2E           ADD       A,R6
   \   000077   F9           MOV       R1,A
   \   000078   A3           INC       DPTR
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   3F           ADDC      A,R7
   \   00007B   8982         MOV       DPL,R1
   \   00007D   F583         MOV       DPH,A
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   4A           ORL       A,R2
   \   000081   F0           MOVX      @DPTR,A
   \   000082   A3           INC       DPTR
   \   000083   E0           MOVX      A,@DPTR
   \   000084   4B           ORL       A,R3
   \   000085   F0           MOVX      @DPTR,A
   1047                HAL_EXIT_CRITICAL_SECTION(intState);
   \   000086   E8           MOV       A,R0
   \   000087   A2E7         MOV       C,0xE0 /* A   */.7
   \   000089   92AF         MOV       0xa8.7,C
   \   00008B   02....       LJMP      ??osal_start_system_0 & 0xFFFF
   \   00008E                REQUIRE _A_IEN0
   1048              }
   1049          #if defined( POWER_SAVING )
   1050              else  // Complete pass through all task events with no activity?
   1051              {
   1052                osal_pwrmgr_powerconserve();  // Put the processor/system into sleep
   1053              }
   1054          #endif
   1055            }
   1056          }
   1057          
   1058          /*********************************************************************
   1059           * @fn      osal_buffer_uint32
   1060           *
   1061           * @brief
   1062           *
   1063           *   Buffer an uint32 value - LSB first.
   1064           *
   1065           * @param   buf - buffer
   1066           * @param   val - uint32 value
   1067           *
   1068           * @return  pointer to end of destination buffer
   1069           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1070          uint8* osal_buffer_uint32( uint8 *buf, uint32 val )
   \                     osal_buffer_uint32:
   1071          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   7410         MOV       A,#0x10
   \   000007   12....       LCALL     ?XSTACK_DISP0_8
   \   00000A   78..         MOV       R0,#?V4
   \   00000C   12....       LCALL     ?L_MOV_X
   1072            *buf++ = BREAK_UINT32( val, 0 );
   \   00000F   12....       LCALL     ?Subroutine24 & 0xFFFF
   1073            *buf++ = BREAK_UINT32( val, 1 );
   1074            *buf++ = BREAK_UINT32( val, 2 );
   \                     ??CrossCallReturnLabel_40:
   \   000012   85....       MOV       ?V0,?V4
   \   000015   85....       MOV       ?V2,?V6
   \   000018   85....       MOV       ?V3,?V7
   \   00001B   7410         MOV       A,#0x10
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?UL_SHR
   \   000022   8A82         MOV       DPL,R2
   \   000024   8B83         MOV       DPH,R3
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   E5..         MOV       A,?V0
   \   00002A   F0           MOVX      @DPTR,A
   1075            *buf++ = BREAK_UINT32( val, 3 );
   \   00002B   7418         MOV       A,#0x18
   \   00002D   78..         MOV       R0,#?V4
   \   00002F   12....       LCALL     ?UL_SHR
   \   000032   8A82         MOV       DPL,R2
   \   000034   8B83         MOV       DPH,R3
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   E5..         MOV       A,?V4
   \   00003B   F0           MOVX      @DPTR,A
   1076          
   1077            return buf;
   \   00003C   EA           MOV       A,R2
   \   00003D   2404         ADD       A,#0x4
   \   00003F   FA           MOV       R2,A
   \   000040   5001         JNC       ??osal_buffer_uint32_0
   \   000042   0B           INC       R3
   \                     ??osal_buffer_uint32_0:
   \   000043                REQUIRE ?Subroutine2
   \   000043                ; // Fall through to label ?Subroutine2
   1078          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   E5..         MOV       A,?V4
   \   000006   F0           MOVX      @DPTR,A
   \   000007   85....       MOV       ?V1,?V5
   \   00000A   E5..         MOV       A,?V1
   \   00000C   A3           INC       DPTR
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   22           RET
   1079          
   1080          /*********************************************************************
   1081           * @fn      osal_buffer_uint24
   1082           *
   1083           * @brief
   1084           *
   1085           *   Buffer an uint24 value - LSB first. Note that type uint24 is
   1086           *   typedef to uint32 in comdef.h
   1087           *
   1088           * @param   buf - buffer
   1089           * @param   val - uint24 value
   1090           *
   1091           * @return  pointer to end of destination buffer
   1092           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1093          uint8* osal_buffer_uint24( uint8 *buf, uint24 val )
   \                     osal_buffer_uint24:
   1094          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   7410         MOV       A,#0x10
   \   000007   12....       LCALL     ?XSTACK_DISP0_8
   \   00000A   78..         MOV       R0,#?V4
   \   00000C   12....       LCALL     ?L_MOV_X
   1095            *buf++ = BREAK_UINT32( val, 0 );
   \   00000F   12....       LCALL     ?Subroutine24 & 0xFFFF
   1096            *buf++ = BREAK_UINT32( val, 1 );
   1097            *buf++ = BREAK_UINT32( val, 2 );
   \                     ??CrossCallReturnLabel_41:
   \   000012   7410         MOV       A,#0x10
   \   000014   78..         MOV       R0,#?V4
   \   000016   12....       LCALL     ?UL_SHR
   \   000019   8A82         MOV       DPL,R2
   \   00001B   8B83         MOV       DPH,R3
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   E5..         MOV       A,?V4
   \   000021   F0           MOVX      @DPTR,A
   1098          
   1099            return buf;
   \   000022   EA           MOV       A,R2
   \   000023   2403         ADD       A,#0x3
   \   000025   FA           MOV       R2,A
   \   000026   5001         JNC       ??osal_buffer_uint24_0
   \   000028   0B           INC       R3
   \                     ??osal_buffer_uint24_0:
   \   000029   80..         SJMP      ?Subroutine2
   1100          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_strlen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_strlen

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_memcpy::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_memcpy

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_revmemcpy::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_revmemcpy

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_memdup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_memdup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_memcmp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_memcmp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_memset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_memset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_build_uint16::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_build_uint16

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_build_uint32::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_build_uint32

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_ltoa::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _ltoa

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_rand::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_rand

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_allocate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_allocate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_deallocate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_deallocate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_send::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_send

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_receive::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_receive

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_find::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_find

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_enqueue::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_enqueue

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_dequeue::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_dequeue

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_push::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_push

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_extract::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_extract

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_enqueue_max::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_enqueue_max

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_set_event::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_set_event

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_clear_event::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_clear_event

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_isr_register::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_isr_register

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_int_enable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_int_enable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_int_disable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_int_disable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_init_system::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_init_system

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_start_system::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_start_system

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_buffer_uint32::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_buffer_uint32

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_buffer_uint24::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_buffer_uint24

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">_1`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">_2`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0">`:
   \   000000   3000         DB "0"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_5f5e100:
   \   000000   00E1F505     DD 100000000
   1101          /*********************************************************************
   1102          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     57   _ltoa
        0     55   -> _itoa
        0     55   -> strcat
        0     55   -> strcpy
        0     55   -> strlen
      1     20   osal_buffer_uint24
      1     20   osal_buffer_uint32
      2      0   osal_build_uint16
      0     16   osal_build_uint32
      0     21   osal_clear_event
      2      0   osal_init_system
        2      0   -> osalInitTasks
        2      0   -> osalTimerInit
        2      0   -> osal_mem_init
        2      0   -> osal_mem_kick
        2      0   -> osal_pwrmgr_init
      0      0   osal_int_disable
      0      0   osal_int_enable
      0      0   osal_isr_register
      0     21   osal_memcmp
      1     28   osal_memcpy
      0     19   osal_memdup
        0     16   -> osal_mem_alloc
        0     19   -> osal_memcpy
      0     12   osal_memset
        0     12   -> memset
      0     10   osal_msg_allocate
        0     10   -> osal_mem_alloc
      2      9   osal_msg_deallocate
        2      0   -> osal_mem_free
      0     10   osal_msg_dequeue
      0     18   osal_msg_enqueue
      0     10   osal_msg_enqueue_max
      0     26   osal_msg_extract
      2      0   osal_msg_find
      0      9   osal_msg_push
      0     14   osal_msg_receive
        0     12   -> osal_clear_event
        0     14   -> osal_msg_extract
        0     12   -> osal_set_event
      1      9   osal_msg_send
        0      9   -> osal_msg_deallocate
        0      9   -> osal_msg_enqueue
        0      9   -> osal_set_event
      2      0   osal_rand
        2      0   -> Onboard_rand
      1     12   osal_revmemcpy
      0     21   osal_set_event
      0     10   osal_start_system
        0     10   -> Hal_ProcessPoll
        0     10   -> osalTimeUpdate
      2      0   osal_strlen
        2      0   -> strlen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Constant "">
      10  ?<Constant "">_1
      10  ?<Constant "">_2
       2  ?<Constant "0">
       5  ??Subroutine28_0
       8  ??Subroutine29_0
       3  ??Subroutine30_0
       5  ??Subroutine31_0
       7  ?Subroutine0
       4  ?Subroutine1
       6  ?Subroutine10
       7  ?Subroutine11
       8  ?Subroutine12
      10  ?Subroutine13
      18  ?Subroutine14
      13  ?Subroutine15
       4  ?Subroutine16
       9  ?Subroutine17
      15  ?Subroutine18
      13  ?Subroutine19
       5  ?Subroutine2
       3  ?Subroutine20
      11  ?Subroutine21
      15  ?Subroutine22
      10  ?Subroutine23
      15  ?Subroutine24
      14  ?Subroutine25
       9  ?Subroutine26
       6  ?Subroutine27
       5  ?Subroutine3
       5  ?Subroutine4
       4  ?Subroutine5
      24  ?Subroutine6
       6  ?Subroutine7
       6  ?Subroutine8
       8  ?Subroutine9
       1  _A_IEN0
       4  __Constant_2710
       4  __Constant_5f5e100
     592  _ltoa
       6  _ltoa::?relay
      43  osal_buffer_uint24
       6  osal_buffer_uint24::?relay
      67  osal_buffer_uint32
       6  osal_buffer_uint32::?relay
      25  osal_build_uint16
       6  osal_build_uint16::?relay
     125  osal_build_uint32
       6  osal_build_uint32::?relay
      51  osal_clear_event
       6  osal_clear_event::?relay
      31  osal_init_system
       6  osal_init_system::?relay
      18  osal_int_disable
       6  osal_int_disable::?relay
      18  osal_int_enable
       6  osal_int_enable::?relay
       5  osal_isr_register
       6  osal_isr_register::?relay
     133  osal_memcmp
       6  osal_memcmp::?relay
      43  osal_memcpy
       6  osal_memcpy::?relay
      54  osal_memdup
       6  osal_memdup::?relay
      29  osal_memset
       6  osal_memset::?relay
      71  osal_msg_allocate
       6  osal_msg_allocate::?relay
      34  osal_msg_deallocate
       6  osal_msg_deallocate::?relay
      85  osal_msg_dequeue
       6  osal_msg_dequeue::?relay
      75  osal_msg_enqueue
       6  osal_msg_enqueue::?relay
      76  osal_msg_enqueue_max
       6  osal_msg_enqueue_max::?relay
     105  osal_msg_extract
       6  osal_msg_extract::?relay
      54  osal_msg_find
       6  osal_msg_find::?relay
      41  osal_msg_push
       6  osal_msg_push::?relay
     131  osal_msg_receive
       6  osal_msg_receive::?relay
      75  osal_msg_send
       6  osal_msg_send::?relay
       2  osal_qHead
       9  osal_rand
       6  osal_rand::?relay
      58  osal_revmemcpy
       6  osal_revmemcpy::?relay
      59  osal_set_event
       6  osal_set_event::?relay
     142  osal_start_system
       6  osal_start_system::?relay
      10  osal_strlen
       6  osal_strlen::?relay

 
 2 540 bytes in segment BANKED_CODE
   174 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
    40 bytes in segment XDATA_ROM_C
     2 bytes in segment XDATA_Z
 
   174 bytes of CODE     memory
    32 bytes of CONST    memory (+ 8 bytes shared)
     0 bytes of DATA     memory (+ 1 byte  shared)
 2 540 bytes of HUGECODE memory
     2 bytes of XDATA    memory

Errors: none
Warnings: none
